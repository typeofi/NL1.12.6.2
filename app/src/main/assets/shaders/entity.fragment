#version 100
uniform sampler2D TEXTURE_0;
uniform sampler2D TEXTURE_1;

varying vec4 light;
varying vec4 fogColor;

#ifndef COLOR_BASED
	varying vec2 uv;
#endif
#ifdef USE_OVERLAY
	varying vec4 overlayColor;
#endif

#if defined(USE_COLOR_MASK) || defined(ITEM_IN_HAND)
	varying vec4 changeColor;
#endif

#ifdef GLINT
	varying vec2 layer1UV;
	varying vec2 layer2UV;
	varying vec4 tileLightColor;
	varying vec4 glintColor;
#endif

vec4 glintBlend(vec4 dest, vec4 source) {
	// glBlendFuncSeparate(GL_SRC_COLOR, GL_ONE, GL_ONE, GL_ZERO)
	return vec4(source.rgb * source.rgb, source.a) + vec4(dest.rgb, 0.0);
}

#ifdef USE_EMISSIVE
#define NEEDS_DISCARD(C)	(C.a + C.r + C.g + C.b == 0.0)
#else
#ifndef USE_COLOR_MASK
#define NEEDS_DISCARD(C)	(C.a < 0.5)
#else
#define NEEDS_DISCARD(C)	(C.a <= 0.0)
#endif
#endif

void main()
{
	vec4 color = vec4(1.0);

#ifndef COLOR_BASED
	color = texture2D( TEXTURE_0, uv );

	#ifdef ALPHA_TEST
		if(NEEDS_DISCARD(color))
			discard;
	#endif
#endif

#ifdef USE_COLOR_MASK
	color.rgb = mix(color.rgb, color.rgb*changeColor.rgb, color.a);
	color.a = 1.0;
#endif

#ifdef ITEM_IN_HAND
	color.rgb = mix(color.rgb, color.rgb*changeColor.rgb, light.a);
#endif

#ifdef USE_OVERLAY
	//use either the diffuse or the OVERLAY_COLOR
	color.rgb = mix(color, overlayColor, overlayColor.a).rgb;
#endif

#ifdef USE_EMISSIVE
	//make glowy stuff
	color *= mix(vec4(1.0), light, color.a );
#else
	color *= light;
#endif

	//apply fog
	color.rgb = mix( color.rgb, fogColor.rgb, fogColor.a );

#ifdef GLINT
	// Applies color mask to glint texture instead and blends with original color
	vec4 layer1 = texture2D(TEXTURE_1, fract(layer1UV)).rgbr * glintColor;
	vec4 layer2 = texture2D(TEXTURE_1, fract(layer2UV)).rgbr * glintColor;
	vec4 glint = (layer1 + layer2) * tileLightColor;

	color = glintBlend(color, glint);
#endif

	//WARNING do not refactor this 
	gl_FragColor = color;
}
