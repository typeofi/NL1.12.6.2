var LocalisationData;
var isWirelessMode = false;
var showEnergyConnections = false;
var langLocalisationID = 0;
var SavesVersion = 2;
var TexturePackBuild = "5.2 beta";

function ValidateIDData(_0x81e9x7) {
	var _0x81e9x8 = {};
	for (var _0x81e9x9 in _0x81e9x7) {
		_0x81e9x8[eval(_0x81e9x9)] = _0x81e9x7[_0x81e9x9]
	};
	return _0x81e9x8
}
var FactorizationLoadingComplete = false;
var LoadingThreadTaskStack = [];

function ExecuteInLoadingThread(_0x81e9xd) {
	LoadingThreadTaskStack.push(_0x81e9xd)
}
var UnlimitedAPI = {
	SpecifiedBlockData: [],
	PostedDefine: [],
	SetDefaultData: function(_0x81e9xf) {
		_0x81e9xf.base = 20;
		_0x81e9xf.opaque = false;
		_0x81e9xf.rendertype = 0;
		_0x81e9xf.renderlayer = 4;
		_0x81e9xf.destroytime = 1;
		_0x81e9xf.redstoneconsumer = true;
		_0x81e9xf.lightopacity = 1;
		_0x81e9xf.lightlevel = 0;
		_0x81e9xf.explosionres = 2
	},
	GetBlockSpecial: function(_0x81e9x10) {
		if (!this.SpecifiedBlockData[_0x81e9x10]) {
			this.SpecifiedBlockData[_0x81e9x10] = {};
			this.SetDefaultData(this.SpecifiedBlockData[_0x81e9x10])
		};
		return this.SpecifiedBlockData[_0x81e9x10]
	},
	SpecialBlockOffset: 255,
	GenerateSpecialBlock: function(_0x81e9x11) {
		while (Item.isValidItem(this.SpecialBlockOffset)) {
			this.SpecialBlockOffset--
		};
		var _0x81e9x12 = this.GetBlockSpecial(this.SpecialBlockOffset);
		for (var _0x81e9x9 in _0x81e9x11) {
			_0x81e9x12[_0x81e9x9] = _0x81e9x11[_0x81e9x9]
		};
		return this.SpecialBlockOffset--
	},
	GenerateSpecialType: function(_0x81e9x11, _0x81e9x13) {
		if (!_0x81e9x13 || _0x81e9x13 < 1) {
			_0x81e9x13 = 1
		};
		var _0x81e9x14 = 255;
		for (var i = 0; i < _0x81e9x13; i++) {
			var _0x81e9x14 = Math.min(_0x81e9x14, this.GenerateSpecialBlock(_0x81e9x11))
		};
		return _0x81e9x14
	},
	PostDefine: function(_0x81e9x10, _0x81e9x16, _0x81e9x17, _0x81e9x18) {
		this.GetBlockSpecial(_0x81e9x10);
		if (!this.PostedDefine[_0x81e9x10]) {
			this.PostedDefine[_0x81e9x10] = []
		};
		this.PostedDefine[_0x81e9x10][_0x81e9x16] = {
			name: _0x81e9x17,
			texture: _0x81e9x18
		}
	},
	DeleteDefine: function(_0x81e9x10, _0x81e9x16) {
		if (this.PostedDefine[_0x81e9x10] && this.PostedDefine[_0x81e9x10][_0x81e9x16]) {
			delete this.PostedDefine[_0x81e9x10][_0x81e9x16]
		};
		this.NextFreeID = Math.min(parseInt(_0x81e9x10), this.NextFreeID)
	},
	ExecuteAllDefines: function() {
		for (var _0x81e9x10 in this.PostedDefine) {
			var _0x81e9x17 = [];
			var _0x81e9x18 = [];
			var _0x81e9x12 = this.GetBlockSpecial(_0x81e9x10);
			for (var i = 0; i < 16; i++) {
				_0x81e9x17[i] = "<not defined>";
				for (var _0x81e9x19 = 0; _0x81e9x19 < 6; _0x81e9x19++) {
					_0x81e9x18[i * 6 + _0x81e9x19] = ["missing_block", 0]
				}
			};
			for (var _0x81e9x1a in this.PostedDefine[_0x81e9x10]) {
				var _0x81e9x1b = this.PostedDefine[_0x81e9x10][_0x81e9x1a];
				_0x81e9x17[_0x81e9x1a] = _0x81e9x1b.name;
				for (var _0x81e9x19 in _0x81e9x1b.texture) {
					_0x81e9x18[parseInt(_0x81e9x1a) * 6 + parseInt(_0x81e9x19)] = _0x81e9x1b.texture[_0x81e9x19]
				}
			};
			var _0x81e9x1c = "@" + _0x81e9x17.join("|");
			Block.defineBlock(_0x81e9x10, _0x81e9x1c, _0x81e9x18, _0x81e9x12.base, _0x81e9x12.opaque, _0x81e9x12.rendertype);
			Block.setRenderLayer(_0x81e9x10, _0x81e9x12.renderlayer);
			Block.setLightOpacity(_0x81e9x10, _0x81e9x12.lightopacity);
			Block.setDestroyTime(_0x81e9x10, _0x81e9x12.destroytime);
			Block.setLightLevel(_0x81e9x10, _0x81e9x12.lightlevel);
			Block.setExplosionResistance(_0x81e9x10, _0x81e9x12.explosionres);
			Block.setRedstoneConsumer(_0x81e9x10, true);
			for (var _0x81e9x1a = 0; _0x81e9x1a < 16; _0x81e9x1a++) {
				var _0x81e9x1b = this.PostedDefine[_0x81e9x10][_0x81e9x1a];
				if (_0x81e9x1b && _0x81e9x1b.shape) {
					Block.setShape_origin(_0x81e9x10, _0x81e9x1b.shape[0], _0x81e9x1b.shape[1], _0x81e9x1b.shape[2], _0x81e9x1b.shape[3], _0x81e9x1b.shape[4], _0x81e9x1b.shape[5], _0x81e9x1a)
				} else {
					Block.setShape_origin(_0x81e9x10, 0, 0, 0, 1, 1, 1, _0x81e9x1a)
				}
			}
		}
	},
	NextFreeID: 25,
	isNativeBlock: function(_0x81e9x10) {
		if (!Item.isValidItem(_0x81e9x10, 0)) {
			return false
		};
		var _0x81e9x17 = Item.getName(_0x81e9x10, 0, true);
		if (_0x81e9x17 && _0x81e9x17[0] == "@") {
			return false
		};
		return true
	},
	FindFreePlaceForBlock: function() {
		var _0x81e9x10 = this.NextFreeID;
		var _0x81e9x1d = 0;
		while (_0x81e9x10 < 256) {
			if (this.isNativeBlock(_0x81e9x10)) {
				_0x81e9x10++;
				continue
			};
			if (this.PostedDefine[_0x81e9x10]) {
				_0x81e9x1d = -1;
				for (var _0x81e9x16 = 0; _0x81e9x16 < 16; _0x81e9x16++) {
					if (!this.PostedDefine[_0x81e9x10][_0x81e9x16]) {
						_0x81e9x1d = _0x81e9x16;
						break
					}
				};
				if (_0x81e9x1d > -1) {
					break
				};
				_0x81e9x1d = 0
			} else {
				_0x81e9x1d = 0;
				break
			};
			_0x81e9x10++
		};
		if (_0x81e9x10 >= 256) {
			print("<UnlimitedAPI> Block id limit extended!")
		};
		this.NextFreeID = _0x81e9x10;
		return {
			id: _0x81e9x10,
			data: _0x81e9x1d
		}
	},
	BlockGroups: [],
	UIDbyReal: [],
	RealByUID: [],
	NextUniqueID: 8192,
	PointerByName: {},
	NameByPointer: {},
	SetPair: function(_0x81e9x17, _0x81e9x1e) {
		this.PointerByName[_0x81e9x17] = _0x81e9x1e;
		this.NameByPointer[_0x81e9x1e] = _0x81e9x17
	},
	GetUniqueUID: function(_0x81e9x17) {
		if (this.PointerByName[_0x81e9x17]) {
			return this.PointerByName[_0x81e9x17]
		};
		var _0x81e9x1e = this.NextUniqueID++;
		this.SetPair(_0x81e9x17, _0x81e9x1e);
		return _0x81e9x1e
	},
	ClearBlockGroup: function(_0x81e9x1f) {
		var _0x81e9x20 = this.BlockGroups[_0x81e9x1f];
		for (var i in _0x81e9x20) {
			var _0x81e9x21 = _0x81e9x20[i];
			if (_0x81e9x21) {
				this.DeleteDefine(_0x81e9x21.id, _0x81e9x21.data);
				delete this.UIDbyReal[_0x81e9x21.id + ":" + _0x81e9x21.data];
				delete this.RealByUID[_0x81e9x1f + ":" + i]
			}
		};
		delete this.BlockGroups[_0x81e9x1f]
	},
	RegisterBlockGroup: function(_0x81e9x1f, blocks) {
		this.NextUniqueID = Math.max(_0x81e9x1f + 1, this.NextUniqueID);
		if (this.BlockGroups[_0x81e9x1f]) {
			this.ClearBlockGroup(_0x81e9x1f)
		};
		var _0x81e9x20 = [];
		for (var i in blocks) {
			var _0x81e9x23 = this.FindFreePlaceForBlock();
			this.PostDefine(_0x81e9x23.id, _0x81e9x23.data, blocks[i].name, blocks[i].texture);
			_0x81e9x20.push(_0x81e9x23);
			this.UIDbyReal[_0x81e9x23.id + ":" + _0x81e9x23.data] = {
				id: _0x81e9x1f,
				data: i
			};
			this.RealByUID[_0x81e9x1f + ":" + i] = _0x81e9x23
		};
		this.BlockGroups[_0x81e9x1f] = _0x81e9x20
	},
	SetShape: function(_0x81e9x10, _0x81e9x16, _0x81e9x24) {
		if (this.PostedDefine[_0x81e9x10] && this.PostedDefine[_0x81e9x10][_0x81e9x16]) {
			this.PostedDefine[_0x81e9x10][_0x81e9x16].shape = _0x81e9x24
		}
	},
	GetReal: function(_0x81e9x25, _0x81e9x16) {
		if (this.BlockGroups[_0x81e9x25]) {
			return this.BlockGroups[_0x81e9x25][Math.min(_0x81e9x16, this.BlockGroups[_0x81e9x25].length - 1)] || {
				id: _0x81e9x25,
				data: _0x81e9x16
			}
		};
		return {
			id: _0x81e9x25,
			data: _0x81e9x16
		}
	},
	GetUID: function(_0x81e9x10, _0x81e9x16) {
		return this.UIDbyReal[_0x81e9x10 + ":" + _0x81e9x16] || {
			id: _0x81e9x10,
			data: _0x81e9x16
		}
	},
	DefaultDropFunc: function(_0x81e9x26, _0x81e9x27, _0x81e9x28, _0x81e9x29, _0x81e9x1a) {
		if (isMachine(_0x81e9x29)) {
			return [
				[_0x81e9x29, 1, 0]
			]
		};
		return [
			[_0x81e9x29, 1, _0x81e9x1a]
		]
	},
	CustomDropFunctions: [],
	GetCustomDropFunc: function(_0x81e9x29) {
		if (!this.BlockGroups[_0x81e9x29]) {
			return null
		};
		var _0x81e9xd = this.CustomDropFunctions[_0x81e9x29];
		if (!_0x81e9xd) {
			return this.DefaultDropFunc
		};
		return _0x81e9xd
	},
	SetCustomDropFunc: function(_0x81e9x29, _0x81e9xd) {
		this.CustomDropFunctions[_0x81e9x29] = _0x81e9xd
	}
};
var UID_OFFSET_ORE = UnlimitedAPI.GenerateSpecialType({
	base: 1,
	opaque: true,
	destroytime: 2
});
var UID_OFFSET_LIGHT = UnlimitedAPI.GenerateSpecialType({
	lightlevel: 15
});
var UID_OFFSET_WOOD = UnlimitedAPI.GenerateSpecialType({
	base: 17,
	opaque: true,
	destroytime: 1.5
});
var UID_OFFSET_LEAVES = UnlimitedAPI.GenerateSpecialType({
	base: 18,
	opaque: false,
	destroytime: 0.4
});
var UID_OFFSET_WPD = UnlimitedAPI.GenerateSpecialType({
	base: 20,
	opaque: false,
	destroytime: 0.1,
	lightopacity: 0
}, 2);
var UID_OFFSET_SAPLING = UnlimitedAPI.GenerateSpecialType({
	rendertype: Block.getRenderType(105, 0),
	opaque: false,
	destroytime: 0.1
});
var UID_OFFSET_HARDENED = UnlimitedAPI.GenerateSpecialType({
	base: 1,
	opaque: true,
	destroytime: 2,
	eplosionres: 99999,
	lightopacity: 0
});
var UID_OFFSET_LIQUID_ENGINE = UnlimitedAPI.GenerateSpecialType({
	rendertype: 203
});

function getTileUID(_0x81e9x26, _0x81e9x27, _0x81e9x28) {
	return UnlimitedAPI.GetUID(getTile_origin(_0x81e9x26, _0x81e9x27, _0x81e9x28), Level.getData_origin(_0x81e9x26, _0x81e9x27, _0x81e9x28))
}

function setTileUID(_0x81e9x26, _0x81e9x27, _0x81e9x28, _0x81e9x10, _0x81e9x16) {
	var _0x81e9x21 = UnlimitedAPI.GetReal(_0x81e9x10 || 0, _0x81e9x16 || 0);
	setTile_origin(_0x81e9x26, _0x81e9x27, _0x81e9x28, _0x81e9x21.id, _0x81e9x21.data)
}

function getCarriedUID() {
	var _0x81e9x35 = getCarriedItem_origin();
	var _0x81e9x36 = Player.getCarriedItemData_origin();
	var _0x81e9x25 = UnlimitedAPI.GetUID(_0x81e9x35, _0x81e9x36);
	_0x81e9x25.count = Player.getCarriedItemCount();
	return _0x81e9x25
}

function setCarriedItemUID(_0x81e9x38, _0x81e9x10, _0x81e9x13, _0x81e9x16) {
	if (!_0x81e9x10) {
		_0x81e9x10 = 0
	};
	if (!_0x81e9x16) {
		_0x81e9x16 = 0
	};
	if (!_0x81e9x13 || _0x81e9x13 < 1) {
		_0x81e9x10 = _0x81e9x16 = _0x81e9x13 = 0
	};
	var _0x81e9x21 = UnlimitedAPI.GetReal(_0x81e9x10, _0x81e9x16);
	Entity.setCarriedItem_origin(_0x81e9x38, _0x81e9x21.id, _0x81e9x13, _0x81e9x21.data)
}

function setPlayerItemUID(_0x81e9x10, _0x81e9x13, _0x81e9x16) {
	setCarriedItemUID(getPlayerEnt(), _0x81e9x10, _0x81e9x13, _0x81e9x16)
}

function DefineUIDBlock(_0x81e9x29, blocks, _0x81e9x3b) {
	var _0x81e9x3c = UnlimitedAPI.NextFreeID;
	if (_0x81e9x3b > 0) {
		UnlimitedAPI.NextFreeID = _0x81e9x3b
	};
	UnlimitedAPI.RegisterBlockGroup(_0x81e9x29, blocks);
	UnlimitedAPI.NextFreeID = _0x81e9x3c
}

function DefineUIDMachine(_0x81e9x29, _0x81e9x17, _0x81e9x3e, _0x81e9x14) {
	var _0x81e9x3f = _0x81e9x3e;
	var _0x81e9x40 = [
		[_0x81e9x3f[0], _0x81e9x3f[1], _0x81e9x3f[2], _0x81e9x3f[3], _0x81e9x3f[4], _0x81e9x3f[5]],
		[_0x81e9x3f[0], _0x81e9x3f[1], _0x81e9x3f[3], _0x81e9x3f[2], _0x81e9x3f[5], _0x81e9x3f[4]],
		[_0x81e9x3f[0], _0x81e9x3f[1], _0x81e9x3f[5], _0x81e9x3f[4], _0x81e9x3f[2], _0x81e9x3f[3]],
		[_0x81e9x3f[0], _0x81e9x3f[1], _0x81e9x3f[4], _0x81e9x3f[5], _0x81e9x3f[3], _0x81e9x3f[2]]
	];
	var _0x81e9x20 = [];
	for (var i in _0x81e9x40) {
		_0x81e9x20.push({
			name: _0x81e9x17,
			texture: _0x81e9x40[i]
		})
	};
	DefineUIDBlock(_0x81e9x29, _0x81e9x20, _0x81e9x14)
}

function DefineUIDMachine_Type1(_0x81e9x29, _0x81e9x17, _0x81e9x42, _0x81e9x43, _0x81e9x14) {
	DefineUIDMachine(_0x81e9x29, _0x81e9x17, [_0x81e9x42, _0x81e9x42, _0x81e9x42, _0x81e9x43, _0x81e9x42, _0x81e9x42], _0x81e9x14)
}

function DefineUIDMachine_Type2(_0x81e9x29, _0x81e9x17, _0x81e9x42, _0x81e9x43, _0x81e9x14) {
	DefineUIDBlock(_0x81e9x29, [{
		name: _0x81e9x17,
		texture: [_0x81e9x42, _0x81e9x43, _0x81e9x42, _0x81e9x42, _0x81e9x42, _0x81e9x42]
	}], _0x81e9x14)
}

function DefineUIDMachine_Type3(_0x81e9x29, _0x81e9x17, _0x81e9x42, _0x81e9x43, _0x81e9x14) {
	DefineUIDBlock(_0x81e9x29, [{
		name: _0x81e9x17,
		texture: [_0x81e9x43, _0x81e9x43, _0x81e9x42, _0x81e9x42, _0x81e9x42, _0x81e9x42]
	}], _0x81e9x14)
}

function DefineUIDMachine_Type4(_0x81e9x29, _0x81e9x17, _0x81e9x42, _0x81e9x43, _0x81e9x47, _0x81e9x14) {
	DefineUIDMachine(_0x81e9x29, _0x81e9x17, [_0x81e9x43, _0x81e9x43, _0x81e9x42, _0x81e9x47, _0x81e9x42, _0x81e9x42], _0x81e9x14)
}

function DefineUIDMachine_Type5(_0x81e9x29, _0x81e9x17, _0x81e9x42, _0x81e9x43, _0x81e9x14) {
	block6SideMachine[_0x81e9x29] = true;
	var _0x81e9x20 = [];
	for (var i = 0; i < 6; i++) {
		_0x81e9x20[i] = {
			name: _0x81e9x17,
			texture: []
		};
		for (var _0x81e9x19 = 0; _0x81e9x19 < 6; _0x81e9x19++) {
			_0x81e9x20[i].texture[_0x81e9x19] = (_0x81e9x19 == i ? _0x81e9x43 : _0x81e9x42)
		}
	};
	DefineUIDBlock(_0x81e9x29, _0x81e9x20, _0x81e9x14)
}

function AddCreativeItemUID(_0x81e9x29, _0x81e9x16) {
	var _0x81e9x21 = UnlimitedAPI.GetReal(_0x81e9x29 || 0, _0x81e9x16 || 0);
	if (!Item.isValidItem(_0x81e9x21.id, _0x81e9x21.data)) {
		print("invalid item in creative, real = " + [_0x81e9x21.id, _0x81e9x21.data] + "uid = " + [_0x81e9x29, _0x81e9x16] + " possible name = " + UnlimitedAPI.NameByPointer[_0x81e9x29])
	};
	Player.addItemCreative_origin(_0x81e9x21.id, 64, _0x81e9x21.data)
}

function AddUIDListToCreative(_0x81e9x4b) {
	for (var i in _0x81e9x4b) {
		AddCreativeItemUID(_0x81e9x4b[i], 0)
	}
}
var MODPE_ORIGINS = {
	Item: Item,
	Entity: Entity,
	Level: Level,
	ModPE: ModPE,
	Player: Player
};
var setTile_origin = setTile;
setTile = function(_0x81e9x26, _0x81e9x27, _0x81e9x28, _0x81e9x10, _0x81e9x16) {
	setTileUID(_0x81e9x26, _0x81e9x27, _0x81e9x28, _0x81e9x10, _0x81e9x16)
};
Level.setTile = setTile;
var getTile_origin = getTile;
getTile = function(_0x81e9x26, _0x81e9x27, _0x81e9x28) {
	return parseInt(getTileUID(_0x81e9x26, _0x81e9x27, _0x81e9x28).id)
};
Level.getTile = getTile;
Level.getData_origin = Level.getData;
Level.getData = function(_0x81e9x26, _0x81e9x27, _0x81e9x28) {
	return parseInt(getTileUID(_0x81e9x26, _0x81e9x27, _0x81e9x28).data)
};
var getCarriedItem_origin = getCarriedItem;
getCarriedItem = function() {
	return getCarriedUID().id
};
Player.getCarriedItem = getCarriedItem;
Player.getCarriedItemData_origin = Player.getCarriedItemData;
Player.getCarriedItemData = function() {
	return getCarriedUID().data
};
Entity.setCarriedItem_origin = Entity.setCarriedItem;
Entity.setCarriedItem = function(_0x81e9x38, _0x81e9x10, _0x81e9x13, _0x81e9x16) {
	setCarriedItemUID(_0x81e9x38, _0x81e9x10, _0x81e9x13, _0x81e9x16)
};
var addItemInv_origin = addItemInventory;
addItemInventory = function(_0x81e9x10, _0x81e9x13, _0x81e9x16) {
	var _0x81e9x21 = UnlimitedAPI.GetReal(_0x81e9x10, _0x81e9x16 || 0);
	addItemInv_origin(_0x81e9x21.id, _0x81e9x13, _0x81e9x21.data)
};
Player.addItemInventory = addItemInventory;
Player.addItemCreative_origin = Player.addItemCreativeInv;
Player.addItemCreativeInv = function(_0x81e9x10, _0x81e9x13, _0x81e9x16) {
	AddCreativeItemUID(_0x81e9x10, _0x81e9x16)
};
Item.addShapedRecipe_origin = Item.addShapedRecipe;
Item.addShapedRecipe = function(_0x81e9x10, _0x81e9x13, _0x81e9x16, _0x81e9x24, _0x81e9x51) {
	try {
		for (var i in _0x81e9x51) {
			i = parseInt(i);
			if (i % 3 != 0) {
				continue
			};
			var _0x81e9x21 = UnlimitedAPI.GetReal(_0x81e9x51[i + 1], _0x81e9x51[i + 2]);
			_0x81e9x51[i + 1] = _0x81e9x21.id;
			_0x81e9x51[i + 2] = _0x81e9x21.data
		};
		var _0x81e9x52 = UnlimitedAPI.GetReal(_0x81e9x10, _0x81e9x16);
		Item.addShapedRecipe_origin(_0x81e9x52.id, _0x81e9x13, _0x81e9x52.data, _0x81e9x24, _0x81e9x51)
	} catch (e) {
		print("failed to add recipe for " + [_0x81e9x52.id, _0x81e9x52.data] + " UID is " + [_0x81e9x10, _0x81e9x16])
	}
};
Block.setShape_origin = Block.setShape;
Block.setShape = function(_0x81e9x29, _0x81e9x53, _0x81e9x54, _0x81e9x55, _0x81e9x56, _0x81e9x57, _0x81e9x58, _0x81e9x16) {
	if (typeof(_0x81e9x16) == "undefined") {
		var _0x81e9x20 = UnlimitedAPI.BlockGroups[_0x81e9x29];
		for (var i in _0x81e9x20) {
			var _0x81e9x59 = i;
			var _0x81e9x21 = UnlimitedAPI.GetReal(_0x81e9x29, _0x81e9x59);
			UnlimitedAPI.SetShape(_0x81e9x21.id, _0x81e9x21.data, [_0x81e9x53, _0x81e9x54, _0x81e9x55, _0x81e9x56, _0x81e9x57, _0x81e9x58])
		}
	} else {
		var _0x81e9x21 = UnlimitedAPI.GetReal(_0x81e9x29, _0x81e9x16);
		UnlimitedAPI.SetShape(_0x81e9x21.id, _0x81e9x21.data, [_0x81e9x53, _0x81e9x54, _0x81e9x55, _0x81e9x56, _0x81e9x57, _0x81e9x58])
	}
};
Level.dropItem_origin = Level.dropItem;
Level.dropItem = function(_0x81e9x26, _0x81e9x27, _0x81e9x28, _0x81e9x5a, _0x81e9x10, _0x81e9x13, _0x81e9x16) {
	var _0x81e9x21 = UnlimitedAPI.GetReal(_0x81e9x10, _0x81e9x16);
	return Level.dropItem_origin(_0x81e9x26, _0x81e9x27, _0x81e9x28, 0, _0x81e9x21.id, _0x81e9x13, _0x81e9x21.data)
};
Player.getInventorySlot_origin = Player.getInventorySlot;
Player.getInventorySlot = function(_0x81e9x5b) {
	var _0x81e9x21 = UnlimitedAPI.GetUID(Player.getInventorySlot_origin(_0x81e9x5b), Player.getInventorySlotData_origin(_0x81e9x5b));
	return _0x81e9x21.id
};
Player.getInventorySlotData_origin = Player.getInventorySlotData;
Player.getInventorySlotData = function(_0x81e9x5b) {
	var _0x81e9x21 = UnlimitedAPI.GetUID(Player.getInventorySlot_origin(_0x81e9x5b), Player.getInventorySlotData_origin(_0x81e9x5b));
	return _0x81e9x21.data
};
Player.setInventorySlot_origin = Player.setInventorySlot;
Player.setInventorySlot = function(_0x81e9x5b, _0x81e9x10, _0x81e9x13, _0x81e9x16) {
	var _0x81e9x21 = UnlimitedAPI.GetReal(_0x81e9x10, _0x81e9x16);
	Player.setInventorySlot_origin(_0x81e9x5b, _0x81e9x21.id, _0x81e9x13, _0x81e9x21.data)
};
Entity.getItemEntityId_origin = Entity.getItemEntityId;
Entity.getItemEntityId = function(_0x81e9x38) {
	var _0x81e9x21 = UnlimitedAPI.GetUID(Entity.getItemEntityId_origin(_0x81e9x38), Entity.getItemEntityData_origin(_0x81e9x38));
	return _0x81e9x21.id
};
Entity.getItemEntityData_origin = Entity.getItemEntityData;
Entity.getItemEntityData = function(_0x81e9x38) {
	var _0x81e9x21 = UnlimitedAPI.GetUID(Entity.getItemEntityId_origin(_0x81e9x38), Entity.getItemEntityData_origin(_0x81e9x38));
	return _0x81e9x21.data
};
Level.getChestSlot_origin = Level.getChestSlot;
Level.getChestSlot = function(_0x81e9x26, _0x81e9x27, _0x81e9x28, _0x81e9x5b) {
	var _0x81e9x21 = UnlimitedAPI.GetUID(Level.getChestSlot_origin(_0x81e9x26, _0x81e9x27, _0x81e9x28, _0x81e9x5b), Level.getChestSlotData_origin(_0x81e9x26, _0x81e9x27, _0x81e9x28, _0x81e9x5b));
	return _0x81e9x21.id
};
Level.getChestSlotData_origin = Level.getChestSlotData;
Level.getChestSlotData = function(_0x81e9x26, _0x81e9x27, _0x81e9x28, _0x81e9x5b) {
	var _0x81e9x21 = UnlimitedAPI.GetUID(Level.getChestSlot_origin(_0x81e9x26, _0x81e9x27, _0x81e9x28, _0x81e9x5b), Level.getChestSlotData_origin(_0x81e9x26, _0x81e9x27, _0x81e9x28, _0x81e9x5b));
	return _0x81e9x21.data
};
Level.setChestSlot_origin = Level.setChestSlot;
Level.setChestSlot = function(_0x81e9x26, _0x81e9x27, _0x81e9x28, _0x81e9x5b, _0x81e9x10, _0x81e9x16, _0x81e9x13) {
	var _0x81e9x21 = UnlimitedAPI.GetReal(_0x81e9x10, _0x81e9x16);
	Level.setChestSlot_origin(_0x81e9x26, _0x81e9x27, _0x81e9x28, _0x81e9x5b, _0x81e9x21.id, _0x81e9x21.data, _0x81e9x13)
};
Level.getFurnaceSlot_origin = Level.getFurnaceSlot;
Level.getFurnaceSlot = function(_0x81e9x26, _0x81e9x27, _0x81e9x28, _0x81e9x5b) {
	var _0x81e9x21 = UnlimitedAPI.GetUID(Level.getFurnaceSlot_origin(_0x81e9x26, _0x81e9x27, _0x81e9x28, _0x81e9x5b), Level.getFurnaceSlotData_origin(_0x81e9x26, _0x81e9x27, _0x81e9x28, _0x81e9x5b));
	return _0x81e9x21.id
};
Level.getFurnaceSlotData_origin = Level.getFurnaceSlotData;
Level.getFurnaceSlotData = function(_0x81e9x26, _0x81e9x27, _0x81e9x28, _0x81e9x5b) {
	var _0x81e9x21 = UnlimitedAPI.GetUID(Level.getFurnaceSlot_origin(_0x81e9x26, _0x81e9x27, _0x81e9x28, _0x81e9x5b), Level.getFurnaceSlotData_origin(_0x81e9x26, _0x81e9x27, _0x81e9x28, _0x81e9x5b));
	return _0x81e9x21.data
};
Level.setFurnaceSlot_origin = Level.setFurnaceSlot;
Level.setFurnaceSlot = function(_0x81e9x26, _0x81e9x27, _0x81e9x28, _0x81e9x5b, _0x81e9x10, _0x81e9x16, _0x81e9x13) {
	var _0x81e9x21 = UnlimitedAPI.GetReal(_0x81e9x10, _0x81e9x16);
	Level.setFurnaceSlot_origin(_0x81e9x26, _0x81e9x27, _0x81e9x28, _0x81e9x5b, _0x81e9x21.id, _0x81e9x21.data, _0x81e9x13)
};
Player.getPointedBlockId_origin = Player.getPointedBlockId;
Player.getPointedBlockId = function() {
	var _0x81e9x29 = UnlimitedAPI.GetUID(Player.getPointedBlockId_origin(), Player.getPointedBlockData_origin());
	return _0x81e9x29.id
};
Player.getPointedBlockData_origin = Player.getPointedBlockData;
Player.getPointedBlockData = function() {
	var _0x81e9x29 = UnlimitedAPI.GetUID(Player.getPointedBlockId_origin(), Player.getPointedBlockData_origin());
	return _0x81e9x29.data
};
var item_advanced_machine_module = 507;
var item_coal_ball_compressed = 442;
var item_usual_queen = 471;
var item_rubber_tree_sapling = 486;
var item_mead_bottle = 473;
var item_super_conductor = 434;
var item_iridium = 496;
var item_crystal_wire = 436;
var item_dust_iron = 501;
var item_constone_spray = 100000;
var item_overclocker_upgrade = 506;
var item_coal_dust = 447;
var item_uranium = 495;
var item_dust_tin = 483;
var item_oil_bucket = 464;
var item_dust_copper = 482;
var item_circuit = 469;
var item_latex = 485;
var item_mining_laser = 444;
var item_usual_drone = 470;
var item_rubber = 488;
var item_cell_oil = 516;
var item_energy_crystal = 445;
var item_coal_chunk = 441;
var item_wrench = 500;
var item_copper_wire = 489;
var item_iridium_composite = 477;
var item_scrab_box = 479;
var item_advanced_circuit = 476;
var item_steel_ingot = 484;
var item_cell_lava = 521;
var item_compressed_constone = 446;
var item_leash = 498;
var item_iridium_chunk = 493;
var item_cell_biomass = 518;
var item_treetap = 487;
var item_teleport_accesser = 497;
var item_scrab = 443;
var item_cell_water = 520;
var item_copper_ingot = 480;
var item_liquid_matter_bucket = 465;
var item_coal_ball = 440;
var item_steel_wire = 433;
var item_composite_plate = 451;
var item_ec_meter = 437;
var item_reactor_vent = 534;
var item_raw_carbon = 448;
var item_honey_bottle = 474;
var item_cell_mead = 515;
var item_empty_frame = 468;
var item_cell_fuel = 517;
var item_tin_ingot = 481;
var item_honey_frame = 472;
var item_golden_wire = 432;
var item_biomass_bucket = 478;
var item_cell_honey = 514;
var item_uu_matter = 508;
var item_cell_milk = 513;
var item_composite_ingot = 449;
var item_cell_empty = 512;
var item_carbonium_plate = 450;
var item_fuel_bucket = 467;
var item_dust_gold = 502;
var item_battery = 494;
var item_cell_liquid_matter = 519;
var item_empty_bottle = 374;
var item_copper_ore = 1052;
var item_tin_ore = 1053;
var item_bee_spawn_egg = 1999;
var block_copper_ore = UnlimitedAPI.GetUniqueUID("fz_ore_copper");
var block_tin_ore = UnlimitedAPI.GetUniqueUID("fz_ore_tin");
var block_iridium_ore = UnlimitedAPI.GetUniqueUID("fz_ore_iridium");
var block_uranium_ore = UnlimitedAPI.GetUniqueUID("fz_ore_uranium");
var block_blended_dust_ore = UnlimitedAPI.GetUniqueUID("fz_ore_blended_dust");
var block_rubber_tree_leaves = UnlimitedAPI.GetUniqueUID("fz_rubber_tree_leaves");
var block_rubber_wood_with_latex = UnlimitedAPI.GetUniqueUID("fz_rubber_tree_wood_latex");
var block_hardened_block = UnlimitedAPI.GetUniqueUID("fz_hardened_block");
var block_wire = UnlimitedAPI.GetUniqueUID("fz_WIRE");
var block_marker_fence = UnlimitedAPI.GetUniqueUID("fz_marker_fence");
var block_light_tile_unused = UnlimitedAPI.GetUniqueUID("fz_light_tile");
var block_oil = 176;
var block_oil2 = 177;
var block_constone = UnlimitedAPI.GetUniqueUID("UNUSED_constone");
var block_hardened_glass = UnlimitedAPI.GetUniqueUID("UNUSED_hardened_glass");
var block_rubber_tree_wood_active_block = UnlimitedAPI.GetUniqueUID("UNUSED_rubber_tree_active");
var block_liquid_constone = UnlimitedAPI.GetUniqueUID("UNUSED_liquid_constone");
var block_transporting_pipe = UnlimitedAPI.GetUniqueUID("fz_transporting_pipe");
var block_golden_pipe = UnlimitedAPI.GetUniqueUID("fz_golden_pipe");
var block_valve_pipe_opaque = UnlimitedAPI.GetUniqueUID("fz_valve_pipe2");
var block_filter_pipe = UnlimitedAPI.GetUniqueUID("fz_filter_pipe");
var block_obsidian_pipe = UnlimitedAPI.GetUniqueUID("fz_obsidian_pipe");
var block_diamond_pipe = UnlimitedAPI.GetUniqueUID("fz_diamond_pipe");
var block_valve_pipe = UnlimitedAPI.GetUniqueUID("fz_valve_pipe");
var block_teleport_pipe = UnlimitedAPI.GetUniqueUID("fz_tesseract");
var block_teleport_pipe_anim = UnlimitedAPI.GetUniqueUID("fz_tesseract_animation");
var block_bioreactor = UnlimitedAPI.GetUniqueUID("fz_bioreactor");
var block_drill_station = UnlimitedAPI.GetUniqueUID("fz_drill_station");
var block_fuel_factory = UnlimitedAPI.GetUniqueUID("fz_fuel_factory");
var block_heater = UnlimitedAPI.GetUniqueUID("fz_heater_machine");
var block_teleporter = UnlimitedAPI.GetUniqueUID("fz_teleporter");
var block_bat_box = UnlimitedAPI.GetUniqueUID("fz_bat_box");
var block_exchange_buffer = UnlimitedAPI.GetUniqueUID("fz_exchange_buffer");
var block_auto_feeder = UnlimitedAPI.GetUniqueUID("fz_mob_feeder");
var block_terraformer = UnlimitedAPI.GetUniqueUID("fz_terraformer");
var block_pump = UnlimitedAPI.GetUniqueUID("fz_liquid_pump");
var block_assembler = UnlimitedAPI.GetUniqueUID("fz_auto_workbench");
var block_crop_harvester = UnlimitedAPI.GetUniqueUID("fz_crop_harvester");
var block_mass_fabricator = UnlimitedAPI.GetUniqueUID("fz_mass_fabricator");
var block_mob_slayer = UnlimitedAPI.GetUniqueUID("fz_mob_slayer");
var block_windmill = UnlimitedAPI.GetUniqueUID("fz_windmill");
var block_block_breaker = UnlimitedAPI.GetUniqueUID("fz_block_breaker");
var block_nuclear_reactor_turbine = UnlimitedAPI.GetUniqueUID("fz_reactor_turbine");
var block_wooden_pipe = UnlimitedAPI.GetUniqueUID("fz_wooden_pipe");
var block_transformator_MV = UnlimitedAPI.GetUniqueUID("fz_transformator_MV");
var block_wild_hive = UnlimitedAPI.GetUniqueUID("fz_wild_hive");
var block_macerator = UnlimitedAPI.GetUniqueUID("fz_macerator");
var block_bee_hive = UnlimitedAPI.GetUniqueUID("fz_bee_hive");
var block_MFE = UnlimitedAPI.GetUniqueUID("fz_mfe");
var block_growth_accelerator = UnlimitedAPI.GetUniqueUID("fz_growth_accelerator");
var block_fishing_net = UnlimitedAPI.GetUniqueUID("fz_fishing_net");
var block_liquid_fuel_engine = UnlimitedAPI.GetUniqueUID("fz_liquid_engine");
var block_MFSU = UnlimitedAPI.GetUniqueUID("fz_mfsu");
var block_compressor = UnlimitedAPI.GetUniqueUID("fz_compressor");
var block_watermill = UnlimitedAPI.GetUniqueUID("fz_watermill");
var block_transformator_HV = UnlimitedAPI.GetUniqueUID("fz_transformator_HV");
var block_fuel_generator = UnlimitedAPI.GetUniqueUID("fz_fuel_generator");
var block_extractor = UnlimitedAPI.GetUniqueUID("fz_extractor");
var block_bucket_filler = UnlimitedAPI.GetUniqueUID("fz_bucket_filler");
var block_centrefuge = UnlimitedAPI.GetUniqueUID("fz_centrifuge");
var block_nuclear_bomb = UnlimitedAPI.GetUniqueUID("fz_nuke");
var block_transformator_LV = UnlimitedAPI.GetUniqueUID("fz_transformator_LV");
var block_recycler = UnlimitedAPI.GetUniqueUID("fz_recycler");
var block_marker = UnlimitedAPI.GetUniqueUID("fz_marker_block");
var block_auto_milker = UnlimitedAPI.GetUniqueUID("fz_auto_milker");
var block_geotermal_generator = UnlimitedAPI.GetUniqueUID("fz_geotermal_generator");
var block_electric_furnace = UnlimitedAPI.GetUniqueUID("fz_electric_furnace");
var block_replicator = UnlimitedAPI.GetUniqueUID("fz_replicator");
var block_beacon = UnlimitedAPI.GetUniqueUID("fz_beacon");
var block_uranium_rod_controller = UnlimitedAPI.GetUniqueUID("fz_reactor_block");
var block_quarry = UnlimitedAPI.GetUniqueUID("fz_quarry");
var block_nuclear_reactor_controller = UnlimitedAPI.GetUniqueUID("fz_reactor_core");
var block_rubber_tree_sappling = UnlimitedAPI.GetUniqueUID("fz_rubber_sappling");
var block_defender = UnlimitedAPI.GetUniqueUID("fz_monster_defender");
var block_rubber_tree_wood = UnlimitedAPI.GetUniqueUID("fz_rubber_tree_wood");
var block_barrel = UnlimitedAPI.GetUniqueUID("fz_barrel");
var block_solar_pannel = UnlimitedAPI.GetUniqueUID("fz_solar_pannel");
var block_liquid_blender = UnlimitedAPI.GetUniqueUID("fz_liquid_blender_unused");
var item_nano_helmet = 1000;
var item_nano_helmet_uncharged = 1024;
var item_nano_suit = 1001;
var item_nano_suit_uncharged = 1025;
var item_nano_leggings = 1002;
var item_nano_leggings_uncharged = 1026;
var item_nano_boots = 1003;
var item_nano_boots_uncharged = 1027;
var item_quantum_helmet = 1004;
var item_quantum_helmet_uncharged = 1028;
var item_quantum_suit = 1005;
var item_quantum_suit_uncharged = 1029;
var item_quantum_leggings = 1006;
var item_quantum_leggings_uncharged = 1030;
var item_quantum_boots = 1007;
var item_quantum_boots_uncharged = 1031;
var item_batpack = 1008;
var item_jetpack = 1009;
var item_jetpack_flying = 1032;
var item_latpack = 1033;
var block_machine_block = 1040;
var block_advanced_machine_block = 1041;
var item_guide_book = 1499;
var item_bronze_ingot = 551;
var item_bronze_dust = 550;
var item_bronze_axe = 555;
var item_bronze_pickaxe = 554;
var item_bronze_shovel = 553;
var item_bronze_sword = 552;
var item_bronze_hoe = 556;
var item_bronze_axe_broken = 564;
var item_bronze_pickaxe_broken = 563;
var item_bronze_shovel_broken = 562;
var item_bronze_sword_broken = 561;
var item_bronze_hoe_broken = 565;
var item_bronze_boots = 560;
var item_bronze_leggings = 559;
var item_bronze_chestplate = 558;
var item_bronze_helmet = 557;
var item_nano_saber = 499;
var item_drill = 509;
var item_chainsaw = 510;
var item_drill_usual = 511;
var item_electric_hoe = 1050;
var item_electric_treetap = 1051;
var item_meadow_queen = 1500;
var item_meadow_drone = 1501;
var item_swamp_queen = 1502;
var item_swamp_drone = 1503;
var item_tropical_queen = 1504;
var item_tropical_drone = 1505;
var item_wise_queen = 1506;
var item_wise_drone = 1507;
var item_hell_queen = 1508;
var item_hell_drone = 1509;
var item_legendary_queen = 1510;
var item_legendary_drone = 1511;
var item_precious_queen = 1512;
var item_precious_drone = 1513;
var item_swamp_frame = 1600;
var item_cocoa_frame = 1601;
var item_hell_frame = 1602;
var item_precious_frame = 1603;
var item_nano_frame_empty = 1604;
var item_nano_frame_full = 1605;
var item_diamond_shard = 1606;
var item_matter_chunk = 1607;
var item_essense_bottle = 1608;
var item_honey_drop = 1609;
var item_honey_bread = 1610;
var item_bee_net = 1611;
var item_condition_controller = 1612;
var item_uranium_rod_singler = 525;
var item_uranium_rod_double = 526;
var item_uranium_rod_quad = 527;
var item_reactor_reflector = 528;
var item_advanced_reactor_reflector = 529;
var item_coolant_cell_singler = 530;
var item_coolant_cell_triple = 531;
var item_coolant_cell_six = 532;
var item_reactor_plating = 533;
var item_uranium_rod_singler_depleted = 566;
var item_uranium_rod_double_depleted = 567;
var item_uranium_rod_quad_depleted = 568;
var item_cooling_vent = 569;
var item_cooling_vent_redstone = 570;
var item_cooling_vent_lapis = 571;
var item_heating_circuit = 572;
var item_heating_circuit_redstone = 573;
var item_heating_circuit_golden = 574;
var item_coolant_circuit = 575;
var item_reactor_circuit_component = 576;
var guiItemDamageRaw = ["278:1500", "293:1500", "276:1500", "277:1500", "279:1500", "272:132", "273:132", "274:132", "275:132", "291:132", "268:53", "269:53", "270:53", "271:53", "290:53", "256:256", "257:256", "258:256", "267:256", "292:256", "item_quantum_helmet:3000", "item_quantum_suit:3000", "item_quantum_leggings:3000", "item_quantum_boots:3000", "item_drill:300", "item_chainsaw:300", "504:1024", "505:4096", "item_battery:1000", "item_nano_saber:2000", "item_usual_queen:1000", "item_jetpack:2000", "item_batpack:6000", "item_latpack:30000", "item_nano_boots:400", "item_nano_leggings:400", "item_nano_suit:400", "item_nano_helmet:400", "item_constone_spray:128", "item_mining_laser:1000", "item_energy_crystal:10000", "item_uranium_rod_singler:25000", "item_uranium_rod_double:25000", "item_uranium_rod_quad:25000", "item_coolant_cell_singler:5000", "item_coolant_cell_triple:15000", "item_coolant_cell_six:30000", "item_condition_controller:1000"];
var NamesToTranslate = {};
var IDConflictsList = {};
var ItemsToAddInCreative = {};

function setItemDamageToGui(_0x81e9x10, _0x81e9x150) {
	guiItemDamageRaw.push(_0x81e9x10 + ":" + _0x81e9x150)
}
ModPE.setItem_ = ModPE.setItem;
ModPE.setItem = function(_0x81e9x10, _0x81e9x18, _0x81e9x151, _0x81e9x17, _0x81e9x152) {
	if (_0x81e9x10 < 256) {
		print("<FactAPI> ITEM DEFINE FAILED, ID LESS THAN 256 -> " + _0x81e9x10);
		print("<FactAPI> item " + _0x81e9x17 + " has incorrect id " + _0x81e9x10);
		return
	};
	if (FactAPI) {
		FactAPI.InspectIdentifier(_0x81e9x10, _0x81e9x17)
	};
	var _0x81e9x153 = Item.getName(_0x81e9x10, 0, true);
	if (_0x81e9x153) {
		_0x81e9x153 = _0x81e9x153.split(".")[1]
	};
	if (_0x81e9x153 && _0x81e9x153 != _0x81e9x17) {
		IDConflictsList[_0x81e9x10] = "[ITEM] \"" + _0x81e9x153 + "\" to \"" + _0x81e9x17 + "\""
	};
	RegisterNativeTextureIcon(_0x81e9x10, _0x81e9x18, _0x81e9x151);
	NamesToTranslate[_0x81e9x10] = _0x81e9x17;
	if (!_0x81e9x152) {
		_0x81e9x152 = 64
	};
	try {
		ModPE.setItem_(_0x81e9x10, _0x81e9x18, _0x81e9x151, _0x81e9x17, _0x81e9x152);
		ItemsToAddInCreative[_0x81e9x10 + ":" + 64] = true
	} catch (e) {
		print("missing item id: " + _0x81e9x10 + ", icon: " + _0x81e9x18 + ":" + _0x81e9x151);
		ModPE.setItem(_0x81e9x10, "missing_item", 0, _0x81e9x17, _0x81e9x152);
		RegisterNativeTextureIcon(_0x81e9x10, "missing_item", 0)
	}
};
ModPE.setFoodItem_ = ModPE.setFoodItem;
ModPE.setFoodItem = function(_0x81e9x10, _0x81e9x18, _0x81e9x151, _0x81e9x154, _0x81e9x17, _0x81e9x152) {
	if (_0x81e9x10 < 256) {
		print("<FactAPI> ITEM DEFINE FAILED, ID LESS THAN 256 -> " + _0x81e9x10);
		print("<FactAPI> item " + _0x81e9x17 + " has incorrect id " + _0x81e9x10);
		return
	};
	var _0x81e9x153 = Item.getName(_0x81e9x10, 0, true);
	if (_0x81e9x153) {
		_0x81e9x153 = _0x81e9x153.split(".")[1]
	};
	if (_0x81e9x153 && _0x81e9x153 != _0x81e9x17) {
		IDConflictsList[_0x81e9x10] = "[ITEM] \"" + _0x81e9x153 + "\" to \"" + _0x81e9x17 + "\""
	};
	RegisterNativeTextureIcon(_0x81e9x10, _0x81e9x18, _0x81e9x151);
	NamesToTranslate[_0x81e9x10] = _0x81e9x17;
	if (!_0x81e9x152) {
		_0x81e9x152 = 64
	};
	try {
		ModPE.setFoodItem_(_0x81e9x10, _0x81e9x18, _0x81e9x151, _0x81e9x154, _0x81e9x17, _0x81e9x152);
		ItemsToAddInCreative[_0x81e9x10 + ":" + _0x81e9x152] = true
	} catch (e) {
		print("missing item id: " + _0x81e9x10 + ", icon: " + _0x81e9x18 + ":" + _0x81e9x151);
		ModPE.setFoodItem(_0x81e9x10, "missing_item", 0, _0x81e9x154, _0x81e9x17, _0x81e9x152);
		RegisterNativeTextureIcon(_0x81e9x10, "missing_item", 0)
	}
};
Item.defineArmor_ = Item.defineArmor;
Item.defineArmor = function(_0x81e9x10, _0x81e9x18, _0x81e9x151, _0x81e9x17, _0x81e9x155, _0x81e9x156, _0x81e9x157, _0x81e9x158) {
	try {
		var _0x81e9x153 = Item.getName(_0x81e9x10, 0, true);
		if (_0x81e9x153) {
			_0x81e9x153 = _0x81e9x153.split(".")[1]
		};
		if (_0x81e9x153 && _0x81e9x153 != _0x81e9x17) {
			IDConflictsList[_0x81e9x10] = "[ARMOR] \"" + _0x81e9x153 + "\" to \"" + _0x81e9x17 + "\""
		};
		RegisterNativeTextureIcon(_0x81e9x10, _0x81e9x18, _0x81e9x151);
		NamesToTranslate[_0x81e9x10] = _0x81e9x17;
		if (DefineArmorReplacingItems) {
			Item.defineArmor_(_0x81e9x10, _0x81e9x18, _0x81e9x151, translate(_0x81e9x17), "images/armor/iron_1.png", _0x81e9x156, _0x81e9x157, _0x81e9x158)
		} else {
			_0x81e9x17 += " (id " + _0x81e9x10 + ")";
			Item.defineArmor_(_0x81e9x10, _0x81e9x18, _0x81e9x151, translate(_0x81e9x17), _0x81e9x155, _0x81e9x156, _0x81e9x157, _0x81e9x158);
			Item.setCategory(_0x81e9x10, 3);
			Player.addItemCreativeInv_(_0x81e9x10, 1, 0)
		};
		Item.setMaxDamage(_0x81e9x10, _0x81e9x157)
	} catch (e) {
		print("missing item id: " + _0x81e9x10 + ", icon: " + _0x81e9x18 + ":" + _0x81e9x151);
		ModPE.setItem_(_0x81e9x10, "missing_item", 0, _0x81e9x17, 1);
		RegisterNativeTextureIcon(_0x81e9x10, "missing_item", 0)
	}
};
Level.dropItem_ = Level.dropItem;
Level.dropItem = function(_0x81e9x26, _0x81e9x27, _0x81e9x28, _0x81e9x159, _0x81e9x10, _0x81e9x15a, _0x81e9x15b) {
	if (_0x81e9x26 - Math.floor(_0x81e9x26) == 0.5) {
		_0x81e9x26 += 0.01
	};
	if (_0x81e9x28 - Math.floor(_0x81e9x28) == 0.5) {
		_0x81e9x28 += 0.01
	};
	return Level.dropItem_(_0x81e9x26, _0x81e9x27, _0x81e9x28, _0x81e9x159, _0x81e9x10, _0x81e9x15a, _0x81e9x15b)
};
Item.addShapedRecipe_ = Item.addShapedRecipe;
Item.addShapedRecipe = function(_0x81e9x10, _0x81e9x13, _0x81e9x16, _0x81e9x15c, _0x81e9x15d) {
	var _0x81e9x15e = FactAPI.addonRecipeOverride[_0x81e9x10 + ":" + _0x81e9x16];
	if (_0x81e9x15e == "_prevent") {
		return
	};
	if (_0x81e9x15e) {
		_0x81e9x10 = _0x81e9x15e[0];
		_0x81e9x13 = _0x81e9x15e[1];
		_0x81e9x16 = _0x81e9x15e[2];
		_0x81e9x15c = _0x81e9x15e[3];
		_0x81e9x15d = _0x81e9x15e[4]
	};
	Item.addShapedRecipe_(_0x81e9x10, _0x81e9x13, _0x81e9x16, _0x81e9x15c, _0x81e9x15d);
	var _0x81e9x15f = [];
	var _0x81e9x160 = [
		[_0x81e9x10, _0x81e9x16, _0x81e9x13]
	];
	var _0x81e9x161 = {};
	var _0x81e9x162 = _0x81e9x15c[0] + _0x81e9x15c[1] + _0x81e9x15c[2];
	var _0x81e9x163 = _0x81e9x10 + ":" + _0x81e9x13 + ":" + _0x81e9x16;
	for (var i = 0; i < _0x81e9x15d.length / 3; i++) {
		_0x81e9x161[_0x81e9x15d[i * 3]] = [_0x81e9x15d[i * 3 + 1], _0x81e9x15d[i * 3 + 2]]
	};
	for (var i = 0; i < 9; i++) {
		var _0x81e9x164 = _0x81e9x161[_0x81e9x162.charAt(i)];
		if (_0x81e9x164) {
			_0x81e9x15f.push(_0x81e9x164[0]);
			_0x81e9x15f.push(_0x81e9x164[1]);
			_0x81e9x160.push([_0x81e9x164[0], _0x81e9x164[1]])
		} else {
			_0x81e9x15f.push(0);
			_0x81e9x15f.push(0);
			_0x81e9x160.push([0, 0])
		}
	};
	AutoCraftRecipeList[_0x81e9x163] = _0x81e9x15f;
	GuideBookUI.Recipes[_0x81e9x10 + ":" + _0x81e9x16] = _0x81e9x160;
	GuideBookUI.Recipes[_0x81e9x10 + ":-1"] = _0x81e9x160
};
Level.spawnMob_ = Level.spawnMob;
Level.spawnMob = function(_0x81e9x26, _0x81e9x27, _0x81e9x28, _0x81e9x10, _0x81e9x165) {
	stopThreadIfNotInGame();
	var _0x81e9x166 = Level.spawnMob_(_0x81e9x26, _0x81e9x27, _0x81e9x28, _0x81e9x10, _0x81e9x165);
	setPosition(_0x81e9x166, _0x81e9x26, _0x81e9x27, _0x81e9x28);
	Entity.setMobSkin(_0x81e9x166, _0x81e9x165);
	return _0x81e9x166
};
Block.defineBlock_ = Block.defineBlock;
Block.defineBlock = function(_0x81e9x10, _0x81e9x17, _0x81e9x18, _0x81e9x167, _0x81e9x168, _0x81e9x169) {
	if (_0x81e9x10 > 255) {
		print("<FactAPI> BLOCK " + _0x81e9x17 + " DEFINE FAILED, ID LAGER THAN 255 -> " + _0x81e9x10);
		print("<FactAPI> block " + _0x81e9x17 + " has incorrect id " + _0x81e9x10);
		return
	};
	var _0x81e9x153 = Item.getName(_0x81e9x10, 0, true);
	if (_0x81e9x153) {
		_0x81e9x153 = _0x81e9x153.split(".")[1]
	};
	if (_0x81e9x153 && _0x81e9x153 != _0x81e9x17 || _0x81e9x10 == 95) {
		IDConflictsList[_0x81e9x10] = "[BLOCK] \"" + _0x81e9x153 + "\" to \"" + _0x81e9x17 + "\""
	};
	NamesToTranslate[_0x81e9x10] = _0x81e9x17;
	try {
		Block.defineBlock_(_0x81e9x10, _0x81e9x17, _0x81e9x18, _0x81e9x167, _0x81e9x168, _0x81e9x169)
	} catch (e) {
		print("missing block id: " + _0x81e9x10 + ", texture: " + _0x81e9x18);
		Block.defineBlock_(_0x81e9x10, _0x81e9x17, ["missing_block", 0], _0x81e9x167, _0x81e9x168, _0x81e9x169)
	}
};

function ShowIDConflicts() {
	var _0x81e9x4b = "";
	ResetFreeIDFounder();
	for (var _0x81e9x10 in IDConflictsList) {
		_0x81e9x4b += IDConflictsList[_0x81e9x10] + " (id = " + _0x81e9x10 + ", possible id = " + FindNearestFreeIDToCurrent(parseInt(_0x81e9x10)) + ")\n"
	};
	showUserAlertDialog(_0x81e9x4b, "ID conflicts")
}
Item.setMaxDamage_ = Item.setMaxDamage;
Item.setMaxDamage = function(_0x81e9x10, _0x81e9x16b) {
	Item.setMaxDamage_(_0x81e9x10, _0x81e9x16b);
	guiItemDamageRaw.push(_0x81e9x10 + ":" + _0x81e9x16b)
};
var currentExternalOutput = null;
var carriedItemReplacement = null;
var getCarriedItem_ = getCarriedItem;
Player.getCarriedItemCount_ = Player.getCarriedItemCount;
Player.getCarriedItemData_ = Player.getCarriedItemData;
getCarriedItem = function() {
	stopThreadIfNotInGame();
	if (carriedItemReplacement) {
		return carriedItemReplacement.id
	} else {
		return getCarriedItem_()
	}
};
Player.getCarriedItemCount = function() {
	stopThreadIfNotInGame();
	if (carriedItemReplacement) {
		return carriedItemReplacement.count
	} else {
		return Player.getCarriedItemCount_()
	}
};
Player.getCarriedItemData = function() {
	stopThreadIfNotInGame();
	if (carriedItemReplacement) {
		return carriedItemReplacement.data
	} else {
		return Player.getCarriedItemData_()
	}
};
Entity.setCarriedItem_ = Entity.setCarriedItem;
Entity.setCarriedItem = function(_0x81e9x38, _0x81e9x10, _0x81e9x13, _0x81e9x16) {
	stopThreadIfNotInGame();
	if (currentExternalOutput && _0x81e9x38 == getPlayerEnt()) {
		MultiplayerServer.SendPacket("set-carried", [parseInt(_0x81e9x10), parseInt(_0x81e9x13), parseInt(_0x81e9x16)], currentExternalOutput)
	} else {
		Entity.setCarriedItem_(_0x81e9x38, _0x81e9x10, _0x81e9x13, _0x81e9x16)
	}
};
Item.setCategory = function() {};
var addItemInventory_ = addItemInventory;
addItemInventory = function(_0x81e9x10, _0x81e9x13, _0x81e9x16) {
	if (currentExternalOutput) {
		MultiplayerServer.SendPacket("add-item", [parseInt(_0x81e9x10), parseInt(_0x81e9x13), parseInt(_0x81e9x16)], currentExternalOutput)
	} else {
		addItemInventory_(_0x81e9x10, _0x81e9x13, _0x81e9x16)
	}
};
var clientMessage_ = clientMessage;
clientMessage = function(_0x81e9x171) {
	if (currentExternalOutput) {
		MultiplayerServer.SendPacket("wrench-info", [String(_0x81e9x171)], currentExternalOutput)
	} else {
		clientMessage_(_0x81e9x171)
	}
};
Entity.setMobSkin_ = Entity.setMobSkin;
Entity.setMobSkin = function(_0x81e9x38, _0x81e9x165) {
	RunOnMainThread(function() {
		Entity.setMobSkin_(_0x81e9x38, _0x81e9x165)
	})
};
Item.addFurnaceRecipe_ = Item.addFurnaceRecipe;
Item.addFurnaceRecipe = function(_0x81e9x10, _0x81e9x172, _0x81e9x16) {
	if (FactAPI.isFurnaceRecipePrevented(_0x81e9x10, _0x81e9x172)) {
		return
	};
	Item.addFurnaceRecipe_(_0x81e9x10, _0x81e9x172, _0x81e9x16);
	ElectricFurnace_recipes.push([_0x81e9x10, _0x81e9x172, 1])
};
Item.getName_ = Item.getName;
Item.getName = function(_0x81e9x10, _0x81e9x16, _0x81e9x173) {
	try {
		return Item.getName_(_0x81e9x10, _0x81e9x16, _0x81e9x173)
	} catch (e) {};
	return ""
};
Entity.setHealth_ = Entity.setHealth;
Entity.setHealth = function(_0x81e9x174, _0x81e9x175) {
	try {
		Entity.setHealth_(_0x81e9x174, _0x81e9x175)
	} catch (_0x81e9x174) {}
};
var MassiveTilePlace = false;
var PlacedTilesCounter = 0;

function ThreadYield() {
	java.lang.Thread.yield()
}
var getTile_ = getTile;
getTile = function(_0x81e9x26, _0x81e9x27, _0x81e9x28) {
	return getTile_(_0x81e9x26, _0x81e9x27, _0x81e9x28)
};
var setTile_ = setTile;
setTile = function(_0x81e9x26, _0x81e9x27, _0x81e9x28, _0x81e9x10, _0x81e9x16) {
	setTile_(_0x81e9x26, _0x81e9x27, _0x81e9x28, _0x81e9x10, _0x81e9x16)
};
var NetworkThreads = [];

function RunAsNetwork(_0x81e9xd) {
	var _0x81e9x17d = new java.lang.Thread({
		run: function() {
			try {
				_0x81e9xd()
			} catch (e) {
				clientMessage("§4" + e)
			}
		}
	});
	_0x81e9x17d.start();
	NetworkThreads.push(_0x81e9x17d)
}

function StopAllNetworkThreads() {
	for (var i in NetworkThreads) {
		NetworkThreads[i].interrupt()
	};
	NetworkThreads = []
}

function getMcContext() {
	return com.mojang.minecraftpe.MainActivity.currentMainActivity.get()
}

function LaunchServer() {
	RunAsNetwork(MultiplayerServer.WaitingLoop)
}

function SendServerPacket(_0x81e9x17, _0x81e9x16) {
	MultiplayerServer.SendToAll(_0x81e9x17, _0x81e9x16)
}

function StopServer() {
	MultiplayerServer.CloseServer();
	StopAllNetworkThreads()
}

function IntValPacket(_0x81e9x184) {
	return {
		val: parseInt(_0x81e9x184),
		isInt: true
	}
}
var MultiplayerServer = {
	StandartPort: 2304,
	ServerSocket: null,
	Socket: null,
	SocketArray: [],
	InputStream: null,
	OutputStream: null,
	WritingFromThread: false,
	DelayedPackets: [],
	MainThreadTick: function() {
		return;
		MultiplayerServer.WritingFromThread = false;
		if (MultiplayerServer.DelayedPackets.length) {
			clientMessage("§2[Server] Sending " + MultiplayerServer.DelayedPackets.length + " delayed packets...")
		};
		for (var i in MultiplayerServer.DelayedPackets) {
			var _0x81e9x186 = MultiplayerServer.DelayedPackets[i];
			MultiplayerServer.SendPacket(_0x81e9x186[0], _0x81e9x186[1], _0x81e9x186[2])
		};
		MultiplayerServer.DelayedPackets = []
	},
	WaitingLoop: function() {
		MultiplayerServer.ServerSocket = new java.net.ServerSocket(MultiplayerServer.StandartPort);
		while (true) {
			MultiplayerServer.Socket = MultiplayerServer.ServerSocket.accept();
			MultiplayerServer.SocketArray.push(MultiplayerServer.Socket);
			RunAsNetwork(function() {
				MultiplayerServer.GotClient(MultiplayerServer.Socket)
			})
		}
	},
	CloseServer: function() {
		if (MultiplayerServer.ServerSocket) {
			MultiplayerServer.ServerSocket.close()
		};
		for (var i in MultiplayerServer.SocketArray) {
			try {
				var _0x81e9x187 = MultiplayerServer.SocketArray[i];
				_0x81e9x187.close()
			} catch (e) {}
		}
	},
	GotClient: function(_0x81e9x187) {
		var _0x81e9x188 = new java.io.DataInputStream(_0x81e9x187.getInputStream());
		var _0x81e9x189 = new java.io.DataOutputStream(_0x81e9x187.getOutputStream());
		while (true) {
			try {
				var _0x81e9x18a = String(_0x81e9x188.readUTF())
			} catch (e) {
				clientMessage("§dA player disconnected");
				break
			};
			try {
				ReceiveServerPacket(_0x81e9x18a, _0x81e9x188, _0x81e9x189)
			} catch (e) {
				clientMessage("§4Receiver error: §6" + e)
			}
		}
	},
	SendPacket: function(_0x81e9x17, _0x81e9x18b, _0x81e9x18c) {
		return;
		if (!_0x81e9x18c) {
			_0x81e9x18c = MultiplayerServer.OutputStream
		};
		if (MultiplayerServer.WritingFromThread) {
			MultiplayerServer.DelayedPackets.push([_0x81e9x17, _0x81e9x18b, _0x81e9x18c]);
			return
		};
		_0x81e9x18c.writeUTF(_0x81e9x17);
		for (var i in _0x81e9x18b) {
			var _0x81e9x184 = _0x81e9x18b[i];
			var _0x81e9x158 = typeof(_0x81e9x184);
			if (_0x81e9x158 == "string") {
				_0x81e9x18c.writeUTF(_0x81e9x184)
			} else {
				if (_0x81e9x158 == "number") {
					if (_0x81e9x184) {
						_0x81e9x18c.writeDouble(_0x81e9x184)
					} else {
						_0x81e9x18c.writeDouble(0)
					}
				} else {
					if (_0x81e9x158 == "boolean") {
						_0x81e9x18c.writeBoolean(_0x81e9x184)
					}
				}
			}
		};
		_0x81e9x18c.flush()
	},
	SendToAll: function(_0x81e9x17, _0x81e9x16) {
		return;
		for (var i in MultiplayerServer.SocketArray) {
			var _0x81e9x187 = MultiplayerServer.SocketArray[i];
			try {
				var _0x81e9x18c = new java.io.DataOutputStream(_0x81e9x187.getOutputStream());
				MultiplayerServer.SendPacket(_0x81e9x17, _0x81e9x16, _0x81e9x18c)
			} catch (e) {
				continue
			}
		}
	}
};
var allowBarrelAnimationOnHost = true;

function ReceiveServerPacket(_0x81e9x17, _0x81e9x188, _0x81e9x189) {
	if (_0x81e9x17 == "client-connect") {
		var _0x81e9x18f = String(_0x81e9x188.readUTF());
		var _0x81e9x190 = parseInt(_0x81e9x188.readDouble());
		clientMessage("§2[player connected] " + _0x81e9x18f + " with entity " + _0x81e9x190);
		SendAllMachineBlocksIDs(_0x81e9x189);
		SendAllCachedBees(_0x81e9x189);
		FactAPI.SendAddonIDDataPacket(_0x81e9x189);
		FactAPI.GUI.sendAddGuiScreens(_0x81e9x189);
		allowBarrelAnimationOnHost = false
	};
	if (_0x81e9x17 == "item-use") {
		var _0x81e9x26 = parseInt(_0x81e9x188.readDouble());
		var _0x81e9x27 = parseInt(_0x81e9x188.readDouble());
		var _0x81e9x28 = parseInt(_0x81e9x188.readDouble());
		var _0x81e9x10 = parseInt(_0x81e9x188.readDouble());
		var _0x81e9x13 = parseInt(_0x81e9x188.readDouble());
		var _0x81e9x16 = parseInt(_0x81e9x188.readDouble());
		var _0x81e9x191 = parseInt(_0x81e9x188.readDouble());
		var _0x81e9x192 = parseInt(_0x81e9x188.readDouble());
		clientItemUse(_0x81e9x26, _0x81e9x27, _0x81e9x28, _0x81e9x10, _0x81e9x13, _0x81e9x16, _0x81e9x191, _0x81e9x192, _0x81e9x189);
		carriedItemReplacement = null;
		currentExternalOutput = null
	};
	if (_0x81e9x17 == "destroy-block") {
		var _0x81e9x26 = parseInt(_0x81e9x188.readDouble());
		var _0x81e9x27 = parseInt(_0x81e9x188.readDouble());
		var _0x81e9x28 = parseInt(_0x81e9x188.readDouble());
		var _0x81e9x10 = parseInt(_0x81e9x188.readDouble());
		var _0x81e9x13 = parseInt(_0x81e9x188.readDouble());
		var _0x81e9x16 = parseInt(_0x81e9x188.readDouble());
		var _0x81e9x193 = parseInt(_0x81e9x188.readDouble());
		var _0x81e9x1a = parseInt(_0x81e9x188.readDouble());
		clientDestroyBlock(_0x81e9x26, _0x81e9x27, _0x81e9x28, _0x81e9x10, _0x81e9x13, _0x81e9x16, _0x81e9x193, _0x81e9x1a, _0x81e9x189)
	};
	if (_0x81e9x17 == "gui-closed") {
		var _0x81e9x10 = parseInt(_0x81e9x188.readDouble());
		var _0x81e9x194 = getContainerByExternalID(_0x81e9x10);
		_0x81e9x194.removeClient(_0x81e9x10)
	};
	if (_0x81e9x17 == "slot-update") {
		var _0x81e9x195 = parseInt(_0x81e9x188.readDouble());
		var _0x81e9x194 = getContainerByExternalID(_0x81e9x195);
		var _0x81e9x5b = parseInt(_0x81e9x188.readDouble());
		var _0x81e9x10 = parseInt(_0x81e9x188.readDouble());
		var _0x81e9x13 = parseInt(_0x81e9x188.readDouble());
		var _0x81e9x16 = parseInt(_0x81e9x188.readDouble());
		_0x81e9x194.setSlot(_0x81e9x5b, _0x81e9x10, _0x81e9x13, _0x81e9x16)
	};
	if (_0x81e9x17 == "cbutton") {
		var _0x81e9x10 = parseInt(_0x81e9x188.readDouble());
		var _0x81e9x195 = parseInt(_0x81e9x188.readDouble());
		var _0x81e9x194 = getContainerByExternalID(_0x81e9x195);
		currentExternalOutput = _0x81e9x189;
		carriedItemReplacement = {
			id: _0x81e9x10,
			count: _0x81e9x13,
			data: _0x81e9x16
		};
		_0x81e9x194.executeButtonFunction_old(_0x81e9x10);
		carriedItemReplacement = null;
		currentExternalOutput = null
	}
}

function clientItemUse(_0x81e9x26, _0x81e9x27, _0x81e9x28, _0x81e9x10, _0x81e9x13, _0x81e9x16, _0x81e9x191, _0x81e9x192, _0x81e9x18c) {
	currentExternalOutput = _0x81e9x18c;
	carriedItemReplacement = {
		id: _0x81e9x10,
		count: _0x81e9x13,
		data: _0x81e9x16
	};
	var _0x81e9x193 = getTile(_0x81e9x26, _0x81e9x27, _0x81e9x28);
	var _0x81e9x197 = getMachine(_0x81e9x26, _0x81e9x27, _0x81e9x28);
	FactAPI.InvokeCallback("useItem", _0x81e9x26, _0x81e9x27, _0x81e9x28, _0x81e9x10, _0x81e9x193, _0x81e9x191, _0x81e9x16);
	if (_0x81e9x10 == item_ec_meter && VoltmeterItemTapExternal(_0x81e9x26, _0x81e9x27, _0x81e9x28, _0x81e9x18c)) {
		return
	};
	if (_0x81e9x197) {
		var _0x81e9x158 = getMachineType(_0x81e9x197);
		if (_0x81e9x10 == item_battery) {
			batteryItemClick(_0x81e9x197);
			return
		};
		if (_0x81e9x10 == item_energy_crystal) {
			EnergyCrystalClick(_0x81e9x197);
			return
		};
		if (_0x81e9x193 == block_barrel && barrel_itemTap(_0x81e9x197, _0x81e9x10, _0x81e9x16)) {
			return
		};
		if (_0x81e9x10 == item_wrench) {
			_0x81e9x158.wrenchClick(_0x81e9x197);
			if (_0x81e9x191 > 1) {
				setTile(_0x81e9x26, _0x81e9x27, _0x81e9x28, _0x81e9x193, {
					2: 1,
					3: 0,
					4: 3,
					5: 2
				} [_0x81e9x191])
			};
			if (block6SideMachine[_0x81e9x193]) {
				setTile(_0x81e9x26, _0x81e9x27, _0x81e9x28, block, _0x81e9x191)
			};
			if (_0x81e9x158.isUsingEnergy()) {
				MultiplayerServer.SendPacket("wrench-info", ["energy stored: " + parseInt(_0x81e9x158.getEnergyStored(_0x81e9x197)) + "/" + _0x81e9x158.getMaxEnergyStored()], _0x81e9x18c);
				if (_0x81e9x193 == block_nuclear_reactor_controller) {
					MultiplayerServer.SendPacket("wrench-info", ["reactor heat: " + _0x81e9x197.temp + "/2000"], _0x81e9x18c)
				}
			};
			if (_0x81e9x197.webObj) {
				MultiplayerServer.SendPacket("wrench-info", [ChatColor.GREEN + "web: gens=" + _0x81e9x197.webObj.generators.length + " machines=" + _0x81e9x197.webObj.machines.length], _0x81e9x18c)
			}
		} else {
			var _0x81e9x198 = _0x81e9x158.getContainer(_0x81e9x197);
			if (_0x81e9x198) {
				GUIBuildData = _0x81e9x158.getGUIMetadata(_0x81e9x197);
				_0x81e9x198.openExternal(_0x81e9x18c, _0x81e9x26, _0x81e9x27, _0x81e9x28);
				return
			}
		};
		if (_0x81e9x10 == item_teleport_accesser && _0x81e9x193 == block_teleporter) {
			_0x81e9x158.teleportEntity(_0x81e9x192, _0x81e9x197)
		}
	};
	if (_0x81e9x193 == block_rubber_wood_with_latex && _0x81e9x10 == item_treetap) {
		TreetapLatexUse(_0x81e9x26, _0x81e9x27, _0x81e9x28, _0x81e9x191)
	};
	if (_0x81e9x10 == block_transporting_pipe) {
		onPipeItemUse(_0x81e9x26, _0x81e9x27, _0x81e9x28, _0x81e9x191, _0x81e9x10, _0x81e9x13, _0x81e9x16)
	};
	if (_0x81e9x193 == block_rubber_tree_sappling && _0x81e9x10 == 351 && _0x81e9x16 == 15) {
		var _0x81e9x199 = getMachine(_0x81e9x26, _0x81e9x27, _0x81e9x28);
		if (_0x81e9x199) {
			_0x81e9x199.age = 9999;
			setPlayerItem(351, _0x81e9x13 - 1, 15)
		}
	};
	if (isMachine(_0x81e9x10) && !VanilaGUIBlocks[_0x81e9x193]) {
		var _0x81e9x1a = 0;
		if (block6SideMachine[_0x81e9x10]) {
			_0x81e9x1a = _0x81e9x191
		};
		onMachinePlaced(_0x81e9x26, _0x81e9x27, _0x81e9x28, _0x81e9x191, _0x81e9x10, _0x81e9x13, _0x81e9x1a)
	};
	if (_0x81e9x10 == 331) {
		activateMachine(_0x81e9x26, _0x81e9x27, _0x81e9x28)
	};
	if (WireDataByItem[_0x81e9x10] >= 0 && !VanilaGUIBlocks[_0x81e9x193]) {
		onWireItemUse(_0x81e9x26, _0x81e9x27, _0x81e9x28, _0x81e9x191, _0x81e9x10, _0x81e9x13, WireDataByItem[_0x81e9x10])
	};
	if (_0x81e9x10 == item_scrab_box) {
		ScrabBoxUse()
	};
	if ((_0x81e9x193 == 2 || _0x81e9x193 == 3 || _0x81e9x193 == 60) && _0x81e9x10 == item_rubber_tree_sapling && getTile(_0x81e9x26, _0x81e9x27 + 1, _0x81e9x28) == 0) {
		setPlayerItem(_0x81e9x10, _0x81e9x13 - 1, 0);
		setTile(_0x81e9x26, _0x81e9x27 + 1, _0x81e9x28, block_rubber_tree_sappling);
		activateMachine(_0x81e9x26, _0x81e9x27 + 1, _0x81e9x28)
	}
}

function SendAllMachineBlocksIDs(_0x81e9x18c) {
	var _0x81e9x186 = [MachineTypes.length];
	for (var i in MachineTypes) {
		_0x81e9x186.push(parseInt(MachineTypes[i].id))
	};
	MultiplayerServer.SendPacket("all-machines", _0x81e9x186, _0x81e9x18c)
}
var externalDestroyBlockTile = null;

function clientDestroyBlock(_0x81e9x26, _0x81e9x27, _0x81e9x28, _0x81e9x10, _0x81e9x13, _0x81e9x16, _0x81e9x193, _0x81e9x1a, _0x81e9x189) {
	currentExternalOutput = _0x81e9x189;
	carriedItemReplacement = {
		id: _0x81e9x10,
		count: _0x81e9x13,
		data: _0x81e9x16
	};
	externalDestroyBlockTile = [_0x81e9x193, _0x81e9x1a];
	destroyBlock(_0x81e9x26, _0x81e9x27, _0x81e9x28);
	carriedItemReplacement = null;
	currentExternalOutput = null;
	externalDestroyBlockTile = null
}
var CachedChestInventory = [];

function ChestInventory(_0x81e9x26, _0x81e9x27, _0x81e9x28) {
	this.x = _0x81e9x26;
	this.y = _0x81e9x27;
	this.z = _0x81e9x28;
	this.slots = [];
	this.lastSync = -999;
	this.isExist = function() {
		return getTile(this.x, this.y, this.z) == 54
	};
	this.exist = this.isExist();
	this.getSlot = function(i) {
		if (!this.exist) {
			return {
				"id": 0,
				"count": 0,
				"data": 0
			}
		};
		this.syncSlot();
		return this.slots[i]
	};
	this.synced = function() {
		return this.lastSync == getTime()
	};
	this.setSlot = function(i, _0x81e9x10, _0x81e9x15a, _0x81e9x15b) {
		if (!this.exist) {
			return
		};
		if (_0x81e9x15a == 0) {
			_0x81e9x10 = 0;
			_0x81e9x15b = 0
		};
		this.slots[i] = {
			"id": _0x81e9x10,
			"count": _0x81e9x15a,
			"data": _0x81e9x15b
		};
		if (this.exist) {
			Level.setChestSlot(this.x, this.y, this.z, i, _0x81e9x10, _0x81e9x15b, _0x81e9x15a)
		}
	};
	this.getChestSize = function() {
		return 27
	};
	this.isStakable = function(_0x81e9x10) {
		return !(_0x81e9x10 == item_honey_bottle || _0x81e9x10 == item_mead_bottle || _0x81e9x10 == item_empty_bottle)
	};
	this.getMaxStackSize = function(_0x81e9x10) {
		return getItemMaxStackSize(_0x81e9x10)
	};
	this.addItem = function(_0x81e9x10, _0x81e9x15a, _0x81e9x15b) {
		try {
			_0x81e9x15a = parseInt(_0x81e9x15a);
			if (!this.exist) {
				return _0x81e9x15a
			};
			if (!_0x81e9x15b) {
				_0x81e9x15b = 0
			};
			var _0x81e9x19f = this.getMaxStackSize(_0x81e9x10);
			var _0x81e9x1a0 = this.isStakable(_0x81e9x10);
			this.sync();
			var _0x81e9x1a1 = this.getChestSize();
			for (var i = 0; i < _0x81e9x1a1; i++) {
				if (_0x81e9x15a == 0) {
					break
				};
				var _0x81e9x5b = this.slots[i];
				if ((_0x81e9x1a0 && _0x81e9x5b.id == _0x81e9x10 && _0x81e9x5b.data == _0x81e9x15b) || _0x81e9x5b.id == 0) {
					var _0x81e9x1a2 = _0x81e9x5b.count;
					_0x81e9x5b.count += _0x81e9x15a;
					if (_0x81e9x5b.count > _0x81e9x19f) {
						_0x81e9x5b.count = _0x81e9x19f
					};
					_0x81e9x15a -= _0x81e9x5b.count - _0x81e9x1a2;
					this.setSlot(i, _0x81e9x10, _0x81e9x5b.count, _0x81e9x15b)
				}
			};
			return _0x81e9x15a
		} catch (e) {
			return _0x81e9x15a
		}
	};
	this.syncSlot = function(i) {
		try {
			var _0x81e9x10 = Level.getChestSlot(this.x, this.y, this.z, i);
			var _0x81e9x15a = Level.getChestSlotCount(this.x, this.y, this.z, i);
			var _0x81e9x15b = Level.getChestSlotData(this.x, this.y, this.z, i);
			this.slots[i] = {
				"id": _0x81e9x10,
				"count": _0x81e9x15a,
				"data": _0x81e9x15b
			}
		} catch (e) {
			this.slots[i] = {
				"id": 0,
				"count": 0,
				"data": 0
			};
			this.exist = false
		}
	};
	this.getItem = function(_0x81e9x10, _0x81e9x13, _0x81e9x15b) {
		try {
			if (!this.exist) {
				return {
					"id": _0x81e9x10,
					"count": 0,
					"data": _0x81e9x15b
				}
			};
			if (!_0x81e9x15b) {
				_0x81e9x15b = 0
			};
			var _0x81e9x1a3 = 0;
			var _0x81e9x1a4 = _0x81e9x10;
			lastData = _0x81e9x15b;
			this.sync();
			var _0x81e9x1a1 = this.getChestSize();
			for (var i = 0; i < _0x81e9x1a1; i++) {
				if (_0x81e9x1a3 >= _0x81e9x13) {
					break
				};
				var _0x81e9x5b = this.slots[i];
				if ((_0x81e9x5b.id == _0x81e9x10 && (_0x81e9x5b.data == _0x81e9x15b || _0x81e9x15b == -1)) || (_0x81e9x10 == -1 && _0x81e9x5b.id != 0)) {
					if (_0x81e9x10 == -1 && this.checkExclude(_0x81e9x5b.id, _0x81e9x5b.data)) {
						continue
					};
					var _0x81e9x1a5 = _0x81e9x13 - _0x81e9x1a3;
					var _0x81e9x1a6 = Math.min(_0x81e9x5b.count, _0x81e9x1a5);
					_0x81e9x5b.count -= _0x81e9x1a6;
					_0x81e9x1a3 += _0x81e9x1a6;
					_0x81e9x1a4 = _0x81e9x5b.id;
					lastData = _0x81e9x5b.data;
					this.setSlot(i, _0x81e9x5b.id, _0x81e9x5b.count, _0x81e9x5b.data);
					if (_0x81e9x10 == -1) {
						break
					}
				}
			};
			return {
				"id": _0x81e9x1a4,
				"count": _0x81e9x1a3,
				"data": lastData
			}
		} catch (e) {
			return {
				id: 0,
				count: 0,
				data: 0
			}
		}
	};
	this.excluding = [];
	this.setExclude = function(_0x81e9x1a7) {
		this.excluding = _0x81e9x1a7
	};
	this.getItemTypeList = function() {
		this.sync();
		if (!this.exist) {
			return []
		};
		var _0x81e9x1a8 = [];
		for (var i = 0; i < 27; i++) {
			var _0x81e9x5b = this.slots[i];
			if (_0x81e9x5b.id) {
				var _0x81e9x1a9 = false;
				for (var _0x81e9x19 in _0x81e9x1a8) {
					if (_0x81e9x1a8[_0x81e9x19].id == _0x81e9x5b.id && _0x81e9x1a8[_0x81e9x19].data == _0x81e9x5b.data) {
						_0x81e9x1a9 = true;
						break
					}
				};
				if (!_0x81e9x1a9) {
					_0x81e9x1a8.push({
						"id": _0x81e9x5b.id,
						"data": _0x81e9x5b.data
					})
				}
			}
		};
		return _0x81e9x1a8
	};
	this.checkExclude = function(_0x81e9x10, _0x81e9x16) {
		for (var _0x81e9x174 in this.excluding) {
			if (_0x81e9x10 == this.excluding[_0x81e9x174]) {
				return true
			}
		}
	};
	this.lastCheck = -999;
	this.sync = function() {
		if (!this.exist) {
			if (CachedChestInventory[_0x81e9x163]) {
				CachedChestInventory[_0x81e9x163] = null
			};
			return
		};
		if (this.synced()) {
			return
		};
		var _0x81e9x163 = this.x + "#" + this.y + "#" + this.z;
		var _0x81e9x1a1 = this.getChestSize();
		for (var i = 0; i < _0x81e9x1a1; i++) {
			this.syncSlot(i)
		};
		this.lastSync = this.lastCheck = getTime();
		CachedChestInventory[_0x81e9x163] = this
	}
}

function getChest(_0x81e9x26, _0x81e9x27, _0x81e9x28) {
	var _0x81e9x15a = new ChestInventory(_0x81e9x26, _0x81e9x27, _0x81e9x28);
	_0x81e9x15a.sync();
	return _0x81e9x15a
}

function removeDoubleChestHash(_0x81e9x26, _0x81e9x27, _0x81e9x28) {
	var _0x81e9x16 = Level.getData(_0x81e9x26, _0x81e9x27, _0x81e9x28);
	var _0x81e9x1ac = 1;
	var _0x81e9x1ad = 0;
	if (_0x81e9x16 % 2 == 0) {
		_0x81e9x1ac = 0;
		_0x81e9x1ad = 1
	};
	if (getTile(_0x81e9x26 + _0x81e9x1ac, _0x81e9x27, _0x81e9x28 + _0x81e9x1ad) == 54 && Level.getData(_0x81e9x26 + _0x81e9x1ac, _0x81e9x27, _0x81e9x28 + _0x81e9x1ad) == _0x81e9x16) {
		CachedChestInventory[(_0x81e9x26 + _0x81e9x1ac) + "#" + _0x81e9x27 + "#" + (_0x81e9x28 + _0x81e9x1ad)] = null
	};
	if (getTile(_0x81e9x26 - _0x81e9x1ac, _0x81e9x27, _0x81e9x28 - _0x81e9x1ad) == 54 && Level.getData(_0x81e9x26 - _0x81e9x1ac, _0x81e9x27, _0x81e9x28 - _0x81e9x1ad) == _0x81e9x16) {
		CachedChestInventory[(_0x81e9x26 - _0x81e9x1ac) + "#" + _0x81e9x27 + "#" + (_0x81e9x28 - _0x81e9x1ad)] = null
	}
}

function hasDoubleChest(_0x81e9x26, _0x81e9x27, _0x81e9x28) {
	var _0x81e9x16 = Level.getData(_0x81e9x26, _0x81e9x27, _0x81e9x28);
	var _0x81e9x1ac = 0;
	var _0x81e9x1ad = 1;
	if (_0x81e9x16 == 2 || _0x81e9x16 == 3) {
		_0x81e9x1ac = 1;
		_0x81e9x1ad = 0
	};
	if (getTile(_0x81e9x26 + _0x81e9x1ac, _0x81e9x27, _0x81e9x28 + _0x81e9x1ad) == 54 && Level.getData(_0x81e9x26 + _0x81e9x1ac, _0x81e9x27, _0x81e9x28 + _0x81e9x1ad) == _0x81e9x16) {
		return true
	};
	if (getTile(_0x81e9x26 - _0x81e9x1ac, _0x81e9x27, _0x81e9x28 - _0x81e9x1ad) == 54 && Level.getData(_0x81e9x26 - _0x81e9x1ac, _0x81e9x27, _0x81e9x28 - _0x81e9x1ad) == _0x81e9x16) {
		return true
	}
}

function DebugLine(_0x81e9x53, _0x81e9x54, _0x81e9x55, _0x81e9x56, _0x81e9x57, _0x81e9x58) {
	var _0x81e9x1b0 = _0x81e9x56 - _0x81e9x53;
	var _0x81e9x1b1 = _0x81e9x57 - _0x81e9x54;
	var _0x81e9x1b2 = _0x81e9x58 - _0x81e9x55;
	var _0x81e9x15b = Math.sqrt(_0x81e9x1b0 * _0x81e9x1b0 + _0x81e9x1b1 * _0x81e9x1b1 + _0x81e9x1b2 * _0x81e9x1b2);
	for (var _0x81e9x1a7 = 0; _0x81e9x1a7 < _0x81e9x15b; _0x81e9x1a7 += 0.4) {
		var _0x81e9x1b3 = _0x81e9x53 + _0x81e9x1b0 / _0x81e9x15b * _0x81e9x1a7;
		var _0x81e9x1b4 = _0x81e9x54 + _0x81e9x1b1 / _0x81e9x15b * _0x81e9x1a7;
		var _0x81e9x1b5 = _0x81e9x55 + _0x81e9x1b2 / _0x81e9x15b * _0x81e9x1a7;
		Level.addParticle(5, _0x81e9x1b3, _0x81e9x1b4, _0x81e9x1b5, 0, 0, 0)
	}
}

function addToTarget(_0x81e9x1b7, _0x81e9x1b8, _0x81e9x1b9) {
	var _0x81e9x1ba = _0x81e9x1b8 - _0x81e9x1b7;
	_0x81e9x1ba = Math.min(_0x81e9x1b9, Math.max(-_0x81e9x1b9, _0x81e9x1ba));
	return _0x81e9x1b7 + _0x81e9x1ba
}

function runAsGUI(_0x81e9xd) {
	getMcContext().runOnUiThread(new java.lang.Runnable({
		run: function() {
			try {
				_0x81e9xd()
			} catch (e) {
				print(e)
			}
		}
	}))
}

function postDelayedFunc(_0x81e9xd, _0x81e9x1bd) {
	if (!_0x81e9x1bd) {
		_0x81e9x1bd = 1
	};
	if (_0x81e9x1bd < 0) {
		print("WARNING: post delay is less than 0 - aborting call")
	};
	runAsGUI(function() {
		var _0x81e9x1be = new android.os.Handler();
		_0x81e9x1be.postDelayed({
			run: function() {
				try {
					_0x81e9xd({
						delay: _0x81e9x1bd
					})
				} catch (e) {
					print("ERROR in delayed func (delay = " + _0x81e9x1bd + "\n" + e)
				}
			}
		}, parseInt(_0x81e9x1bd))
	})
}

function YieldForATime(_0x81e9x1bd) {
	var _0x81e9x1c0 = java.lang.System.currentTimeMillis();
	while (java.lang.System.currentTimeMillis() - _0x81e9x1c0 < _0x81e9x1bd) {
		java.lang.Thread.yield()
	}
}

function RunInThread(_0x81e9x1c2) {
	var _0x81e9x17d = new java.lang.Thread({
		run: function() {
			try {
				_0x81e9x1c2(_0x81e9x17d)
			} catch (e) {
				print("quick-thread error: " + e)
			}
		}
	});
	_0x81e9x17d.setPriority(1);
	_0x81e9x17d.start()
}

function ArrayCopy(_0x81e9x1c4) {
	var _0x81e9x1c5 = [];
	for (var i in _0x81e9x1c4) {
		_0x81e9x1c5[i] = _0x81e9x1c4[i]
	};
	return _0x81e9x1c5
}

function anyInArray(_0x81e9x1c7) {
	for (var _0x81e9x1c8 in _0x81e9x1c7) {
		return true
	};
	return false
}

function getCoordsForSide(_0x81e9x26, _0x81e9x27, _0x81e9x28, _0x81e9x191) {
	if (_0x81e9x191 == 0) {
		_0x81e9x27--
	};
	if (_0x81e9x191 == 1) {
		_0x81e9x27++
	};
	if (_0x81e9x191 == 2) {
		_0x81e9x28--
	};
	if (_0x81e9x191 == 3) {
		_0x81e9x28++
	};
	if (_0x81e9x191 == 4) {
		_0x81e9x26--
	};
	if (_0x81e9x191 == 5) {
		_0x81e9x26++
	};
	return new Coords(_0x81e9x26, _0x81e9x27, _0x81e9x28)
}

function isReplacableTile(_0x81e9x10) {
	return (_0x81e9x10 == 0 || _0x81e9x10 == 8 || _0x81e9x10 == 9 || _0x81e9x10 == 10 || _0x81e9x10 == 11 || _0x81e9x10 == 31 || _0x81e9x10 == 32 || _0x81e9x10 == 78 || isOilBlock(_0x81e9x10))
}

function isBlockSolid(_0x81e9x10) {
	return !(_0x81e9x10 == 0 || _0x81e9x10 == 31 || _0x81e9x10 == 32 || _0x81e9x10 == 8 || _0x81e9x10 == 9 || _0x81e9x10 == 10 || _0x81e9x10 == 11 || _0x81e9x10 == 32)
}

function capitateTree(_0x81e9x26, _0x81e9x27, _0x81e9x28, _0x81e9x1cd) {
	for (var _0x81e9x1ce = _0x81e9x26 - 3; _0x81e9x1ce < _0x81e9x26 + 4; _0x81e9x1ce++) {
		for (var _0x81e9x1cf = _0x81e9x27; _0x81e9x1cf < _0x81e9x27 + 4; _0x81e9x1cf++) {
			for (var _0x81e9x1d0 = _0x81e9x28 - 3; _0x81e9x1d0 < _0x81e9x28 + 4; _0x81e9x1d0++) {
				var _0x81e9x10 = getTile(_0x81e9x1ce, _0x81e9x1cf, _0x81e9x1d0);
				var _0x81e9x15b = Math.sqrt((_0x81e9x26 - _0x81e9x1ce) * (_0x81e9x26 - _0x81e9x1ce) + (_0x81e9x27 - _0x81e9x1cf) * (_0x81e9x27 - _0x81e9x1cf) + (_0x81e9x28 - _0x81e9x1d0) * (_0x81e9x28 - _0x81e9x1d0));
				var _0x81e9x16 = Level.getData(_0x81e9x1ce, _0x81e9x1cf, _0x81e9x1d0) % 4;
				if (_0x81e9x10 == 18 || _0x81e9x10 == 161) {
					setTile(_0x81e9x1ce, _0x81e9x1cf, _0x81e9x1d0, 0);
					if (_0x81e9x10 == 161) {
						_0x81e9x16 += 4
					};
					if (Math.random() * 16 < 1) {
						_0x81e9x1cd.addItem(6, 1, _0x81e9x16)
					};
					if (Math.random() * 64 < 1 && _0x81e9x16 == 0 && _0x81e9x10 == 18) {
						_0x81e9x1cd.addItem(260, 1, 0)
					}
				};
				if ((_0x81e9x10 == 17 || _0x81e9x10 == 162) && _0x81e9x15b < 2) {
					setTile(_0x81e9x1ce, _0x81e9x1cf, _0x81e9x1d0, 0);
					_0x81e9x1cd.addItem(_0x81e9x10, 1, _0x81e9x16);
					capitateTree(_0x81e9x1ce, _0x81e9x1cf, _0x81e9x1d0, _0x81e9x1cd)
				}
			}
		}
	}
}

function setPlayerCape() {
	LoadGUIStrings()
}

function parseIntCoord(_0x81e9x26) {
	if (_0x81e9x26 < 0 && _0x81e9x26 != parseInt(_0x81e9x26)) {
		_0x81e9x26--
	};
	return parseInt(_0x81e9x26)
}

function getLiquidByTile(_0x81e9x10) {
	switch (_0x81e9x10) {
		case 8:
			;
		case 9:
			return 8;
		case 10:
			;
		case 11:
			return 10;
		case block_oil:
			return 4
	}
}

function showUserAlertDialog(_0x81e9x1d5, _0x81e9x1d6) {
	if (!_0x81e9x1d5) {
		return
	};
	if (!_0x81e9x1d6) {
		_0x81e9x1d6 = "Factorization"
	};
	runAsGUI(function() {
		var _0x81e9x1d7 = getMcContext();
		var _0x81e9x173 = android.app.AlertDialog.Builder(_0x81e9x1d7);
		_0x81e9x173.setTitle(_0x81e9x1d6).setMessage(_0x81e9x1d5).show()
	})
}

function showAdvancedAlertDialog(_0x81e9x1d5, _0x81e9x1d6, _0x81e9x1d9, _0x81e9x1da, _0x81e9x1db) {
	if (!_0x81e9x1d5) {
		return
	};
	if (!_0x81e9x1d6) {
		_0x81e9x1d6 = "LAUNCHER"
	};
	runAsGUI(function() {
		var _0x81e9x1d7 = getMcContext();
		var _0x81e9x173 = android.app.AlertDialog.Builder(_0x81e9x1d7);
		_0x81e9x173.setTitle(_0x81e9x1d6);
		var _0x81e9x1dc = new android.widget.LinearLayout(_0x81e9x1d7);
		_0x81e9x1dc.setOrientation(1);
		var _0x81e9x1dd = new android.widget.ScrollView(_0x81e9x1d7);
		_0x81e9x1dd.addView(_0x81e9x1dc);
		var _0x81e9x1de = new android.widget.TextView(_0x81e9x1d7);
		_0x81e9x1de.setText(_0x81e9x1d5);
		_0x81e9x1de.setTextSize(18);
		_0x81e9x1de.setTextColor(android.graphics.Color.BLACK);
		_0x81e9x1dc.addView(_0x81e9x1de, start_menu_layout_params);
		_0x81e9x173.setView(_0x81e9x1dd);
		_0x81e9x173.show()
	})
}

function convertWpdToModelHash() {}

function BindEntityToPosition(_0x81e9x174, _0x81e9x26, _0x81e9x27, _0x81e9x28) {
	var _0x81e9x1e1 = Entity.getX(_0x81e9x174);
	var _0x81e9x1e2 = Entity.getY(_0x81e9x174);
	var _0x81e9x1e3 = Entity.getZ(_0x81e9x174);
	setVelX(_0x81e9x174, _0x81e9x26 - _0x81e9x1e1);
	setVelY(_0x81e9x174, _0x81e9x27 - _0x81e9x1e2);
	setVelZ(_0x81e9x174, _0x81e9x28 - _0x81e9x1e3)
}

function AddAllBlocksToPlayerInv() {
	for (id in NamesToTranslate) {
		if (id < 256) {
			Level.dropItem(getPlayerX(), getPlayerY(), getPlayerZ(), 0, id, 64, 0);
			clientMessage("given x64 of " + NamesToTranslate[id])
		}
	}
}

function DownloadImage(_0x81e9x1e6, _0x81e9x1e7) {
	var _0x81e9x1e8 = android.os.Environment.getExternalStorageDirectory().getAbsolutePath();
	var _0x81e9x1e9 = new java.io.File(_0x81e9x1e8 + "/" + _0x81e9x1e6);
	_0x81e9x1e9.createNewFile();
	var _0x81e9x1ea = new java.io.FileOutputStream(_0x81e9x1e9);
	var _0x81e9x1eb = android.net.http.AndroidHttpClient.newInstance("ModPE.downloadFile()").execute(new org.apache.http.client.methods.HttpGet(_0x81e9x1e7)).getEntity().writeTo(_0x81e9x1ea);
	_0x81e9x1ea.close()
}

function LoadBitmapFile(_0x81e9x1e8) {
	var _0x81e9x1ed = new android.graphics.BitmapFactory.Options();
	_0x81e9x1ed.inScaled = false;
	var _0x81e9x1ee = android.graphics.BitmapFactory.decodeFile(android.os.Environment.getExternalStorageDirectory().getAbsolutePath() + "/" + _0x81e9x1e8, _0x81e9x1ed);
	return _0x81e9x1ee
}
var ScrabBoxDropRarity = [];

function AddScrabBoxDrop(_0x81e9x1f1, _0x81e9x10, _0x81e9x1f2, _0x81e9x1f3) {
	if (!_0x81e9x1f3) {
		_0x81e9x1f3 = _0x81e9x1f2
	};
	var _0x81e9x1f4 = ScrabBoxDropRarity[ScrabBoxDropRarity.length - 1];
	var _0x81e9x1f5 = _0x81e9x1f1;
	if (_0x81e9x1f4) {
		_0x81e9x1f5 = _0x81e9x1f4[3] + _0x81e9x1f1
	};
	ScrabBoxDropRarity.push([_0x81e9x10, _0x81e9x1f2, _0x81e9x1f3, _0x81e9x1f5])
}
AddScrabBoxDrop(0.1, 264, 0);
AddScrabBoxDrop(1.8, 15, 0);
AddScrabBoxDrop(2.5, block_copper_ore, 0);
AddScrabBoxDrop(1.5, block_tin_ore, 0);
AddScrabBoxDrop(1.0, 14, 0);
AddScrabBoxDrop(1.0, item_dust_iron, 0);
AddScrabBoxDrop(0.8, item_dust_gold, 0);
AddScrabBoxDrop(1.2, item_dust_copper, 0);
AddScrabBoxDrop(1.2, item_dust_tin, 0);
AddScrabBoxDrop(3, 331, 0);
AddScrabBoxDrop(0.5, 348, 0);
AddScrabBoxDrop(5, 351, 0, 15);
AddScrabBoxDrop(2, 17, 0, 4);
AddScrabBoxDrop(2, 6, 0, 6);
AddScrabBoxDrop(2, item_rubber, 0);
AddScrabBoxDrop(0.4, item_uranium, 0);
AddScrabBoxDrop(0.07, item_iridium_chunk, 0);
AddScrabBoxDrop(2, 263, 0);
AddScrabBoxDrop(3, 260, 0);
AddScrabBoxDrop(2.1, 262, 0);
AddScrabBoxDrop(1, 354, 0);
AddScrabBoxDrop(3, 296, 0);
AddScrabBoxDrop(5, 280, 0);
AddScrabBoxDrop(3.5, 287, 0);
AddScrabBoxDrop(10, 3, 0);
AddScrabBoxDrop(3, 12, 0);
AddScrabBoxDrop(3, 13, 0);
AddScrabBoxDrop(4, 2, 0);

function getRecyclerItem() {
	var _0x81e9x159 = Math.random() * 100;
	var _0x81e9x1f7 = 0;
	for (var i in ScrabBoxDropRarity) {
		var _0x81e9x164 = ScrabBoxDropRarity[i];
		if (_0x81e9x159 >= _0x81e9x1f7 && _0x81e9x159 <= _0x81e9x164[3]) {
			var _0x81e9x16 = _0x81e9x164[1] + parseInt(Math.random() * (_0x81e9x164[2] - _0x81e9x164[1]));
			return [_0x81e9x164[0], _0x81e9x16]
		};
		_0x81e9x1f7 = _0x81e9x164[3]
	};
	return [item_scrab, 0]
}

function getBlockDestroyDrop(_0x81e9x10, _0x81e9x16) {
	if (_0x81e9x10 == 1 && _0x81e9x16 == 0) {
		return [4, 1, 0]
	};
	if (_0x81e9x10 == 2) {
		return [3, 1, 0]
	};
	if ((_0x81e9x10 > 7 && _0x81e9x10 < 12) || _0x81e9x10 == block_oil || _0x81e9x10 == block_oil2 || _0x81e9x10 == block_wild_hive) {
		return [0, 0, 0]
	};
	if (_0x81e9x10 == block_blended_dust_ore) {
		var _0x81e9x1f9 = [331, item_dust_gold, item_dust_iron, item_dust_copper, item_dust_tin][parseInt(Math.random() * 5)];
		return [_0x81e9x1f9, 5 + parseInt(Math.random() * 6), 0]
	};
	if (_0x81e9x10 == 13 && Math.random() < 10) {
		return [13, 1, 0]
	};
	if (_0x81e9x10 == 16) {
		return [263, 1, 0]
	};
	if (_0x81e9x10 == 17) {
		return [17, 1, _0x81e9x16 % 4]
	};
	if (_0x81e9x10 == 18) {
		return [0, 0, 0]
	};
	if (_0x81e9x10 == 20) {
		return [0, 0, 0]
	};
	if (_0x81e9x10 == 21) {
		return [351, parseInt(Math.random() * 3 + 4), 4]
	};
	if (_0x81e9x10 == 26) {
		return [355, 1, 0]
	};
	if (_0x81e9x10 == 30) {
		return [287, 1, 0]
	};
	if (_0x81e9x10 == 31 || _0x81e9x10 == 32) {
		return [0, 0, 0]
	};
	if (_0x81e9x10 == 43) {
		return [44, 2, _0x81e9x16 % 8]
	};
	if (_0x81e9x10 == 44) {
		return [44, 1, _0x81e9x16 % 8]
	};
	if (_0x81e9x10 == 51) {
		return [0, 0, 0]
	};
	if (_0x81e9x10 == 52) {
		return [0, 0, 0]
	};
	if (_0x81e9x10 == 56) {
		return [264, 1, 0]
	};
	if (_0x81e9x10 == 59) {
		return [0, 0, 0]
	};
	if (_0x81e9x10 == 60) {
		return [3, 1, 0]
	};
	if (_0x81e9x10 == 62) {
		return [61, 1, 0]
	};
	if (_0x81e9x10 == 63 || _0x81e9x10 == 68) {
		return [323, 1, 0]
	};
	if (_0x81e9x10 == 64) {
		return [0, 0, 0]
	};
	if (_0x81e9x10 == 73 || _0x81e9x10 == 74) {
		return [331, parseInt(Math.random() * 3 + 4), 0]
	};
	if (_0x81e9x10 == 78 || _0x81e9x10 == 79) {
		return [0, 0, 0]
	};
	if (_0x81e9x10 == 83) {
		return [338, 1, 0]
	};
	if (_0x81e9x10 == 89) {
		return [348, 4, 0]
	};
	if (_0x81e9x10 == 92) {
		return [0, 0, 0]
	};
	if (_0x81e9x10 == 97) {
		return [0, 0, 0]
	};
	if (_0x81e9x10 == 99 || _0x81e9x10 == 100 || _0x81e9x10 == 102) {
		return [0, 0, 0]
	};
	if (_0x81e9x10 == 104 || _0x81e9x10 == 105) {
		return 0
	};
	if (_0x81e9x10 == 110) {
		return [3, 1, 0]
	};
	if (_0x81e9x10 == 126) {
		return [0, 0, 0]
	};
	if (_0x81e9x10 == 127) {
		return [351, 3, 3]
	};
	if (_0x81e9x10 == 129) {
		return [388, 1, 0]
	};
	if (_0x81e9x10 == 141 || _0x81e9x10 == 142 || _0x81e9x10 == block_liquid_constone || _0x81e9x10 == block_constone) {
		return [0, 0, 0]
	};
	if (_0x81e9x10 == 157) {
		return [158, 2, _0x81e9x16]
	};
	if (_0x81e9x10 == 161) {
		return [0, 0, 0]
	};
	if (_0x81e9x10 == 162) {
		return [162, 1, _0x81e9x16 % 4]
	};
	if (_0x81e9x10 == 174) {
		return [0, 0, 0]
	};
	if (_0x81e9x10 == 153) {
		return [406, 1 + parseInt(Math.random() * 3), 0]
	};
	if (_0x81e9x10 == 243) {
		return [3, 1, 0]
	};
	if (_0x81e9x10 == 244) {
		return [0, 0, 0]
	};
	if (_0x81e9x10 == 246) {
		return [49, 1, 0]
	};
	if (_0x81e9x10 == block_hardened_block) {
		return [block_hardened_block, 1, _0x81e9x16]
	};
	if (_0x81e9x10 == block_uranium_ore) {
		return [item_uranium, 1, 0]
	};
	if (_0x81e9x10 == block_iridium_ore) {
		return [item_iridium_chunk, 1, 0]
	};
	if (_0x81e9x10 == block_copper_ore) {
		return [item_copper_ore, 1, 0]
	};
	if (_0x81e9x10 == block_tin_ore) {
		return [item_tin_ore, 1, 0]
	};
	return [_0x81e9x10, 1, _0x81e9x16]
}

function isBlockBreakable(_0x81e9x10) {
	var _0x81e9x1fb = [0, 7, 8, 9, 10, 11, 95];
	for (var i in _0x81e9x1fb) {
		if (_0x81e9x10 == _0x81e9x1fb[i]) {
			return false
		}
	};
	return true
}
var LiquidByItem = {};
var FullItemByLiquidAndEmpty = {};
var EmptyItemByFull = {};
var LiquidItemMap = [];

function AddItemWithLiquid(_0x81e9x201, _0x81e9x202, _0x81e9x203, _0x81e9x204) {
	LiquidByItem[_0x81e9x202 + ":" + _0x81e9x203] = _0x81e9x204;
	FullItemByLiquidAndEmpty[_0x81e9x201 + ":" + _0x81e9x204] = [_0x81e9x202, _0x81e9x203];
	EmptyItemByFull[_0x81e9x202 + ":" + _0x81e9x203] = _0x81e9x201;
	LiquidItemMap[_0x81e9x202 + ":" + _0x81e9x203] = 1;
	LiquidItemMap[_0x81e9x201 + ":" + 0] = 2
}

function CanItemInterractWithLiquids(_0x81e9x10, _0x81e9x16) {
	return LiquidItemMap[_0x81e9x10 + ":" + _0x81e9x16] || LiquidItemMap[_0x81e9x10 + ":-1"]
}

function IsEmptyLiquidItem(_0x81e9x10, _0x81e9x16) {
	return LiquidItemMap[_0x81e9x10 + ":" + _0x81e9x16] == 2 || LiquidItemMap[_0x81e9x10 + ":-1"] == 2
}

function IsFullLiquidItem(_0x81e9x10, _0x81e9x16) {
	return LiquidItemMap[_0x81e9x10 + ":" + _0x81e9x16] == 1 || LiquidItemMap[_0x81e9x10 + ":-1"] == 1
}

function GetFullItem(_0x81e9x201, _0x81e9x1a, _0x81e9x204) {
	if (_0x81e9x1a > 0) {
		return
	};
	var _0x81e9x16 = FullItemByLiquidAndEmpty[_0x81e9x201 + ":" + _0x81e9x204];
	if (_0x81e9x16) {
		_0x81e9x16[1] = Math.max(0, _0x81e9x16[1])
	};
	return _0x81e9x16
}

function GetLiquidByItem(_0x81e9x10, _0x81e9x16) {
	var _0x81e9x20a = LiquidByItem[_0x81e9x10 + ":" + _0x81e9x16];
	if (_0x81e9x20a) {
		return _0x81e9x20a
	} else {
		return LiquidByItem[_0x81e9x10 + ":-1"]
	}
}

function GetEmptyItemByFull(_0x81e9x10, _0x81e9x16) {
	var _0x81e9x20a = EmptyItemByFull[_0x81e9x10 + ":" + _0x81e9x16];
	if (_0x81e9x20a) {
		return _0x81e9x20a
	} else {
		return EmptyItemByFull[_0x81e9x10 + ":-1"]
	}
}
var LiquidRegistry = {
	AnimatedLiquids: [],
	LiquidNames: [],
	SetName: function(_0x81e9x20d, _0x81e9x17) {
		this.LiquidNames[_0x81e9x20d] = _0x81e9x17
	},
	CreateAnimation: function(_0x81e9x20d, _0x81e9x20e, _0x81e9x20f, _0x81e9x210, _0x81e9x211) {
		this.AnimatedLiquids[_0x81e9x20d] = {
			mask: _0x81e9x20e,
			intense: _0x81e9x211,
			bg: _0x81e9x20f,
			fg: _0x81e9x210
		}
	},
	CreateAllAnimations: function() {
		for (var _0x81e9x10 in this.AnimatedLiquids) {
			var _0x81e9x212 = this.AnimatedLiquids[_0x81e9x10];
			GUILiquidAnimator.CreateAnimation(_0x81e9x10, _0x81e9x212.mask, _0x81e9x212.bg, _0x81e9x212.fg, _0x81e9x212.intense, true)
		}
	},
	AddLiquidItem: AddItemWithLiquid,
	CanInterractWithLiquids: CanItemInterractWithLiquids,
	IsEmptyLiquidItem: IsEmptyLiquidItem,
	IsFullLiquidItem: IsFullLiquidItem,
	GetFullItem: GetFullItem,
	GetLiquidByItem: GetLiquidByItem,
	GetEmptyItem: GetEmptyItemByFull
};
AddItemWithLiquid(325, 325, 1, 1);
AddItemWithLiquid(325, 325, 8, 8);
AddItemWithLiquid(325, 325, 10, 10);
AddItemWithLiquid(325, item_oil_bucket, -1, 4);
AddItemWithLiquid(325, item_liquid_matter_bucket, -1, 7);
AddItemWithLiquid(325, item_biomass_bucket, -1, 6);
AddItemWithLiquid(325, item_fuel_bucket, -1, 5);
AddItemWithLiquid(item_empty_bottle, item_honey_bottle, -1, 2);
AddItemWithLiquid(item_empty_bottle, item_mead_bottle, -1, 3);
AddItemWithLiquid(item_cell_empty, item_cell_milk, -1, 1);
AddItemWithLiquid(item_cell_empty, item_cell_honey, -1, 2);
AddItemWithLiquid(item_cell_empty, item_cell_mead, -1, 3);
AddItemWithLiquid(item_cell_empty, item_cell_oil, -1, 4);
AddItemWithLiquid(item_cell_empty, item_cell_fuel, -1, 5);
AddItemWithLiquid(item_cell_empty, item_cell_biomass, -1, 6);
AddItemWithLiquid(item_cell_empty, item_cell_liquid_matter, -1, 7);
AddItemWithLiquid(item_cell_empty, item_cell_water, -1, 8);
AddItemWithLiquid(item_cell_empty, item_cell_lava, -1, 10);
LiquidRegistry.CreateAnimation(1, "mask_water", RGBColor(200, 200, 200), RGBColor(1, 1, 1), 0.3);
LiquidRegistry.CreateAnimation(2, "mask_water", RGBColor(200, 150, 0), RGBColor(1, 1, 0.5), 0.4);
LiquidRegistry.CreateAnimation(3, "mask_water", RGBColor(170, 100, 0), RGBColor(1, 1, 0), 0.4);
LiquidRegistry.CreateAnimation(4, "mask_water", RGBColor(20, 20, 20), RGBColor(1, 1, 1), 0.3);
LiquidRegistry.CreateAnimation(5, "mask_water", RGBColor(216, 224, 128), RGBColor(1, 1, 1), 0.2);
LiquidRegistry.CreateAnimation(6, "mask_water", RGBColor(20, 128, 0), RGBColor(0, 1, 0), 0.5);
LiquidRegistry.CreateAnimation(7, "mask_lava", RGBColor(100, 0, 130), RGBColor(1, 1, 1), 0.8);
LiquidRegistry.CreateAnimation(8, "mask_water", RGBColor(32, 72, 232), RGBColor(1, 1, 1), 0.3);
LiquidRegistry.CreateAnimation(10, "mask_lava", RGBColor(242, 32, 0), RGBColor(0, 1, 0), 1);

function getLiquidTypeAtCoords(_0x81e9x26, _0x81e9x27, _0x81e9x28) {
	var _0x81e9x10 = getTile(_0x81e9x26, _0x81e9x27, _0x81e9x28);
	var _0x81e9x16 = Level.getData(_0x81e9x26, _0x81e9x27, _0x81e9x28);
	var _0x81e9x173 = getMachine(_0x81e9x26, _0x81e9x27, _0x81e9x28);
	if (_0x81e9x173) {
		var _0x81e9x158 = getMachineType(_0x81e9x173);
		if (_0x81e9x158.isUsingLiquid() && _0x81e9x173.volume >= 1) {
			return _0x81e9x158.getLiquidType(_0x81e9x173)
		}
	};
	if (_0x81e9x16) {
		return 0
	};
	if (_0x81e9x10 == 8 || _0x81e9x10 == 9) {
		return 8
	};
	if (_0x81e9x10 == 10 || _0x81e9x10 == 11) {
		return 10
	};
	if (_0x81e9x10 == block_oil) {
		return 4
	};
	return 0
}

function pullBucketOfLiquid(_0x81e9x26, _0x81e9x27, _0x81e9x28) {
	var _0x81e9x10 = getTile(_0x81e9x26, _0x81e9x27, _0x81e9x28);
	var _0x81e9x16 = Level.getData(_0x81e9x26, _0x81e9x27, _0x81e9x28);
	var _0x81e9x173 = getMachine(_0x81e9x26, _0x81e9x27, _0x81e9x28);
	if (_0x81e9x173) {
		var _0x81e9x158 = getMachineType(_0x81e9x173);
		if (_0x81e9x158.isUsingLiquid()) {
			if (_0x81e9x173.volume >= 1) {
				_0x81e9x173.volume--;
				return _0x81e9x158.getLiquidType(_0x81e9x173)
			}
		}
	};
	if (_0x81e9x16 > 0) {
		return 0
	};
	if (_0x81e9x10 == 8 || _0x81e9x10 == 9) {
		setTile(_0x81e9x26, _0x81e9x27, _0x81e9x28, 0);
		return 8
	};
	if (_0x81e9x10 == block_oil) {
		setTile(_0x81e9x26, _0x81e9x27, _0x81e9x28, 0);
		return 4
	};
	if (_0x81e9x10 == 10 || _0x81e9x10 == 11) {
		setTile(_0x81e9x26, _0x81e9x27, _0x81e9x28, 0);
		return 10
	};
	return 0
}

function barrel_getBucket(_0x81e9x216) {
	if (!_0x81e9x216) {
		return LIQUID_NONE
	};
	if (!_0x81e9x216.liquid || _0x81e9x216.volume < 0) {
		return 0
	};
	_0x81e9x216.volume--;
	return _0x81e9x216.liquid
}

function barrel_addBucket(_0x81e9x216, _0x81e9x204) {
	if (!_0x81e9x216) {
		return false
	};
	var _0x81e9x158 = getMachineType(_0x81e9x216);
	if (!_0x81e9x158.isUsingLiquid()) {
		return false
	};
	var _0x81e9x218 = _0x81e9x158.getLiquidType(_0x81e9x216);
	var _0x81e9x219 = _0x81e9x158.getMaxVolume(_0x81e9x216);
	if (_0x81e9x216.volume + 1 > _0x81e9x219) {
		return false
	};
	if (_0x81e9x204 != _0x81e9x218 && _0x81e9x218) {
		return false
	};
	_0x81e9x216.volume++;
	_0x81e9x216.liquid = _0x81e9x204;
	return true
}

function isBucketLiquid(_0x81e9x204) {
	return GetFullItem(325, 0, _0x81e9x204) > 0
}

function barrel_itemTap(_0x81e9x216, _0x81e9x10, _0x81e9x16) {
	if (!_0x81e9x216 || !IsEmptyLiquidItem(_0x81e9x10, _0x81e9x16)) {
		return false
	};
	var _0x81e9x21c = GetFullItem(_0x81e9x10, _0x81e9x16, _0x81e9x216.liquid);
	if (!_0x81e9x216.liquid || _0x81e9x216.volume < 1) {
		clientMessage(translate("no liquid here"));
		return true
	};
	if (!_0x81e9x21c) {
		clientMessage(getItemNameWithTranslation(_0x81e9x10, _0x81e9x16, true) + " " + translate("cant contain this liquid"));
		return true
	};
	addItemInventory(_0x81e9x21c[0], 1, _0x81e9x21c[1]);
	setPlayerItem(_0x81e9x10, Player.getCarriedItemCount() - 1, _0x81e9x16);
	_0x81e9x216.volume--;
	if (_0x81e9x216.volume <= 0) {
		_0x81e9x216.liquid = 0
	};
	return true
}

function barrel_bottleTap(_0x81e9x216, _0x81e9x10, _0x81e9x16) {
	if (_0x81e9x10 == item_empty_bottle) {
		var _0x81e9x21e = 1;
		if (!_0x81e9x216.liquid) {
			clientMessage("no liquid here");
			return
		};
		if (_0x81e9x216.liquid != 2 && _0x81e9x216.liquid != 3) {
			clientMessage("cant put this in a bottle");
			return
		};
		if (_0x81e9x216.liquid == 2) {
			_0x81e9x21e = item_honey_bottle
		};
		if (_0x81e9x216.liquid == 3) {
			_0x81e9x21e = item_mead_bottle
		};
		Entity.setCarriedItem(getPlayerEnt(), _0x81e9x21e, 1, 0);
		_0x81e9x216.volume--
	};
	if (_0x81e9x10 == item_honey_bottle) {
		if (_0x81e9x216.volume > 15) {
			clientMessage("barrel is full");
			return
		};
		if (_0x81e9x216.liquid == 2 || _0x81e9x216.liquid == 0) {
			Entity.setCarriedItem(getPlayerEnt(), item_empty_bottle, 1, 0);
			_0x81e9x216.liquid = 2;
			_0x81e9x216.volume++
		} else {
			clientMessage("here is another liquid")
		}
	};
	if (_0x81e9x10 == item_mead_bottle) {
		if (_0x81e9x216.volume > 15) {
			clientMessage("barrel is full");
			return
		};
		if (_0x81e9x216.liquid == 3 || _0x81e9x216.liquid == 0) {
			Entity.setCarriedItem(getPlayerEnt(), item_empty_bottle, 1, 0);
			_0x81e9x216.liquid = 3;
			_0x81e9x216.volume++
		} else {
			clientMessage("here is another liquid")
		}
	}
}

function barrel_bucketTap(_0x81e9x216, _0x81e9x16) {
	if (!_0x81e9x216) {
		return
	};
	if (_0x81e9x216.srcBarrel != _0x81e9x216) {
		barrel_bucketTap(_0x81e9x216.srcBarrel, _0x81e9x16);
		return
	};
	if (_0x81e9x16 == 8 || _0x81e9x16 == 10 || _0x81e9x16 == 1) {
		if (_0x81e9x16 != _0x81e9x216.liquid && _0x81e9x216.liquid) {
			clientMessage("another liquid in this barrel")
		} else {
			if (_0x81e9x216.volume >= _0x81e9x216.maxVolume) {
				clientMessage("barrel is full")
			} else {
				var _0x81e9x220 = Player.getCarriedItemCount();
				var _0x81e9x221 = 0;
				if (_0x81e9x220 > 1) {
					id = 325
				};
				Entity.setCarriedItem(getPlayerEnt(), 325, _0x81e9x220 - 1, 0);
				addItemInventory(325, 1, 0);
				_0x81e9x216.volume++;
				_0x81e9x216.liquid = _0x81e9x16
			}
		}
	} else {
		if (_0x81e9x16 == 0) {
			if (!_0x81e9x216.liquid || _0x81e9x216.volume < 1) {
				clientMessage("no liquid here")
			} else {
				if (!isBucketLiquid(_0x81e9x216.liquid)) {
					clientMessage("cant put this in a bucket")
				} else {
					var _0x81e9x220 = Player.getCarriedItemCount();
					var _0x81e9x221 = 0;
					var _0x81e9x1a = _0x81e9x216.liquid;
					_0x81e9x221 = 325;
					if (_0x81e9x1a == 4) {
						_0x81e9x221 = item_oil_bucket;
						_0x81e9x1a = 0
					};
					if (_0x81e9x1a == 5) {
						_0x81e9x221 = item_fuel_bucket;
						_0x81e9x1a = 0
					};
					if (_0x81e9x1a == 6) {
						_0x81e9x221 = item_biomass_bucket;
						_0x81e9x1a = 0
					};
					if (_0x81e9x1a == 7) {
						_0x81e9x221 = item_liquid_matter_bucket;
						_0x81e9x1a = 0
					};
					Entity.setCarriedItem(getPlayerEnt(), 325, _0x81e9x220 - 1, 0);
					addItemInventory(_0x81e9x221, 1, _0x81e9x1a);
					_0x81e9x216.volume--
				}
			}
		}
	};
	preventDefault()
}

function getLiquidBucketFromInventory(_0x81e9x204) {
	for (var _0x81e9x5b = 9; _0x81e9x5b < 45; _0x81e9x5b++) {
		var _0x81e9x10 = Player.getInventorySlot(_0x81e9x5b);
		var _0x81e9x16 = Player.getInventorySlotData(_0x81e9x5b);
		var _0x81e9x13 = Player.getInventorySlotCount(_0x81e9x5b);
		if (GetLiquidByItem(_0x81e9x10, _0x81e9x16) == _0x81e9x204) {
			var _0x81e9x201 = GetEmptyItemByFull(_0x81e9x10, _0x81e9x16);
			_0x81e9x13--;
			if (_0x81e9x13 < 1) {
				_0x81e9x10 = _0x81e9x13 = _0x81e9x16 = 0
			};
			net.zhuoweizhang.mcpelauncher.ScriptManager.nativeSetInventorySlot(_0x81e9x5b, _0x81e9x10, _0x81e9x13, _0x81e9x16);
			addItemInventory(_0x81e9x201, 1, 0);
			return true
		}
	};
	return false
}
var DEFAULT_DUMP_SEPARATOR_STRING = "\n----------------------------------------------------------------------------\n\n";

function QuickFileWrite(_0x81e9x1e8, _0x81e9x1de, _0x81e9x1ba) {
	_0x81e9x1e8 = android.os.Environment.getExternalStorageDirectory().getAbsolutePath() + "/" + _0x81e9x1e8;
	var _0x81e9x225 = new java.io.PrintWriter(new java.io.BufferedWriter(new java.io.FileWriter(_0x81e9x1e8, !(!_0x81e9x1ba))));
	_0x81e9x225.write(_0x81e9x1de);
	_0x81e9x225.close();
	return _0x81e9x1e8
}

function DumpAllItemsAndBlocks() {
	var _0x81e9x227 = "";
	for (var _0x81e9x10 in NamesToTranslate) {
		var _0x81e9x17 = NamesToTranslate[_0x81e9x10];
		var _0x81e9x228 = _0x81e9x17.split(" ");
		_0x81e9x17 = "";
		for (var i in _0x81e9x228) {
			_0x81e9x17 += "_" + _0x81e9x228[i]
		};
		if (_0x81e9x10 > 255) {
			_0x81e9x17 = "item" + _0x81e9x17
		} else {
			_0x81e9x17 = "block" + _0x81e9x17
		};
		var _0x81e9x229 = _0x81e9x10;
		_0x81e9x227 += _0x81e9x17 + "=" + _0x81e9x229 + "\n"
	};
	QuickFileWrite("FactorizationIDDump.txt", _0x81e9x227)
}
var FreeIDFounderData = {};

function ResetFreeIDFounder() {
	FreeIDFounderData = {}
}

function FindNearestFreeIDToCurrent(_0x81e9x10) {
	var _0x81e9x22d = 0;
	while (Item.getName(_0x81e9x10 + _0x81e9x22d, 0, true) || FreeIDFounderData[_0x81e9x10 + _0x81e9x22d] || _0x81e9x10 + _0x81e9x22d == 95) {
		_0x81e9x22d++
	};
	var _0x81e9x22e = 0;
	while (Item.getName(_0x81e9x10 - _0x81e9x22e, 0, true) || FreeIDFounderData[_0x81e9x10 - _0x81e9x22e] || _0x81e9x10 - _0x81e9x22e == 95) {
		_0x81e9x22e++
	};
	var _0x81e9x22f = -1;
	var _0x81e9x230 = 0;
	var _0x81e9x231 = 255;
	if (_0x81e9x10 > 255) {
		_0x81e9x230 = 256;
		_0x81e9x231 = 2047
	};
	if (_0x81e9x22e <= _0x81e9x22d && _0x81e9x10 - _0x81e9x22e >= _0x81e9x230) {
		_0x81e9x22f = _0x81e9x10 - _0x81e9x22e
	};
	if (_0x81e9x22d <= _0x81e9x22e && _0x81e9x10 + _0x81e9x22d <= _0x81e9x231) {
		_0x81e9x22f = _0x81e9x10 + _0x81e9x22d
	};
	FreeIDFounderData[_0x81e9x22f] = true;
	return _0x81e9x22f
}

function ShowTotalBlockIDsLeft() {
	var _0x81e9x13 = 0;
	for (var i = 1; i < 256; i++) {
		if (!Item.isValidItem(i, 0)) {
			_0x81e9x13++
		}
	};
	showUserAlertDialog("full block ids left: " + _0x81e9x13)
}

function getCppAddonArrayForUIDs(_0x81e9x234) {
	var _0x81e9x162 = "{\n";
	for (var i in _0x81e9x234) {
		var _0x81e9x29 = _0x81e9x234[i];
		var _0x81e9x20 = UnlimitedAPI.BlockGroups[_0x81e9x29];
		if (_0x81e9x20) {
			var _0x81e9x235 = [];
			for (var i in _0x81e9x20) {
				_0x81e9x235.push("{" + _0x81e9x20[i].id + ", " + _0x81e9x20[i].data + "}")
			};
			_0x81e9x162 += "\x09" + _0x81e9x235.join(", ") + ", // " + UnlimitedAPI.NameByPointer[_0x81e9x29] + "\n"
		}
	};
	_0x81e9x162 += "};\n";
	return _0x81e9x162
}

function DumpAllUIDs() {
	var _0x81e9x237 = "// ALL UIDS: ";
	for (var _0x81e9x29 in UnlimitedAPI.BlockGroups) {
		var _0x81e9x17 = UnlimitedAPI.NameByPointer[_0x81e9x29];
		_0x81e9x237 += _0x81e9x17 + ": UID = " + _0x81e9x29 + "\n";
		for (var _0x81e9x16 in UnlimitedAPI.BlockGroups[_0x81e9x29]) {
			var _0x81e9x21 = UnlimitedAPI.GetReal(_0x81e9x29, _0x81e9x16);
			_0x81e9x237 += "\x09" + _0x81e9x16 + " - " + [_0x81e9x21.id, _0x81e9x21.data] + "\n"
		}
	};
	_0x81e9x237 += DEFAULT_DUMP_SEPARATOR_STRING;
	_0x81e9x237 += "// WIRE CONNECT ARRAY c++\n";
	var _0x81e9x238 = [];
	for (var i in MachineTypes) {
		var _0x81e9x158 = MachineTypes[i];
		if (_0x81e9x158.isUsingEnergy()) {
			_0x81e9x238.push(_0x81e9x158.id)
		}
	};
	_0x81e9x238.push(block_wire);
	_0x81e9x237 += getCppAddonArrayForUIDs(_0x81e9x238);
	_0x81e9x237 += DEFAULT_DUMP_SEPARATOR_STRING;
	_0x81e9x237 += "// PIPE CONNECT ARRAY c++\n";
	var _0x81e9x239 = [];
	for (var i in MachineTypes) {
		var _0x81e9x158 = MachineTypes[i];
		if (_0x81e9x158.isUsingLiquid() || _0x81e9x158.getContainerId() >= 0) {
			_0x81e9x239.push(_0x81e9x158.id)
		}
	};
	_0x81e9x239.push(block_transporting_pipe);
	_0x81e9x239.push(block_golden_pipe);
	_0x81e9x239.push(block_obsidian_pipe);
	_0x81e9x239.push(block_pump);
	_0x81e9x239.push(block_valve_pipe);
	_0x81e9x239.push(block_valve_pipe_opaque);
	_0x81e9x239.push(block_teleport_pipe_anim);
	_0x81e9x239.push(54);
	_0x81e9x237 += getCppAddonArrayForUIDs(_0x81e9x239);
	return QuickFileWrite("factorization_UID_dump.txt", _0x81e9x237)
}

function VectorColor(_0x81e9x23b) {
	this.b = _0x81e9x23b & 0xFF;
	this.g = (_0x81e9x23b >> 8) & 0xFF;
	this.r = (_0x81e9x23b >> 16) & 0xFF;
	this.add = function(_0x81e9x23b) {
		this.r += _0x81e9x23b.r;
		this.g += _0x81e9x23b.g;
		this.b += _0x81e9x23b.b;
		return this
	};
	this.set = function(_0x81e9x159, _0x81e9x23c, _0x81e9x173) {
		this.r = _0x81e9x159;
		this.g = _0x81e9x23c;
		this.b = _0x81e9x173;
		return this
	};
	this.mix = function(_0x81e9x23b, _0x81e9x1c8) {
		this.r = _0x81e9x23b.r * _0x81e9x1c8 + this.r * (1 - _0x81e9x1c8);
		this.g = _0x81e9x23b.r * _0x81e9x1c8 + this.r * (1 - _0x81e9x1c8);
		this.b = _0x81e9x23b.r * _0x81e9x1c8 + this.r * (1 - _0x81e9x1c8);
		return this
	};
	this.get = function() {
		return android.graphics.Color.rgb(Math.max(0, Math.min(255, parseInt(this.r))), Math.max(0, Math.min(255, parseInt(this.g))), Math.max(0, Math.min(255, parseInt(this.b))))
	}
}

function RGBColor(_0x81e9x159, _0x81e9x23c, _0x81e9x173) {
	return (new VectorColor()).set(_0x81e9x159, _0x81e9x23c, _0x81e9x173)
}

function NativeColor(_0x81e9x15a) {
	return new VectorColor(_0x81e9x15a)
}
var FLAG = {
	path: "/games/com.mojang/Factorization/flags",
	mkdir: function() {
		var _0x81e9x240 = new java.io.File(android.os.Environment.getExternalStorageDirectory().getAbsolutePath() + this.path);
		_0x81e9x240.mkdirs()
	},
	set: function(_0x81e9x17) {
		var _0x81e9x1e8 = android.os.Environment.getExternalStorageDirectory().getAbsolutePath() + this.path + "/" + _0x81e9x17;
		var _0x81e9x1e9 = new java.io.File(_0x81e9x1e8);
		_0x81e9x1e9.createNewFile()
	},
	get: function(_0x81e9x17) {
		var _0x81e9x1e8 = android.os.Environment.getExternalStorageDirectory().getAbsolutePath() + this.path + "/" + _0x81e9x17;
		var _0x81e9x1e9 = new java.io.File(_0x81e9x1e8);
		return _0x81e9x1e9.exists()
	}
};
FLAG.mkdir();
var LoadingGUIValues = {
	Win: null,
	View: null,
	Thread: null,
	Canvas: null,
	Bitmap: null,
	BmpLayout: null,
	BmpIcon: null
};

function OpenLoadingIndicatorGUI() {
	if (LoadingGUIValues.Win != null) {
		return
	};
	LoadingGUIValues.BmpLayout = LoadBitmapFromAssets("loading_layout.png");
	LoadingGUIValues.BmpIcon = LoadBitmapFromAssets("wrench_0.png");
	if (!LoadingGUIValues.BmpLayout || !LoadingGUIValues.BmpIcon) {
		print("missing some gui files...");
		return
	};
	runAsGUI(function() {
		var _0x81e9x1d7 = getMcContext();
		LoadingGUIValues.View = new android.widget.ImageView(_0x81e9x1d7);
		LoadingGUIValues.Win = new android.widget.PopupWindow(_0x81e9x1d7);
		var _0x81e9x9 = android.widget.LinearLayout.LayoutParams.WRAP_CONTENT;
		LoadingGUIValues.Win.setContentView(LoadingGUIValues.View);
		LoadingGUIValues.Win.setHeight(160);
		LoadingGUIValues.Win.setWidth(160);
		LoadingGUIValues.Win.setBackgroundDrawable(null);
		LoadingGUIValues.Win.showAtLocation(_0x81e9x1d7.getWindow().getDecorView(), android.view.Gravity.TOP | android.view.Gravity.RIGHT, 0, 0)
	});
	LoadingGUIValues.Thread = new java.lang.Thread({
		run: function() {
			try {
				LoadingGUIValues.BmpLayout = android.graphics.Bitmap.createScaledBitmap(LoadingGUIValues.BmpLayout, 128, 128, false);
				LoadingGUIValues.BmpIcon = android.graphics.Bitmap.createScaledBitmap(LoadingGUIValues.BmpIcon, 96, 96, false);
				LoadingGUIValues.Bitmap = android.graphics.Bitmap.createBitmap(128, 128, android.graphics.Bitmap.Config.ARGB_8888);
				LoadingGUIValues.Canvas = new android.graphics.Canvas(LoadingGUIValues.Bitmap);
				var _0x81e9x243 = 0;
				var _0x81e9x244 = new android.graphics.Matrix();
				while (LoadingGUIValues.Thread) {
					YieldForATime(100);
					_0x81e9x244.reset();
					_0x81e9x244.postRotate(parseInt(java.lang.System.currentTimeMillis() * 0.15) % 360, 48, 48);
					_0x81e9x244.postTranslate(16, 16);
					_0x81e9x243++;
					LoadingGUIValues.Canvas.drawBitmap(LoadingGUIValues.BmpLayout, 0, 0, null);
					LoadingGUIValues.Canvas.drawBitmap(LoadingGUIValues.BmpIcon, _0x81e9x244, null);
					runAsGUI(function() {
						LoadingGUIValues.View.setImageBitmap(LoadingGUIValues.Bitmap)
					})
				};
				LoadingGUIValues.Thread = null;
				LoadingGUIValues.BmpLayout = null;
				LoadingGUIValues.BmpIcon = null;
				LoadingGUIValues.View = null
			} catch (e) {
				print("GUI ERROR: " + e)
			}
		}
	});
	LoadingGUIValues.Thread.setPriority(1);
	LoadingGUIValues.Thread.start()
}

function CloseLoadingIndicatorGUI() {
	runAsGUI(function() {
		if (LoadingGUIValues.Win != null) {
			LoadingGUIValues.Win.dismiss();
			LoadingGUIValues.Win = null
		}
	})
}
OpenLoadingIndicatorGUI();
var ToolAPI = {};
var weapon = {};
var Elweapon = {};
var drills = {};
var chainsaws = {};
var swords = [];
var shovels = {};
var pickaxes = {};
var axes = {};
var hoes = [];
var player;
ToolAPI.weapon_tick = 0;
ToolAPI.getMiningLevel = function() {
	var _0x81e9x251 = getCarriedItem();
	var _0x81e9x252 = pickaxes[_0x81e9x251];
	if (_0x81e9x252) {
		return _0x81e9x252[2] || 0
	};
	if (_0x81e9x251 == 270) {
		return 0
	};
	if (_0x81e9x251 == 274) {
		return 1
	};
	if (_0x81e9x251 == 257) {
		return 2
	};
	if (_0x81e9x251 == 278) {
		return 3
	};
	return -1
};
ToolAPI.addArmorRecipe = function(_0x81e9x10, _0x81e9x253) {
	Item.addShapedRecipe(_0x81e9x10, 1, 0, ["   ", "aaa", "a a"], ["a", _0x81e9x253, 0]);
	Item.addShapedRecipe(_0x81e9x10 + 1, 1, 0, ["a a", "aaa", "aaa"], ["a", _0x81e9x253, 0]);
	Item.addShapedRecipe(_0x81e9x10 + 2, 1, 0, ["aaa", "a a", "a a"], ["a", _0x81e9x253, 0]);
	Item.addShapedRecipe(_0x81e9x10 + 3, 1, 0, ["   ", "a a", "a a"], ["a", _0x81e9x253, 0])
};
ToolAPI.addToolsRecipe = function(_0x81e9x10, _0x81e9x253, _0x81e9x254, _0x81e9x255) {
	Item.addShapedRecipe(_0x81e9x10.sword, 1, 0, [" a ", " a ", " b "], ["a", _0x81e9x253, 0, "b", 280, 0]);
	Item.addShapedRecipe(_0x81e9x10.shovel, 1, 0, [" a ", " b ", " b "], ["a", _0x81e9x253, 0, "b", 280, 0]);
	Item.addShapedRecipe(_0x81e9x10.pickaxe, 1, 0, ["aaa", " b ", " b "], ["a", _0x81e9x253, 0, "b", 280, 0]);
	Item.addShapedRecipe(_0x81e9x10.axe, 1, 0, ["aa ", "ab ", " b "], ["a", _0x81e9x253, 0, "b", 280, 0]);
	Item.addShapedRecipe(_0x81e9x10.hoe, 1, 0, ["aa ", " b ", " b "], ["a", _0x81e9x253, 0, "b", 280, 0]);
	if (_0x81e9x254) {
		Item.addFurnaceRecipe(_0x81e9x254.sword, _0x81e9x253);
		Item.addShapedRecipe(_0x81e9x255, 1, 0, [" a", " a"], ["a", _0x81e9x254.shovel, 0]);
		Item.addFurnaceRecipe(_0x81e9x254.pickaxe, _0x81e9x253);
		Item.addFurnaceRecipe(_0x81e9x254.axe, _0x81e9x253);
		Item.addFurnaceRecipe(_0x81e9x254.hoe, _0x81e9x253)
	}
};
ToolAPI.addInstrumentsRecipe = function(_0x81e9x10, _0x81e9x253, _0x81e9x254, _0x81e9x255) {
	if (_0x81e9x254) {
		_0x81e9x254 = {
			sword: _0x81e9x254,
			shovel: _0x81e9x254 + 1,
			pickaxe: _0x81e9x254 + 2,
			axe: _0x81e9x254 + 3,
			hoe: _0x81e9x254 + 4
		}
	};
	ToolAPI.addToolsRecipe({
		sword: _0x81e9x10,
		shovel: _0x81e9x10 + 1,
		pickaxe: _0x81e9x10 + 2,
		axe: _0x81e9x10 + 3,
		hoe: _0x81e9x10 + 4
	}, _0x81e9x253, _0x81e9x254, _0x81e9x255)
};
ToolAPI.destroyItem = function(_0x81e9x16b, _0x81e9x256) {
	itemid = Player.getCarriedItem();
	itemData = Player.getCarriedItemData();
	if (itemData + _0x81e9x16b > Item.getMaxDamage(itemid)) {
		Level.playSoundEnt(player, "random.break", 1, 1);
		Entity.setCarriedItem(player, _0x81e9x256, 1, 0)
	} else {
		var _0x81e9x5b = Player.getSelectedSlotId();
		var _0x81e9x17 = Player.getItemCustomName(_0x81e9x5b);
		var _0x81e9x257 = Player.getEnchantments(_0x81e9x5b);
		var _0x81e9x258 = 0;
		for (var _0x81e9x259 in _0x81e9x257) {
			if (_0x81e9x257[_0x81e9x259].type == Enchantment.UNBREAKING) {
				_0x81e9x258 = _0x81e9x257[_0x81e9x259].level
			}
		};
		if (Math.random() * 100 < 100 / (_0x81e9x258 + 1)) {
			Entity.setCarriedItem(player, itemid, 1, itemData + _0x81e9x16b);
			if (_0x81e9x17) {
				Player.setItemCustomName(_0x81e9x5b, _0x81e9x17)
			};
			for (var _0x81e9x259 in _0x81e9x257) {
				Player.enchant(_0x81e9x5b, _0x81e9x257[_0x81e9x259].type, _0x81e9x257[_0x81e9x259].level)
			}
		}
	}
};
ToolAPI.setDrill = function(_0x81e9x25a) {
	Elweapon[_0x81e9x25a.ID] = [_0x81e9x25a.damage, false];
	drills[_0x81e9x25a.ID] = [_0x81e9x25a.speed, _0x81e9x25a.lvl];
	Item.setMaxDamage(_0x81e9x25a.ID, _0x81e9x25a.dmg);
	Item.setHandEquipped(_0x81e9x25a.ID, true)
};
ToolAPI.setChainsaw = function(_0x81e9x25b) {
	chainsaws[_0x81e9x25b.ID] = [_0x81e9x25b.damage, _0x81e9x25b.speed];
	Item.setMaxDamage(_0x81e9x25b.ID, _0x81e9x25b.dmg);
	Item.setHandEquipped(_0x81e9x25b.ID, true)
};
ToolAPI.addTools = function(_0x81e9x25c) {
	if (!_0x81e9x25c.ID2) {
		_0x81e9x25c.ID2 = {}
	};
	ToolAPI.setSword({
		ID: _0x81e9x25c.ID.sword,
		dmg: _0x81e9x25c.dmg,
		damage: _0x81e9x25c.damage,
		enchant: _0x81e9x25c.enchant,
		ID2: _0x81e9x25c.ID2.sword
	});
	ToolAPI.setShovel({
		ID: _0x81e9x25c.ID.shovel,
		dmg: _0x81e9x25c.dmg,
		damage: _0x81e9x25c.damage - 2,
		speed: _0x81e9x25c.speed,
		enchant: _0x81e9x25c.enchant,
		ID2: _0x81e9x25c.ID2.shovel
	});
	ToolAPI.setPickaxe({
		ID: _0x81e9x25c.ID.pickaxe,
		dmg: _0x81e9x25c.dmg,
		damage: _0x81e9x25c.damage - 2,
		lvl: _0x81e9x25c.lvl,
		speed: _0x81e9x25c.speed * 10 / 3,
		enchant: _0x81e9x25c.enchant,
		ID2: _0x81e9x25c.ID2.pickaxe
	});
	ToolAPI.setAxe({
		ID: _0x81e9x25c.ID.axe,
		dmg: _0x81e9x25c.dmg,
		damage: _0x81e9x25c.damage - 1,
		speed: _0x81e9x25c.speed,
		enchant: _0x81e9x25c.enchant,
		ID2: _0x81e9x25c.ID2.axe
	});
	ToolAPI.setHoe({
		ID: _0x81e9x25c.ID.hoe,
		dmg: _0x81e9x25c.dmg,
		damage: _0x81e9x25c.damage - 2,
		ID2: _0x81e9x25c.ID2.hoe
	})
};
ToolAPI.addInstruments = function(_0x81e9x25c) {
	if (_0x81e9x25c.ID) {
		_0x81e9x25c.ID = {
			sword: _0x81e9x25c.ID,
			shovel: _0x81e9x25c.ID + 1,
			pickaxe: _0x81e9x25c.ID + 2,
			axe: _0x81e9x25c.ID + 3,
			hoe: _0x81e9x25c.ID + 4
		}
	};
	if (_0x81e9x25c.ID2) {
		_0x81e9x25c.ID2 = {
			sword: _0x81e9x25c.ID2,
			shovel: _0x81e9x25c.ID2 + 1,
			pickaxe: _0x81e9x25c.ID2 + 2,
			axe: _0x81e9x25c.ID2 + 3,
			hoe: _0x81e9x25c.ID2 + 4
		}
	};
	ToolAPI.addTools(_0x81e9x25c)
};
ToolAPI.setSword = function(_0x81e9x25d) {
	weapon[_0x81e9x25d.ID] = [_0x81e9x25d.damage, _0x81e9x25d.ID2, _0x81e9x25d.fire];
	swords[_0x81e9x25d.ID] = [_0x81e9x25d.ID2];
	Item.setMaxDamage(_0x81e9x25d.ID, _0x81e9x25d.dmg);
	Item.setHandEquipped(_0x81e9x25d.ID, true);
	Item.setEnchantType(_0x81e9x25d.ID, EnchantType.weapon, _0x81e9x25d.enchant)
};
ToolAPI.setShovel = function(shovel) {
	weapon[shovel.ID] = [shovel.damage, shovel.ID2, shovel.fire];
	shovels[shovel.ID] = [shovel.speed, shovel.ID2];
	Item.setMaxDamage(shovel.ID, shovel.dmg);
	Item.setHandEquipped(shovel.ID, true);
	Item.setEnchantType(shovel.ID, EnchantType.shovel, shovel.enchant)
};
ToolAPI.setPickaxe = function(_0x81e9x252) {
	weapon[_0x81e9x252.ID] = [_0x81e9x252.damage, _0x81e9x252.ID2, _0x81e9x252.fire];
	pickaxes[_0x81e9x252.ID] = [_0x81e9x252.speed, _0x81e9x252.ID2, _0x81e9x252.lvl];
	Item.setMaxDamage(_0x81e9x252.ID, _0x81e9x252.dmg);
	Item.setHandEquipped(_0x81e9x252.ID, true);
	Item.setEnchantType(_0x81e9x252.ID, EnchantType.pickaxe, _0x81e9x252.enchant)
};
ToolAPI.setAxe = function(_0x81e9x25f) {
	weapon[_0x81e9x25f.ID] = [_0x81e9x25f.damage, _0x81e9x25f.ID2, _0x81e9x25f.fire];
	axes[_0x81e9x25f.ID] = [_0x81e9x25f.speed, _0x81e9x25f.ID2];
	Item.setMaxDamage(_0x81e9x25f.ID, _0x81e9x25f.dmg);
	Item.setHandEquipped(_0x81e9x25f.ID, true);
	Item.setEnchantType(_0x81e9x25f.ID, EnchantType.axe, _0x81e9x25f.enchant)
};
ToolAPI.setHoe = function(_0x81e9x260) {
	weapon[_0x81e9x260.ID] = [_0x81e9x260.damage, _0x81e9x260.ID2, _0x81e9x260.fire];
	hoes = [_0x81e9x260.ID, _0x81e9x260.ID2];
	Item.setMaxDamage(_0x81e9x260.ID, _0x81e9x260.dmg);
	Item.setHandEquipped(_0x81e9x260.ID, true)
};

function random(_0x81e9x262, _0x81e9x263) {
	return Math.floor(Math.random() * (_0x81e9x263 - _0x81e9x262 + 1)) + _0x81e9x262
}

function drop(_0x81e9x26, _0x81e9x27, _0x81e9x28, _0x81e9x10, _0x81e9x13, _0x81e9x16) {
	for (var _0x81e9x259 = 1; _0x81e9x259 <= _0x81e9x13; _0x81e9x259++) {
		Level.dropItem(_0x81e9x26 + 0.5, _0x81e9x27 + 0.5, _0x81e9x28 + 0.5, 0, _0x81e9x10, 1, _0x81e9x16)
	}
}
Block.setDestroyTime_ = Block.setDestroyTime;
Block.setDestroyTime = function(_0x81e9x1b, _0x81e9x1bd) {
	Block.setDestroyTime_(_0x81e9x1b, Math.floor(_0x81e9x1bd * 100) / 100)
};
var itemid;
var itemData;
var blockid;
var blockData;

function ToolAPI_attackHook(_0x81e9x1c7, _0x81e9x26a) {
	itemid = Player.getCarriedItem();
	itemData = Player.getCarriedItemData();
	var _0x81e9x26b = Entity.getHealth(_0x81e9x26a);
	if (_0x81e9x26b <= 1 || ToolAPI.weapon_tick < 10 || _0x81e9x26b > 1400) {
		return
	};
	ToolAPI.weapon_tick = 0;
	if (weapon[itemid]) {
		ToolAPI.destroyItem(1, weapon[itemid][1]);
		var _0x81e9x16b = weapon[itemid][0];
		if (_0x81e9x26b > _0x81e9x16b - 2) {
			Entity.setHealth(_0x81e9x26a, _0x81e9x26b - _0x81e9x16b + 2)
		} else {
			Entity.setHealth(_0x81e9x26a, 1)
		};
		if (weapon[itemid][2]) {
			Entity.setFireTicks(_0x81e9x26a, weapon[itemid][2])
		};
		return
	};
	if (Elweapon[itemid] && itemData < Item.getMaxDamage(itemid)) {
		Entity.setCarriedItem(_0x81e9x1c7, itemid, 1, itemData + 1);
		var _0x81e9x16b = Elweapon[itemid][0];
		if (_0x81e9x26b > _0x81e9x16b - 2) {
			Entity.setHealth(_0x81e9x26a, _0x81e9x26b - _0x81e9x16b + 2)
		} else {
			Entity.setHealth(_0x81e9x26a, 1)
		};
		if (Elweapon[itemid][1]) {
			Entity.setFireTicks(_0x81e9x26a, Elweapon[itemid][1])
		};
		return
	};
	if (chainsaws[itemid] && itemData < Item.getMaxDamage(itemid)) {
		Entity.setCarriedItem(_0x81e9x1c7, itemid, 1, itemData + 1);
		PlaySoundFile("Tools/Chainsaw/ChainsawUseOne.ogg");
		var _0x81e9x16b = chainsaws[itemid][0];
		if (_0x81e9x26b > _0x81e9x16b - 2) {
			Entity.setHealth(_0x81e9x26a, _0x81e9x26b - _0x81e9x16b + 2)
		} else {
			Entity.setHealth(_0x81e9x26a, 1)
		};
		return
	};
	Entity.setHealth(_0x81e9x26a, _0x81e9x26b + 1)
}
var shovel = [256, 269, 273, 277, 284];
var blocksDrop1 = [4, 15, 22, 23, 24, 42, 44, 45, 48, 61, 67, 70, 87, 98, 101, 108, 109, 112, 113, 114, 116, 121, 125, 128, 139, 145, 152, 155, 156, 159, 167, 172, 173, 179, 180, 181, 245, block_hardened_block];
var blocksDrop2 = [14, 41, 57, 133];
var blocksOreDrop1 = {
	16: [263, [1, 1], 0, [0, 2]],
	21: [351, [4, 8], 4, [2, 5]],
	153: [406, [1, 1], 0, [2, 5]]
};
var blocksOreDrop2 = {
	56: [264, [1, 1], 0, [3, 7]],
	73: [331, [4, 5], 0, [1, 5]],
	74: [331, [4, 5], 0, [1, 5]],
	129: [388, [1, 1], 0, [3, 7]]
};
var swordBlocks = [18, 86, 91, 103, 106, 127, 161];
var pickBlocks1 = [1, 4, 15, 16, 21, 22, 23, 24, 27, 28, 42, 43, 44, 45, 48, 52, 61, 62, 66, 67, 70, 75, 79, 87, 98, 101, 108, 109, 112, 113, 114, 116, 121, 125, 128, 129, 139, 145, 153, 154, 155, 156, 159, 167, 172, 173, 179, 180, 181, 182, 188, 189, 245, block_hardened_block, block_copper_ore, block_tin_ore];
var pickBlocks2 = [14, 41, 56, 57, 73, 74, 152, 129, 133, block_uranium_ore, block_blended_dust_ore, block_iridium_ore];
var axeBlocks = [5, 17, 25, 47, 53, 54, 58, 63, 64, 85, 86, 91, 96, 107, 134, 135, 136, 158, 162, 163, 164, 183, 184, 185, 187];
var shovelBlocks = [2, 3, 12, 13, 60, 78, 80, 82, 88, 110, 198, 243];
var blocks = {};
Block.setDestroyTime(1, 2);
Block.setDestroyTime(4, 1.5);
Block.setDestroyTime(139, 2);
Block.setDestroyTime(182, 0.8);
Block.setDestroyTime(182, 0.8);
ToolAPI.RebuildData = function() {
	var _0x81e9x275 = "";
	for (var _0x81e9x259 = 1; _0x81e9x259 < 256; _0x81e9x259++) {
		blocks[_0x81e9x259] = Block.getDestroyTime(_0x81e9x259);
		_0x81e9x275 += _0x81e9x259 + " -> " + blocks[_0x81e9x259] + "\n"
	}
};

function getSpeed(_0x81e9x1b9) {
	var _0x81e9x257 = Player.getEnchantments(Player.getSelectedSlotId());
	var _0x81e9x277 = 0;
	for (var _0x81e9x259 in _0x81e9x257) {
		if (_0x81e9x257[_0x81e9x259].type == Enchantment.EFFICIENCY) {
			_0x81e9x277 = _0x81e9x257[_0x81e9x259].level
		}
	};
	return _0x81e9x1b9 * (Math.pow(1.3, _0x81e9x277))
}

function spawnExpOrb(_0x81e9x26, _0x81e9x27, _0x81e9x28, _0x81e9x279) {
	mob = Level.spawnMob(_0x81e9x26 + 0.5, _0x81e9x27 + 0.5, _0x81e9x28 + 0.5, 69);
	Entity.setExtraData(mob, "exp.count", _0x81e9x279)
}

function pickaxeDrop(_0x81e9x26, _0x81e9x27, _0x81e9x28, _0x81e9x27b, _0x81e9x27c, _0x81e9x27d, _0x81e9x27e) {
	if (_0x81e9x27c) {
		_0x81e9x27d = 0;
		_0x81e9x27e = 0;
		var _0x81e9x257 = Player.getEnchantments(Player.getSelectedSlotId());
		for (var _0x81e9x259 in _0x81e9x257) {
			if (_0x81e9x257[_0x81e9x259].type == Enchantment.SILK_TOUCH) {
				_0x81e9x27d = _0x81e9x257[_0x81e9x259].level
			};
			if (_0x81e9x257[_0x81e9x259].type == Enchantment.FORTUNE) {
				_0x81e9x27e = _0x81e9x257[_0x81e9x259].level
			}
		}
	};
	if (blockid == 1) {
		if (!_0x81e9x27d) {
			if (blockData == 0) {
				drop(_0x81e9x26, _0x81e9x27, _0x81e9x28, 4, 1)
			} else {
				drop(_0x81e9x26, _0x81e9x27, _0x81e9x28, 1, 1, blockData)
			}
		} else {
			drop(_0x81e9x26, _0x81e9x27, _0x81e9x28, 1, 1, blockData)
		};
		return
	};
	if (blockid == 43) {
		drop(_0x81e9x26, _0x81e9x27, _0x81e9x28, 0, 44, 2, blockData);
		return
	};
	if (blockid == 52) {
		spawnExpOrb(_0x81e9x26, _0x81e9x27, _0x81e9x28, random(15, 43));
		return
	};
	if (blockid == 62) {
		drop(_0x81e9x26, _0x81e9x27, _0x81e9x28, 0, 61, 1);
		return
	};
	if (blocksDrop1.indexOf(blockid) !== -1) {
		drop(_0x81e9x26, _0x81e9x27, _0x81e9x28, blockid, 1, blockData);
		return
	};
	var _0x81e9x27f = blocksOreDrop1[blockid];
	if (_0x81e9x27f) {
		if (_0x81e9x27d) {
			drop(_0x81e9x26, _0x81e9x27, _0x81e9x28, blockid, 1, blockData)
		} else {
			var _0x81e9x13 = random(_0x81e9x27f[1][0], _0x81e9x27f[1][1] * _0x81e9x27e);
			drop(_0x81e9x26, _0x81e9x27, _0x81e9x28, _0x81e9x27f[0], _0x81e9x13, _0x81e9x27f[2]);
			var _0x81e9x279 = random(_0x81e9x27f[3][0], _0x81e9x27f[3][1]);
			if (_0x81e9x279) {
				spawnExpOrb(_0x81e9x26, _0x81e9x27, _0x81e9x28, _0x81e9x279)
			}
		};
		return
	};
	if (_0x81e9x27b >= 2) {
		if (blockid == block_uranium_ore) {
			drop(_0x81e9x26, _0x81e9x27, _0x81e9x28, item_uranium, 1, 0);
			if (Math.random() < 0.5) {
				drop(_0x81e9x26, _0x81e9x27, _0x81e9x28, item_dust_iron, 1, 0)
			};
			spawnExpOrb(_0x81e9x26, _0x81e9x27, _0x81e9x28, random(3, 7));
			return
		};
		if (blockid == block_iridium_ore) {
			drop(_0x81e9x26, _0x81e9x27, _0x81e9x28, item_iridium_chunk, 1, 0);
			if (Math.random() < 0.5) {
				drop(_0x81e9x26, _0x81e9x27, _0x81e9x28, item_dust_gold, 1, 0)
			};
			spawnExpOrb(_0x81e9x26, _0x81e9x27, _0x81e9x28, random(12, 21));
			return
		};
		if (blockid == block_blended_dust_ore) {
			spawnExpOrb(_0x81e9x26, _0x81e9x27, _0x81e9x28, random(3, 6));
			for (var i = 0; i < Math.random() * 3; i++) {
				drop(_0x81e9x26, _0x81e9x27, _0x81e9x28, item_dust_iron, 1, 0)
			};
			for (var i = 0; i < Math.random() * 2; i++) {
				drop(_0x81e9x26, _0x81e9x27, _0x81e9x28, item_dust_gold, 1, 0)
			};
			for (var i = 0; i < Math.random() * 2; i++) {
				drop(_0x81e9x26, _0x81e9x27, _0x81e9x28, item_dust_copper, 1, 0)
			};
			for (var i = 0; i < Math.random() * 2; i++) {
				drop(_0x81e9x26, _0x81e9x27, _0x81e9x28, item_dust_tin, 1, 0)
			};
			for (var i = 0; i < Math.random() * 6; i++) {
				drop(_0x81e9x26, _0x81e9x27, _0x81e9x28, 331, 1, 0)
			};
			for (var i = 1; i < Math.random() * Math.random() * 1.5; i++) {
				drop(_0x81e9x26, _0x81e9x27, _0x81e9x28, item_uranium, 1, 0)
			};
			for (var i = 1; i < Math.random() * Math.random() * 3; i++) {
				drop(_0x81e9x26, _0x81e9x27, _0x81e9x28, 351, 1, 4)
			};
			return
		};
		if (blocksDrop2.indexOf(blockid) !== -1) {
			drop(_0x81e9x26, _0x81e9x27, _0x81e9x28, blockid, 1, blockData);
			return
		};
		_0x81e9x27f = blocksOreDrop2[blockid];
		if (_0x81e9x27f) {
			if (_0x81e9x27d) {
				if (blockid !== 74) {
					drop(_0x81e9x26, _0x81e9x27, _0x81e9x28, blockid, 1, blockData)
				} else {
					drop(_0x81e9x26, _0x81e9x27, _0x81e9x28, 73, 1, 0)
				}
			} else {
				if (blockid !== 73 && blockid !== 74) {
					var _0x81e9x13 = random(_0x81e9x27f[1][0], _0x81e9x27f[1][1] * _0x81e9x27e)
				} else {
					var _0x81e9x13 = random(4, 5 + _0x81e9x27e)
				};
				drop(_0x81e9x26, _0x81e9x27, _0x81e9x28, _0x81e9x27f[0], _0x81e9x13, _0x81e9x27f[2]);
				var _0x81e9x279 = random(_0x81e9x27f[3][0], _0x81e9x27f[3][1]);
				spawnExpOrb(_0x81e9x26, _0x81e9x27, _0x81e9x28, _0x81e9x279)
			};
			return
		}
	};
	if (_0x81e9x27b == 3) {
		if (blockid == 49) {
			drop(_0x81e9x26, _0x81e9x27, _0x81e9x28, 49, 1)
		}
	}
}

function ToolAPI_useItem(_0x81e9x26, _0x81e9x27, _0x81e9x28, _0x81e9x281, _0x81e9x282, _0x81e9x191, itemData) {
	if (shovels[_0x81e9x281] && _0x81e9x282 == 2) {
		setTile(_0x81e9x26, _0x81e9x27, _0x81e9x28, 198);
		Level.playSoundEnt(player, "step.grass", 0.5, 0.75);
		ToolAPI.destroyItem(1, weapon[_0x81e9x281][1])
	};
	if (hoes.indexOf(_0x81e9x281) !== -1 && (_0x81e9x282 == 2 || _0x81e9x282 == 3) && _0x81e9x191 == 1) {
		setTile(_0x81e9x26, _0x81e9x27, _0x81e9x28, 60);
		ToolAPI.destroyItem(1, weapon[_0x81e9x281][1]);
		Level.playSoundEnt(player, "step.gravel", 0.5, 0.75)
	}
}

function ToolAPIEntityRemoved(_0x81e9x192) {
	var _0x81e9x279 = Entity.getExtraData(_0x81e9x192, "exp.count");
	if (_0x81e9x279) {
		Player.addExp(_0x81e9x279)
	}
}
var AutoCraftRecipeList = {
	"5:4:0": [17, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	"22:1:0": [351, 4, 351, 4, 351, 4, 351, 4, 351, 4, 351, 4, 351, 4, 351, 4, 351, 4],
	"24:1:0": [12, 0, 12, 0, 0, 0, 12, 0, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	"24:1:0": [44, 1, 0, 0, 0, 0, 0, 0, 44, 1, 0, 0, 0, 0, 0, 0, 0, 0],
	"24:4:2": [24, 0, 24, 0, 0, 0, 24, 0, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	"27:6:0": [266, 0, 0, 0, 266, 0, 266, 0, 280, 0, 266, 0, 266, 0, 331, 0, 266, 0],
	"35:1:0": [287, 0, 287, 0, 0, 0, 287, 0, 287, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	"5:4:0": [17, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	"41:1:0": [266, 0, 266, 0, 266, 0, 266, 0, 266, 0, 266, 0, 266, 0, 266, 0, 266, 0],
	"42:1:0": [265, 0, 265, 0, 265, 0, 265, 0, 265, 0, 265, 0, 265, 0, 265, 0, 265, 0],
	"44:6:3": [4, 0, 4, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	"44:6:0": [1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	"44:6:1": [24, 0, 24, 0, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	"44:6:4": [45, 0, 45, 0, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	"44:6:5": [98, 0, 98, 0, 98, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	"44:6:6": [155, 0, 155, 0, 155, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	"45:1:0": [336, 0, 336, 0, 0, 0, 336, 0, 336, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	"46:1:0": [289, 0, 12, 0, 289, 0, 12, 0, 289, 0, 12, 0, 289, 0, 12, 0, 289, 0],
	"47:1:0": [5, 0, 5, 0, 5, 0, 340, 0, 340, 0, 340, 0, 5, 0, 5, 0, 5, 0],
	"48:1:0": [4, 0, 106, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	"50:4:0": [0, 0, 263, 0, 0, 0, 0, 0, 280, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	"50:4:0": [0, 0, 263, 1, 0, 0, 0, 0, 280, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	"53:4:0": [5, 0, 0, 0, 0, 0, 5, 0, 5, 0, 0, 0, 5, 0, 5, 0, 5, 0],
	"54:1:0": [5, 0, 5, 0, 5, 0, 5, 0, 0, 0, 5, 0, 5, 0, 5, 0, 5, 0],
	"57:1:0": [264, 0, 264, 0, 264, 0, 264, 0, 264, 0, 264, 0, 264, 0, 264, 0, 264, 0],
	"58:1:0": [5, 0, 5, 0, 0, 0, 5, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	"61:1:0": [4, 0, 4, 0, 4, 0, 4, 0, 0, 0, 4, 0, 4, 0, 4, 0, 4, 0],
	"65:2:0": [280, 0, 0, 0, 280, 0, 280, 0, 280, 0, 280, 0, 280, 0, 0, 0, 280, 0],
	"50:4:0": [0, 0, 263, 0, 0, 0, 0, 0, 280, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	"66:16:0": [265, 0, 0, 0, 265, 0, 265, 0, 280, 0, 265, 0, 265, 0, 0, 0, 265, 0],
	"67:4:0": [4, 0, 0, 0, 0, 0, 44, 0, 44, 0, 0, 0, 4, 0, 4, 0, 4, 0],
	"78:6:0": [80, 0, 80, 0, 80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	"82:1:0": [337, 0, 337, 0, 0, 0, 337, 0, 337, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	"85:3:0": [5, 0, 280, 0, 5, 0, 5, 0, 280, 0, 5, 0, 0, 0, 0, 0, 0, 0],
	"85:3:1": [5, 1, 280, 0, 5, 1, 5, 2, 280, 0, 5, 1, 0, 0, 0, 0, 0, 0],
	"85:3:2": [5, 2, 280, 0, 5, 2, 5, 2, 280, 0, 5, 2, 0, 0, 0, 0, 0, 0],
	"85:3:3": [5, 3, 280, 0, 5, 3, 5, 3, 280, 0, 5, 3, 0, 0, 0, 0, 0, 0],
	"85:3:4": [5, 4, 280, 0, 5, 4, 5, 4, 280, 0, 5, 4, 0, 0, 0, 0, 0, 0],
	"85:3:5": [5, 5, 280, 0, 5, 5, 5, 5, 280, 0, 5, 5, 0, 0, 0, 0, 0, 0],
	"89:1:0": [348, 0, 348, 0, 0, 0, 348, 0, 348, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	"91:1:0": [0, 0, 86, 0, 0, 0, 0, 0, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	"96:2:0": [5, 0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0, 0, 0, 0, 0, 0, 0],
	"98:4:0": [1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	"101:16:0": [265, 0, 265, 0, 265, 0, 265, 0, 265, 0, 265, 0, 0, 0, 0, 0, 0, 0],
	"102:16:0": [20, 0, 20, 0, 20, 0, 20, 0, 20, 0, 20, 0, 0, 0, 0, 0, 0, 0],
	"103:1:0": [360, 0, 360, 0, 360, 0, 360, 0, 360, 0, 360, 0, 360, 0, 360, 0, 360, 0],
	"107:1:0": [280, 0, 5, 0, 280, 0, 280, 0, 5, 0, 280, 0, 0, 0, 0, 0, 0, 0],
	"108:4:0": [45, 0, 0, 0, 0, 0, 45, 0, 45, 0, 0, 0, 45, 0, 45, 0, 45, 0],
	"109:4:0": [98, 0, 0, 0, 0, 0, 98, 0, 98, 0, 0, 0, 98, 0, 98, 0, 98, 0],
	"112:1:0": [405, 0, 405, 0, 0, 0, 405, 0, 405, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	"114:4:0": [112, 0, 0, 0, 0, 0, 112, 0, 112, 0, 0, 0, 112, 0, 112, 0, 112, 0],
	"128:4:0": [24, 0, 0, 0, 0, 0, 24, 0, block_terraformer, 0, 0, 24, 0, 24, 0, 24, 0],
	"134:4:0": [5, 1, 0, 0, 0, 0, 5, 1, 5, 1, 0, 0, 5, 1, 5, 1, 5, 1],
	"133:1:0": [338, 0, 338, 0, 338, 0, 338, 0, 338, 0, 338, 0, 338, 0, 338, 0, 338, 0],
	"135:4:0": [5, 2, 0, 0, 0, 0, 5, 2, 5, 2, 0, 0, 5, 2, 5, 2, 5, 2],
	"136:4:0": [5, 3, 0, 0, 0, 0, 5, 3, 5, 3, 0, 0, 5, 3, 5, 3, 5, 3],
	"139:6:0": [4, 0, 4, 0, 4, 0, 4, 0, 4, 0, 4, 0, 0, 0, 0, 0, 0, 0],
	"139:6:1": [48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 48, 0, 0, 0, 0, 0, 0, 0],
	"155:1:0": [406, 0, 406, 0, 0, 0, 406, 0, 406, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	"155:1:1": [44, 6, 0, 0, 0, 0, 44, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	"155:2:2": [155, 0, 0, 0, 0, 0, 155, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	"158:6:0": [5, 0, 5, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	"158:6:1": [5, 1, 5, 1, 5, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	"158:6:2": [5, 2, 5, 2, 5, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	"158:6:3": [5, 3, 5, 3, 5, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	"158:6:4": [5, 4, 5, 4, 5, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	"158:6:5": [5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	"159:8:15": [172, 0, 172, 0, 172, 0, 172, 0, 351, 0, 172, 0, 172, 0, 172, 0, 172, 0],
	"159:8:14": [172, 0, 172, 0, 172, 0, 172, 0, 351, 1, 172, 0, 172, 0, 172, 0, 172, 0],
	"159:8:13": [172, 0, 172, 0, 172, 0, 172, 0, 351, 2, 172, 0, 172, 0, 172, 0, 172, 0],
	"159:8:12": [172, 0, 172, 0, 172, 0, 172, 0, 351, 3, 172, 0, 172, 0, 172, 0, 172, 0],
	"159:8:11": [172, 0, 172, 0, 172, 0, 172, 0, 351, 4, 172, 0, 172, 0, 172, 0, 172, 0],
	"159:8:10": [172, 0, 172, 0, 172, 0, 172, 0, 351, 5, 172, 0, 172, 0, 172, 0, 172, 0],
	"159:8:9": [172, 0, 172, 0, 172, 0, 172, 0, 351, 6, 172, 0, 172, 0, 172, 0, 172, 0],
	"159:8:8": [172, 0, 172, 0, 172, 0, 172, 0, 351, 7, 172, 0, 172, 0, 172, 0, 172, 0],
	"159:8:7": [172, 0, 172, 0, 172, 0, 172, 0, 351, 8, 172, 0, 172, 0, 172, 0, 172, 0],
	"159:8:6": [172, 0, 172, 0, 172, 0, 172, 0, 351, 9, 172, 0, 172, 0, 172, 0, 172, 0],
	"159:8:5": [172, 0, 172, 0, 172, 0, 172, 0, 351, 10, 172, 0, 172, 0, 172, 0, 172, 0],
	"159:8:4": [172, 0, 172, 0, 172, 0, 172, 0, 351, 11, 172, 0, 172, 0, 172, 0, 172, 0],
	"159:8:3": [172, 0, 172, 0, 172, 0, 172, 0, 351, 12, 172, 0, 172, 0, 172, 0, 172, 0],
	"159:8:2": [172, 0, 172, 0, 172, 0, 172, 0, 351, 13, 172, 13, 172, 0, 172, 0, 172, 0],
	"159:8:1": [172, 0, 172, 0, 172, 0, 172, 0, 351, 14, 172, 0, 172, 0, 172, 0, 172, 0],
	"159:8:0": [172, 0, 172, 0, 172, 0, 172, 0, 351, 15, 172, 0, 172, 0, 172, 0, 172, 0],
	"163:4:0": [5, 4, 0, 0, 0, 0, 5, 4, 5, 4, 0, 0, 5, 4, 5, 4, 5, 4],
	"164:4:0": [5, 5, 0, 0, 0, 0, 5, 5, 5, 5, 0, 0, 5, 5, 5, 5, 5, 5],
	"170:1:0": [296, 0, 296, 0, 296, 0, 296, 0, 296, 0, 296, 0, 296, 0, 296, 0, 296, 0],
	"171:3:0": [35, 0, 35, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	"171:3:1": [35, 1, 35, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	"171:3:2": [35, 2, 35, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	"171:3:3": [35, 3, 35, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	"171:3:4": [35, 4, 35, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	"171:3:5": [35, 5, 35, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	"171:3:6": [35, 6, 35, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	"171:3:8": [35, 8, 35, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	"171:3:9": [35, 9, 35, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	"171:3:10": [35, 10, 35, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	"171:3:11": [35, 11, 35, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	"171:3:12": [35, 12, 35, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	"171:3:13": [35, 13, 35, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	"171:3:14": [35, 14, 35, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	"171:3:15": [35, 15, 35, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	"173:1:0": [263, 0, 263, 0, 263, 0, 263, 0, 263, 0, 263, 0, 263, 0, 263, 0, 263, 0],
	"183:1:0": [280, 0, 5, 1, 280, 0, 280, 0, 5, 1, 280, 0, 0, 0, 0, 0, 0, 0],
	"184:1:0": [280, 0, 5, 2, 280, 0, 280, 0, 5, 2, 280, 0, 0, 0, 0, 0, 0, 0],
	"185:1:0": [280, 0, 5, 3, 280, 0, 280, 0, 5, 3, 280, 0, 0, 0, 0, 0, 0, 0],
	"186:1:0": [280, 0, 5, 5, 280, 0, 280, 0, 5, 5, 280, 0, 0, 0, 0, 0, 0, 0],
	"187:1:0": [280, 0, 5, 4, 280, 0, 280, 0, 5, 4, 280, 0, 0, 0, 0, 0, 0, 0],
	"245:1:0": [4, 0, 4, 0, 0, 0, 4, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	"247:1:0": [265, 0, 264, 0, 265, 0, 265, 0, 264, 0, 265, 0, 265, 0, 264, 0, 265, 0],
	"257:1:0": [265, 0, 265, 0, 265, 0, 0, 0, 280, 0, 0, 0, 0, 0, 280, 0, 0, 0],
	"256:1:0": [0, 0, 265, 0, 0, 0, 0, 0, 280, 0, 0, 0, 0, 0, 280, 0, 0, 0],
	"258:1:0": [265, 0, 265, 0, 0, 0, 265, 0, 280, 0, 0, 0, 0, 0, 280, 0, 0, 0],
	"259:1:0": [265, 0, 0, 0, 0, 0, 0, 0, 318, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	"261:1:0": [0, 0, 280, 0, 287, 0, 280, 0, 0, 0, 287, 0, 0, 0, 280, 0, 287, 0],
	"262:4:0": [0, 0, 318, 0, 0, 0, 0, 0, 280, 0, 0, 0, 0, 0, 288, 0, 0, 0],
	"263:9:0": [173, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	"264:9:0": [57, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	"265:9:0": [42, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	"266:9:0": [41, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	"267:1:0": [0, 0, 265, 0, 0, 0, 0, 0, 265, 0, 0, 0, 0, 0, 280, 0, 0, 0],
	"268:1:0": [0, 0, 5, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 280, 0, 0, 0],
	"269:1:0": [0, 0, 5, 0, 0, 0, 0, 0, 280, 0, 0, 0, 0, 0, 280, 0, 0, 0],
	"270:1:0": [5, 0, 5, 0, 5, 0, 0, 0, 280, 0, 0, 0, 0, 0, 280, 0, 0, 0],
	"271:1:0": [5, 0, 5, 0, 0, 0, 5, 0, 280, 0, 0, 0, 0, 0, 280, 0, 0, 0],
	"272:1:0": [0, 0, 4, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 280, 0, 0, 0],
	"273:1:0": [0, 0, 4, 0, 0, 0, 0, 0, 280, 0, 0, 0, 0, 0, 280, 0, 0, 0],
	"274:1:0": [4, 0, 4, 0, 4, 0, 0, 0, 280, 0, 0, 0, 0, 0, 280, 0, 0, 0],
	"275:1:0": [4, 0, 4, 0, 0, 0, 4, 0, 280, 0, 0, 0, 0, 0, 280, 0, 0, 0],
	"2block_constone:1:0": [0, 0, 264, 0, 0, 0, 0, 0, 264, 0, 0, 0, 0, 0, 280, 0, 0, 0],
	"277:1:0": [0, 0, 264, 0, 0, 0, 0, 0, 280, 0, 0, 0, 0, 0, 280, 0, 0, 0],
	"278:1:0": [264, 0, 264, 0, 264, 0, 0, 0, 280, 0, 0, 0, 0, 0, 280, 0, 0, 0],
	"279:1:0": [264, 0, 264, 0, 0, 0, 264, 0, 280, 0, 0, 0, 0, 0, 280, 0, 0, 0],
	"280:4:0": [5, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	"281:4:0": [5, 0, 0, 0, 5, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	"282:1:0": [39, 0, 40, 0, 0, 0, 0, 0, 281, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	"283:1:0": [0, 0, 266, 0, 0, 0, 0, 0, 266, 0, 0, 0, 0, 0, 280, 0, 0, 0],
	"284:1:0": [0, 0, 266, 0, 0, 0, 0, 0, 280, 0, 0, 0, 0, 0, 280, 0, 0, 0],
	"285:1:0": [266, 0, 266, 0, 266, 0, 0, 0, 280, 0, 0, 0, 0, 0, 280, 0, 0, 0],
	"286:1:0": [266, 0, 266, 0, 0, 0, 266, 0, 280, 0, 0, 0, 0, 0, 280, 0, 0, 0],
	"290:1:0": [5, 0, 5, 0, 0, 0, 0, 0, 280, 0, 0, 0, 0, 0, 280, 0, 0, 0],
	"291:1:0": [4, 0, 4, 0, 0, 0, 0, 0, 280, 0, 0, 0, 0, 0, 280, 0, 0, 0],
	"292:1:0": [265, 0, 265, 0, 0, 0, 0, 0, 280, 0, 0, 0, 0, 0, 280, 0, 0, 0],
	"293:1:0": [264, 0, 264, 0, 0, 0, 0, 0, 280, 0, 0, 0, 0, 0, 280, 0, 0, 0],
	"294:1:0": [266, 0, 266, 0, 0, 0, 0, 0, 280, 0, 0, 0, 0, 0, 280, 0, 0, 0],
	"296:9:0": [170, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	"297:1:0": [296, 0, 296, 0, 296, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	"298:1:0": [334, 0, 334, 0, 334, 0, 334, 0, 0, 0, 334, 0, 0, 0, 0, 0, 0, 0],
	"299:1:0": [334, 0, 0, 0, 334, 0, 334, 0, 334, 0, 334, 0, 334, 0, 334, 0, 334, 0],
	"300:1:0": [334, 0, 334, 0, 334, 0, 334, 0, 0, 0, 265, 0, 334, 0, 0, 0, 334, 0],
	"301:1:0": [334, 0, 0, 0, 334, 0, 334, 0, 0, 0, 334, 0, 0, 0, 0, 0, 0, 0],
	"306:1:0": [265, 0, 265, 0, 265, 0, 265, 0, 0, 0, 265, 0, 0, 0, 0, 0, 0, 0],
	"307:1:0": [265, 0, 0, 0, 265, 0, 265, 0, 265, 0, 265, 0, 265, 0, 265, 0, 265, 0],
	"308:1:0": [265, 0, 265, 0, 265, 0, 265, 0, 0, 0, 265, 0, 265, 0, 0, 0, 265, 0],
	"309:1:0": [265, 0, 0, 0, 265, 0, 265, 0, 0, 0, 265, 0, 0, 0, 0, 0, 0, 0],
	"310:1:0": [264, 0, 264, 0, 264, 0, 264, 0, 0, 0, 264, 0, 0, 0, 0, 0, 0, 0],
	"311:1:0": [264, 0, 0, 0, 264, 0, 264, 0, 264, 0, 264, 0, 264, 0, 264, 0, 264, 0],
	"312:1:0": [264, 0, 264, 0, 264, 0, 264, 0, 0, 0, 264, 0, 264, 0, 0, 0, 264, 0],
	"313:1:0": [264, 0, 0, 0, 264, 0, 264, 0, 0, 0, 264, 0, 0, 0, 0, 0, 0, 0],
	"314:1:0": [266, 0, 266, 0, 266, 0, 266, 0, 0, 0, 266, 0, 0, 0, 0, 0, 0, 0],
	"315:1:0": [266, 0, 0, 0, 266, 0, 266, 0, 266, 0, 266, 0, 266, 0, 266, 0, 266, 0],
	"316:1:0": [266, 0, 266, 0, 266, 0, 266, 0, 0, 0, 266, 0, 266, 0, 0, 0, 266, 0],
	"317:1:0": [266, 0, 0, 0, 266, 0, 266, 0, 0, 0, 266, 0, 0, 0, 0, 0, 0, 0],
	"321:1:0": [280, 0, 280, 0, 280, 0, 280, 0, 35, 0, 280, 0, 280, 0, 280, 0, 280, 0],
	"323:3:0": [5, 0, 5, 0, 5, 0, 5, 0, 5, 0, 5, 0, 0, 0, 280, 0, 0, 0],
	"324:1:0": [5, 0, 5, 0, 0, 0, 5, 0, 5, 0, 0, 0, 5, 0, 5, 0, 0, 0],
	"325:1:0": [265, 0, 0, 0, 265, 0, 0, 0, 265, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	"328:1:0": [265, 0, 0, 0, 265, 0, 265, 0, 265, 0, 265, 0, 0, 0, 0, 0, 0, 0],
	"339:3:0": [338, 0, 338, 0, 338, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	"340:1:0": [0, 0, 339, 0, 0, 0, 0, 0, 339, 0, 0, 0, 0, 0, 339, 0, 0, 0],
	"345:1:0": [0, 0, 265, 0, 0, 0, 265, 0, 331, 0, 265, 0, 0, 0, 265, 0, 0, 0],
	"347:1:0": [0, 0, 266, 0, 0, 0, 266, 0, 331, 0, 266, 0, 0, 0, 266, 0, 0, 0],
	"351:9:4": [22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	"351:1:11": [37, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	"351:2:1": [244, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	"351:1:1": [38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	"351:3:15": [352, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	"351:2:9": [351, 1, 351, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	"351:2:14": [351, 1, 351, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	"351:2:10": [351, 2, 351, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	"351:2:8": [351, 0, 351, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	"351:2:7": [351, 8, 351, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	"351:2:7": [351, 0, 351, 15, 0, 0, 0, 0, 351, 15, 0, 0, 0, 0, 0, 0, 0, 0],
	"351:2:3": [351, 0, 351, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	"351:2:3": [351, 0, 351, 1, 0, 0, 0, 0, 351, 11, 0, 0, 0, 0, 0, 0, 0, 0],
	"351:2:12": [351, 4, 351, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	"351:2:6": [351, 4, 351, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	"351:2:5": [351, 4, 351, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	"351:2:13": [351, 5, 351, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	"351:2:13": [351, 4, 351, 1, 0, 0, 0, 0, 351, 9, 0, 0, 0, 0, 0, 0, 0, 0],
	"351:2:13": [351, 4, 351, 15, 0, 0, 351, 1, 351, 1, 0, 0, 0, 0, 0, 0, 0, 0],
	"351:1:12": [38, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	"351:1:13": [38, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	"351:1:7": [38, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	"351:1:1": [38, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	"351:1:14": [38, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	"351:1:7": [38, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	"351:1:9": [38, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	"351:1:7": [38, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	"351:2:11": [175, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	"351:2:13": [175, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	"351:2:1": [175, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	"351:2:9": [175, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	"353:1:0": [338, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	"354:1:0": [325, 1, 325, 1, 325, 1, 353, 0, 344, 0, 353, 0, 296, 0, 296, 0, 296, 0],
	"355:1:0": [35, 0, 35, 0, 35, 0, 5, 0, 5, 0, 5, 0, 0, 0, 0, 0, 0, 0],
	"357:8:0": [296, 0, 351, 3, 296, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	"359:1:0": [0, 0, 265, 0, 0, 0, 265, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	"361:4:0": [86, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	"362:1:0": [360, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	"388:9:0": [133, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	"400:1:0": [86, 0, 353, 0, 0, 0, 344, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	"459:1:0": [457, 0, 457, 0, 457, 0, 457, 0, 457, 0, 457, 0, 0, 0, 281, 0, 0, 0]
};
var FTP = {
	ThreadID: 0,
	Threads: [],
	RunInThread: function(_0x81e9x1c2) {
		var _0x81e9x286 = this.ThreadID++;
		var _0x81e9x17d = new java.lang.Thread({
			run: function() {
				try {
					_0x81e9x1c2()
				} catch (e) {
					print("Error in network thread #" + _0x81e9x286 + ": " + e)
				};
				FTP.Threads[_0x81e9x286] = null
			}
		});
		_0x81e9x17d.start();
		this.Threads[_0x81e9x286] = _0x81e9x17d;
		return _0x81e9x17d
	},
	PauseDownloading: false,
	ByteArrayToText: function(_0x81e9x287) {
		return "" + new java.lang.String(_0x81e9x287, "UTF-8")
	},
	ReadTextFile: function(_0x81e9x1e8) {
		var _0x81e9x288 = java.io.BufferedReader(new java.io.FileReader(android.os.Environment.getExternalStorageDirectory().getAbsolutePath() + "/" + _0x81e9x1e8));
		var _0x81e9x162, _0x81e9x1de = "";
		while (true) {
			_0x81e9x162 = _0x81e9x288.readLine();
			if (_0x81e9x162 == null) {
				break
			};
			_0x81e9x1de += _0x81e9x162 + "\n"
		};
		return _0x81e9x1de.trim()
	},
	WriteByteArrayToFile: function(_0x81e9x287, _0x81e9x1e8) {
		_0x81e9x1e8 = android.os.Environment.getExternalStorageDirectory().getAbsolutePath() + "/" + _0x81e9x1e8;
		(new java.io.File(_0x81e9x1e8)).createNewFile();
		var _0x81e9x289 = new java.io.BufferedOutputStream(new java.io.FileOutputStream(_0x81e9x1e8));
		try {
			_0x81e9x289.write(_0x81e9x287)
		} catch (e) {
			for (var i in _0x81e9x287) {
				_0x81e9x289.write(_0x81e9x287[i])
			}
		};
		_0x81e9x289.flush();
		_0x81e9x289.close()
	},
	GetBytesFromFile: function(_0x81e9x1e8) {
		var _0x81e9x289 = new java.io.FileInputStream(android.os.Environment.getExternalStorageDirectory().getAbsolutePath() + "/" + _0x81e9x1e8);
		var _0x81e9x287 = [],
			_0x81e9x173;
		while ((_0x81e9x173 = _0x81e9x289.read()) != -1) {
			_0x81e9x287.push(_0x81e9x173)
		};
		return _0x81e9x287
	},
	DownloadFile: function(_0x81e9x1e7, _0x81e9x1e8) {
		_0x81e9x1e7 = "http://stillermann.com/zhekasmirnov/" + _0x81e9x1e7;
		try {
			this.DownloadFileFromURL(_0x81e9x1e7, _0x81e9x1e8);
			return true
		} catch (e) {
			return false
		}
	},
	DownloadFileFromURL_: function(_0x81e9x28a, _0x81e9x28b) {
		var _0x81e9x287 = FTP.GetBytesFromURL(_0x81e9x28a);
		if (_0x81e9x287) {
			FTP.WriteByteArrayToFile(_0x81e9x287, _0x81e9x28b)
		} else {
			print("no data at url " + _0x81e9x28a)
		}
	},
	DownloadFileFromURL: function(_0x81e9x1e7, _0x81e9x1e8) {
		var _0x81e9x28c = android.os.Environment.getExternalStorageDirectory().getAbsolutePath() + "/";
		var _0x81e9x1e9 = new java.io.File(_0x81e9x28c + _0x81e9x1e8);
		_0x81e9x1e9.createNewFile();
		var _0x81e9x28d = new java.io.FileOutputStream(_0x81e9x1e9);
		var _0x81e9x1eb = android.net.http.AndroidHttpClient.newInstance("ModPE.downloadFile()").execute(new org.apache.http.client.methods.HttpGet(_0x81e9x1e7)).getEntity().writeTo(_0x81e9x28d);
		_0x81e9x28d.close()
	},
	GetBytesFromServerFile: function(_0x81e9x1e8) {
		var _0x81e9x28e = "http://stillermann.com/zhekasmirnov/" + _0x81e9x1e8;
		return this.GetBytesFromURL(_0x81e9x28e)
	},
	GetBytesFromURL: function(_0x81e9x28e) {
		var _0x81e9x1e7 = new java.net.URL(_0x81e9x28e);
		var _0x81e9x28f = _0x81e9x1e7.openConnection();
		_0x81e9x28f.connect();
		var _0x81e9x289 = _0x81e9x28f.getInputStream();
		var _0x81e9x287 = [],
			_0x81e9x173;
		while ((_0x81e9x173 = _0x81e9x289.read()) != -1) {
			_0x81e9x287.push(_0x81e9x173)
		};
		return _0x81e9x287
	}
};
ModPE.downloadFile = function(_0x81e9x1e6, _0x81e9x1e7) {};
var UpdateManager = {
	DefaultDirectory: "games/com.mojang/Factorization/update/",
	DownloadDirectory: "games/com.mojang/Factorization/update/download/",
	mkdirs: function() {
		(new java.io.File(android.os.Environment.getExternalStorageDirectory().getAbsolutePath() + "/" + this.DefaultDirectory)).mkdirs();
		(new java.io.File(android.os.Environment.getExternalStorageDirectory().getAbsolutePath() + "/" + this.DownloadDirectory)).mkdirs()
	},
	CheckInternetConnection: function() {
		try {
			FTP.GetBytesFromServerFile("update/current_version.txt");
			return true
		} catch (e) {
			return false
		}
	},
	ReadFile: function(_0x81e9x1e8) {
		try {
			var _0x81e9x1de = FTP.ReadTextFile(_0x81e9x1e8)
		} catch (e) {
			return ""
		};
		return _0x81e9x1de
	},
	DownloadTempVersionFile: function() {
		return FTP.DownloadFile("update/current_version.txt", this.DownloadDirectory + "tempversion")
	},
	DownloadSource: function() {
		var _0x81e9x172 = FTP.DownloadFile("update/source.txt", this.DownloadDirectory + "source");
		this.CopyFile(this.DownloadDirectory + "tempversion", this.DownloadDirectory + "version")
	},
	GetTempVersion: function() {
		return this.ReadFile(this.DownloadDirectory + "tempversion")
	},
	GetDownloadedVersion: function() {
		return this.ReadFile(this.DownloadDirectory + "version")
	},
	GetInstalledVersion: function() {
		return this.ReadFile(this.DefaultDirectory + "version")
	},
	GetChangelog: function() {
		FTP.DownloadFile("update/changelog.ru", UpdateManager.DefaultDirectory + "changelog.ru")
	},
	GetAndShowChangelog: function() {
		FTP.RunInThread(function() {
			if (!UpdateManager.changelog_loaded) {
				UpdateManager.changelog_text = "could not download changelog, no internet connection";
				UpdateManager.GetChangelog();
				UpdateManager.changelog_text = UpdateManager.ReadFile(UpdateManager.DefaultDirectory + "changelog.ru");
				UpdateManager.changelog_loaded = true
			};
			runAsGUI(function() {
				UpdateManager.ShowChangelog()
			})
		})
	},
	Execute: function() {
		this.mkdirs();
		var _0x81e9x291 = this.DownloadTempVersionFile();
		if (!_0x81e9x291) {
			return
		};
		var _0x81e9x292 = this.GetTempVersion();
		if (!_0x81e9x292) {
			return
		};
		var _0x81e9x293 = this.GetDownloadedVersion();
		var _0x81e9x294 = this.GetInstalledVersion();
		if (_0x81e9x293 != _0x81e9x292) {
			print("downloading update " + _0x81e9x292 + "...");
			this.DownloadSource();
			this.GetChangelog()
		};
		_0x81e9x293 = this.GetDownloadedVersion();
		_0x81e9x294 = this.GetInstalledVersion();
		if (_0x81e9x294 != _0x81e9x293) {
			this.saved_version = _0x81e9x294;
			this.downloaded_version = _0x81e9x293;
			this.ReadyToInstall()
		};
		AddHandler.Load();
		NewsShowHandler.Load()
	},
	OnInitialized: function() {
		FTP.RunInThread(function() {
			var _0x81e9x291 = UpdateManager.CheckInternetConnection();
			UpdateManager.mkdirs();
			if (_0x81e9x291) {
				FTP.RunInThread(function() {
					try {
						FTP.DownloadFile("add.data", UpdateManager.DownloadDirectory + "add.cache");
						AddHandler.Load()
					} catch (e) {}
				})
			};
			UpdateManager.DownloadChangelog(_0x81e9x291);
			var _0x81e9x295 = !UpdateManager.CheckVersion();
			if (!_0x81e9x291) {
				if (UpdateManager.downloaded_version && UpdateManager.downloaded_version != UpdateManager.saved_version) {
					UpdateManager.ReadyToInstall()
				};
				print("cant update data, no internet connection");
				return
			};
			if (_0x81e9x295) {
				if (UpdateManager.downloaded_version == UpdateManager.server_version) {
					UpdateManager.ReadyToInstall()
				} else {
					print("downloading update " + UpdateManager.server_version + "...");
					UpdateManager.DownloadUpdate();
					UpdateManager.ReadyToInstall()
				}
			}
		})
	},
	DownloadUpdate: function() {
		FTP.DownloadFile("update/source.txt", UpdateManager.DownloadDirectory + "source");
		UpdateManager.WriteTextToFile(UpdateManager.DownloadDirectory + "version", "" + this.server_version);
		UpdateManager.downloaded_version = UpdateManager.server_version
	},
	CopyFile: function(_0x81e9x296, _0x81e9x297) {
		var _0x81e9x298 = new java.io.FileInputStream(android.os.Environment.getExternalStorageDirectory().getAbsolutePath() + "/" + _0x81e9x296);
		var _0x81e9x299 = new java.io.FileOutputStream(android.os.Environment.getExternalStorageDirectory().getAbsolutePath() + "/" + _0x81e9x297);
		var _0x81e9x29a = _0x81e9x298.getChannel();
		var _0x81e9x29b = _0x81e9x299.getChannel();
		_0x81e9x29a.transferTo(0, _0x81e9x29a.size(), _0x81e9x29b);
		_0x81e9x298.close();
		_0x81e9x299.close()
	},
	WriteTextToFile: function(_0x81e9x1e8, _0x81e9x1de) {
		var _0x81e9x225 = new java.io.PrintWriter(new java.io.BufferedWriter(new java.io.FileWriter(android.os.Environment.getExternalStorageDirectory().getAbsolutePath() + "/" + _0x81e9x1e8, false)));
		_0x81e9x225.write(_0x81e9x1de);
		_0x81e9x225.close()
	},
	CheckVersion: function() {
		try {
			UpdateManager.server_version = FTP.ByteArrayToText(FTP.GetBytesFromServerFile("update/current_version.txt"))
		} catch (e) {
			UpdateManager.server_version = ""
		};
		try {
			UpdateManager.saved_version = FTP.ByteArrayToText(FTP.GetBytesFromFile(UpdateManager.DefaultDirectory + "version"))
		} catch (e) {
			UpdateManager.saved_version = ""
		};
		try {
			UpdateManager.downloaded_version = FTP.ByteArrayToText(FTP.GetBytesFromFile(UpdateManager.DownloadDirectory + "version"))
		} catch (e) {
			UpdateManager.downloaded_version = ""
		};
		return UpdateManager.server_version == UpdateManager.saved_version || UpdateManager.downloaded_version == UpdateManager.saved_version
	},
	ReadyToInstall: function() {
		runAsGUI(function() {
			var _0x81e9x1d7 = getMcContext();
			builder = android.app.AlertDialog.Builder(_0x81e9x1d7);
			builder.setTitle("Factorization update available");
			builder.setMessage(translate("Update is ready to be installed") + "\n" + translate("current version") + ": " + UpdateManager.saved_version + "\n" + translate("new version") + ": " + UpdateManager.downloaded_version);
			builder.setNeutralButton(translate("later"), {
				onClick: function() {}
			});
			builder.setNegativeButton(translate("changelog"), {
				onClick: function() {
					UpdateManager.ReadyToInstall();
					UpdateManager.ShowChangelog()
				}
			});
			builder.setPositiveButton(translate("install and restart"), {
				onClick: function() {
					try {
						UpdateManager.InstallDownloaded()
					} catch (e) {
						print(e)
					}
				}
			});
			builder.setCancelable(false);
			builder.show()
		})
	},
	InstallDownloaded: function() {
		this.CopyFile(UpdateManager.DownloadDirectory + "source", UpdateManager.DefaultDirectory + "source");
		this.CopyFile(UpdateManager.DownloadDirectory + "version", UpdateManager.DefaultDirectory + "version");
		var _0x81e9x29c = getMcContext().getPackageManager().getLaunchIntentForPackage(getMcContext().getPackageName());
		_0x81e9x29c.addFlags(android.content.Intent.FLAG_ACTIVITY_CLEAR_TOP);
		getMcContext().startActivity(_0x81e9x29c)
	},
	DownloadChangelog: function(_0x81e9x291) {
		try {
			if (_0x81e9x291) {
				FTP.DownloadFile("update/changelog.ru", UpdateManager.DefaultDirectory + "changelog.ru")
			}
		} catch (e) {};
		var _0x81e9x17 = "changelog.ru";
		try {
			this.changelog_text = FTP.ReadTextFile(UpdateManager.DefaultDirectory + _0x81e9x17);
			if (!this.changelog_text) {
				this.changelog_text = "could not download changelog, no internet connection"
			}
		} catch (e) {
			print(e)
		}
	},
	ShowChangelog: function() {
		try {
			var _0x81e9x1d7 = getMcContext();
			builder = android.app.AlertDialog.Builder(_0x81e9x1d7);
			builder.setTitle("Factorization changelog");
			var _0x81e9x1dc = new android.widget.LinearLayout(_0x81e9x1d7);
			_0x81e9x1dc.setOrientation(1);
			var _0x81e9x1dd = new android.widget.ScrollView(_0x81e9x1d7);
			_0x81e9x1dd.addView(_0x81e9x1dc);
			var _0x81e9x1de = new android.widget.TextView(_0x81e9x1d7);
			_0x81e9x1de.setText(android.text.Html.fromHtml("" + this.changelog_text));
			_0x81e9x1dc.addView(_0x81e9x1de, start_menu_layout_params);
			builder.setView(_0x81e9x1dd);
			builder.setNeutralButton(translate("CLOSE"), {
				onClick: function() {}
			});
			builder.show()
		} catch (e) {
			print(e)
		}
	}
};
var AddHandler = {
	Data: [],
	Cache: [],
	path: "",
	Load: function() {
		this.Data = [];
		this.Cache = [];
		var _0x81e9x29e = java.lang.System.currentTimeMillis();
		this.path = android.os.Environment.getExternalStorageDirectory().getAbsolutePath() + "/games/com.mojang/Factorization/update/download/";
		if (!FTP.DownloadFile("add.data", "games/com.mojang/Factorization/update/download/add.cache")) {
			return
		};
		var _0x81e9x288 = java.io.BufferedReader(new java.io.FileReader(this.path + "add.cache"));
		var _0x81e9x162;
		var i = 0,
			_0x81e9x19 = 0;
		while (true) {
			_0x81e9x162 = _0x81e9x288.readLine();
			if (_0x81e9x162 == null) {
				break
			};
			var _0x81e9x29f = _0x81e9x162.indexOf(":");
			if (_0x81e9x29f == -1) {
				continue
			};
			var _0x81e9x2a0 = ["" + _0x81e9x162.substring(0, _0x81e9x29f), "" + _0x81e9x162.substring(_0x81e9x29f + 1, _0x81e9x162.length())];
			if (i == 0) {
				this.Data[_0x81e9x19] = {}
			};
			this.Data[_0x81e9x19][_0x81e9x2a0[0]] = _0x81e9x2a0[1];
			i++;
			if (i == 3) {
				i = 0;
				_0x81e9x19++
			}
		};
		for (var i in this.Data) {
			var _0x81e9x2a1 = "games/com.mojang/Factorization/update/download/" + ("" + this.Data[i].img.split("/"));
			try {
				bmp = LoadBitmapFile(_0x81e9x2a1)
			} catch (e) {
				bmp = null
			};
			if (bmp == null) {
				try {
					DownloadImage(_0x81e9x2a1, this.Data[i].img)
				} catch (e) {
					print(e)
				};
				try {
					bmp = LoadBitmapFile(_0x81e9x2a1)
				} catch (e) {
					print(e)
				}
			};
			var _0x81e9x1bd = parseInt(this.Data[i].time);
			var _0x81e9x2a2 = this.Data[i].url;
			if (!_0x81e9x1bd || _0x81e9x1bd == -1 || _0x81e9x29e < _0x81e9x1bd) {
				this.Cache.push({
					bmp: bmp,
					link: _0x81e9x2a2
				})
			}
		}
	},
	GetRandom: function() {
		var _0x81e9x16 = this.Cache[parseInt(Math.random() * this.Cache.length)];
		return _0x81e9x16
	}
};
var official_page_icon = null;
var official_page_icon_msg = null;
var official_page_button_win = null;
var official_page_button = null;
var official_page_button_was_showed = false;

function PrepareOfficialPageData() {
	official_page_icon = LoadBitmapFromAssets("official_page_icon.png");
	official_page_icon_msg = LoadBitmapFromAssets("official_page_icon_message.png")
}

function ShowOfficialPageButton() {
	runAsGUI(function() {
		var _0x81e9x1d7 = getMcContext();
		official_page_button = new android.widget.ImageView(_0x81e9x1d7);
		official_page_button_win = new android.widget.PopupWindow(_0x81e9x1d7);
		var _0x81e9x9 = android.widget.LinearLayout.LayoutParams.WRAP_CONTENT;
		official_page_button_win.setContentView(official_page_button);
		official_page_button_win.setHeight(160);
		official_page_button_win.setWidth(160);
		official_page_button_win.setBackgroundDrawable(null);
		official_page_button_win.showAtLocation(_0x81e9x1d7.getWindow().getDecorView(), android.view.Gravity.BOTTOM | android.view.Gravity.LEFT, 0, 0);
		var _0x81e9x2aa = official_page_icon_msg;
		if (official_page_button_was_showed) {
			_0x81e9x2aa = official_page_icon
		};
		if (_0x81e9x2aa) {
			_0x81e9x2aa = android.graphics.Bitmap.createScaledBitmap(_0x81e9x2aa, 160, 160, false);
			official_page_button.setImageBitmap(_0x81e9x2aa)
		} else {
			official_page_button.setImageResource(_0x81e9x1d7.getResources().getIdentifier("ic_menu_settings_holo_light", "drawable", _0x81e9x1d7.getPackageName()))
		};
		official_page_button.setOnClickListener({
			onClick: function() {
				try {
					official_page_button_was_showed = true;
					HideOfficialPageButton();
					ShowOfficialPageButton();
					OpenOfficialPageDialog()
				} catch (e) {
					print(e)
				}
			}
		})
	})
}

function HideOfficialPageButton() {
	runAsGUI(function() {
		if (official_page_button_win) {
			official_page_button_win.dismiss();
			official_page_button_win = null;
			official_page_button = null
		}
	})
}

function OpenOfficialPageDialog() {
	var _0x81e9x1d7 = getMcContext();
	builder = android.app.AlertDialog.Builder(_0x81e9x1d7);
	builder.setIcon(new android.graphics.drawable.BitmapDrawable(start_menu_icon_bitmap));
	builder.setTitle("FACTORIZATION MOD NEWS");
	var _0x81e9x1dc = new android.widget.LinearLayout(_0x81e9x1d7);
	_0x81e9x1dc.setOrientation(1);
	var _0x81e9x1dd = new android.widget.ScrollView(_0x81e9x1d7);
	_0x81e9x1dd.addView(_0x81e9x1dc);
	var _0x81e9x2ad = new android.webkit.WebView(_0x81e9x1d7);
	_0x81e9x2ad.loadUrl("http://googleplus.com/FZ");
	_0x81e9x1dc.addView(_0x81e9x2ad, start_menu_layout_params);
	builder.setView(_0x81e9x1dd);
	builder.setNeutralButton("BACK", {
		onClick: function() {}
	});
	builder.setPositiveButton("OPEN IN BROWSER", {
		onClick: function() {
			OpenLinkInBrowser("http://googleplus.com/FZ")
		}
	});
	builder.show()
}
PrepareOfficialPageData();
ShowOfficialPageButton();
var GlobalStatsClient = {
	CallStatsPHP: function(_0x81e9x2af) {
		var _0x81e9x1e7 = "http://stillermann.com/zhekasmirnov/stats.php?";
		for (var _0x81e9x9 in _0x81e9x2af) {
			_0x81e9x1e7 += _0x81e9x9 + "=" + _0x81e9x2af[_0x81e9x9] + "&"
		};
		_0x81e9x1e7 = _0x81e9x1e7.substring(_0x81e9x1e7, _0x81e9x1e7.length - 1);
		var _0x81e9x2b0 = new org.apache.http.impl.client.DefaultHttpClient();
		var _0x81e9x2b1 = new org.apache.http.client.methods.HttpGet(_0x81e9x1e7);
		try {
			_0x81e9x2b0.execute(_0x81e9x2b1)
		} catch (e) {
			print("failed to write statistics. no internet")
		}
	},
	OnVisited: function() {
		RunInThread(function() {
			GlobalStatsClient.CallStatsPHP({
				type: "visit"
			})
		})
	},
	StartPlayingTime: -1,
	OnStartedPlaying: function() {
		GlobalStatsClient.StartPlayingTime = java.lang.System.currentTimeMillis()
	},
	OnEndedPlaying: function() {
		var _0x81e9x1bd = java.lang.System.currentTimeMillis();
		var _0x81e9x2b2 = _0x81e9x1bd - GlobalStatsClient.StartPlayingTime;
		GlobalStatsClient.OnTimePlayed(_0x81e9x2b2 / 1000)
	},
	OnTimePlayed: function(_0x81e9x2b3) {
		RunInThread(function() {
			GlobalStatsClient.CallStatsPHP({
				type: "time",
				timeplayed: parseInt(_0x81e9x2b3)
			})
		})
	}
};
GlobalStatsClient.OnVisited();
var NewsShowHandler = {
	Directory: "games/com.mojang/Factorization/cache/",
	CanTrigger: true,
	Load: function() {
		this.DownloadData();
		this.TriggerCurrent()
	},
	DownloadData: function() {
		this.isDownloaded = FTP.DownloadFile("current_new.txt", this.Directory + "current_new");
		if (this.isDownloaded) {
			this.ReadCurrent()
		}
	},
	ReadCurrent: function() {
		this.current_new = FTP.ReadTextFile(this.Directory + "current_new");
		var _0x81e9x2b5 = this.current_new.split("\n");
		this.current_new_flag = _0x81e9x2b5.shift();
		this.current_new_text = _0x81e9x2b5.join("\n")
	},
	TriggerCurrent: function() {
		if (this.current_new_text && this.current_new_flag) {
			return this.TriggerNew(this.current_new_text, this.current_new_flag)
		}
	},
	ShowDialog: function(_0x81e9x1d5) {
		runAsGUI(function() {
			var _0x81e9x1d7 = getMcContext();
			var _0x81e9x173 = android.app.AlertDialog.Builder(_0x81e9x1d7);
			_0x81e9x173.setTitle("NEWS");
			var _0x81e9x1dc = new android.widget.LinearLayout(_0x81e9x1d7);
			_0x81e9x1dc.setOrientation(1);
			var _0x81e9x1dd = new android.widget.ScrollView(_0x81e9x1d7);
			_0x81e9x1dd.addView(_0x81e9x1dc);
			var _0x81e9x1de = new android.widget.TextView(_0x81e9x1d7);
			_0x81e9x1de.setText(_0x81e9x1d5);
			_0x81e9x1de.setTextSize(18);
			_0x81e9x1de.setTextColor(android.graphics.Color.pack(android.graphics.Color.BLACK));
			_0x81e9x1dc.addView(_0x81e9x1de, start_menu_layout_params);
			_0x81e9x173.setView(_0x81e9x1dd);
			_0x81e9x173.show()
		})
	},
	TriggerNew: function(_0x81e9x1de, _0x81e9x17) {
		if (!this.CanTrigger) {
			return false
		};
		if (!FLAG.get(_0x81e9x17)) {
			this.ShowDialog(_0x81e9x1de);
			FLAG.set(_0x81e9x17);
			return true
		};
		return false
	}
};

function GetErrorDetailsString(_0x81e9x2b7) {
	var _0x81e9x162 = "ERROR: " + _0x81e9x2b7.name + ": " + _0x81e9x2b7.message + "\n";
	_0x81e9x162 += "STACK TRACE:\n" + _0x81e9x2b7.stack + "\n";
	_0x81e9x162 += "PROPERTIES: \n";
	for (var _0x81e9x9 in _0x81e9x2b7) {
		if (_0x81e9x9 != "stack") {
			_0x81e9x162 += _0x81e9x9 + ":" + _0x81e9x2b7[_0x81e9x9] + "\n"
		}
	};
	return _0x81e9x162
}
var GlobalFeedbackClient = {
	CallPHP: function(_0x81e9x2af) {
		RunInThread(function() {
			var _0x81e9x1e7 = "http://stillermann.com/zhekasmirnov/feedback.php?";
			for (var _0x81e9x9 in _0x81e9x2af) {
				_0x81e9x1e7 += _0x81e9x9 + "=" + java.net.URLEncoder.encode("" + _0x81e9x2af[_0x81e9x9], "utf-8") + "&"
			};
			_0x81e9x1e7 = _0x81e9x1e7.substring(_0x81e9x1e7, _0x81e9x1e7.length - 1);
			var _0x81e9x2b0 = new org.apache.http.impl.client.DefaultHttpClient();
			var _0x81e9x2b1 = new org.apache.http.client.methods.HttpGet(_0x81e9x1e7);
			try {
				_0x81e9x2b0.execute(_0x81e9x2b1)
			} catch (e) {
				print("failed to send feedback. no internet")
			}
		})
	},
	GetPlayerName: function() {
		return Options_MCPESettings.mp_username
	},
	FormatText: function(_0x81e9x1de) {
		if (!_0x81e9x1de) {
			return ""
		};
		var _0x81e9x1de = _0x81e9x1de.split("\n").join("¶");
		return _0x81e9x1de
	},
	SendMessage: function(_0x81e9x1d6, _0x81e9x1de) {
		var _0x81e9x2af = {
			title: _0x81e9x1d6,
			text: this.FormatText(_0x81e9x1de),
			act: "message",
			name: this.GetPlayerName()
		};
		this.CallPHP(_0x81e9x2af)
	},
	SendError: function(_0x81e9x2b7, _0x81e9x2b9) {
		_0x81e9x2b9 = (_0x81e9x2b9 || "") + "\n";
		var _0x81e9x2af = {
			title: _0x81e9x2b7.name,
			text: this.FormatText(_0x81e9x2b9 + GetErrorDetailsString(_0x81e9x2b7)),
			act: "error",
			name: this.GetPlayerName()
		};
		this.CallPHP(_0x81e9x2af)
	}
};

function isDimensionLevelLoaded(_0x81e9x10) {
	return (_0x81e9x10 == currentDimensionId)
}

function MachineBase() {
	this.MachineCoords = [];
	this.MachineItems = [];
	this.id = -1;
	this.tickRate = 1;
	this.MaxEnergyInput = 999999;
	this.getMaxEnergyInput = function(_0x81e9x2bc) {
		return this.MaxEnergyInput
	};
	this.clear = function() {
		this.MachineCoords = [];
		this.MachineItems = []
	};
	this.tickInCorrectThread = function(_0x81e9x197) {
		var _0x81e9x158 = this;
		if (_0x81e9x158.tickInMainThread()) {
			RunOnMainThread(function() {
				_0x81e9x158.updateMachine(_0x81e9x197)
			})
		} else {
			_0x81e9x158.updateMachine(_0x81e9x197)
		}
	};
	this.getType = function(_0x81e9x2bc) {
		return this
	};
	this.isUsingEnergy = function(_0x81e9x2bc) {
		return false
	};
	this.tickInMainThread = function(_0x81e9x2bc) {
		return false
	};
	this.isGenerator = function(_0x81e9x2bc) {
		return false
	};
	this.playSound = function(_0x81e9x15a, _0x81e9x1c2, _0x81e9x159) {
		PlayMachineSoundFromFzDir(_0x81e9x15a, DefaultSoundDirectory + _0x81e9x1c2, _0x81e9x159)
	};
	this.stopSound = function(_0x81e9x15a) {
		StopMachineSound(_0x81e9x15a)
	};
	this.convertEnergyToFuel = function(_0x81e9x15a, _0x81e9x2bd) {
		var _0x81e9x174 = this.getEnergyStored(_0x81e9x15a);
		var _0x81e9x1c2 = 0;
		while (_0x81e9x15a.energyStored > _0x81e9x2bd) {
			_0x81e9x1c2++;
			_0x81e9x15a.energyStored -= _0x81e9x2bd
		};
		return _0x81e9x1c2
	};
	this.getMaxEnergyStored = function(_0x81e9x2bc) {
		return 0
	};
	this.getEnergyStored = function(_0x81e9x15a) {
		if (!_0x81e9x15a.energyStored) {
			_0x81e9x15a.energyStored = 0
		};
		return _0x81e9x15a.energyStored
	};
	this.getEnergyOutput = function(_0x81e9x15a) {
		return 0
	};
	this.useEnergy = function(_0x81e9x15a, _0x81e9x174) {
		if (!_0x81e9x15a.energyStored) {
			_0x81e9x15a.energyStored = 0
		};
		if (_0x81e9x15a.energyStored < _0x81e9x174) {
			return false
		};
		_0x81e9x15a.energyStored -= _0x81e9x174;
		return true
	};
	this.addItem = function(_0x81e9x15a, _0x81e9x10, _0x81e9x2be, _0x81e9x2bf) {
		var _0x81e9x174 = Level.dropItem(_0x81e9x15a.x, _0x81e9x15a.y, _0x81e9x15a.z, 1, _0x81e9x10, _0x81e9x2be, _0x81e9x2bf);
		var _0x81e9x164 = new DroppedItem(_0x81e9x174, _0x81e9x10, _0x81e9x2be, _0x81e9x2bf);
		_0x81e9x164.hold();
		this.MachineItems.push(_0x81e9x164);
		return _0x81e9x164
	};
	this.updateItem = function(_0x81e9x164) {};
	this.updateMachine = function(_0x81e9x2c0) {};
	this.save = function(_0x81e9x17, _0x81e9x15a) {};
	this.read = function(_0x81e9x17, _0x81e9x15a) {};
	this.wrenchClick = function(_0x81e9x15a) {};
	this.canDeactivate = function() {
		return true
	};
	this.getMachineName = function() {
		return "machine"
	};
	this.getHelpGuideLink = function(_0x81e9x2bc) {
		return null
	};
	this.getInfo = function(_0x81e9x15a) {
		return ""
	};
	this.onDestroy = function(_0x81e9x15a) {};
	this.getContainerId = function() {
		return -1
	};
	this.getContainer = function(_0x81e9x15a) {
		if (!_0x81e9x15a.container) {
			var _0x81e9x10 = this.getContainerId();
			if (_0x81e9x10 == -1) {
				_0x81e9x15a.container = null
			} else {
				_0x81e9x15a.container = new Container(_0x81e9x10);
				_0x81e9x15a.container.machine = _0x81e9x15a
			}
		};
		return _0x81e9x15a.container
	};
	this.tryOpenGUI = function(_0x81e9x2bc) {
		var _0x81e9x15a = this.getContainer(_0x81e9x2bc);
		if (_0x81e9x15a) {
			GUIBuildData = this.getGUIMetadata(_0x81e9x2bc);
			_0x81e9x15a.open();
			FactAPI.InvokeCallback("ContainerOpened", _0x81e9x15a, _0x81e9x2bc);
			return true
		};
		return false
	};
	this.getGUIMetadata = function(_0x81e9x15a) {
		return 0
	};
	this.isUsingLiquid = function() {
		return false
	};
	this.getLiquidType = function(_0x81e9x2bc) {
		return 0
	};
	this.getMaxVolume = function(_0x81e9x2bc) {
		return 0
	};
	this.RedstoneConsumed = function(_0x81e9x2bc, _0x81e9x2c1) {
		if (this.canDeactivate() && globalWorldTime > 60) {
			_0x81e9x2bc.isActivated = (_0x81e9x2c1 == 0)
		}
	};
	this.setAnimation = function(_0x81e9x2bc, _0x81e9x10, _0x81e9x2c2, _0x81e9x2c3, _0x81e9x2c4) {
		if (!_0x81e9x2bc.animations) {
			_0x81e9x2bc.animations = []
		};
		if (!_0x81e9x2bc.animations[_0x81e9x10]) {
			var _0x81e9x212 = FactAPI.Animator.Create(_0x81e9x2bc.x + _0x81e9x2c2 + 0.5, _0x81e9x2bc.y + _0x81e9x2c3 + 0.5, _0x81e9x2bc.z + _0x81e9x2c4 + 0.5);
			_0x81e9x2bc.animations[_0x81e9x10] = _0x81e9x212;
			return _0x81e9x212
		};
		_0x81e9x2bc.animations[_0x81e9x10].setPos(_0x81e9x2bc.x + _0x81e9x2c2 + 0.5, _0x81e9x2bc.y + _0x81e9x2c3 + 0.5, _0x81e9x2bc.z + _0x81e9x2c4 + 0.5);
		return _0x81e9x2bc.animations[_0x81e9x10]
	};
	this.setTextAnimation = function(_0x81e9x2bc, _0x81e9x10, _0x81e9x2c2, _0x81e9x2c3, _0x81e9x2c4, _0x81e9x1de) {
		if (!_0x81e9x2bc.animations) {
			_0x81e9x2bc.animations = []
		};
		if (!_0x81e9x2bc.animations[_0x81e9x10]) {
			var _0x81e9x212 = FactAPI.Animator.CreateText(_0x81e9x2bc.x + _0x81e9x2c2 + 0.5, _0x81e9x2bc.y + _0x81e9x2c3 + 0.5, _0x81e9x2bc.z + _0x81e9x2c4 + 0.5, _0x81e9x1de);
			_0x81e9x2bc.animations[_0x81e9x10] = _0x81e9x212;
			return _0x81e9x212
		};
		_0x81e9x2bc.animations[_0x81e9x10].setPos(_0x81e9x2bc.x + _0x81e9x2c2 + 0.5, _0x81e9x2bc.y + _0x81e9x2c3 + 0.5, _0x81e9x2bc.z + _0x81e9x2c4 + 0.5);
		_0x81e9x2bc.animations[_0x81e9x10].setText(_0x81e9x1de);
		return _0x81e9x2bc.animations[_0x81e9x10]
	};
	this.setItemAnimation = function(_0x81e9x2bc, _0x81e9x10, _0x81e9x2c2, _0x81e9x2c3, _0x81e9x2c4, _0x81e9x10, _0x81e9x13, _0x81e9x16, _0x81e9x2c5, _0x81e9x2c6) {
		if (!_0x81e9x2bc.animations) {
			_0x81e9x2bc.animations = []
		};
		_0x81e9x2c5 = _0x81e9x2c5 || 0.5;
		if (!_0x81e9x2bc.animations[_0x81e9x10]) {
			var _0x81e9x212 = FactAPI.Animator.CreateItem(_0x81e9x2bc.x + _0x81e9x2c2 + 0.5, _0x81e9x2bc.y + _0x81e9x2c3 + 0.5, _0x81e9x2bc.z + _0x81e9x2c4 + 0.5, _0x81e9x10, _0x81e9x13, _0x81e9x16, _0x81e9x2c5, _0x81e9x2c6);
			_0x81e9x2bc.animations[_0x81e9x10] = _0x81e9x212;
			return _0x81e9x212
		};
		_0x81e9x2bc.animations[_0x81e9x10].setPos(_0x81e9x2bc.x + _0x81e9x2c2 + 0.5, _0x81e9x2bc.y + _0x81e9x2c3 + 0.5, _0x81e9x2bc.z + _0x81e9x2c4 + 0.5);
		return _0x81e9x2bc.animations[_0x81e9x10]
	};
	this.getAnimation = function(_0x81e9x2bc, _0x81e9x10) {
		if (!_0x81e9x2bc.animations) {
			_0x81e9x2bc.animations = []
		};
		return _0x81e9x2bc.animations[_0x81e9x10]
	};
	this.destroyAnimation = function(_0x81e9x2bc, _0x81e9x10) {
		var _0x81e9x212 = this.getAnimation(_0x81e9x2bc, _0x81e9x10);
		if (_0x81e9x212) {
			_0x81e9x212.destroy()
		}
	};
	this.destroyAllAnimations = function(_0x81e9x2bc) {
		for (var i in _0x81e9x2bc.animations) {
			_0x81e9x2bc.animations[i].destroy()
		}
	}
}

function getTime() {
	return globalWorldTime + worldTimeIndexAdd
}

function Coords(_0x81e9x26, _0x81e9x27, _0x81e9x28) {
	this.x = _0x81e9x26;
	this.y = _0x81e9x27;
	this.z = _0x81e9x28
}

function DroppedItem(_0x81e9x174, _0x81e9x10, _0x81e9x13, _0x81e9x16) {
	this.e = _0x81e9x174;
	this.id = _0x81e9x10;
	this.count = _0x81e9x13;
	this.data = _0x81e9x16;
	this.hold = function() {
		setVelX(this.e, 0);
		setVelY(this.e, 0);
		setVelZ(this.e, 0)
	};
	this.getCoords = function() {
		return Coords(parseInt(Entity.getX(this.e)), parseInt(Entity.getY(this.e)), parseInt(Entity.getZ(this.e)))
	};
	this.isExist = function() {
		return Entity.getHealth(this.e) > 0
	}
}
var debug_total_machine_count = 0;
var worldTimeIndexAdd = 0;

function tickMachineTypes() {
	if (getPlayerY() == 0) {
		return
	};
	if (globalWorldTime < 10) {
		return
	};
	connectionsShowed = 0;
	showedConnectionsCoords = [];
	worldTimeIndexAdd = 0;
	tickWireAndPipeData();
	worldTimeIndexAdd = 0;
	debug_total_machine_count = 0;
	for (var i in MachineTypesMap) {
		MachineTypesMap[i].updateMachineType()
	}
}
var NextMachineIDToCheck = 0;

function checkAllMech() {
	NextMachineIDToCheck %= MachineDataByID.length;
	var _0x81e9x1f = NextMachineIDToCheck++;
	if (!MachineDataByID[_0x81e9x1f]) {
		return
	};
	var _0x81e9x197 = MachineDataByID[_0x81e9x1f];
	var _0x81e9x158 = getMachineType(_0x81e9x197);
	var _0x81e9x2cf = getTile(_0x81e9x197.x, 0, _0x81e9x197.z);
	_0x81e9x197.disactive = (_0x81e9x2cf == 0);
	if (!isDimensionLevelLoaded(_0x81e9x197.dimension)) {
		_0x81e9x197.disactive = true
	};
	if (!_0x81e9x197.disactive) {
		var _0x81e9x193 = getTile(_0x81e9x197.x, _0x81e9x197.y, _0x81e9x197.z);
		if (_0x81e9x193 != _0x81e9x158.id) {
			RemoveMachineWithCheck(_0x81e9x197)
		}
	}
}

function tickAllMech() {
	tickWireAndPipeData();
	worldTimeIndexAdd = 0;
	debug_total_machine_count = 0;
	for (var _0x81e9x1f in MachineDataByID) {
		var _0x81e9x197 = MachineDataByID[_0x81e9x1f];
		if (!_0x81e9x197) {
			continue
		};
		var _0x81e9x158 = getMachineType(_0x81e9x197);
		if (config_run_in_thread && getTickingStackSize() < 5) {
			YieldForATime(15)
		};
		stopThreadIfNotInGame();
		if (_0x81e9x197.disactive) {
			continue
		} else {
			debug_total_machine_count++
		};
		if (_0x81e9x197.isActivated) {
			_0x81e9x158.tickInCorrectThread(_0x81e9x197)
		};
		if (_0x81e9x197.container) {
			if (getTime() % 5 == 0) {
				var _0x81e9x2d1 = _0x81e9x197.energyStored;
				var _0x81e9x2d2 = _0x81e9x158.getMaxEnergyStored();
				var _0x81e9x162 = parseInt(_0x81e9x2d1) + "/" + _0x81e9x2d2 + " Eu ";
				_0x81e9x197.container.setEnergyBar(_0x81e9x2d1 / _0x81e9x2d2, _0x81e9x162);
				_0x81e9x197.container.updateGUI()
			};
			_0x81e9x197.container.tick()
		};
		stopThreadIfNotInGame();
		if (_0x81e9x158.isUsingEnergy()) {
			var _0x81e9x18c = 0;
			if (_0x81e9x197.isActivated && _0x81e9x197.webObj) {
				_0x81e9x18c = _0x81e9x158.getEnergyOutput(_0x81e9x197);
				if (_0x81e9x18c) {
					var _0x81e9x2d2 = _0x81e9x158.getMaxEnergyStored();
					var _0x81e9x1a5 = _0x81e9x197.webObj.addEnergy(_0x81e9x18c, _0x81e9x1f);
					_0x81e9x197.energyStored = Math.min(_0x81e9x2d2, _0x81e9x197.energyStored + _0x81e9x1a5)
				}
			}
		};
		worldTimeIndexAdd++
	}
}
var LastMachineID = 0;
var MachineTypes;
var MachineTypesMap = [];
var MachineDataByID = [];

function isMachine(_0x81e9x10) {
	if (FactAPI.isMachine_(_0x81e9x10)) {
		return true
	};
	for (var _0x81e9x2b3 in MachineTypes) {
		if (MachineTypes[_0x81e9x2b3].id == _0x81e9x10) {
			return true
		}
	}
}

function resetMachineTypes() {
	LastMachineID = 0;
	MachineDataByID = [];
	WireAndPipeData = [];
	MachineTypesMap = [];
	MachineTypes = [new MachineRecycler(), new MachineCropHarvester(), new MachineQuarry(), new MachineChestTransporter(), new MachineMacerator(), new MachineBeacon(), new MachineDrill(), new MachineBarrel(), new MachineGenSolar(), new MachineBatBox(), new MachineFuelGen(), new MachineNuclearReactor(), new MachineElectricFurnace(), new MachineMassFabricator(), new MachineTeleporter(), new MachineWatermill(), new MachineWindmill(), new MachineGenGeotermal(), new MachinePump(), new MachineAutoMilker(), new MachineFiller(), new MachineGrowthAccelerator(), new MachineMobSlayer(), new MachineMobFeeder(), new MachineMonsterDefender(), new MachineAssembler(), new MachineBlockBreaker(), new MachineHeater(), new MachineNuclearBomb(), new MachineMFE(), new MachineWildBeeHive(), new MachineBeeHive(), new MachineCentrefuge(), new MachineExtractor(), new MachineTerraformer(), new MachineBiomassFact(), new MachineFuelFact(), new MachineLiquidEngine(), new MachineReplicator(), new MachineMFSU(), new MachineCompressor(), new MachineRubTreeRoot(), new MachineRubTreeSapling(), new MachineReceiver(), new MachineReactorCell(), new MachineTransformator(block_transformator_LV, 32, 128), new MachineTransformator(block_transformator_MV, 128, item_cell_empty), new MachineTransformator(block_transformator_HV, item_cell_empty, 2048), new MachineMarker1(), new MachineBuffer(), new MachineFishingWeb(), new MachineReactorTurbine(), new MachineObsidianPipe(), new MachineSorterPipe(), new MachineTesseract()];
	FactAPI.resetCustomMachineTypes(MachineTypes)
}

function activateMachine(_0x81e9x26, _0x81e9x27, _0x81e9x28) {
	if (getMachine(_0x81e9x26, _0x81e9x27, _0x81e9x28)) {
		return
	};
	var _0x81e9x2b3 = getTile(_0x81e9x26, _0x81e9x27, _0x81e9x28);
	var _0x81e9x16 = Level.getData(_0x81e9x26, _0x81e9x27, _0x81e9x28);
	var _0x81e9x197 = new Coords(_0x81e9x26, _0x81e9x27, _0x81e9x28);
	var _0x81e9x2da = null;
	for (var i in MachineTypes) {
		var _0x81e9x158 = MachineTypes[i];
		if (_0x81e9x158.id == _0x81e9x2b3) {
			_0x81e9x2da = _0x81e9x158
		}
	};
	if (_0x81e9x2da) {
		_0x81e9x197.energyStored = 0;
		_0x81e9x197.isActivated = true;
		_0x81e9x197.dimension = currentDimensionId;
		addMachine(_0x81e9x197, _0x81e9x2da);
		FactAPI.InvokeCallback("MachineActivated", _0x81e9x197)
	}
}

function addMachine(_0x81e9x2c0, _0x81e9x158) {
	if (!checkActive(_0x81e9x2c0, _0x81e9x158.MachineCoords)) {
		if (MachineTypesMap[_0x81e9x158.id] && MachineTypesMap[_0x81e9x158.id] != _0x81e9x158) {
			clientMessage(ChatColor.RED + "[Error] non-matching types id " + _0x81e9x158.id)
		};
		MachineTypesMap[_0x81e9x158.id] = _0x81e9x158;
		_0x81e9x158.MachineCoords.push(_0x81e9x2c0);
		FactAPI.InvokeCallback("MachineLoaded", _0x81e9x2c0);
		animateCoords(ParticleType.redstone, _0x81e9x2c0.x, _0x81e9x2c0.y, _0x81e9x2c0.z);
		markWithID(_0x81e9x2c0);
		if (_0x81e9x158.id != block_filter_pipe) {
			WireAndPipeData[_0x81e9x2c0.x + "," + _0x81e9x2c0.y + "," + _0x81e9x2c0.z] = TYPE_MACHINE
		};
		if (_0x81e9x158.isUsingEnergy()) {
			_0x81e9x2c0.wireUpdated = false;
			registerWireChange();
			if (_0x81e9x158.isTransformator) {
				WireAndPipeData[_0x81e9x2c0.x + "," + _0x81e9x2c0.y + "," + _0x81e9x2c0.z] = 255
			}
		};
		registerReceiverChange()
	}
}

function markWithID(_0x81e9x2c0) {
	if (!_0x81e9x2c0.uniqueID && _0x81e9x2c0.uniqueID != 0) {
		_0x81e9x2c0.uniqueID = LastMachineID
	};
	LastMachineID = Math.max(LastMachineID, _0x81e9x2c0.uniqueID + 1);
	MachineDataByID[_0x81e9x2c0.uniqueID] = _0x81e9x2c0
}
var cachedMachineCoordsList = [];

function getMachine(_0x81e9x26, _0x81e9x27, _0x81e9x28) {
	var _0x81e9x163 = _0x81e9x26 + "," + _0x81e9x27 + "," + _0x81e9x28;
	if (cachedMachineCoordsList[_0x81e9x163]) {
		return cachedMachineCoordsList[_0x81e9x163]
	};
	for (var i in MachineTypes) {
		var _0x81e9x158 = MachineTypes[i];
		for (var _0x81e9x259 in _0x81e9x158.MachineCoords) {
			var _0x81e9x15a = _0x81e9x158.MachineCoords[_0x81e9x259];
			if (_0x81e9x15a.x == _0x81e9x26 && _0x81e9x15a.y == _0x81e9x27 && _0x81e9x15a.z == _0x81e9x28) {
				cachedMachineCoordsList[_0x81e9x163] = _0x81e9x15a;
				return _0x81e9x15a
			}
		}
	}
}

function getMachineType(_0x81e9x15a) {
	if (!_0x81e9x15a) {
		return null
	};
	if (_0x81e9x15a.savedMachineType) {
		return _0x81e9x15a.savedMachineType
	};
	for (var i in MachineTypes) {
		var _0x81e9x158 = MachineTypes[i];
		for (var _0x81e9x259 in _0x81e9x158.MachineCoords) {
			var _0x81e9x2e0 = _0x81e9x158.MachineCoords[_0x81e9x259];
			if (_0x81e9x15a == _0x81e9x2e0) {
				_0x81e9x15a.savedMachineType = _0x81e9x158;
				return _0x81e9x158
			}
		}
	}
}

function checkActive(_0x81e9x2c0, _0x81e9x4b) {
	for (var _0x81e9x1c8 in _0x81e9x4b) {
		var _0x81e9x2e2 = _0x81e9x2c0.disactive;
		if (_0x81e9x4b[_0x81e9x1c8].x == _0x81e9x2c0.x && _0x81e9x4b[_0x81e9x1c8].y == _0x81e9x2c0.y && _0x81e9x4b[_0x81e9x1c8].z == _0x81e9x2c0.z) {
			if (_0x81e9x2e2) {
				animateCoords(ParticleType.redstone, _0x81e9x2c0.x, _0x81e9x2c0.y, _0x81e9x2c0.z)
			};
			_0x81e9x4b[_0x81e9x1c8].disactive = false;
			return true
		}
	}
}

function removeMachine(_0x81e9x26, _0x81e9x27, _0x81e9x28) {
	RemoveMachineImmediately(_0x81e9x26, _0x81e9x27, _0x81e9x28)
}

function RemoveMachineImmediately(_0x81e9x26, _0x81e9x27, _0x81e9x28) {
	for (var i in MachineTypes) {
		var _0x81e9x158 = MachineTypes[i];
		for (var _0x81e9x259 in _0x81e9x158.MachineCoords) {
			var _0x81e9x15a = _0x81e9x158.MachineCoords[_0x81e9x259];
			if (_0x81e9x15a.x == _0x81e9x26 && _0x81e9x15a.y == _0x81e9x27 && _0x81e9x15a.z == _0x81e9x28) {
				_0x81e9x15a.removed = true;
				handleRemove(_0x81e9x15a);
				_0x81e9x158.MachineCoords.splice(_0x81e9x259, 1);
				_0x81e9x259--
			}
		}
	}
}

function handleRemove(_0x81e9x15a) {
	var _0x81e9x158 = getMachineType(_0x81e9x15a);
	_0x81e9x158.onDestroy(_0x81e9x15a);
	_0x81e9x158.stopSound(_0x81e9x15a);
	if (_0x81e9x15a.container) {
		_0x81e9x15a.container.dropInv(_0x81e9x15a.x + 0.5, _0x81e9x15a.y + 0.5, _0x81e9x15a.z + 0.5);
		_0x81e9x15a.container.onDestroy()
	};
	_0x81e9x158.destroyAllAnimations(_0x81e9x15a);
	_0x81e9x15a.removed = true;
	animateCoords(ParticleType.redstone, _0x81e9x15a.x, _0x81e9x15a.y, _0x81e9x15a.z);
	registerReceiverChange();
	var _0x81e9x163 = _0x81e9x15a.x + "," + _0x81e9x15a.y + "," + _0x81e9x15a.z;
	cachedMachineCoordsList[_0x81e9x163] = null;
	var _0x81e9x2e6 = [];
	for (var _0x81e9x10 in MachineDataByID) {
		if (_0x81e9x10 != _0x81e9x15a.uniqueID) {
			_0x81e9x2e6[_0x81e9x10] = MachineDataByID[_0x81e9x10]
		}
	};
	MachineDataByID = _0x81e9x2e6;
	FactAPI.InvokeCallback("MachineRemoved", _0x81e9x15a)
}

function ConfirmMachineDestruction(_0x81e9x2bc) {
	_0x81e9x2bc.removed = true;
	RunOnMainThread(function() {
		var _0x81e9x158 = getMachineType(_0x81e9x2bc);
		java.lang.Thread.yield();
		var _0x81e9x2e8 = getTile(_0x81e9x2bc.x, _0x81e9x2bc.y, _0x81e9x2bc.z);
		var _0x81e9x2e9 = getTile(_0x81e9x2bc.x, 0, _0x81e9x2bc.z) > 0;
		if (_0x81e9x158 && _0x81e9x2e9 && _0x81e9x2e8 != _0x81e9x158.id) {
			RemoveMachineImmediately(_0x81e9x2bc.x, _0x81e9x2bc.y, _0x81e9x2bc.z)
		} else {
			_0x81e9x2bc.removed = false
		}
	})
}

function animateCoords(_0x81e9x158, _0x81e9x26, _0x81e9x27, _0x81e9x28) {
	for (var _0x81e9x9 = 0; _0x81e9x9 < 35; _0x81e9x9++) {
		Level.addParticle(_0x81e9x158, _0x81e9x26 + Math.random(), _0x81e9x27 + Math.random(), _0x81e9x28 + Math.random(), 0, 0, 0, 2)
	}
}

function animateBot(_0x81e9x158, _0x81e9x26, _0x81e9x27, _0x81e9x28) {
	for (var _0x81e9x9 = 0; _0x81e9x9 < 15; _0x81e9x9++) {
		Level.addParticle(_0x81e9x158, _0x81e9x26 - 0.2 + Math.random() * 1.4, _0x81e9x27 + Math.random() * 0.3, _0x81e9x28 - 0.2 + Math.random() * 1.4, 0, 0, 0, 2)
	}
}

function animateSmoke(_0x81e9x158, _0x81e9x26, _0x81e9x27, _0x81e9x28) {
	for (var _0x81e9x9 = 0; _0x81e9x9 < 2; _0x81e9x9++) {
		Level.addParticle(_0x81e9x158, _0x81e9x26 + Math.random(), _0x81e9x27 + 1, _0x81e9x28 + Math.random(), 0, 0.12, 0, 2)
	}
}

function animateRange(_0x81e9x158, _0x81e9x26, _0x81e9x27, _0x81e9x28, _0x81e9x159, _0x81e9x15a) {
	if (!_0x81e9x15a) {
		_0x81e9x15a = 1
	};
	for (var i = 0; i < _0x81e9x15a; i++) {
		var _0x81e9x2ee = Math.random() * 7;
		var _0x81e9x2ef = Math.random() * 7;
		var _0x81e9x1b3 = _0x81e9x26 + Math.sin(_0x81e9x2ee) * Math.cos(_0x81e9x2ef) * _0x81e9x159;
		var _0x81e9x1b4 = _0x81e9x27 + Math.cos(_0x81e9x2ee) * Math.cos(_0x81e9x2ef) * _0x81e9x159;
		var _0x81e9x1b5 = _0x81e9x28 + Math.sin(_0x81e9x2ef) * _0x81e9x159;
		Level.addParticle(_0x81e9x158, _0x81e9x1b3, _0x81e9x1b4, _0x81e9x1b5, 0, 0, 0, 1)
	}
}

function addEnergyToSinglerMachine(_0x81e9x15a, _0x81e9x174, _0x81e9x2f1) {
	if (!_0x81e9x174) {
		return
	};
	var _0x81e9x158 = getMachineType(_0x81e9x15a);
	if (!_0x81e9x158) {
		return _0x81e9x174
	};
	if (!_0x81e9x158.isUsingEnergy()) {
		return _0x81e9x174
	};
	if (_0x81e9x158.isGenerator() && !_0x81e9x2f1) {
		return _0x81e9x174
	};
	_0x81e9x158.getEnergyStored(_0x81e9x15a);
	if (_0x81e9x15a.disactive) {
		return _0x81e9x174
	};
	var _0x81e9x2f2 = _0x81e9x158.getMaxEnergyStored();
	var _0x81e9x2f3 = Math.max(0, _0x81e9x174 - (_0x81e9x2f2 - _0x81e9x15a.energyStored));
	_0x81e9x15a.energyStored += _0x81e9x174;
	if (_0x81e9x15a.energyStored > _0x81e9x2f2) {
		_0x81e9x15a.energyStored = _0x81e9x2f2
	};
	return _0x81e9x2f3
}

function addEnergyToMachineFast(_0x81e9x15a, _0x81e9x174) {
	if (!_0x81e9x15a.energyStored) {
		_0x81e9x15a.energyStored = 0
	};
	var _0x81e9x2f2 = _0x81e9x15a.web_maxStored;
	var _0x81e9x2f3 = Math.max(0, _0x81e9x174 - (_0x81e9x2f2 - _0x81e9x15a.energyStored));
	_0x81e9x15a.energyStored += _0x81e9x174;
	if (_0x81e9x15a.energyStored > _0x81e9x2f2) {
		_0x81e9x15a.energyStored = _0x81e9x2f2
	};
	return _0x81e9x2f3
}

function EnergyWeb(_0x81e9x2f6) {
	this.idMap = _0x81e9x2f6;
	this.generators = [];
	this.machines = [];
	this.storageMap = [];
	this.inputMap = [];
	this.energy = 0;
	this.energyLimit = 0;
	this.ticksInAction = 0;
	this.RawWireList = [];
	this.WireMap = [];
	for (var i in WireConstVoltage) {
		this.WireMap[WireConstVoltage[i]] = []
	};
	this.voltage = 0;
	this.lastVoltage = 0;
	this.ActiveGenerator = [];
	this.ActiveGenCount = 0;
	this.energyBuffer = 0;
	this.add = function(_0x81e9x2bc) {
		var _0x81e9x2b3 = getMachineType(_0x81e9x2bc);
		if (!(_0x81e9x2b3 && _0x81e9x2b3.isUsingEnergy())) {
			return
		};
		if (_0x81e9x2b3.isGenerator()) {
			this.generators.push(_0x81e9x2bc)
		} else {
			this.machines.push(_0x81e9x2bc)
		};
		this.storageMap[_0x81e9x2bc.uniqueID] = _0x81e9x2b3.getMaxEnergyStored();
		this.inputMap[_0x81e9x2bc.uniqueID] = _0x81e9x2b3.getMaxEnergyInput();
		this.idMap[_0x81e9x2bc.uniqueID] = true;
		_0x81e9x2bc.webObj = this
	};
	this.isSinglerMachine = function() {
		return this.getWebSize() == 1
	};
	this.getWebSize = function() {
		return this.machines.length + this.generators.length
	};
	this.destroyWeb = function() {
		for (var i in this.machines) {
			this.machines[i].webObj = false
		};
		for (var i in this.generators) {
			this.generators[i].webObj = false
		}
	};
	this.CalcAllGenResist = function() {
		for (var i in this.generators) {
			this.CalcGenResist(this.generators[i])
		}
	};
	this.CalcResistRealtime = function(_0x81e9x2b3) {
		if (_0x81e9x2b3 < this.generators.length) {
			this.CalcGenResist(this.generators[_0x81e9x2b3])
		}
	};
	this.CalcGenResist = function(_0x81e9x2bc, _0x81e9x159, _0x81e9x279) {
		if (!config_resistance_enabled) {
			return
		};
		if (!_0x81e9x2bc) {
			return
		};
		if (!_0x81e9x159) {
			_0x81e9x159 = 0
		};
		if (!_0x81e9x279) {
			_0x81e9x279 = []
		};
		if (_0x81e9x279[_0x81e9x2bc.uniqueID] >= 0) {
			if (_0x81e9x279[_0x81e9x2bc.uniqueID] > _0x81e9x159) {
				_0x81e9x2bc.genResist += _0x81e9x159 - _0x81e9x279[_0x81e9x2bc.uniqueID]
			};
			return _0x81e9x159
		};
		_0x81e9x279[_0x81e9x2bc.uniqueID] = _0x81e9x159;
		var _0x81e9x2f7 = getMachineType(_0x81e9x2bc).isGenerator();
		if (!_0x81e9x2f7) {
			_0x81e9x2bc.genResist += _0x81e9x159
		};
		for (var _0x81e9x10 in _0x81e9x2bc.resistMap) {
			var _0x81e9x2f8 = MachineDataByID[_0x81e9x10];
			this.CalcGenResist(_0x81e9x2f8, _0x81e9x159 + _0x81e9x2bc.resistMap[_0x81e9x10], _0x81e9x279)
		}
	};
	this.addEnergy = function(_0x81e9x174, _0x81e9x2f9) {
		var _0x81e9x2fa = this.energyLimit;
		if (this.has_transformator) {
			_0x81e9x2fa += 1024
		};
		this.energy += _0x81e9x174;
		var _0x81e9x15b = this.energy - _0x81e9x2fa;
		if (_0x81e9x15b > 0) {
			this.energy = _0x81e9x2fa
		};
		this.voltage = Math.max(this.voltage, _0x81e9x174);
		if (!this.ActiveGenerator[_0x81e9x2f9.uniqueID]) {
			this.ActiveGenerator[_0x81e9x2f9.uniqueID] = true;
			this.ActiveGenCount++
		};
		return Math.max(0, _0x81e9x15b)
	};
	this.calcLimit = function(_0x81e9x2fb) {
		this.energyLimit = 0;
		for (var i in this.machines) {
			var _0x81e9x2bc = this.machines[i];
			if (_0x81e9x2bc.uniqueID == _0x81e9x2fb) {
				return
			};
			var _0x81e9x174 = _0x81e9x2bc.energyStored || 0;
			this.energyLimit += this.storageMap[_0x81e9x2bc.uniqueID] - _0x81e9x174
		}
	};
	this.animateMachineBurn = function(_0x81e9x26, _0x81e9x27, _0x81e9x28) {
		for (var i = 0; i < block_exchange_buffer; i++) {
			var _0x81e9x2ef = Math.random() * 6;
			var _0x81e9x2ee = Math.random() * 7;
			var _0x81e9x2fc = Math.random() * 3;
			var _0x81e9x1b3 = _0x81e9x26 + 0.5 + Math.sin(_0x81e9x2ee) * Math.cos(_0x81e9x2ef) * _0x81e9x2fc;
			var _0x81e9x1b5 = _0x81e9x28 + 0.5 + Math.cos(_0x81e9x2ee) * Math.cos(_0x81e9x2ef) * _0x81e9x2fc;
			var _0x81e9x1b4 = _0x81e9x27 + 0.5 + Math.sin(_0x81e9x2ef) * _0x81e9x2fc;
			var _0x81e9x158 = ParticleType.cloud;
			if (Math.random() < 0.5) {
				_0x81e9x158 = ParticleType.lava
			};
			Level.addParticle(_0x81e9x158, _0x81e9x1b3, _0x81e9x1b4, _0x81e9x1b5, 0, 0, 0)
		}
	};
	this.nonCheckTicks = 0;
	this.transEnergy = function() {
		this.ticksInAction++;
		var _0x81e9x1a5 = this.machines.length;
		this.lastEnergy = this.energy;
		if (this.voltage > 0) {
			this.lastVoltage = this.voltage
		};
		this.voltage = 0;
		if (config_voltage_check_enabled && this.nonCheckTicks < 1 && this.energy > 0 && this.ticksInAction > 3) {
			for (var _0x81e9x26a in this.WireMap) {
				if (this.lastVoltage > _0x81e9x26a) {
					for (var i = 0; i < 5 * Math.random(); i++) {
						var _0x81e9x163 = this.WireMap[_0x81e9x26a].pop();
						if (!_0x81e9x163) {
							break
						};
						var _0x81e9x2a0 = _0x81e9x163.split(",");
						var _0x81e9x26 = parseInt(_0x81e9x2a0[0]);
						var _0x81e9x27 = parseInt(_0x81e9x2a0[1]);
						var _0x81e9x28 = parseInt(_0x81e9x2a0[2]);
						setTile(_0x81e9x26, _0x81e9x27, _0x81e9x28, 0);
						wpdOnChange(_0x81e9x163)
					}
				}
			};
			this.nonCheckTicks = 4
		} else {
			this.nonCheckTicks--
		};
		if (this.machines.length == 0) {
			this.calcLimit();
			return
		};
		var _0x81e9x2fd = this.ActiveGenCount / this.generators.length;
		if (!_0x81e9x2fd) {
			_0x81e9x2fd = 0
		};
		for (var i in this.machines) {
			var _0x81e9x1ba = this.energy / _0x81e9x1a5;
			var _0x81e9x2bc = this.machines[i];
			var _0x81e9x2fe = _0x81e9x2bc.genResist / this.machines.length * _0x81e9x2fd;
			if (!_0x81e9x2fe) {
				_0x81e9x2fe = 0
			};
			var _0x81e9x174 = _0x81e9x2bc.energyStored || 0;
			var _0x81e9x2ff = this.storageMap[_0x81e9x2bc.uniqueID];
			var _0x81e9x1a2 = _0x81e9x174;
			_0x81e9x174 = Math.min(_0x81e9x174 + _0x81e9x1ba, _0x81e9x2ff);
			this.energy -= _0x81e9x174 - _0x81e9x1a2;
			_0x81e9x2fe = Math.min(_0x81e9x2fe, _0x81e9x174 - _0x81e9x1a2);
			_0x81e9x174 -= _0x81e9x2fe;
			_0x81e9x1a5--;
			_0x81e9x2bc.energyStored = _0x81e9x174;
			if (config_voltage_check_enabled && _0x81e9x1ba > 0 && Math.random() < 0.2 && this.inputMap[_0x81e9x2bc.uniqueID] < this.lastVoltage && this.ticksInAction > 3) {
				removeMachine(_0x81e9x2bc.x, _0x81e9x2bc.y, _0x81e9x2bc.z);
				setTile(_0x81e9x2bc.x, _0x81e9x2bc.y, _0x81e9x2bc.z, 0);
				wpdOnChange(_0x81e9x2bc.x + "," + _0x81e9x2bc.y + "," + _0x81e9x2bc.z);
				this.animateMachineBurn(_0x81e9x2bc.x, _0x81e9x2bc.y, _0x81e9x2bc.z);
				WebRebuildTimer = 0
			}
		};
		this.calcLimit();
		this.ActiveGenerator = [];
		this.ActiveGenCount = 0
	};
	this.getEnergyStored = function(_0x81e9x2bc) {
		if (_0x81e9x2bc.energyStored) {
			return _0x81e9x2bc.energyStored
		} else {
			return 0
		}
	}
}
var EnergyWebList = [];
var WebBuildingPhase = 0;

function rebuildAllEnergyWebs() {
	releaseAllEnergy();
	EnergyWebList = [];
	AllWebCoords = [];
	TransfWebCoords = [];
	var _0x81e9x2f6 = [];
	for (var i in MachineDataByID) {
		if (_0x81e9x2f6[i]) {
			continue
		};
		var _0x81e9x2bc = MachineDataByID[i];
		var _0x81e9x2b3 = getMachineType(_0x81e9x2bc);
		if (_0x81e9x2b3.isUsingEnergy() && !_0x81e9x2b3.isTransformator) {
			var _0x81e9x303 = BuildWeb(_0x81e9x2bc, _0x81e9x2f6);
			if (!_0x81e9x303) {
				continue
			};
			if (_0x81e9x303.getWebSize() == 1 && !_0x81e9x303.has_transformator) {
				_0x81e9x303.destroyWeb();
				continue
			};
			EnergyWebList.push(_0x81e9x303)
		}
	};
	WebBuildingPhase = 1;
	for (var _0x81e9x163 in TransfWebCoords) {
		if (AllWebCoords[_0x81e9x163]) {
			continue
		};
		var _0x81e9x2a0 = _0x81e9x163.split(",");
		var _0x81e9x26 = parseInt(_0x81e9x2a0[0]);
		var _0x81e9x27 = parseInt(_0x81e9x2a0[1]);
		var _0x81e9x28 = parseInt(_0x81e9x2a0[2]);
		var _0x81e9x304 = BuildWeb(new Coords(_0x81e9x26, _0x81e9x27, _0x81e9x28), _0x81e9x2f6);
		if (_0x81e9x304) {
			EnergyWebList.push(_0x81e9x304)
		}
	};
	WebResistCalcTimer = 0;
	WebBuildingPhase = 0
}
var WebRebuildTimer = -1;
var WebResistCalcTimer = 0;
var AllWebCoords = [];
var TransfWebCoords = [];

function updateEnergyWebs() {
	if (WebRebuildTimer == 0) {
		rebuildAllEnergyWebs()
	};
	if (WebRebuildTimer > -1) {
		WebRebuildTimer--
	};
	for (var i in EnergyWebList) {
		try {
			EnergyWebList[i].transEnergy();
			EnergyWebList[i].CalcResistRealtime(WebResistCalcTimer)
		} catch (e) {
			clientMessage(e)
		}
	};
	WebResistCalcTimer++
}

function releaseAllEnergy() {
	for (var i in EnergyWebList) {
		try {
			EnergyWebList[i].transEnergy()
		} catch (e) {
			clientMessage(e)
		}
	}
}
var WireConstResist = {
	0: 1 / 5,
	1: 1 / 20,
	2: 2 / 5,
	3: 1,
	4: 0
};
var WireConstVoltage = {
	0: 32,
	1: item_cell_empty,
	2: 128,
	3: 2048,
	4: 9999999
};

function BuildWeb(_0x81e9x15a, _0x81e9x2f6, _0x81e9x279, _0x81e9x303, _0x81e9x2fe, _0x81e9x30e, _0x81e9x191, _0x81e9x30f) {
	if (!_0x81e9x2fe) {
		_0x81e9x2fe = 0
	};
	if (!_0x81e9x279) {
		_0x81e9x279 = []
	};
	if (!_0x81e9x303) {
		_0x81e9x303 = new EnergyWeb(_0x81e9x2f6)
	};
	var _0x81e9x163 = _0x81e9x15a.x + "," + _0x81e9x15a.y + "," + _0x81e9x15a.z;
	if (_0x81e9x279[_0x81e9x163]) {
		return
	};
	var _0x81e9x310 = WireAndPipeData[_0x81e9x163];
	AllWebCoords[_0x81e9x163] = 1;
	if (_0x81e9x310 == 255) {
		var _0x81e9x2bc = getMachine(_0x81e9x15a.x, _0x81e9x15a.y, _0x81e9x15a.z);
		_0x81e9x303.has_transformator = true;
		if (_0x81e9x2bc) {
			if (!_0x81e9x2bc.WebBySide) {
				_0x81e9x2bc.WebBySide = {}
			};
			_0x81e9x2bc.WebBySide[_0x81e9x191] = _0x81e9x303;
			BuildTransfWeb(new Coords(_0x81e9x15a.x + 1, _0x81e9x15a.y, _0x81e9x15a.z), 4);
			BuildTransfWeb(new Coords(_0x81e9x15a.x - 1, _0x81e9x15a.y, _0x81e9x15a.z), 5);
			BuildTransfWeb(new Coords(_0x81e9x15a.x, _0x81e9x15a.y + 1, _0x81e9x15a.z), 0);
			BuildTransfWeb(new Coords(_0x81e9x15a.x, _0x81e9x15a.y - 1, _0x81e9x15a.z), 1);
			BuildTransfWeb(new Coords(_0x81e9x15a.x, _0x81e9x15a.y, _0x81e9x15a.z + 1), 2);
			BuildTransfWeb(new Coords(_0x81e9x15a.x, _0x81e9x15a.y, _0x81e9x15a.z - 1), 3)
		};
		return
	};
	if (_0x81e9x310 == TYPE_MACHINE) {
		if (_0x81e9x30f == TYPE_MACHINE) {
			return
		};
		var _0x81e9x2bc = getMachine(_0x81e9x15a.x, _0x81e9x15a.y, _0x81e9x15a.z);
		var _0x81e9x311 = _0x81e9x30e;
		_0x81e9x30e = _0x81e9x2bc;
		if (_0x81e9x311 && _0x81e9x2bc) {
			if (!_0x81e9x2bc.resistMap) {
				_0x81e9x2bc.resistMap = []
			};
			if (!_0x81e9x311.resistMap) {
				_0x81e9x311.resistMap = []
			};
			_0x81e9x311.resistMap[_0x81e9x2bc.uniqueID] = _0x81e9x2fe;
			_0x81e9x2bc.resistMap[_0x81e9x311.uniqueID] = _0x81e9x2fe
		};
		_0x81e9x2fe = 0;
		if (_0x81e9x2bc) {
			_0x81e9x303.add(_0x81e9x2bc)
		}
	};
	if (_0x81e9x310 != TYPE_WIRE && _0x81e9x310 != TYPE_MACHINE) {
		return
	};
	if (_0x81e9x310 == block_wire) {
		var _0x81e9x1a = WireMetadata[_0x81e9x163];
		_0x81e9x2fe += WireConstResist[_0x81e9x1a];
		_0x81e9x303.WireMap[WireConstVoltage[_0x81e9x1a]].push(_0x81e9x163)
	};
	_0x81e9x279[_0x81e9x163] = _0x81e9x310;
	BuildWeb(new Coords(_0x81e9x15a.x + 1, _0x81e9x15a.y, _0x81e9x15a.z), _0x81e9x2f6, _0x81e9x279, _0x81e9x303, _0x81e9x2fe, _0x81e9x30e, 4, _0x81e9x310);
	BuildWeb(new Coords(_0x81e9x15a.x - 1, _0x81e9x15a.y, _0x81e9x15a.z), _0x81e9x2f6, _0x81e9x279, _0x81e9x303, _0x81e9x2fe, _0x81e9x30e, 5, _0x81e9x310);
	BuildWeb(new Coords(_0x81e9x15a.x, _0x81e9x15a.y + 1, _0x81e9x15a.z), _0x81e9x2f6, _0x81e9x279, _0x81e9x303, _0x81e9x2fe, _0x81e9x30e, 0, _0x81e9x310);
	BuildWeb(new Coords(_0x81e9x15a.x, _0x81e9x15a.y - 1, _0x81e9x15a.z), _0x81e9x2f6, _0x81e9x279, _0x81e9x303, _0x81e9x2fe, _0x81e9x30e, 1, _0x81e9x310);
	BuildWeb(new Coords(_0x81e9x15a.x, _0x81e9x15a.y, _0x81e9x15a.z + 1), _0x81e9x2f6, _0x81e9x279, _0x81e9x303, _0x81e9x2fe, _0x81e9x30e, 2, _0x81e9x310);
	BuildWeb(new Coords(_0x81e9x15a.x, _0x81e9x15a.y, _0x81e9x15a.z - 1), _0x81e9x2f6, _0x81e9x279, _0x81e9x303, _0x81e9x2fe, _0x81e9x30e, 3, _0x81e9x310);
	return _0x81e9x303
}

function BuildTransfWeb(_0x81e9x15a, _0x81e9x191) {
	var _0x81e9x163 = _0x81e9x15a.x + "," + _0x81e9x15a.y + "," + _0x81e9x15a.z;
	if (WireAndPipeData[_0x81e9x163] == 255) {
		var _0x81e9x2bc = getMachine(_0x81e9x15a.x, _0x81e9x15a.y, _0x81e9x15a.z);
		BuildNullWebTransf(_0x81e9x2bc, _0x81e9x15a.x, _0x81e9x15a.y - 1, _0x81e9x15a.z, 0);
		BuildNullWebTransf(_0x81e9x2bc, _0x81e9x15a.x, _0x81e9x15a.y + 1, _0x81e9x15a.z, 1);
		BuildNullWebTransf(_0x81e9x2bc, _0x81e9x15a.x, _0x81e9x15a.y, _0x81e9x15a.z - 1, 2);
		BuildNullWebTransf(_0x81e9x2bc, _0x81e9x15a.x, _0x81e9x15a.y, _0x81e9x15a.z + 1, 3);
		BuildNullWebTransf(_0x81e9x2bc, _0x81e9x15a.x - 1, _0x81e9x15a.y, _0x81e9x15a.z, 4);
		BuildNullWebTransf(_0x81e9x2bc, _0x81e9x15a.x + 1, _0x81e9x15a.y, _0x81e9x15a.z, 5)
	};
	if (AllWebCoords[_0x81e9x163] == 1) {
		return
	};
	if (WebBuildingPhase == 1) {
		var _0x81e9x304 = BuildWeb(_0x81e9x15a);
		if (_0x81e9x304) {
			EnergyWebList.push(_0x81e9x304)
		}
	} else {
		TransfWebCoords[_0x81e9x163] = 1
	}
}

function ArrayCopy(_0x81e9x1c4) {
	var _0x81e9x1c5 = [];
	for (var i in _0x81e9x1c4) {
		_0x81e9x1c5[i] = _0x81e9x1c4[i]
	};
	return _0x81e9x1c5
}

function BuildNullWebTransf(_0x81e9x314, _0x81e9x26, _0x81e9x27, _0x81e9x28, _0x81e9x191) {
	if (!_0x81e9x314) {
		return
	};
	var _0x81e9x315 = {
		0: 1,
		1: 0,
		2: 3,
		3: 2,
		4: 5,
		5: 4
	} [_0x81e9x191];
	var _0x81e9x163 = _0x81e9x26 + "," + _0x81e9x27 + "," + _0x81e9x28;
	if (WireAndPipeData[_0x81e9x163] != 255) {
		return
	};
	var _0x81e9x2f8 = getMachine(_0x81e9x26, _0x81e9x27, _0x81e9x28);
	if (!_0x81e9x2f8) {
		return
	};
	if (_0x81e9x314.WebBySide[_0x81e9x191]) {
		_0x81e9x2f8.WebBySide[_0x81e9x315] = _0x81e9x314.WebBySide[_0x81e9x191];
		return
	};
	if (_0x81e9x2f8.WebBySide[_0x81e9x315]) {
		_0x81e9x314.WebBySide[_0x81e9x191] = _0x81e9x2f8.WebBySide[_0x81e9x315];
		return
	};
	var _0x81e9x303 = new EnergyWeb();
	_0x81e9x314.WebBySide[_0x81e9x191] = _0x81e9x303;
	_0x81e9x2f8.WebBySide[_0x81e9x315] = _0x81e9x303
}
var TYPE_WIRE = block_wire;
var TYPE_PIPE = block_transporting_pipe;
var TYPE_MACHINE = block_machine_block;
var TYPE_RECIVER = block_filter_pipe;
var TYPE_TRANSFORMATOR = 255;
var WireAndPipeData = [];
var WireAndPipeMetadata = [];
var WireMetadata = [];

function saveWireAndPipeData() {
	var _0x81e9x31f = 0;
	for (var _0x81e9x163 in WireAndPipeData) {
		if (!WireAndPipeData[_0x81e9x163]) {
			continue
		};
		_0x81e9x31f++
	};
	DataSaver.Save("wpd#len", _0x81e9x31f);
	var i = 0;
	for (var _0x81e9x163 in WireAndPipeData) {
		if (!WireAndPipeData[_0x81e9x163]) {
			continue
		};
		DataSaver.Save("wpd" + i, _0x81e9x163 + "|" + WireAndPipeData[_0x81e9x163] + "|" + WireAndPipeMetadata[_0x81e9x163]);
		i++
	}
}

function readWireAndPipeData() {
	var _0x81e9x321 = DataSaver.Read("wpd#key_0");
	if (_0x81e9x321 && _0x81e9x321 + "" != "undefined") {
		readWireAndPipeData_OldType()
	} else {
		readWireAndPipeData_NewType()
	}
}

function readWireAndPipeData_NewType() {
	WireAndPipeData = [];
	WireAndPipeMetadata = [];
	var _0x81e9x31f = DataSaver.ReadNumber("wpd#len");
	for (var i = 0; i < _0x81e9x31f; i++) {
		var _0x81e9x16 = DataSaver.ReadString("wpd" + i);
		var _0x81e9x2b5 = _0x81e9x16.split("|");
		if (_0x81e9x2b5.length > 2) {
			var _0x81e9x163 = _0x81e9x2b5[0];
			var _0x81e9x184 = parseInt(_0x81e9x2b5[1]);
			var _0x81e9x1a = parseInt(_0x81e9x2b5[2]);
			WireAndPipeData[_0x81e9x163] = _0x81e9x184;
			WireAndPipeMetadata[_0x81e9x163] = _0x81e9x1a
		}
	};
	registerWireChange();
	if (_0x81e9x31f > 0) {
		clientMessage("§cW.P.D. loaded: " + _0x81e9x31f)
	}
}

function readWireAndPipeData_OldType() {
	clientMessage("§4old version wire and pipe data found.");
	WireAndPipeData = [];
	WireAndPipeMetadata = [];
	var _0x81e9x31f = DataSaver.ReadNumber("wpd#len");
	for (var i = 0; i < _0x81e9x31f; i++) {
		var _0x81e9x163 = DataSaver.ReadString("wpd#key_" + i);
		var _0x81e9x184 = DataSaver.ReadNumber("wpd#val_" + i);
		if (_0x81e9x184) {
			WireAndPipeData[_0x81e9x163] = _0x81e9x184;
			WireAndPipeMetadata[_0x81e9x163] = 0
		};
		checkWireAndPipeData(_0x81e9x163, _0x81e9x184)
	};
	registerWireChange();
	clientMessage("wpd loaded " + _0x81e9x31f)
}
var needRebuildWireConnections = false;
var wpdCheckingCache = [];

function tickWireAndPipeData(_0x81e9x327) {
	if (globalWorldTime % 5 != 0 && !_0x81e9x327) {
		return
	};
	var _0x81e9x328 = 0;
	var _0x81e9x1bd = globalWorldTime / 5;
	for (var _0x81e9x163 in WireAndPipeData) {
		if (!WireAndPipeData[_0x81e9x163]) {
			continue
		};
		if ((_0x81e9x1bd + _0x81e9x328) % 40 == 0 || _0x81e9x327) {
			if (!checkWireAndPipeData(_0x81e9x163, WireAndPipeData[_0x81e9x163])) {
				ConfirmWPDChange(_0x81e9x163, WireAndPipeData[_0x81e9x163])
			}
		}
	}
}

function checkWireAndPipeData(_0x81e9x163, _0x81e9x184) {
	var _0x81e9x2a0 = _0x81e9x163.split(",");
	var _0x81e9x26 = parseInt(_0x81e9x2a0[0]);
	var _0x81e9x27 = parseInt(_0x81e9x2a0[1]);
	var _0x81e9x28 = parseInt(_0x81e9x2a0[2]);
	var _0x81e9x2b3 = getTile(_0x81e9x26, _0x81e9x27, _0x81e9x28);
	WireMetadata[_0x81e9x163] = Level.getData(_0x81e9x26, _0x81e9x27, _0x81e9x28);
	var _0x81e9x32a = WireAndPipeMetadata[_0x81e9x163];
	if (parseInt(_0x81e9x32a) + "" == "NaN") {
		WireAndPipeMetadata[_0x81e9x163] = currentDimensionId;
		_0x81e9x32a = currentDimensionId
	};
	if (_0x81e9x32a != currentDimensionId) {
		return true
	};
	if (_0x81e9x184 == TYPE_MACHINE) {
		return getMachine(_0x81e9x26, _0x81e9x27, _0x81e9x28)
	};
	if (_0x81e9x184 == TYPE_TRANSFORMATOR) {
		var _0x81e9x2bc = getMachine(_0x81e9x26, _0x81e9x27, _0x81e9x28);
		return _0x81e9x2bc && getMachineType(_0x81e9x2bc).isTransformator
	} else {
		return _0x81e9x2b3 == _0x81e9x184 || getTile(_0x81e9x26, 0, _0x81e9x28) == 0
	}
}

function wpdOnChange(_0x81e9x163, _0x81e9x184) {
	var _0x81e9x32c = WireAndPipeData[_0x81e9x163];
	WireAndPipeData[_0x81e9x163] = 0;
	var _0x81e9x2a0 = _0x81e9x163.split(",");
	var _0x81e9x26 = parseInt(_0x81e9x2a0[0]);
	var _0x81e9x27 = parseInt(_0x81e9x2a0[1]);
	var _0x81e9x28 = parseInt(_0x81e9x2a0[2]);
	animateCoords(ParticleType.flame, _0x81e9x26, _0x81e9x27, _0x81e9x28);
	TransportingCache.clearNearby(_0x81e9x26, _0x81e9x27, _0x81e9x28);
	if (_0x81e9x32c == TYPE_WIRE || _0x81e9x32c == TYPE_MACHINE) {
		registerWireChange()
	};
	if (_0x81e9x32c == TYPE_PIPE || _0x81e9x32c == TYPE_RECIVER) {
		registerPipeChange()
	}
}

function ConfirmWPDChange(_0x81e9x163, _0x81e9x184) {
	RunOnMainThread(function() {
		if (!checkWireAndPipeData(_0x81e9x163, _0x81e9x184)) {
			wpdOnChange(_0x81e9x163, _0x81e9x184)
		}
	})
}

function RebuildPipeConnections(_0x81e9x197) {
	_0x81e9x197.pipeConnections = [];
	BuildPipeConnections(_0x81e9x197)
}

function PipeConnectionPath() {
	this.data = "";
	this.push = function(_0x81e9x15a) {
		if (this.data.length > 0) {
			this.data += "$"
		};
		this.data += _0x81e9x15a.x + "," + _0x81e9x15a.y + "," + _0x81e9x15a.z
	};
	this.toArray = function() {
		var _0x81e9x1c4 = [];
		var _0x81e9x330 = this.data.split("$");
		for (var i in _0x81e9x330) {
			var _0x81e9x331 = _0x81e9x330[i].split(",");
			_0x81e9x1c4.push(new Coords(parseInt(_0x81e9x331[0]), parseInt(_0x81e9x331[0]), parseInt(_0x81e9x331[0])))
		};
		return _0x81e9x1c4
	}
}

function BuildPipeConnections(_0x81e9x197, _0x81e9x15a, _0x81e9x279, _0x81e9x333) {
	if (!_0x81e9x279) {
		_0x81e9x279 = []
	};
	if (!_0x81e9x333) {
		_0x81e9x333 = []
	};
	if (!_0x81e9x15a) {
		_0x81e9x15a = _0x81e9x197
	};
	var _0x81e9x163 = _0x81e9x15a.x + "," + _0x81e9x15a.y + "," + _0x81e9x15a.z;
	if (_0x81e9x279[_0x81e9x163]) {
		return
	};
	if (WireAndPipeData[_0x81e9x163] == TYPE_MACHINE && !(_0x81e9x197.x == _0x81e9x15a.x && _0x81e9x197.y == _0x81e9x15a.y && _0x81e9x197.z == _0x81e9x15a.z) && anyInArray(_0x81e9x333)) {
		_0x81e9x333.push(_0x81e9x15a);
		addToPipeConnections(_0x81e9x197, _0x81e9x333, _0x81e9x15a);
		return
	};
	if (WireAndPipeData[_0x81e9x163] != TYPE_PIPE && anyInArray(_0x81e9x279)) {
		return
	};
	_0x81e9x279[_0x81e9x163] = true;
	_0x81e9x333.push(_0x81e9x15a);
	BuildPipeConnections(_0x81e9x197, new Coords(_0x81e9x15a.x + 1, _0x81e9x15a.y, _0x81e9x15a.z), _0x81e9x279, ArrayCopy(_0x81e9x333));
	BuildPipeConnections(_0x81e9x197, new Coords(_0x81e9x15a.x - 1, _0x81e9x15a.y, _0x81e9x15a.z), _0x81e9x279, ArrayCopy(_0x81e9x333));
	BuildPipeConnections(_0x81e9x197, new Coords(_0x81e9x15a.x, _0x81e9x15a.y + 1, _0x81e9x15a.z), _0x81e9x279, ArrayCopy(_0x81e9x333));
	BuildPipeConnections(_0x81e9x197, new Coords(_0x81e9x15a.x, _0x81e9x15a.y - 1, _0x81e9x15a.z), _0x81e9x279, ArrayCopy(_0x81e9x333));
	BuildPipeConnections(_0x81e9x197, new Coords(_0x81e9x15a.x, _0x81e9x15a.y, _0x81e9x15a.z + 1), _0x81e9x279, ArrayCopy(_0x81e9x333));
	BuildPipeConnections(_0x81e9x197, new Coords(_0x81e9x15a.x, _0x81e9x15a.y, _0x81e9x15a.z - 1), _0x81e9x279, ArrayCopy(_0x81e9x333))
}

function addToPipeConnections(_0x81e9x197, _0x81e9x1e8, _0x81e9x335) {
	if (!_0x81e9x197.pipeConnections) {
		_0x81e9x197.pipeConnections = []
	};
	_0x81e9x197.pipeConnections.push({
		"path": _0x81e9x1e8,
		"dst": _0x81e9x335
	})
}

function displayPipeConnection(_0x81e9x1e8) {
	if (_0x81e9x1e8.length < 2) {
		return
	};
	var _0x81e9x1a2 = _0x81e9x1e8[0];
	for (var i = 1; i < _0x81e9x1e8.length; i++) {
		for (var _0x81e9x19 = 0; _0x81e9x19 < 5; _0x81e9x19++) {
			animateEnergyWirePath(ParticleType.redstone, _0x81e9x1e8[i], _0x81e9x1a2, true)
		};
		_0x81e9x1a2 = _0x81e9x1e8[i]
	}
}

function registerWireChange() {
	for (var i in MachineDataByID) {
		var _0x81e9x2bc = MachineDataByID[i];
		_0x81e9x2bc.resistMap = [];
		_0x81e9x2bc.WebBySide = [];
		_0x81e9x2bc.genResist = 0
	};
	WebRebuildTimer = 15;
	tickWireAndPipeData(true)
}

function registerPipeChange() {
	for (var i in MachineDataByID) {
		MachineDataByID[i].pipeUpdated_ = false
	}
}

function registerReceiverChange() {
	convertWpdToModelHash(WireAndPipeData);
	for (var i in MachineDataByID) {
		MachineDataByID[i].receiverUpdated_ = false
	}
}
var DefaultMinecraftDirectory = "games/com.mojang/";
var DefaultSoundDirectory = "FactorizationSound/";
var SoundPlayers = [];
var SoundPlayersToUpdate = [];

function UnpackSoundAndSetSource(_0x81e9x33f, _0x81e9x17, _0x81e9x340) {
	if (_0x81e9x340) {
		var _0x81e9x240 = new java.io.File(android.os.Environment.getExternalStorageDirectory() + "/games/com.mojang/Factorization/sounds");
		if (!_0x81e9x240.exists()) {
			_0x81e9x240.mkdir()
		};
		var _0x81e9x1e6 = _0x81e9x17.split("/").join("_");
		var _0x81e9x1e9 = new java.io.File(_0x81e9x240 + "/" + _0x81e9x1e6);
		if (!_0x81e9x1e9.exists()) {
			UnpackFileFromAssets(_0x81e9x17, "/games/com.mojang/Factorization/sounds/" + _0x81e9x1e6)
		};
		_0x81e9x33f.setDataSource(_0x81e9x1e9 + "")
	} else {
		_0x81e9x33f.setDataSource(android.os.Environment.getExternalStorageDirectory() + "/games/com.mojang/" + _0x81e9x17)
	}
}
var CachedSoundPlayers = [];

function InitMediaPlayersForSound(_0x81e9x17, _0x81e9x13, _0x81e9x343) {
	CachedSoundPlayers[_0x81e9x17] = [];
	for (var i = 0; i < _0x81e9x13; i++) {
		var player = new android.media.MediaPlayer();
		player.reset();
		UnpackSoundAndSetSource(player, _0x81e9x17, !_0x81e9x343);
		player.prepare();
		CachedSoundPlayers[_0x81e9x17].push(player)
	}
}

function GetSoundPlayer(_0x81e9x17, _0x81e9x343) {
	if (!CachedSoundPlayers[_0x81e9x17]) {
		CachedSoundPlayers[_0x81e9x17] = []
	};
	var _0x81e9x345 = CachedSoundPlayers[_0x81e9x17];
	var player = null;
	for (var i in _0x81e9x345) {
		try {
			if (!_0x81e9x345[i].isPlaying()) {
				player = _0x81e9x345[i];
				break
			}
		} catch (e) {
			_0x81e9x345[i].release();
			_0x81e9x345.splice(i--, 1)
		}
	};
	if (!player) {
		player = new android.media.MediaPlayer();
		player.reset();
		UnpackSoundAndSetSource(player, _0x81e9x17, !_0x81e9x343);
		player.prepare();
		_0x81e9x345.push(player)
	};
	if (player) {};
	return player
}

function UpdateSoundPlayersVolume() {
	var _0x81e9x1b3 = getPlayerX();
	var _0x81e9x1b4 = getPlayerY();
	var _0x81e9x1b5 = getPlayerZ();
	for (var i in SoundPlayersToUpdate) {
		var _0x81e9x347 = SoundPlayersToUpdate[i];
		try {
			if (_0x81e9x347.sound.isPlaying()) {
				var _0x81e9x348 = Math.max(0, 1 - Math.sqrt(Math.pow(_0x81e9x1b3 - _0x81e9x347.x, 2) + Math.pow(_0x81e9x1b4 - _0x81e9x347.y, 2) + Math.pow(_0x81e9x1b5 - _0x81e9x347.z, 2)) / _0x81e9x347.rad);
				_0x81e9x347.sound.setVolume(_0x81e9x348, _0x81e9x348)
			} else {
				_0x81e9x347.sound.release();
				SoundPlayersToUpdate.splice(i, 1);
				i--
			}
		} catch (e) {
			continue
		}
	}
}

function StopAllSoundPlayers() {
	for (var i in SoundPlayersToUpdate) {
		var _0x81e9x347 = SoundPlayersToUpdate[i];
		try {
			if (_0x81e9x347.sound.isPlaying()) {
				_0x81e9x347.sound.stop()
			};
			_0x81e9x347.sound.release()
		} catch (e) {}
	};
	SoundPlayersToUpdate = []
}

function AddSoundToUpdateVolume(_0x81e9x34b, _0x81e9x26, _0x81e9x27, _0x81e9x28, _0x81e9x2fc) {
	SoundPlayersToUpdate.push({
		sound: _0x81e9x34b,
		x: _0x81e9x26,
		y: _0x81e9x27,
		z: _0x81e9x28,
		rad: _0x81e9x2fc
	})
}

function GetFreeSoundPlayer(_0x81e9x34d) {
	var _0x81e9x34e = null;
	for (var i in SoundPlayers) {
		var _0x81e9x34b = SoundPlayers[i];
		if (!_0x81e9x34b.isPlaying()) {
			_0x81e9x34e = _0x81e9x34b;
			break
		}
	};
	if (!_0x81e9x34e) {
		if (SoundPlayers.length > 5) {
			return null
		};
		_0x81e9x34e = new android.media.MediaPlayer();
		SoundPlayers.push(_0x81e9x34e)
	};
	return _0x81e9x34e
}

function PlaySoundFileFromFzDir(_0x81e9x350, _0x81e9x343) {
	if (!config_sound_enabled) {
		return
	};
	try {
		var _0x81e9x34e = GetSoundPlayer(_0x81e9x350, _0x81e9x343);
		if (!_0x81e9x34e) {
			return
		};
		_0x81e9x34e.start();
		return _0x81e9x34e
	} catch (err) {};
	return _0x81e9x34e
}

function PlaySoundFile(_0x81e9x1e9) {
	PlaySoundFileFromFzDir(DefaultSoundDirectory + _0x81e9x1e9)
}
var MachineSoundPlayerMap = [];

function PlayMachineSoundFromFzDir(_0x81e9x15a, _0x81e9x1c2, _0x81e9x159, _0x81e9x343) {
	if (!config_sound_enabled) {
		return
	};
	if (!_0x81e9x159) {
		_0x81e9x159 = 24
	};
	var _0x81e9x1f = _0x81e9x15a.uniquieID;
	var _0x81e9x354 = MachineSoundPlayerMap;
	try {
		var _0x81e9x34b = _0x81e9x354[_0x81e9x1f];
		if (_0x81e9x34b) {};
		_0x81e9x354[_0x81e9x1f] = GetSoundPlayer(_0x81e9x1c2, _0x81e9x343);
		_0x81e9x34b = _0x81e9x354[_0x81e9x1f];
		if (_0x81e9x34b) {
			_0x81e9x34b.start()
		};
		AddSoundToUpdateVolume(_0x81e9x34b, _0x81e9x15a.x + 0.5, _0x81e9x15a.y + 0.5, _0x81e9x15a.z + 0.5, _0x81e9x159)
	} catch (e) {
		print(GetErrorDetailsString(e))
	}
}

function StopMachineSound(_0x81e9x15a) {
	var _0x81e9x34b = this.SoundPlayers[_0x81e9x15a.uniqueID];
	if (_0x81e9x34b) {
		_0x81e9x34b.stop()
	}
}

function saveAllMachines() {
	DataSaver.ClearOldData();
	DataSaver.Save("SavesVersion", SavesVersion);
	releaseAllEnergy();
	updateEnergyWebs();
	saveWireAndPipeData();
	SaveAllTransportingItems();
	var _0x81e9x357 = 0;
	for (var i in MachineTypes) {
		var _0x81e9x158 = MachineTypes[i];
		for (var _0x81e9x19 in _0x81e9x158.MachineCoords) {
			var _0x81e9x15a = _0x81e9x158.MachineCoords[_0x81e9x19];
			var _0x81e9x358 = 1;
			if (_0x81e9x15a.isActivated) {
				_0x81e9x358 = 2
			};
			var _0x81e9x17 = "m" + _0x81e9x357;
			DataSaver.SaveCoords(_0x81e9x17, _0x81e9x15a);
			DataSaver.Save(_0x81e9x17 + "#type", i);
			DataSaver.Save(_0x81e9x17 + "#da", _0x81e9x15a.disactive);
			DataSaver.Save(_0x81e9x17 + "#uID", _0x81e9x15a.uniqueID);
			DataSaver.Save(_0x81e9x17 + "#e", _0x81e9x15a.energyStored);
			DataSaver.Save(_0x81e9x17 + "#actState", _0x81e9x358);
			DataSaver.Save(_0x81e9x17 + "#_dimension", _0x81e9x15a.dimension);
			if (_0x81e9x15a.container) {
				_0x81e9x15a.container.save(_0x81e9x17 + "#container")
			};
			_0x81e9x158.save(_0x81e9x17 + "#", _0x81e9x15a);
			_0x81e9x357++
		}
	};
	DataSaver.Save("m_saved", _0x81e9x357);
	DataSaver.WriteFileData()
}

function readAllSaves() {
	DataSaver.ReadFileData();
	LoadingBarHandler.Create();
	ReadAllTransportingItems();
	resetMachineTypes();
	readWireAndPipeData();
	var _0x81e9x357 = DataSaver.ReadNumber("m_saved");
	var _0x81e9x35a = [];
	var _0x81e9x35b = DataSaver.ReadNumber("SavesVersion");
	for (var i = 0; i < _0x81e9x357; i++) {
		var _0x81e9x17 = "m" + i;
		var _0x81e9x15a = DataSaver.ReadCoords(_0x81e9x17);
		_0x81e9x15a.fuel = DataSaver.ReadNumber(_0x81e9x17 + "#fuel");
		_0x81e9x15a.disactive = DataSaver.ReadBool(_0x81e9x17 + "#da");
		_0x81e9x15a.uniqueID = DataSaver.ReadNumber(_0x81e9x17 + "#uID");
		_0x81e9x15a.energyStored = DataSaver.ReadNumber(_0x81e9x17 + "#e");
		_0x81e9x15a.isActivated = (DataSaver.ReadNumber(_0x81e9x17 + "#actState") != 1);
		_0x81e9x15a.dimension = DataSaver.ReadNumber(_0x81e9x17 + "#_dimension");
		var _0x81e9x35c = DataSaver.ReadNumber(_0x81e9x17 + "#type");
		var _0x81e9x158 = MachineTypes[_0x81e9x35c];
		if (!_0x81e9x158) {
			continue
		};
		var _0x81e9x198 = _0x81e9x158.getContainer(_0x81e9x15a);
		if (_0x81e9x198) {
			_0x81e9x15a.container.read(_0x81e9x17 + "#container")
		};
		_0x81e9x158.read(_0x81e9x17 + "#", _0x81e9x15a);
		addMachine(_0x81e9x15a, _0x81e9x158);
		_0x81e9x35a[i] = _0x81e9x15a
	};
	if (_0x81e9x357 > 0) {
		clientMessage("loaded " + _0x81e9x357 + " machines")
	};
	if (SavesVersion != _0x81e9x35b) {
		UpdateAllLoadedMachinesToNewVersion()
	};
	LoadingBarHandler.Finish()
}

function UpdateAllLoadedMachinesToNewVersion() {
	var _0x81e9x13 = 0;
	for (var i in MachineDataByID) {
		var _0x81e9x2bc = MachineDataByID[i];
		var _0x81e9x35e = getMachineType(_0x81e9x2bc);
		if (getTile(_0x81e9x2bc.x, _0x81e9x2bc.y, _0x81e9x2bc.z) > 0 && _0x81e9x35e) {
			setTile(_0x81e9x2bc.x, _0x81e9x2bc.y, _0x81e9x2bc.z, _0x81e9x35e.id, Level.getData(_0x81e9x2bc.x, _0x81e9x2bc.y, _0x81e9x2bc.z));
			_0x81e9x13++
		}
	}
}

function startAutoSave() {
	saveAllMachines()
}
var DataSaver = {
	FilePath: "",
	FileWriter: null,
	Reset: function() {
		this.InitFilePath()
	},
	ReadString: function(_0x81e9x259) {
		return this.Read(_0x81e9x259)
	},
	ReadFloat: function(_0x81e9x17) {
		var _0x81e9x16 = parseFloat(this.Read(_0x81e9x17));
		if (_0x81e9x16 != _0x81e9x16) {
			_0x81e9x16 = 0
		};
		return _0x81e9x16
	},
	ReadNumber: function(_0x81e9x17) {
		return parseInt(this.ReadFloat(_0x81e9x17))
	},
	ReadBool: function(_0x81e9x17) {
		return (this.Read(_0x81e9x17) == "true")
	},
	SaveCoords: function(_0x81e9x17, _0x81e9x2c0) {
		if (!_0x81e9x2c0) {
			return
		};
		this.Save(_0x81e9x17 + "#x", _0x81e9x2c0.x);
		this.Save(_0x81e9x17 + "#y", _0x81e9x2c0.y);
		this.Save(_0x81e9x17 + "#z", _0x81e9x2c0.z)
	},
	ReadCoords: function(_0x81e9x17) {
		if (!this.Read(_0x81e9x17 + "#x")) {
			return
		};
		var _0x81e9x26 = this.ReadFloat(_0x81e9x17 + "#x");
		var _0x81e9x27 = this.ReadFloat(_0x81e9x17 + "#y");
		var _0x81e9x28 = this.ReadFloat(_0x81e9x17 + "#z");
		return new Coords(_0x81e9x26, _0x81e9x27, _0x81e9x28)
	},
	InitFilePath: function() {
		this.FilePath = android.os.Environment.getExternalStorageDirectory().getAbsolutePath() + "/games/com.mojang/minecraftWorlds/" + Level.getWorldDir() + "/factorization.saves"
	},
	ClearOldData: function() {
		this.FileData = []
	},
	StartWriting: function() {
		this.FileWriter = new java.io.PrintWriter(new java.io.BufferedWriter(new java.io.FileWriter(this.FilePath, false)))
	},
	StopWriting: function() {
		this.FileWriter.close();
		this.FileWrier = 0
	},
	writeLine: function(_0x81e9x162) {
		this.FileWriter.write(_0x81e9x162 + "\n")
	},
	Save: function(_0x81e9x163, _0x81e9x184) {
		this.FileData[_0x81e9x163] = _0x81e9x184
	},
	Read: function(_0x81e9x163) {
		this.FileDataRead++;
		java.lang.Thread.yield();
		return this.FileData[_0x81e9x163] + ""
	},
	WriteFileData: function() {
		try {
			this.StartWriting();
			for (var i in this.FileData) {
				var _0x81e9x162 = i + "@" + this.FileData[i];
				this.writeLine(_0x81e9x162)
			};
			this.StopWriting()
		} catch (e) {
			print("Unable to save mod data, error: " + e)
		}
	},
	FileData: {},
	FileDataLen: 0,
	FileDataRead: 0,
	ReadFileData: function() {
		this.FileData = [];
		this.FileDataLen = 0;
		this.FileDataRead = 0;
		try {
			var _0x81e9x288 = java.io.BufferedReader(new java.io.FileReader(this.FilePath));
			var _0x81e9x162 = _0x81e9x288.readLine();
			while (_0x81e9x162) {
				var _0x81e9x361 = _0x81e9x162.split("@");
				this.FileData[_0x81e9x361[0]] = _0x81e9x361[1];
				_0x81e9x162 = _0x81e9x288.readLine();
				this.FileDataLen++
			}
		} catch (e) {}
	},
	getProgress: function() {
		if (this.FileDataLen < 1) {
			return 0
		};
		return this.FileDataRead / this.FileDataLen
	},
	clearBlocklauncherSavedEntities: function(_0x81e9x362) {
		if (!_0x81e9x362) {
			_0x81e9x362 = 0
		};
		var _0x81e9x1bd = java.lang.System.currentTimeMillis();
		var _0x81e9x1e8 = android.os.Environment.getExternalStorageDirectory().getAbsolutePath() + "/games/com.mojang/minecraftWorlds/" + Level.getWorldDir() + "/blocklauncher_data.json";
		RunInThread(function() {
			while (_0x81e9x1bd + _0x81e9x362 > java.lang.System.currentTimeMillis()) {
				java.lang.Thread.yield()
			};
			var _0x81e9x1e9 = new java.io.File(_0x81e9x1e8);
			var _0x81e9x363 = _0x81e9x1e9.delete();
			if (!_0x81e9x363) {
				print("clearing entity saves file failed")
			}
		})
	}
};
var debug_average_tick_time = {
	total: {
		sum: 0,
		last: 0
	},
	machine: {
		sum: 0,
		last: 0
	},
	addTickTime: function(_0x81e9x184, _0x81e9x243) {
		this[_0x81e9x184].sum += _0x81e9x243
	},
	refresh: function(_0x81e9x184, _0x81e9x365) {
		this[_0x81e9x184].last = this[_0x81e9x184].sum / _0x81e9x365;
		this[_0x81e9x184].sum = 0
	},
	getTickTime: function(_0x81e9x184) {
		return this[_0x81e9x184].last
	}
};

function resetAllIngameValues() {
	GUIString = "zheka";
	if (!Level.getSrcTime) {
		Level.getSrcTime = Level.getTime;
		Level.getTime = function() {
			return globalWorldTime + worldTimeIndexAdd
		}
	};
	if (!Level.addParticleSrc) {
		Level.addParticleSrc = Level.addParticle
	};
	globalWorldTime = 0;
	mainThreadWorldTime = 0;
	LastTickSystemTime = 0;
	MOD_THREAD.StopThread = false;
	currentConnectableMachine = null;
	currentChestTransporter = null;
	cachedMachineCoordsList = [];
	lastConnectorClick = -999;
	lastPowerShieldHealth = -1;
	firstTickTime = -1;
	jetpackDamage = -1;
	jetpackLastY = 10000;
	lastJetpackHealth = -1;
	isGuiDisabled = false;
	rubberHelmData = -1;
	rubberHelmCoords = null;
	bottleLastHealth = 1001;
	bottleLastCarried = 0;
	bottleMeadEffect = 0;
	CachedChestInventory = [];
	resetQuantiumArmor();
	wasToolCarried = true;
	lastToolCarried = -1;
	lastItemCarried = -1;
	MachineTypesMap = [];
	beeEntitiesServerPacket = [];
	allowBarrelAnimationOnHost = true;
	resetArmorChangeFlag();
	SoundPlayersToUpdate = [];
	EntitiesForUpdate = [];
	PreventSlimeDropTime = -999;
	ItemEntitiesToCleanup = {};
	ParticlesDisabled = false;
	GUIString = GUIString + "_smirnov";
	resetContainerGUI();
	TransportingCache.reset();
	FactAPI.InvokeCallback("ModReset")
}

function CorrectPlayerPosition() {
	setVelX(getPlayerEnt(), 0.02 + Entity.getVelX(getPlayerEnt()));
	setVelZ(getPlayerEnt(), 0.02 + Entity.getVelX(getPlayerEnt()))
}

function RebuildPlayerInventory() {
	var _0x81e9x369 = 45;
	var _0x81e9x36a = [];
	for (var i = 0; i < _0x81e9x369; i++) {}
}
var config_voltage_check_enabled = false;
var config_resistance_enabled = false;
var config_sounds_enabled = false;
var config_debug_enabled = false;
var config_rod_renderer = false;
var config_barrel_liquid_animation = false;
var config_item_transport_animation = false;
var config_run_in_thread = false;
var config_safe_armor_mode = false;
var config_mill_animation = false;
var config_thread_priority = 2;
var config_gui_thread_priority = -12;
var config_safe_leave_button = true;
var OptionReader = {
	TitleComment: "Option values: true - enabled, false - disabled, fancy - enabled, if 'fancy graphics' option is enabled",
	comments: {
		run_in_thread: "Makes Factorization run in thread, can make it work faster. Запускает мод в параллельном процессе, может оптимизировать его.",
		thread_priority: "Mod thread priority, makes effect onlynif run_in_thread enabled, accepts values from -20 to 19, higher value means lower priority, lower priority makes less lags but slower mod work. Приоритет потока мода, имеет эффект только если опция run_in_thread включена, допустимые значения от -20 до 19, большее значение означает меньший приоритет, меньший приоритет уменьшает лаги, но так же уменьшает скорость всего, что происходит в моде.",
		gui_thread_priority: " UI thread priority. Set less priority (bigger value) if gui freezes. Приоритет потока интерфейса. Уменьшите приоритет (поставьте большее значение), если наблюдаются фризы.",
		safe_leave_button: "Enables button, thats turn on safe leave mode (without probability of crash on some devices). Включает кнопку безопасного выхода из игры (без возможного краша на некоторых устройствах)",
		pipe_item_animation: "\n\n//Enables animation of items, transported in pipes. Включает анимацию перемещения предметов в трубах.",
		test_pipe_liquid_animation: "Enables test liquid animation in pipes, it has bugs. Включает анимацию жидкости в трубах, находится в бета-версии, может вызывать лаги.",
		barrel_liquid_animation: "Enables liquid model in barrels. Включает анимацию жидкости в бочках.",
		wind_mill_animation: "Enables animation of wind and water mills. Включает анимацию водяных и ветряных мельниц.",
		version_code: "Dont change this. Не изменять.",
		liquid_engine_animation: "Enables animation of liquid engine, can cause lags. In current version is useless. Включает анимацию двигателя, может вызывать лаги. В текущей версии бесполезно",
		reactor_rod_renderer: "Enables render of uranium rods in reactor rod controllers. Включает рендер стержней в реакторе.",
		resistance: "\n\n//Enables wire resistance, it is beta. Включает сопротивление проводов, находится в бета-версии.",
		overpowered_machine_explosion: "Enables machine & wire burning, if it gets to hight voltage. Включает сгорание проводов и механизмов при подаче слишком высокого напряжения.",
		sounds: "[NOT STABLE IN 5.1] Enables sounds. [НЕ СТАБИЛЬНО В 5.1] Включает звуки.",
		tips: "Enables tips. Включает подсказки.",
		debug: "Enables debug mode, you can see average time of mod tick. Включает отладку, при которой видно среднее время, которое уходит на тик мода."
	},
	default: {
		version_code: 14,
		run_in_thread: "true",
		thread_priority: 3,
		gui_thread_priority: -12,
		safe_leave_button: "true",
		pipe_item_animation: "true",
		test_pipe_liquid_animation: "false",
		barrel_liquid_animation: "fancy",
		liquid_engine_animation: "fancy",
		wind_mill_animation: "fancy",
		reactor_rod_renderer: "false",
		resistance: "false",
		overpowered_machine_explosion: "false",
		sounds: "false",
		tips: "false",
		debug: "false"
	},
	options: {},
	path: "/",
	Init: function() {
		this.options = {};
		this.path = android.os.Environment.getExternalStorageDirectory().getAbsolutePath() + "/games/com.mojang/factorization.options";
		this.ReadOptions()
	},
	ReadOptions: function(_0x81e9x379) {
		try {
			var _0x81e9x288 = java.io.BufferedReader(new java.io.FileReader(this.path));
			var _0x81e9x162 = _0x81e9x288.readLine()
		} catch (e) {
			if (_0x81e9x379) {
				print("error in option file creation, default options will be used")
			} else {
				print("creating option file at " + this.path);
				this.CreateOptionFile();
				this.ReadOptions(true)
			};
			return
		};
		while (_0x81e9x162) {
			if (_0x81e9x162.length() < 2) {
				_0x81e9x162 = _0x81e9x288.readLine();
				continue
			};
			if (_0x81e9x162.substring(0, 2) != "//") {
				var _0x81e9x2a0 = _0x81e9x162.split(":");
				var _0x81e9x163 = _0x81e9x2a0[0];
				var _0x81e9x184 = _0x81e9x2a0[1];
				if (parseInt(_0x81e9x184) + "" == "NaN") {
					if (_0x81e9x184 == "fancy") {
						_0x81e9x184 = Options_FancyGrap
					} else {
						if (_0x81e9x184 == "true") {
							_0x81e9x184 = true
						} else {
							_0x81e9x184 = false
						}
					}
				} else {
					_0x81e9x184 = parseInt(_0x81e9x184)
				};
				this.options[_0x81e9x163] = _0x81e9x184
			};
			_0x81e9x162 = _0x81e9x288.readLine()
		};
		if (this.options.version_code != this.default.version_code && !_0x81e9x379) {
			print("old version config found, code: " + this.options.version_code);
			print("recreating option file at " + this.path);
			this.CreateOptionFile();
			this.ReadOptions(true)
		} else {
			this.InitFastAccessValues()
		}
	},
	CreateOptionFile: function() {
		var _0x81e9x225 = new java.io.PrintWriter(new java.io.BufferedWriter(new java.io.FileWriter(this.path, false)));
		_0x81e9x225.write("//" + this.TitleComment + "\n");
		for (var _0x81e9x163 in this.default) {
			_0x81e9x225.write("//" + this.comments[_0x81e9x163] + "\n");
			_0x81e9x225.write(_0x81e9x163 + ":" + this.default[_0x81e9x163] + "\n")
		};
		_0x81e9x225.close()
	},
	WriteCurrent: function() {
		var _0x81e9x225 = new java.io.PrintWriter(new java.io.BufferedWriter(new java.io.FileWriter(this.path, false)));
		_0x81e9x225.write("//" + this.TitleComment + "\n");
		for (var _0x81e9x163 in this.options) {
			_0x81e9x225.write("//" + this.comments[_0x81e9x163] + "\n");
			_0x81e9x225.write(_0x81e9x163 + ":" + this.options[_0x81e9x163] + "\n")
		};
		_0x81e9x225.close()
	},
	getKey: function(_0x81e9x163) {
		return this.options[_0x81e9x163]
	},
	InitFastAccessValues: function() {
		config_voltage_check_enabled = this.getKey("overpowered_machine_explosion");
		config_resistance_enabled = this.getKey("resistance");
		config_sound_enabled = this.getKey("sounds");
		config_debug_enabled = this.getKey("debug");
		config_rod_renderer = this.getKey("reactor_rod_renderer");
		config_barrel_liquid_animation = this.getKey("barrel_liquid_animation");
		config_item_transport_animation = this.getKey("pipe_item_animation");
		config_run_in_thread = this.getKey("run_in_thread");
		config_safe_armor_mode = this.getKey("armor_safe_mode");
		config_mill_animation = this.getKey("wind_mill_animation");
		config_thread_priority = this.getKey("thread_priority");
		config_gui_thread_priority = this.getKey("gui_thread_priority");
		config_safe_leave_button = this.getKey("safe_leave_button")
	}
};
var Options_MCPESettings = {};
var Options_FancyGrap = false;
var Options_isRustificated = false;

function ReadMcOptions() {
	Options_MCPESettings = {};
	var _0x81e9x288 = java.io.BufferedReader(new java.io.FileReader(android.os.Environment.getExternalStorageDirectory().getAbsolutePath() + "/games/com.mojang/minecraftpe/options.txt"));
	var _0x81e9x37e = _0x81e9x288.readLine();
	while (_0x81e9x37e) {
		var _0x81e9x2a0 = _0x81e9x37e.split(":");
		Options_MCPESettings[_0x81e9x2a0[0]] = _0x81e9x2a0[1];
		_0x81e9x37e = _0x81e9x288.readLine()
	};
	Options_FancyGrap = Options_MCPESettings.gfx_fancygraphics == "1";
	Options_isRustificated = Options_MCPESettings.game_language == "ru_RU";
	langLocalisationID = DetectLanguageID(Options_MCPESettings.game_language);
	if (FactAPI) {
		FactAPI.InvokeCallback("MinecraftOptions", Options_MCPESettings)
	}
}
ReadMcOptions();
OptionReader.Init();
OptionReader.ReadOptions();
OptionReader.InitFastAccessValues();

function generateOillake(_0x81e9x380, _0x81e9x381, _0x81e9x382) {
	var _0x81e9x383 = block_oil;
	_0x81e9x380 -= 8;
	for (_0x81e9x382 -= 8; _0x81e9x381 > 5 && !isSolid(getTile(_0x81e9x380, _0x81e9x381, _0x81e9x382)); --_0x81e9x381) {
		;
	};
	if (_0x81e9x381 <= 4) {
		return false
	} else {
		_0x81e9x381 -= 4;
		var6 = new Array(2048);
		var7 = randInt(4) + 4;
		var8 = 0;
		for (var8 = 0; var8 < var7; ++var8) {
			var9 = Math.random() * 6.0 + 3.0;
			var11 = Math.random() * 4.0 + 2.0;
			var13 = Math.random() * 6.0 + 3.0;
			var15 = Math.random() * (16.0 - var9 - 2.0) + 1.0 + var9 / 2.0;
			var17 = Math.random() * (8.0 - var11 - 4.0) + 2.0 + var11 / 2.0;
			var19 = Math.random() * (16.0 - var13 - 2.0) + 1.0 + var13 / 2.0;
			for (var21 = 1; var21 < 15; ++var21) {
				for (var22 = 1; var22 < 15; ++var22) {
					for (var23 = 1; var23 < 7; ++var23) {
						var24 = (var21 - var15) / (var9 / 2.0);
						var26 = (var23 - var17) / (var11 / 2.0);
						var28 = (var22 - var19) / (var13 / 2.0);
						var30 = var24 * var24 + var26 * var26 + var28 * var28;
						if (var30 < 1.0) {
							var6[(var21 * 16 + var22) * 8 + var23] = true
						}
					}
				}
			}
		};
		var10 = 0;
		var32 = 0;
		var33 = false;
		for (var8 = 0; var8 < 16; ++var8) {
			for (var32 = 0; var32 < 16; ++var32) {
				for (var10 = 0; var10 < 8; ++var10) {
					var33 = !var6[(var8 * 16 + var32) * 8 + var10] && (var8 < 15 && var6[((var8 + 1) * 16 + var32) * 8 + var10] || var8 > 0 && var6[((var8 - 1) * 16 + var32) * 8 + var10] || var32 < 15 && var6[(var8 * 16 + var32 + 1) * 8 + var10] || var32 > 0 && var6[(var8 * 16 + (var32 - 1)) * 8 + var10] || var10 < 7 && var6[(var8 * 16 + var32) * 8 + var10 + 1] || var10 > 0 && var6[(var8 * 16 + var32) * 8 + (var10 - 1)]);
					if (var33) {
						var12 = getTile(_0x81e9x380 + var8, _0x81e9x381 + var10, _0x81e9x382 + var32);
						if (var10 >= 4 && (var12 == 9 || var12 == 8 || var12 == 10 || var12 == 11)) {
							return false
						};
						if (var10 < 4 && !isSolid(var12)) {
							return false
						}
					}
				}
			}
		};
		for (var8 = 0; var8 < 16; ++var8) {
			for (var32 = 0; var32 < 16; ++var32) {
				for (var10 = 0; var10 < 8; ++var10) {
					if (var6[(var8 * 16 + var32) * 8 + var10]) {
						idset = 0;
						if (var10 < 4) {
							idset = _0x81e9x383
						};
						setTile(_0x81e9x380 + var8, _0x81e9x381 + var10, _0x81e9x382 + var32, idset)
					}
				}
			}
		};
		for (var8 = 0; var8 < 16; ++var8) {
			for (var32 = 0; var32 < 16; ++var32) {
				for (var10 = 4; var10 < 8; ++var10) {
					if (var6[(var8 * 16 + var32) * 8 + var10] && getTile(_0x81e9x380 + var8, _0x81e9x381 + var10 - 1, _0x81e9x382 + var32) == 3) {
						setTile(_0x81e9x380 + var8, _0x81e9x381 + var10 - 1, _0x81e9x382 + var32, 2)
					}
				}
			}
		};
		for (var _0x81e9x384 = 0; _0x81e9x384 < randInt(3) + 5; _0x81e9x384++) {
			if (canOilFlow(getTile(_0x81e9x380 + 8, _0x81e9x381 + _0x81e9x384, _0x81e9x382 + 8))) {
				setTile(_0x81e9x380 + 8, _0x81e9x381 + _0x81e9x384 + 4, _0x81e9x382 + 8, block_oil);
				addOilUpdate(_0x81e9x380 + 8, _0x81e9x381 + _0x81e9x384 + 4, _0x81e9x382 + 8, true)
			}
		};
		return true
	}
}

function isSolid(_0x81e9x1b) {
	return (_0x81e9x1b == 1 || _0x81e9x1b == 2 || _0x81e9x1b == 3 || _0x81e9x1b == 8 || _0x81e9x1b == 9 || _0x81e9x1b == 12 || _0x81e9x1b == 13 || _0x81e9x1b == 82 || _0x81e9x1b == 24 || _0x81e9x1b == 14 || _0x81e9x1b == 15 || _0x81e9x1b == 16 || _0x81e9x1b == 56 || _0x81e9x1b == 73 || _0x81e9x1b == 74 || _0x81e9x1b == 21)
}

function randInt(_0x81e9x26) {
	return Math.floor(Math.random() * _0x81e9x26)
}
var GUIString = "";

function LoadGUIStrings() {
	GUIString = GUIName + " by " + GUIString;
	addGUIString(GUIString)
}

function genRubberTreeGroup(_0x81e9x26, _0x81e9x28) {
	var _0x81e9x13 = 1 + Math.random() * 3;
	for (var i = 0; i < _0x81e9x13; i++) {
		var _0x81e9x38a = _0x81e9x26 + parseInt(Math.random() * 16 - 8);
		var _0x81e9x38b = _0x81e9x28 + parseInt(Math.random() * 16 - 8);
		genRubberTreeIntoWorld(_0x81e9x38a, _0x81e9x38b)
	}
}

function genRubberTree(_0x81e9x26, _0x81e9x27, _0x81e9x28, _0x81e9x38d) {
	if (_0x81e9x38d && !checkRubberTreeZone(_0x81e9x26, _0x81e9x27, _0x81e9x28)) {
		return
	};
	var _0x81e9x175 = 4 + parseInt(Math.random() * 3);
	var _0x81e9x38e = 2 + parseInt(Math.random() * 2);
	var _0x81e9x38f = 1 + parseInt(Math.random() * 2);
	var _0x81e9x390 = parseInt(Math.random() * 2);
	for (var i = 0; i < _0x81e9x175 + _0x81e9x38e + _0x81e9x390; i++) {
		var _0x81e9x391 = block_rubber_tree_wood;
		if (i == _0x81e9x38f) {
			_0x81e9x391 = block_rubber_wood_with_latex
		};
		if (i < _0x81e9x175) {
			setTile(_0x81e9x26, _0x81e9x27 + i, _0x81e9x28, _0x81e9x391)
		} else {
			setTile(_0x81e9x26, _0x81e9x27 + i, _0x81e9x28, block_rubber_tree_leaves)
		}
	};
	var _0x81e9x392 = 3 + parseInt(Math.random() * 2);
	var _0x81e9x393 = _0x81e9x175 + _0x81e9x38e - _0x81e9x392 - 2;
	if (_0x81e9x393 == 0) {
		_0x81e9x393++;
		_0x81e9x392--
	};
	for (var _0x81e9x19 = _0x81e9x393; _0x81e9x19 < _0x81e9x393 + _0x81e9x392; _0x81e9x19++) {
		for (var _0x81e9x38a = -2; _0x81e9x38a <= 2; _0x81e9x38a++) {
			for (var _0x81e9x38b = -2; _0x81e9x38b <= 2; _0x81e9x38b++) {
				var _0x81e9x2fc = Math.sqrt(_0x81e9x38a * _0x81e9x38a + _0x81e9x38b * _0x81e9x38b);
				var _0x81e9x394 = 2.5 + Math.random();
				if (_0x81e9x19 + 1 == _0x81e9x393 + _0x81e9x392) {
					_0x81e9x394 -= 1
				};
				if (_0x81e9x2fc < _0x81e9x394 && getTile(_0x81e9x38a + _0x81e9x26, _0x81e9x27 + _0x81e9x19, _0x81e9x38b + _0x81e9x28) == 0) {
					setTile(_0x81e9x38a + _0x81e9x26, _0x81e9x27 + _0x81e9x19, _0x81e9x38b + _0x81e9x28, block_rubber_tree_leaves)
				}
			}
		}
	}
}

function genRubberTreeIntoWorld(_0x81e9x26, _0x81e9x28) {
	var _0x81e9x384 = 60;
	while (_0x81e9x384 < 128 && getTile(_0x81e9x26, _0x81e9x384, _0x81e9x28) != 2) {
		_0x81e9x384++
	};
	if (_0x81e9x384 > 120) {
		return
	};
	genRubberTree(_0x81e9x26, _0x81e9x384 + 1, _0x81e9x28, false)
}

function checkRubberTreeZone(_0x81e9x26, _0x81e9x27, _0x81e9x28) {
	for (var _0x81e9x1cf = 2; _0x81e9x1cf < 8; _0x81e9x1cf++) {
		for (var _0x81e9x1ce = -2; _0x81e9x1ce < 3; _0x81e9x1ce++) {
			for (var _0x81e9x1d0 = -2; _0x81e9x1d0 < 3; _0x81e9x1d0++) {
				var _0x81e9x2b3 = getTile(_0x81e9x26 + _0x81e9x1ce, _0x81e9x27 + _0x81e9x1cf, _0x81e9x28 + _0x81e9x1d0);
				if (!(_0x81e9x2b3 == 0 || _0x81e9x2b3 == 9 || _0x81e9x2b3 == 31 || _0x81e9x2b3 == 32)) {
					return false
				}
			}
		}
	};
	return true
}

function wipeHeveaLeaves(_0x81e9x26, _0x81e9x27, _0x81e9x28) {
	for (var _0x81e9x384 = -2; _0x81e9x384 < 3; _0x81e9x384++) {
		var _0x81e9x398 = getTile(_0x81e9x26, _0x81e9x384 + _0x81e9x27, _0x81e9x28);
		if (_0x81e9x398 == block_rubber_tree_wood || _0x81e9x398 == block_rubber_wood_with_latex) {
			continue
		};
		for (var _0x81e9x38a = -2; _0x81e9x38a < 3; _0x81e9x38a++) {
			for (var _0x81e9x38b = -2; _0x81e9x38b < 3; _0x81e9x38b++) {
				var _0x81e9x2b3 = getTile(_0x81e9x38a + _0x81e9x26, _0x81e9x384 + _0x81e9x27, _0x81e9x38b + _0x81e9x28);
				if (_0x81e9x2b3 == block_rubber_tree_wood || _0x81e9x2b3 == block_rubber_tree_leaves || _0x81e9x2b3 == block_rubber_wood_with_latex) {
					destroyBlock_rubberTree(_0x81e9x38a + _0x81e9x26, _0x81e9x384 + _0x81e9x27, _0x81e9x38b + _0x81e9x28, true)
				}
			}
		}
	}
}

function getRandChunkCoords(_0x81e9x39a, _0x81e9x39b, _0x81e9x39c, _0x81e9x39d) {
	return [Math.floor((_0x81e9x39a + Math.random()) * 16), Math.floor(_0x81e9x39c + (_0x81e9x39d - _0x81e9x39c) * Math.random()), Math.floor((_0x81e9x39b + Math.random()) * 16)]
}

function genOreMinable(_0x81e9x26, _0x81e9x27, _0x81e9x28, _0x81e9x10) {
	for (var _0x81e9x1ac = -1; _0x81e9x1ac < 2; _0x81e9x1ac++) {
		for (var _0x81e9x39f = -1; _0x81e9x39f < 2; _0x81e9x39f++) {
			for (var _0x81e9x1ad = -1; _0x81e9x1ad < 2; _0x81e9x1ad++) {
				var _0x81e9x15b = Math.sqrt(_0x81e9x1ac * _0x81e9x1ac + _0x81e9x39f * _0x81e9x39f + _0x81e9x1ad * _0x81e9x1ad);
				var _0x81e9x159 = 1.5 - Math.random() / 2;
				if (_0x81e9x15b < _0x81e9x159) {
					setOreBlockTile(_0x81e9x26 + _0x81e9x1ac, _0x81e9x27 + _0x81e9x39f, _0x81e9x28 + _0x81e9x1ad, _0x81e9x10)
				}
			}
		}
	}
}

function genTinyOreMinable(_0x81e9x26, _0x81e9x27, _0x81e9x28, _0x81e9x10) {
	for (var _0x81e9x1ac = 0; _0x81e9x1ac < 2; _0x81e9x1ac++) {
		for (var _0x81e9x39f = 0; _0x81e9x39f < 2; _0x81e9x39f++) {
			for (var _0x81e9x1ad = 0; _0x81e9x1ad < 2; _0x81e9x1ad++) {
				var _0x81e9x15b = Math.sqrt(_0x81e9x1ac * _0x81e9x1ac + _0x81e9x39f * _0x81e9x39f + _0x81e9x1ad * _0x81e9x1ad);
				var _0x81e9x159 = Math.random() * Math.random() * 1.5 + Math.random() / 2;
				if (_0x81e9x15b < _0x81e9x159) {
					setOreBlockTile(_0x81e9x26 + _0x81e9x1ac, _0x81e9x27 + _0x81e9x39f, _0x81e9x28 + _0x81e9x1ad, _0x81e9x10)
				}
			}
		}
	}
}

function setOreBlockTile(_0x81e9x26, _0x81e9x27, _0x81e9x28, _0x81e9x10, _0x81e9x1a) {
	var _0x81e9x3a2 = getTile(_0x81e9x26, _0x81e9x27, _0x81e9x28);
	if (_0x81e9x3a2 == 1) {
		setTile(_0x81e9x26, _0x81e9x27, _0x81e9x28, _0x81e9x10, _0x81e9x1a)
	}
}
var DesertBiomeIDs = {
	2: true,
	17: true
};
var ForestBiomeIDs = {
	4: true,
	18: true,
	27: true,
	28: true,
	29: true
};
var JungleBiomeIDs = {
	21: true
};
var SwampBiomeIDs = {
	6: true
};
var worldGeneratorTimer = 0;

function generateNumberOfChunks(_0x81e9x259) {
	MassiveTilePlace = true;
	for (var i = 0; i < _0x81e9x259; i++) {
		tickWorldGenerator();
		java.lang.Thread.yield()
	};
	MassiveTilePlace = false
}

function tickWorldGenerator() {
	var _0x81e9x3aa = (worldGeneratorTimer++) % (7 * 7);
	var _0x81e9x26 = Math.floor(getPlayerX() / 16 + _0x81e9x3aa % 7) - 3;
	var _0x81e9x28 = Math.floor(getPlayerZ() / 16 + _0x81e9x3aa / 7) - 3;
	if (!isInGame) {
		return
	};
	if (!checkChunkOreGenerated(_0x81e9x26, _0x81e9x28) && getPlayerY() < 60) {
		_generateChunkOre(_0x81e9x26, _0x81e9x28)
	};
	if (!checkChunkGenerated(_0x81e9x26, _0x81e9x28)) {
		_generateChunk(_0x81e9x26, _0x81e9x28)
	}
}

function checkChunkOreGenerated(_0x81e9x26, _0x81e9x28) {
	return getTile(_0x81e9x26 * 16 + 5, 0, _0x81e9x28 * 16) == 4 || getTile(_0x81e9x26 * 16 + 3, 0, _0x81e9x28 * 16 + 3) == 0
}

function setChunkOreGenerated(_0x81e9x26, _0x81e9x28) {
	return setTile(_0x81e9x26 * 16 + 5, 0, _0x81e9x28 * 16, 4)
}

function checkChunkGenerated(_0x81e9x26, _0x81e9x28) {
	return getTile(_0x81e9x26 * 16 + 6, 0, _0x81e9x28 * 16) == 4 || getTile(_0x81e9x26 * 16 + 3, 0, _0x81e9x28 * 16 + 3) == 0
}

function setChunkGenerated(_0x81e9x26, _0x81e9x28) {
	return setTile(_0x81e9x26 * 16 + 6, 0, _0x81e9x28 * 16, 4)
}

function _generateChunkOre(_0x81e9x26, _0x81e9x28) {
	FactAPI.InvokeCallback("genChunkOre", _0x81e9x26, _0x81e9x28);
	if (Math.random() < 0.25) {
		var _0x81e9x3b0 = getRandChunkCoords(_0x81e9x26, _0x81e9x28, 4, 48);
		genTinyOreMinable(_0x81e9x3b0[0], _0x81e9x3b0[1], _0x81e9x3b0[2], block_iridium_ore)
	};
	for (var i = 0; i < parseInt(Math.random() * 2); i++) {
		var _0x81e9x3b0 = getRandChunkCoords(_0x81e9x26, _0x81e9x28, 4, 20);
		genOreMinable(_0x81e9x3b0[0], _0x81e9x3b0[1], _0x81e9x3b0[2], block_blended_dust_ore)
	};
	for (var i = 0; i < Math.random() * 13; i++) {
		var _0x81e9x3b0 = getRandChunkCoords(_0x81e9x26, _0x81e9x28, 4, 56);
		genTinyOreMinable(_0x81e9x3b0[0], _0x81e9x3b0[1], _0x81e9x3b0[2], block_uranium_ore)
	};
	for (var i = 0; i < 4 + Math.random() * 6; i++) {
		var _0x81e9x3b0 = getRandChunkCoords(_0x81e9x26, _0x81e9x28, 8, 60);
		genOreMinable(_0x81e9x3b0[0], _0x81e9x3b0[1], _0x81e9x3b0[2], block_copper_ore)
	};
	for (var i = 0; i < 2 + Math.random() * 4; i++) {
		var _0x81e9x3b0 = getRandChunkCoords(_0x81e9x26, _0x81e9x28, 8, 60);
		genOreMinable(_0x81e9x3b0[0], _0x81e9x3b0[1], _0x81e9x3b0[2], block_tin_ore)
	};
	setChunkOreGenerated(_0x81e9x26, _0x81e9x28)
}

function _generateChunk(_0x81e9x39a, _0x81e9x39b) {
	if (getTile(_0x81e9x39a * 16 + 3, 0, _0x81e9x39b * 16 + 3) == 0) {
		return
	};
	FactAPI.InvokeCallback("genChunk", _0x81e9x39a, _0x81e9x39b);
	genSurfaceOres(_0x81e9x39a, _0x81e9x39b);
	var _0x81e9x3b2 = Level.getBiome(_0x81e9x39a * 16 + 1, _0x81e9x39b * 16 + 1);
	var _0x81e9x3b3 = 1 / 90;
	var _0x81e9x3b4 = 1 / 19;
	if (DesertBiomeIDs) {
		_0x81e9x3b4 = 1 / 14
	};
	if (ForestBiomeIDs[_0x81e9x3b2] || JungleBiomeIDs[_0x81e9x3b2]) {
		_0x81e9x3b3 = 1 / 15.5
	};
	if (SwampBiomeIDs[_0x81e9x3b2]) {
		_0x81e9x3b3 = 1 / 8
	};
	if (Math.random() < _0x81e9x3b3) {
		var _0x81e9x26 = parseInt(_0x81e9x39a * 16 + 6 + Math.random() * 4);
		var _0x81e9x28 = parseInt(_0x81e9x39b * 16 + 6 + Math.random() * 4);
		genRubberTreeGroup(_0x81e9x26, _0x81e9x28)
	};
	if (_0x81e9x39a % 2 == 1 && _0x81e9x39b % 2 == 1 && Math.random() < _0x81e9x3b4) {
		var _0x81e9x26 = _0x81e9x39a * 16 + 8;
		var _0x81e9x28 = _0x81e9x39b * 16 + 8;
		var _0x81e9x384 = 127;
		while (_0x81e9x384 > 60 && getTile(_0x81e9x26, _0x81e9x384, _0x81e9x28) == 0) {
			_0x81e9x384--
		};
		generateOillake(_0x81e9x26, _0x81e9x384, _0x81e9x28)
	};
	if (Math.random() * 64 < 1) {
		var _0x81e9x26 = parseInt(_0x81e9x39a * 16 + 2 + Math.random() * 12);
		var _0x81e9x28 = parseInt(_0x81e9x39b * 16 + 2 + Math.random() * 12);
		var _0x81e9x384 = 63;
		while (_0x81e9x384 < 88) {
			var _0x81e9x2b3 = getTile(_0x81e9x26, _0x81e9x384, _0x81e9x28);
			if (_0x81e9x2b3 == 0 || _0x81e9x2b3 == 31 || _0x81e9x2b3 == 32) {
				break
			};
			_0x81e9x384++
		};
		if (_0x81e9x384 > 66) {
			setTile(_0x81e9x26, _0x81e9x384, _0x81e9x28, block_wild_hive)
		}
	};
	setChunkGenerated(_0x81e9x39a, _0x81e9x39b)
}

function isTerrainTile(_0x81e9x10) {
	return (_0x81e9x10 == 1 || _0x81e9x10 == 2 || _0x81e9x10 == 3 || _0x81e9x10 == 12 || _0x81e9x10 == 13 || _0x81e9x10 == 24 || _0x81e9x10 == 49 || _0x81e9x10 == 60)
}

function placeTerrainTile(_0x81e9x26, _0x81e9x27, _0x81e9x28, _0x81e9x10) {
	setTile(_0x81e9x26, _0x81e9x27, _0x81e9x28, _0x81e9x10);
	var _0x81e9x3b7 = getTile(_0x81e9x26, _0x81e9x27 - 1, _0x81e9x28);
	var _0x81e9x3b8 = getTile(_0x81e9x26, _0x81e9x27 + 1, _0x81e9x28);
	if (_0x81e9x3b7 == 2) {
		setTile(_0x81e9x26, _0x81e9x27 - 1, _0x81e9x28, 3)
	};
	if (_0x81e9x3b8 == 0 && _0x81e9x10 == 2 && Math.random() < 0.6) {
		setTile(_0x81e9x26, _0x81e9x27 + 1, _0x81e9x28, 31, 1)
	}
}

function getSurfaceYCoord(_0x81e9x26, _0x81e9x28) {
	var _0x81e9x27 = 63;
	while (isTerrainTile(getTile(_0x81e9x26, _0x81e9x27++, _0x81e9x28))) {};
	_0x81e9x27 -= 2;
	var _0x81e9x193 = getTile(_0x81e9x26, _0x81e9x27, _0x81e9x28);
	if (!isTerrainTile(_0x81e9x193)) {
		return -1
	} else {
		return _0x81e9x27
	}
}

function genSurfaceOreMinable(_0x81e9x26, _0x81e9x27, _0x81e9x28, _0x81e9x10, _0x81e9x3bb) {
	var _0x81e9x3bc = Math.random() * 100;
	var _0x81e9x3bd = [];
	_0x81e9x3bb++;
	var _0x81e9x3be = [(Math.random() * 2 - 1) * _0x81e9x3bb, _0x81e9x3bb * 0.7, (Math.random() * 2 - 1) * _0x81e9x3bb];
	var _0x81e9x3bf = _0x81e9x3bb * Math.random() * 0.8;
	for (var _0x81e9x38a = -_0x81e9x3bb; _0x81e9x38a <= _0x81e9x3bb; _0x81e9x38a++) {
		for (var _0x81e9x38b = -_0x81e9x3bb; _0x81e9x38b <= _0x81e9x3bb; _0x81e9x38b++) {
			var _0x81e9x3c0 = (_0x81e9x3bb * 2 + 1) * (_0x81e9x38b + _0x81e9x3bb) + (_0x81e9x38a + _0x81e9x3bb);
			for (var _0x81e9x384 = -_0x81e9x3bb; _0x81e9x384 <= _0x81e9x3bb; _0x81e9x384++) {
				var _0x81e9x2fc = Math.sqrt(_0x81e9x38a * _0x81e9x38a + _0x81e9x384 * _0x81e9x384 * 0.6 + _0x81e9x38b * _0x81e9x38b);
				var _0x81e9x3c1 = Math.sqrt(Math.pow(_0x81e9x3be[0] - _0x81e9x38a, 2) + Math.pow(_0x81e9x3be[1] - _0x81e9x384, 2) + Math.pow(_0x81e9x3be[2] - _0x81e9x38b, 2));
				var _0x81e9x3c2 = _0x81e9x3bc + Math.atan2(_0x81e9x38a, _0x81e9x38b) * 100;
				_0x81e9x3c2 = (_0x81e9x3c2 - Math.floor(_0x81e9x3c2)) * 0.5;
				var _0x81e9x193 = getTile(_0x81e9x26 + _0x81e9x38a, _0x81e9x27 + _0x81e9x384, _0x81e9x28 + _0x81e9x38b);
				if (isTerrainTile(_0x81e9x193)) {
					_0x81e9x3bd[_0x81e9x3c0] = _0x81e9x193
				} else {
					if (_0x81e9x2fc + _0x81e9x3c2 < _0x81e9x3bb - 1) {
						setTile(_0x81e9x26 + _0x81e9x38a, _0x81e9x27 + _0x81e9x384, _0x81e9x28 + _0x81e9x38b, _0x81e9x10)
					} else {
						if (_0x81e9x3bd[_0x81e9x3c0] > 0 && _0x81e9x2fc + Math.abs(_0x81e9x384) / _0x81e9x3bb < _0x81e9x3bb && _0x81e9x3c1 >= _0x81e9x3bf) {
							placeTerrainTile(_0x81e9x26 + _0x81e9x38a, _0x81e9x27 + _0x81e9x384, _0x81e9x28 + _0x81e9x38b, _0x81e9x3bd[_0x81e9x3c0])
						}
					}
				}
			}
		}
	}
}

function genSurfaceOreInChunk(_0x81e9x39a, _0x81e9x39b, _0x81e9x10, _0x81e9x3c4, _0x81e9x263) {
	var _0x81e9x13 = _0x81e9x263 * Math.random();
	for (var i = 0; i < _0x81e9x13; i++) {
		var _0x81e9x26 = (_0x81e9x39a + Math.random()) * 16;
		var _0x81e9x28 = (_0x81e9x39b + Math.random()) * 16;
		var _0x81e9x27 = getSurfaceYCoord(_0x81e9x26, _0x81e9x28);
		genSurfaceOreMinable(_0x81e9x26, _0x81e9x27, _0x81e9x28, _0x81e9x10, _0x81e9x3c4)
	}
}

function genSurfaceOres(_0x81e9x39a, _0x81e9x39b) {
	var _0x81e9x3c6 = 1 / 64.0;
	if (Math.random() < _0x81e9x3c6) {
		genSurfaceOreInChunk(_0x81e9x39a, _0x81e9x39b, block_copper_ore, 2 + Math.random(), 1)
	};
	if (Math.random() < _0x81e9x3c6) {
		genSurfaceOreInChunk(_0x81e9x39a, _0x81e9x39b, block_tin_ore, 1 + Math.random(), 2)
	};
	if (Math.random() < _0x81e9x3c6 * 0.5) {
		genSurfaceOreInChunk(_0x81e9x39a, _0x81e9x39b, 15, 1.2 + Math.random(), 1)
	};
	if (Math.random() < _0x81e9x3c6 * 0.15) {
		genSurfaceOreInChunk(_0x81e9x39a, _0x81e9x39b, 14, 1.5, 1)
	};
	if (Math.random() < _0x81e9x3c6 * 0.25) {
		genSurfaceOreInChunk(_0x81e9x39a, _0x81e9x39b, block_blended_dust_ore, 2, 1)
	};
	if (Math.random() < _0x81e9x3c6 * 0.25) {
		genSurfaceOreInChunk(_0x81e9x39a, _0x81e9x39b, block_uranium_ore, 1, 1)
	};
	if (Math.random() < _0x81e9x3c6 * 0.016) {
		genSurfaceOreInChunk(_0x81e9x39a, _0x81e9x39b, block_iridium_ore, 1, 1)
	}
}

function CanItemMoveTo(_0x81e9x2b3) {
	return (_0x81e9x2b3 == block_filter_pipe || _0x81e9x2b3 == block_transporting_pipe || _0x81e9x2b3 == 54 || _0x81e9x2b3 == block_valve_pipe || _0x81e9x2b3 == block_golden_pipe || _0x81e9x2b3 == block_diamond_pipe || isMachine(_0x81e9x2b3))
}

function CanItemMoveToOnStart(_0x81e9x2b3) {
	return (_0x81e9x2b3 == block_filter_pipe || _0x81e9x2b3 == block_transporting_pipe || _0x81e9x2b3 == 54 || _0x81e9x2b3 == block_valve_pipe || _0x81e9x2b3 == block_golden_pipe || _0x81e9x2b3 == block_wooden_pipe || _0x81e9x2b3 == block_diamond_pipe)
}

function IsBlockItemPipe(_0x81e9x2b3) {
	return (_0x81e9x2b3 == block_wooden_pipe || _0x81e9x2b3 == block_valve_pipe || _0x81e9x2b3 == block_transporting_pipe || _0x81e9x2b3 == block_filter_pipe || _0x81e9x2b3 == block_diamond_pipe || _0x81e9x2b3 == block_golden_pipe)
}

function StartItemTransport(_0x81e9x26, _0x81e9x27, _0x81e9x28, _0x81e9x10, _0x81e9x13, _0x81e9x16, _0x81e9x3cb) {
	if (!_0x81e9x3cb) {
		_0x81e9x3cb = [0, 0, 0]
	};
	var _0x81e9x3cc = new TransportedItem(_0x81e9x26 + 0.5, _0x81e9x27 + 0.5, _0x81e9x28 + 0.5, _0x81e9x10, _0x81e9x13, _0x81e9x16, _0x81e9x3cb[0], _0x81e9x3cb[1], _0x81e9x3cb[2]);
	addEntityForUpdate(_0x81e9x3cc);
	return _0x81e9x3cc
}

function StartItemTransportWithAutoPathfinding(_0x81e9x26, _0x81e9x27, _0x81e9x28, _0x81e9x10, _0x81e9x13, _0x81e9x16, _0x81e9x3ce) {
	if (!_0x81e9x3ce) {
		_0x81e9x3ce = [0, 0, 0]
	};
	var _0x81e9x3cc = new TransportedItem(_0x81e9x26 + 0.5, _0x81e9x27 + 0.5, _0x81e9x28 + 0.5, _0x81e9x10, _0x81e9x13, _0x81e9x16, 0, 0, 0);
	_0x81e9x3cc.FindStartDirection(_0x81e9x3ce);
	addEntityForUpdate(_0x81e9x3cc);
	return _0x81e9x3cc
}

function TransportedItem(_0x81e9x3d0, _0x81e9x3d1, _0x81e9x3d2, _0x81e9x281, _0x81e9x3d3, itemData, _0x81e9x3d4, _0x81e9x3d5, _0x81e9x3d6) {
	this.isTransportingItem = true;
	this.pos = new Coords(_0x81e9x3d0, _0x81e9x3d1, _0x81e9x3d2);
	this.pulse = new Coords(_0x81e9x3d4, _0x81e9x3d5, _0x81e9x3d6);
	this.vel = 0.05;
	this.age = 0;
	this.index = TransportingCache.TickingIndex++;
	this.progress = 0;
	this.id = _0x81e9x281;
	this.count = _0x81e9x3d3;
	this.data = itemData;
	this.animate_unit = CreateItemAnimation(this.pos.x, this.pos.y, this.pos.z, this.id, this.count, this.data);
	this.Drop = function() {
		this.remove = true;
		var drop = Level.dropItem(Entity.getX(this.ent), Entity.getY(this.ent) + 0.1, Entity.getZ(this.ent), 0, this.id, this.count, this.data);
		Entity.remove(this.ent);
		this.animate_unit.destroy();
		setVelX(drop, this.pulse.x * this.vel * 2.5);
		setVelY(drop, this.pulse.y * this.vel * 2.5);
		setVelZ(drop, this.pulse.z * this.vel * 2.5)
	};
	this.AddToContainer = function(_0x81e9x26, _0x81e9x27, _0x81e9x28) {
		var _0x81e9x2bc = getMachine(_0x81e9x26, _0x81e9x27, _0x81e9x28);
		var _0x81e9x194;
		if (_0x81e9x2bc) {
			var _0x81e9x158 = getMachineType(_0x81e9x2bc);
			if (_0x81e9x158.id == block_filter_pipe) {
				if (!_0x81e9x158.canItemBeTrasportedThrough(_0x81e9x2bc, this.id, this.data)) {
					this.pulse.x *= -1;
					this.pulse.y *= -1;
					this.pulse.z *= -1;
					return true
				};
				return
			};
			_0x81e9x194 = _0x81e9x158.getContainer(_0x81e9x2bc)
		};
		if (!_0x81e9x194) {
			this.pulse.x *= -1;
			this.pulse.y *= -1;
			this.pulse.z *= -1;
			return
		};
		var _0x81e9x3d7 = 999;
		if (_0x81e9x158.getContainer(_0x81e9x2bc).id == 6) {
			_0x81e9x3d7 = 4 + _0x81e9x158.getGUIMetadata(_0x81e9x2bc) * 4
		};
		for (var i in transp_ContainerPutSlots[_0x81e9x194.id]) {
			if (i >= _0x81e9x3d7) {
				break
			};
			this.count = _0x81e9x194.putToSlot(transp_ContainerPutSlots[_0x81e9x194.id][i], this.id, this.count, this.data);
			if (this.count < 1) {
				this.remove = true;
				Entity.remove(this.ent);
				this.animate_unit.destroy();
				return
			}
		};
		this.pulse.x *= -1;
		this.pulse.y *= -1;
		this.pulse.z *= -1
	};
	this.AddToChest = function(_0x81e9x26, _0x81e9x27, _0x81e9x28) {
		var _0x81e9x1cd = getChest(_0x81e9x26, _0x81e9x27, _0x81e9x28);
		if (!_0x81e9x1cd.exist) {
			this.Drop();
			return
		};
		this.count = _0x81e9x1cd.addItem(this.id, this.count, this.data);
		if (this.count > 0) {
			this.pulse.x *= -1;
			this.pulse.y *= -1;
			this.pulse.z *= -1
		} else {
			this.remove = true;
			Entity.remove(this.ent);
			this.animate_unit.destroy()
		}
	};
	this.ChangeDirectionByValveData = function(_0x81e9x10) {
		this.pulse = new Coords(0, 0, 0);
		if (_0x81e9x10 == 0) {
			this.pulse.y = -1
		};
		if (_0x81e9x10 == 1) {
			this.pulse.y = 1
		};
		if (_0x81e9x10 == 2) {
			this.pulse.x = -1
		};
		if (_0x81e9x10 == 3) {
			this.pulse.x = 1
		};
		if (_0x81e9x10 == 4) {
			this.pulse.z = -1
		};
		if (_0x81e9x10 == 5) {
			this.pulse.z = 1
		}
	};
	this.FindMovementDirection = function() {
		this.progress = 0;
		this.pos.x += this.pulse.x;
		var _0x81e9x26 = Math.floor(this.pos.x);
		this.pos.y += this.pulse.y;
		var _0x81e9x27 = Math.floor(this.pos.y);
		this.pos.z += this.pulse.z;
		var _0x81e9x28 = Math.floor(this.pos.z);
		var _0x81e9x2c0 = [
			[-1, 0, 0],
			[1, 0, 0],
			[0, -1, 0],
			[0, 1, 0],
			[0, 0, -1],
			[0, 0, 1]
		];
		var _0x81e9x3d8 = [];
		var _0x81e9x3d9 = TransportingCache.getCached(_0x81e9x26, _0x81e9x27, _0x81e9x28);
		if (_0x81e9x3d9) {
			var _0x81e9x193 = _0x81e9x3d9.tile
		} else {
			var _0x81e9x193 = getTile(_0x81e9x26, _0x81e9x27, _0x81e9x28);
			TransportingCache.setTile(_0x81e9x26, _0x81e9x27, _0x81e9x28, _0x81e9x193)
		};
		if (!CanItemMoveTo(_0x81e9x193)) {
			this.Drop();
			return
		} else {
			if (_0x81e9x193 == 54) {
				this.AddToChest(_0x81e9x26, _0x81e9x27, _0x81e9x28)
			} else {
				if (isMachine(_0x81e9x193) && _0x81e9x193 != block_wooden_pipe && _0x81e9x193 != block_diamond_pipe) {
					if (this.AddToContainer(_0x81e9x26, _0x81e9x27, _0x81e9x28)) {
						return
					}
				} else {
					if (_0x81e9x193 == block_valve_pipe) {
						var _0x81e9x1a = Level.getData(_0x81e9x26, _0x81e9x27, _0x81e9x28);
						this.ChangeDirectionByValveData(_0x81e9x1a)
					} else {
						if (_0x81e9x193 == block_diamond_pipe) {
							var _0x81e9x3da = getMachine(_0x81e9x26, _0x81e9x27, _0x81e9x28);
							var _0x81e9x3db = getMachineType(_0x81e9x3da);
							var _0x81e9x3cb = _0x81e9x3db.getTransportingDirectionVec(_0x81e9x3da, this.id, this.data, this.pulse);
							if (_0x81e9x3cb) {
								this.pulse = new Coords(_0x81e9x3cb[0], _0x81e9x3cb[1], _0x81e9x3cb[2])
							} else {
								this.pulse = new Coords(-this.pulse.x, -this.pulse.y, -this.pulse.z)
							};
							return
						}
					}
				}
			}
		};
		if (_0x81e9x193 == block_transporting_pipe || _0x81e9x193 == block_golden_pipe || _0x81e9x193 == block_filter_pipe || _0x81e9x193 == block_wooden_pipe) {
			if (_0x81e9x193 == block_golden_pipe) {
				this.vel = addToTarget(this.vel, 0.25, 0.07)
			} else {
				this.vel = addToTarget(this.vel, 0.04, 0.01)
			};
			if (_0x81e9x3d9 && _0x81e9x3d9.possible_coords) {
				_0x81e9x3d8 = _0x81e9x3d9.path
			} else {
				for (var i in _0x81e9x2c0) {
					var _0x81e9x15a = _0x81e9x2c0[i];
					if (CanItemMoveTo(getTile(_0x81e9x26 + _0x81e9x15a[0], _0x81e9x27 + _0x81e9x15a[1], _0x81e9x28 + _0x81e9x15a[2]))) {
						_0x81e9x3d8.push(_0x81e9x2c0[i])
					}
				};
				TransportingCache.setPath(_0x81e9x26, _0x81e9x27, _0x81e9x28, _0x81e9x3d8)
			};
			if (_0x81e9x3d8 && _0x81e9x3d8.length > 0) {
				var _0x81e9x3cb = [-this.pulse.x, -this.pulse.y, -this.pulse.z];
				var _0x81e9x3dc = 0;
				while (_0x81e9x3cb[0] == -this.pulse.x && _0x81e9x3cb[1] == -this.pulse.y && _0x81e9x3cb[2] == -this.pulse.z) {
					_0x81e9x3cb = _0x81e9x3d8[parseInt(Math.random() * _0x81e9x3d8.length)];
					if (_0x81e9x3dc++ > 2 && _0x81e9x3d8.length == 1) {
						return
					}
				};
				this.pulse = new Coords(_0x81e9x3cb[0], _0x81e9x3cb[1], _0x81e9x3cb[2])
			} else {
				this.Drop()
			}
		}
	};
	this.FindStartDirection = function(_0x81e9x156) {
		var _0x81e9x2c0 = [
			[-1, 0, 0],
			[1, 0, 0],
			[0, -1, 0],
			[0, 1, 0],
			[0, 0, -1],
			[0, 0, 1]
		];
		var _0x81e9x3d8 = [];
		var _0x81e9x26 = Math.floor(this.pos.x);
		var _0x81e9x27 = Math.floor(this.pos.y);
		var _0x81e9x28 = Math.floor(this.pos.z);
		for (var i in _0x81e9x2c0) {
			var _0x81e9x15a = _0x81e9x2c0[i];
			if (CanItemMoveToOnStart(getTile(_0x81e9x26 + _0x81e9x15a[0], _0x81e9x27 + _0x81e9x15a[1], _0x81e9x28 + _0x81e9x15a[2]))) {
				if (!(_0x81e9x15a[0] == -this.pulse.x && _0x81e9x15a[1] == -this.pulse.y && _0x81e9x15a[2] == -this.pulse.z)) {
					_0x81e9x3d8.push(_0x81e9x2c0[i])
				}
			}
		};
		if (_0x81e9x3d8.length > 0) {
			var _0x81e9x3cb = _0x81e9x3d8[parseInt(Math.random() * _0x81e9x3d8.length)]
		} else {
			var _0x81e9x3cb = _0x81e9x156
		};
		this.pulse = new Coords(_0x81e9x3cb[0], _0x81e9x3cb[1], _0x81e9x3cb[2])
	};
	this.PreventVelocity = function() {
		setVelX(this.ent, Entity.getVelX(this.ent));
		setVelY(this.ent, Entity.getVelY(this.ent));
		setVelZ(this.ent, Entity.getVelZ(this.ent))
	};
	this.Move = function() {
		if (this.progress >= 1) {
			this.FindMovementDirection()
		};
		if (this.remove) {
			return
		};
		var _0x81e9x26 = this.pulse.x * this.progress + this.pos.x;
		var _0x81e9x27 = this.pulse.y * this.progress + this.pos.y;
		var _0x81e9x28 = this.pulse.z * this.progress + this.pos.z;
		if (config_item_transport_animation) {
			this.animate_unit.setPos(_0x81e9x26, _0x81e9x27 + 0.25, _0x81e9x28);
			this.ent = this.animate_unit.ent
		} else {
			if ((this.age++ + this.index) % 7 == 0) {
				Level.addParticle(ParticleType.flame, _0x81e9x26, _0x81e9x27, _0x81e9x28, 0, 0, 0, 0)
			}
		};
		this.progress += this.vel
	};
	this.update = function() {
		if (globalWorldTime > 20) {
			this.Move()
		}
	}
}

function SaveAllTransportingItems() {
	var _0x81e9x13 = 0;
	for (var i in EntitiesForUpdate) {
		var _0x81e9x3cc = EntitiesForUpdate[i];
		if (_0x81e9x3cc.isTransportingItem) {
			var _0x81e9x3de = _0x81e9x3cc.pos.x + "#" + _0x81e9x3cc.pos.y + "#" + _0x81e9x3cc.pos.z + "#" + _0x81e9x3cc.pulse.x + "#" + _0x81e9x3cc.pulse.y + "#" + _0x81e9x3cc.pulse.z + "#" + _0x81e9x3cc.id + "#" + _0x81e9x3cc.count + "#" + _0x81e9x3cc.data + "#" + _0x81e9x3cc.progress;
			DataSaver.Save("item_entity" + _0x81e9x13++, _0x81e9x3de)
		}
	};
	DataSaver.Save("item_entities", _0x81e9x13)
}

function ReadAllTransportingItems() {
	var _0x81e9x3e0 = DataSaver.ReadNumber("item_entities");
	for (var i = 0; i < _0x81e9x3e0; i++) {
		var _0x81e9x3de = DataSaver.Read("item_entity" + i);
		var _0x81e9x2b5 = _0x81e9x3de.split("#");
		var _0x81e9x3cb = {};
		var _0x81e9x26 = parseFloat(_0x81e9x2b5[0]);
		var _0x81e9x27 = parseFloat(_0x81e9x2b5[1]);
		var _0x81e9x28 = parseFloat(_0x81e9x2b5[2]);
		_0x81e9x3cb.x = parseFloat(_0x81e9x2b5[3]);
		_0x81e9x3cb.y = parseFloat(_0x81e9x2b5[4]);
		_0x81e9x3cb.z = parseFloat(_0x81e9x2b5[5]);
		var _0x81e9x10 = parseFloat(_0x81e9x2b5[6]);
		var _0x81e9x13 = parseFloat(_0x81e9x2b5[7]);
		var _0x81e9x16 = parseFloat(_0x81e9x2b5[8]);
		var _0x81e9x3aa = parseFloat(_0x81e9x2b5[9]);
		var _0x81e9x3cc = new TransportedItem(_0x81e9x26, _0x81e9x27, _0x81e9x28, _0x81e9x10, _0x81e9x13, _0x81e9x16, _0x81e9x3cb.x, _0x81e9x3cb.y, _0x81e9x3cb.z);
		_0x81e9x3cc.progress = _0x81e9x3aa;
		addEntityForUpdate(_0x81e9x3cc)
	};
	if (_0x81e9x3e0 > 0) {
		clientMessage("§dtransported items loaded: " + _0x81e9x3e0)
	}
}
var TransportingCache = {
	cache: {},
	TickingIndex: 0,
	key: function(_0x81e9x26, _0x81e9x27, _0x81e9x28) {
		return _0x81e9x26 + ":" + _0x81e9x27 + ":" + _0x81e9x28
	},
	reset: function() {
		this.cache = {}
	},
	clear: function(_0x81e9x26, _0x81e9x27, _0x81e9x28) {
		var _0x81e9x163 = this.key(_0x81e9x26, _0x81e9x27, _0x81e9x28);
		if (this.cache[_0x81e9x163]) {
			this.cache[_0x81e9x163] = null
		}
	},
	clearNearby: function(_0x81e9x26, _0x81e9x27, _0x81e9x28) {
		this.clear(_0x81e9x26, _0x81e9x27, _0x81e9x28);
		this.clear(_0x81e9x26 - 1, _0x81e9x27, _0x81e9x28);
		this.clear(_0x81e9x26 + 1, _0x81e9x27, _0x81e9x28);
		this.clear(_0x81e9x26, _0x81e9x27 - 1, _0x81e9x28);
		this.clear(_0x81e9x26, _0x81e9x27 + 1, _0x81e9x28);
		this.clear(_0x81e9x26, _0x81e9x27, _0x81e9x28 - 1);
		this.clear(_0x81e9x26, _0x81e9x27, _0x81e9x28 + 1)
	},
	initCache: function(_0x81e9x26, _0x81e9x27, _0x81e9x28) {
		var _0x81e9x163 = this.key(_0x81e9x26, _0x81e9x27, _0x81e9x28);
		if (this.cache[_0x81e9x163]) {
			return this.cache[_0x81e9x163]
		} else {
			this.cache[_0x81e9x163] = {};
			return this.cache[_0x81e9x163]
		}
	},
	setPath: function(_0x81e9x26, _0x81e9x27, _0x81e9x28, _0x81e9x1e8) {
		var _0x81e9x3d9 = this.initCache(_0x81e9x26, _0x81e9x27, _0x81e9x28);
		_0x81e9x3d9.path = _0x81e9x1e8
	},
	setTile: function(_0x81e9x26, _0x81e9x27, _0x81e9x28, _0x81e9x193, _0x81e9x16) {
		var _0x81e9x3d9 = this.initCache(_0x81e9x26, _0x81e9x27, _0x81e9x28);
		_0x81e9x3d9.tile = _0x81e9x193;
		_0x81e9x3d9.data = _0x81e9x16
	},
	getCached: function(_0x81e9x26, _0x81e9x27, _0x81e9x28) {
		var _0x81e9x163 = this.key(_0x81e9x26, _0x81e9x27, _0x81e9x28);
		return this.cache[_0x81e9x163]
	}
};
var ItemEntitiesToCleanup = {};

function CleanUpItemEntities() {
	var _0x81e9x3e4 = {};
	for (var _0x81e9x174 in ItemEntitiesToCleanup) {
		var _0x81e9x3e5 = globalWorldTime - ItemEntitiesToCleanup[_0x81e9x174];
		if (_0x81e9x3e5 > 7) {
			Entity.remove(parseInt(_0x81e9x174))
		} else {
			_0x81e9x3e4[_0x81e9x174] = ItemEntitiesToCleanup[_0x81e9x174]
		}
	};
	ItemEntitiesToCleanup = _0x81e9x3e4
}

function addItemEntityToCleanup(_0x81e9x174) {
	ItemEntitiesToCleanup[parseInt(_0x81e9x174)] = globalWorldTime
}
var RenderCache = [];
var NativeTexturepackIcons = [];

function RegisterNativeTextureIcon(_0x81e9x10, _0x81e9x3ea, _0x81e9x3eb) {
	NativeTexturepackIcons[_0x81e9x10] = _0x81e9x3ea + "_" + _0x81e9x3eb + ".png"
}

function CreateItemAnimation(_0x81e9x26, _0x81e9x27, _0x81e9x28, _0x81e9x10, _0x81e9x13, _0x81e9x16, _0x81e9x2c5, _0x81e9x3ed) {
	var _0x81e9x3ee = 1;
	if (_0x81e9x13 > 1) {
		_0x81e9x3ee = 2
	};
	if (_0x81e9x13 > 12) {
		_0x81e9x3ee = 3
	};
	if (!_0x81e9x2c5) {
		_0x81e9x2c5 = 0.5
	};
	var _0x81e9x212 = CreateAnimation(_0x81e9x26, _0x81e9x27, _0x81e9x28);
	_0x81e9x212.setRender(GetItemModel(0, 0, 16, _0x81e9x3ee, _0x81e9x2c5, _0x81e9x3ed).renderType);
	var _0x81e9x165 = "FactorizationGUI/items/" + _0x81e9x10 + "_" + _0x81e9x16 + ".png";
	if (!ModPE.getBytesFromTexturePack(_0x81e9x165)) {
		_0x81e9x165 = "FactorizationGUI/items/" + _0x81e9x10 + ".png"
	};
	if (!ModPE.getBytesFromTexturePack(_0x81e9x165)) {
		if (NativeTexturepackIcons[_0x81e9x10]) {
			_0x81e9x165 = "images/items-opaque/" + NativeTexturepackIcons[_0x81e9x10]
		} else {
			_0x81e9x165 = "FactorizationGUI/items/missing_icon.png"
		}
	};
	_0x81e9x212.setSkin(_0x81e9x165);
	return _0x81e9x212
}

function CreateModelEntityForItem(_0x81e9x26, _0x81e9x27, _0x81e9x28, _0x81e9x10, _0x81e9x13, _0x81e9x16, _0x81e9x2c5, _0x81e9x3ed) {
	var _0x81e9x3f0 = GetItemModel(0, 0, 16, count_, _0x81e9x2c5, _0x81e9x3ed);
	if (ModPE.getBytesFromTexturePack("FactorizationGUI/items/" + _0x81e9x10 + "_" + _0x81e9x16 + ".png") != null) {
		var _0x81e9x38 = Level.spawnMob(_0x81e9x26, _0x81e9x27, _0x81e9x28, 11, "FactorizationGUI/items/" + _0x81e9x10 + "_" + _0x81e9x16 + ".png")
	} else {
		var _0x81e9x38 = Level.spawnMob(_0x81e9x26, _0x81e9x27, _0x81e9x28, 11, "FactorizationGUI/items/" + _0x81e9x10 + ".png")
	};
	Entity.setRenderType(_0x81e9x38, _0x81e9x3f0.renderType);
	Entity.setHealth(_0x81e9x38, 1500);
	Entity.setCollisionSize(_0x81e9x38, 0.2, 0.1);
	return _0x81e9x38
}

function GetItemModel(_0x81e9x26, _0x81e9x28, _0x81e9x1a1, _0x81e9x13, _0x81e9x2c5, _0x81e9x3ed) {
	var _0x81e9x163 = _0x81e9x26 + "," + _0x81e9x28 + "," + _0x81e9x1a1 + "," + _0x81e9x13 + "," + _0x81e9x2c5 + "," + _0x81e9x3ed;
	var _0x81e9x345 = RenderCache[_0x81e9x163];
	if (!_0x81e9x345) {
		_0x81e9x345 = CreateItemModel(_0x81e9x26, _0x81e9x28, _0x81e9x1a1, _0x81e9x13, _0x81e9x2c5, _0x81e9x3ed)
	};
	RenderCache[_0x81e9x163] = _0x81e9x345;
	return _0x81e9x345
}

function CreateItemModel(_0x81e9x26, _0x81e9x28, _0x81e9x1a1, _0x81e9x13, _0x81e9x2c5, _0x81e9x3ed) {
	var _0x81e9x3f3 = 4;
	_0x81e9x1a1 *= _0x81e9x3f3;
	var _0x81e9x3f0 = Renderer.createHumanoidRenderer();
	model = _0x81e9x3f0.getModel();
	model.getPart("head").clear();
	model.getPart("body").clear();
	model.getPart("rightArm").clear();
	model.getPart("leftArm").clear();
	model.getPart("rightLeg").clear();
	model.getPart("leftLeg").clear();
	var _0x81e9x3f4 = model.getPart("body");
	_0x81e9x3f4.setTextureSize(_0x81e9x1a1, _0x81e9x1a1);
	for (var _0x81e9x384 = 0; _0x81e9x384 < _0x81e9x13; _0x81e9x384++) {
		var _0x81e9x3f5 = (Math.random() * 2 - 1) * 2 * _0x81e9x2c5;
		var _0x81e9x3f6 = (Math.random() * 2 - 1) * 2 * _0x81e9x2c5;
		if (_0x81e9x384 == 0) {
			_0x81e9x3f5 = _0x81e9x3f6 = 0
		};
		for (var _0x81e9x38a = 0; _0x81e9x38a < 16; _0x81e9x38a++) {
			for (var _0x81e9x38b = 0; _0x81e9x38b < 16; _0x81e9x38b++) {
				_0x81e9x3f4.setTextureOffset((_0x81e9x38a + _0x81e9x26 + 0.5) * _0x81e9x3f3, (_0x81e9x38b + _0x81e9x28 + 0.5) * _0x81e9x3f3, true);
				if (_0x81e9x3ed == 2) {
					_0x81e9x3f4.addBox(_0x81e9x3f5 + (_0x81e9x38a - 8) * _0x81e9x2c5, 23 + _0x81e9x3f6 + _0x81e9x38b * _0x81e9x2c5, _0x81e9x384 * _0x81e9x2c5, 0, 0, 0, 0.5 * _0x81e9x2c5)
				} else {
					if (_0x81e9x3ed == 1) {
						_0x81e9x3f4.addBox(_0x81e9x3f5 + (_0x81e9x38a - 8) * _0x81e9x2c5, 23 + _0x81e9x384 * _0x81e9x2c5, _0x81e9x3f6 + (_0x81e9x38b - 8) * _0x81e9x2c5, 0, 0, 0, 0.5 * _0x81e9x2c5)
					} else {
						_0x81e9x3f4.addBox(_0x81e9x384 * _0x81e9x2c5, 23 + _0x81e9x3f6 + _0x81e9x38b * _0x81e9x2c5, _0x81e9x3f5 + (_0x81e9x38a - 8) * _0x81e9x2c5, 0, 0, 0, 0.5 * _0x81e9x2c5)
					}
				}
			}
		}
	};
	return _0x81e9x3f0
}

function QuarryLaserModel(_0x81e9x3f8) {
	var _0x81e9x3f9 = Renderer.createHumanoidRenderer();
	model = _0x81e9x3f9.getModel();
	model.getPart("head").clear();
	model.getPart("body").clear();
	model.getPart("rightArm").clear();
	model.getPart("leftArm").clear();
	model.getPart("rightLeg").clear();
	model.getPart("leftLeg").clear();
	var _0x81e9x27 = 24;
	var _0x81e9x28 = 4;
	b = model.getPart("body");
	b.addBox(-6, -6, -6, 12, 12, 12);
	if (_0x81e9x3f8 > 0) {
		b.setTextureOffset(40 + _0x81e9x3f8 * 8, 0);
		b.addBox(-1, 0, -1, 2, 48, 2)
	};
	return _0x81e9x3f9
}
var QuarryModels = [];
for (var i = 0; i < 3; i++) {
	QuarryModels[i] = QuarryLaserModel(i)
};

function CreateBarrelRender(_0x81e9x3fc) {
	var _0x81e9x3f9 = Renderer.createHumanoidRenderer();
	model = _0x81e9x3f9.getModel();
	model.getPart("head").clear();
	model.getPart("body").clear();
	model.getPart("rightArm").clear();
	model.getPart("leftArm").clear();
	model.getPart("rightLeg").clear();
	model.getPart("leftLeg").clear();
	var _0x81e9x27 = 24;
	var _0x81e9x28 = 4;
	b = model.getPart("body");
	b.setTextureSize(64, 32);
	b.addBox(-7, 24.5 - _0x81e9x3fc, -7, 14, _0x81e9x3fc, 14);
	return _0x81e9x3f9
}
var barrelRenders = [];
for (var i = 0; i <= 16; i++) {
	barrelRenders[i] = CreateBarrelRender(i)
};
var ReactorRenderModelCache = [];

function CreateReactorModel(_0x81e9x10, _0x81e9x400, _0x81e9x401) {
	var _0x81e9x3f0 = ReactorRenderModelCache[_0x81e9x10];
	if (!_0x81e9x3f0) {
		_0x81e9x3f0 = Renderer.createHumanoidRenderer();
		ReactorRenderModelCache[_0x81e9x10] = _0x81e9x3f0;
		var _0x81e9x169 = _0x81e9x3f0.getModel();
		_0x81e9x169.getPart("head").clear();
		_0x81e9x169.getPart("body").clear();
		_0x81e9x169.getPart("rightArm").clear();
		_0x81e9x169.getPart("leftArm").clear();
		_0x81e9x169.getPart("rightLeg").clear();
		_0x81e9x169.getPart("leftLeg").clear()
	};
	var _0x81e9x27 = -8;
	var _0x81e9x169 = _0x81e9x3f0.getModel();
	var _0x81e9x3f4 = _0x81e9x169.getPart("body");
	_0x81e9x3f4.clear();
	_0x81e9x3f4.setTextureOffset(48, 0);
	!_0x81e9x3f4.setTextureSize(64, 64);
	_0x81e9x3f4.addBox(-2, _0x81e9x27, -2, 4, parseInt(_0x81e9x401 * 32), 4);
	for (var i in _0x81e9x400) {
		var _0x81e9x3f5 = parseInt(i / 2);
		var _0x81e9x3f6 = 1 - i % 2;
		var _0x81e9x16 = _0x81e9x400[i];
		var _0x81e9x53 = _0x81e9x3f5 * 13 - 7;
		var _0x81e9x55 = _0x81e9x3f6 * 13 - 7;
		var _0x81e9x56 = _0x81e9x3f5 * 10.8 - 6.9;
		var _0x81e9x58 = _0x81e9x3f6 * 10.8 - 6.9;
		var _0x81e9x402 = _0x81e9x3f5 * 11 - 7;
		var _0x81e9x403 = _0x81e9x3f6 * 11 - 7;
		var _0x81e9x404 = _0x81e9x16.type * 12;
		var _0x81e9x31f = parseInt(_0x81e9x16.len * 32);
		_0x81e9x3f4.setTextureOffset(0, 0);
		_0x81e9x3f4.addBox(_0x81e9x53, _0x81e9x27, _0x81e9x55, 1, _0x81e9x31f, 1);
		_0x81e9x3f4.addBox(_0x81e9x402, _0x81e9x27 + _0x81e9x31f - 1, _0x81e9x403, 3, 1, 3);
		if (_0x81e9x404 > 0) {
			_0x81e9x3f4.setTextureOffset(_0x81e9x404, 0);
			_0x81e9x3f4.addBox(_0x81e9x56, _0x81e9x27, _0x81e9x58, 3, _0x81e9x31f - 1, 3)
		}
	};
	return _0x81e9x3f0
}

function PipeItemAnimation(_0x81e9x1e8, _0x81e9x406, _0x81e9x10, _0x81e9x16) {
	this.path = _0x81e9x1e8;
	this.ticksPerBlock = _0x81e9x406;
	this.id = _0x81e9x10;
	this.data = _0x81e9x16;
	this.age = 0;
	this.update = function() {
		var _0x81e9x3aa = this.age / this.ticksPerBlock;
		var _0x81e9x407 = this.path[parseInt(_0x81e9x3aa)];
		var _0x81e9x408 = this.path[parseInt(_0x81e9x3aa) + 1];
		if (!_0x81e9x408 || !_0x81e9x407) {
			Entity.remove(this.ent);
			this.remove = true;
			return
		};
		var _0x81e9x1c2 = _0x81e9x3aa - Math.floor(_0x81e9x3aa);
		var _0x81e9x26 = _0x81e9x407.x * (1 - _0x81e9x1c2) + _0x81e9x408.x * _0x81e9x1c2 + 0.5;
		var _0x81e9x27 = _0x81e9x407.y * (1 - _0x81e9x1c2) + _0x81e9x408.y * _0x81e9x1c2 + 0.5;
		var _0x81e9x28 = _0x81e9x407.z * (1 - _0x81e9x1c2) + _0x81e9x408.z * _0x81e9x1c2 + 0.5;
		var _0x81e9x1b0 = _0x81e9x26 - getPlayerX();
		var _0x81e9x1b1 = _0x81e9x27 - (getPlayerY() - 0.62);
		var _0x81e9x1b2 = _0x81e9x28 - getPlayerZ();
		var _0x81e9x409 = _0x81e9x1b0 * _0x81e9x1b0 + _0x81e9x1b1 * _0x81e9x1b1 + _0x81e9x1b2 * _0x81e9x1b2;
		if (_0x81e9x409 > 9) {
			if (Entity.getY(this.ent) < 1) {
				this.ent = Level.dropItem_(_0x81e9x26, _0x81e9x27, _0x81e9x28, 0, this.id, 0, this.data)
			}
		} else {
			Entity.remove(this.ent)
		};
		if (_0x81e9x1c2 - 1 / this.ticksPerBlock <= 0.5 && _0x81e9x1c2 >= 0.5) {
			setPosition(this.ent, _0x81e9x26, _0x81e9x27, _0x81e9x28)
		};
		BindEntityToPosition(this.ent, _0x81e9x26, _0x81e9x27, _0x81e9x28);
		this.age++
	}
}

function AnimateItemInPipe(_0x81e9x1e8, _0x81e9x10, _0x81e9x16) {
	if (OptionReader.getKey("pipe_item_animation")) {
		addEntityForUpdate(new PipeItemAnimation(_0x81e9x1e8, 20, _0x81e9x10, _0x81e9x16))
	}
}

function PipeAnimationRender(_0x81e9x1e8) {
	var _0x81e9x3f9 = Renderer.createHumanoidRenderer();
	model = _0x81e9x3f9.getModel();
	model.getPart("head").clear();
	model.getPart("body").clear();
	model.getPart("rightArm").clear();
	model.getPart("leftArm").clear();
	model.getPart("rightLeg").clear();
	model.getPart("leftLeg").clear();
	var _0x81e9x40c = model.getPart("body");
	if (!_0x81e9x1e8) {
		return _0x81e9x3f9
	};
	var _0x81e9x14 = _0x81e9x1e8[0];
	var _0x81e9x27 = 24;
	for (var i in _0x81e9x1e8) {
		var _0x81e9x407 = _0x81e9x1e8[i - 1];
		if (!_0x81e9x407) {
			continue
		};
		var _0x81e9x408 = _0x81e9x1e8[i];
		var _0x81e9x40d = Math.min(_0x81e9x407.x, _0x81e9x408.x) - _0x81e9x14.x;
		var _0x81e9x40e = Math.abs(_0x81e9x407.x - _0x81e9x408.x);
		var _0x81e9x40f = Math.min(_0x81e9x407.y, _0x81e9x408.y) - _0x81e9x14.y;
		var _0x81e9x410 = Math.abs(_0x81e9x407.y - _0x81e9x408.y);
		var _0x81e9x411 = Math.min(_0x81e9x407.z, _0x81e9x408.z) - _0x81e9x14.z;
		var _0x81e9x412 = Math.abs(_0x81e9x407.z - _0x81e9x408.z);
		_0x81e9x40c.addBox(_0x81e9x40d * 16 - 3, -(_0x81e9x40f + _0x81e9x410) * 16 - 3 + _0x81e9x27, -(_0x81e9x411 + _0x81e9x412) * 16 - 3, _0x81e9x40e * 16 + 6, _0x81e9x410 * 16 + 6, _0x81e9x412 * 16 + 6)
	};
	return _0x81e9x3f9
}

function PipeLiquidAnimation(_0x81e9x1e8, _0x81e9x406, _0x81e9x10) {
	this.path = _0x81e9x1e8;
	this.ticksPerBlock = _0x81e9x406;
	this.id = _0x81e9x10;
	this.age = 0;
	this.renID = PipeAnimationRender(_0x81e9x1e8).renderType;
	this.update = function() {
		var _0x81e9x407 = this.path[0];
		if (!_0x81e9x407 || this.age > 21) {
			Entity.remove(this.ent);
			this.remove = true;
			return
		};
		var _0x81e9x26 = _0x81e9x407.x + 0.5;
		var _0x81e9x27 = _0x81e9x407.y + 0.5;
		var _0x81e9x28 = _0x81e9x407.z + 0.5;
		Entity.remove(this.ent);
		this.ent = Level.spawnMob(_0x81e9x26, _0x81e9x27, _0x81e9x28, 12, "mob/liquid/" + this.id + ".png");
		Entity.setRot(this.ent, 0, 0);
		Entity.setRenderType(this.ent, this.renID);
		Entity.setHealth(this.ent, 9999);
		BindEntityToPosition(this.ent, _0x81e9x26, _0x81e9x27, _0x81e9x28);
		this.age++
	}
}

function AnimateLiquidInPipe(_0x81e9x1e8, _0x81e9x10) {
	if (OptionReader.getKey("test_pipe_liquid_animation")) {
		addEntityForUpdate(new PipeLiquidAnimation(_0x81e9x1e8, block_recycler, _0x81e9x10))
	}
}

function CreateBeeRender(_0x81e9x3f9, _0x81e9x1a1) {
	model = _0x81e9x3f9.getModel();
	model.getPart("head").clear();
	model.getPart("body").clear();
	model.getPart("rightArm").clear();
	model.getPart("leftArm").clear();
	model.getPart("rightLeg").clear();
	model.getPart("leftLeg").clear();
	var _0x81e9x27 = 24;
	var _0x81e9x28 = 4;
	bipedBody = model.getPart("head");
	bipedBody.setTextureOffset(0, 0);
	bipedBody.addBox(-1.5, -1.5 + _0x81e9x27, -7 + _0x81e9x28, 3, 2, 7);
	bipedBody.setTextureOffset(25, 25);
	bipedBody.addBox(-2.5, -1.5 + _0x81e9x27, -5 + _0x81e9x28, 1, 1, 3);
	bipedBody.addBox(-3.5, -2.5 + _0x81e9x27, -5 + _0x81e9x28, 1, 1, 3);
	bipedBody.addBox(-4.5, -3.5 + _0x81e9x27, -5 + _0x81e9x28, 1, 1, 3);
	bipedBody.addBox(1.5, -1.5 + _0x81e9x27, -5 + _0x81e9x28, 1, 1, 3);
	bipedBody.addBox(2.5, -2.5 + _0x81e9x27, -5 + _0x81e9x28, 1, 1, 3);
	bipedBody.addBox(3.5, -3.5 + _0x81e9x27, -5 + _0x81e9x28, 1, 1, 3);
	bipedBody.setTextureOffset(16, 16);
	bipedBody.addBox(1.5, -2.5 + _0x81e9x27, -7 + _0x81e9x28, 1, 1, 1);
	bipedBody.addBox(2.5, -3.5 + _0x81e9x27, -8 + _0x81e9x28, 1, 1, 1);
	bipedBody.addBox(-2.5, -2.5 + _0x81e9x27, -7 + _0x81e9x28, 1, 1, 1);
	bipedBody.addBox(-3.5, -3.5 + _0x81e9x27, -8 + _0x81e9x28, 1, 1, 1);
	bipedBody.addBox(-1.5, 0.5 + _0x81e9x27, -1 + _0x81e9x28, 1, 1, 1);
	bipedBody.addBox(0.5, 0.5 + _0x81e9x27, -1 + _0x81e9x28, 1, 1, 1);
	bipedBody.addBox(-1.5, 0.5 + _0x81e9x27, -6 + _0x81e9x28, 1, 1, 1);
	bipedBody.addBox(0.5, 0.5 + _0x81e9x27, -6 + _0x81e9x28, 1, 1, 1);
	bipedBody.addBox(-1.5, 0.5 + _0x81e9x27, -3 + _0x81e9x28, 1, 1, 1);
	bipedBody.addBox(0.5, 0.5 + _0x81e9x27, -3 + _0x81e9x28, 1, 1, 1)
}

function CreateBeeRenderer2(_0x81e9x417) {
	var _0x81e9x1a1 = 16;
	var _0x81e9x26 = 0;
	var _0x81e9x28 = 0;
	var _0x81e9x2c5 = 0.4;
	var _0x81e9x3f3 = 8;
	_0x81e9x1a1 *= _0x81e9x3f3;
	var _0x81e9x3f0 = Renderer.createHumanoidRenderer();
	model = _0x81e9x3f0.getModel();
	model.getPart("head").clear();
	model.getPart("body").clear();
	model.getPart("rightArm").clear();
	model.getPart("leftArm").clear();
	model.getPart("rightLeg").clear();
	model.getPart("leftLeg").clear();
	var _0x81e9x418 = 20 - 16 * _0x81e9x2c5;
	var _0x81e9x3f4 = model.getPart("body");
	_0x81e9x3f4.setTextureSize(_0x81e9x1a1, _0x81e9x1a1);
	for (var _0x81e9x38a = 0; _0x81e9x38a < 16; _0x81e9x38a++) {
		for (var _0x81e9x38b = 0; _0x81e9x38b < 16; _0x81e9x38b++) {
			_0x81e9x3f4.setTextureOffset((_0x81e9x38a + _0x81e9x26 + 0.5) * _0x81e9x3f3, (_0x81e9x38b + _0x81e9x28 + 0.5) * _0x81e9x3f3, true);
			if (_0x81e9x38b < 8 && _0x81e9x38a > 6) {
				var _0x81e9x419 = 8 - _0x81e9x38b;
				_0x81e9x3f4.addBox((_0x81e9x38a - 8) * _0x81e9x2c5, _0x81e9x418 + _0x81e9x38b * _0x81e9x2c5 + _0x81e9x419 * 2 * _0x81e9x417 * _0x81e9x2c5, (-_0x81e9x419 + 0.5) * _0x81e9x2c5, 0, 0, 0, 0.5 * _0x81e9x2c5);
				_0x81e9x3f4.addBox((_0x81e9x38a - 8) * _0x81e9x2c5, _0x81e9x418 + _0x81e9x38b * _0x81e9x2c5 + _0x81e9x419 * 2 * _0x81e9x417 * _0x81e9x2c5, (_0x81e9x419 - 0.5) * _0x81e9x2c5, 0, 0, 0, 0.5 * _0x81e9x2c5)
			} else {
				_0x81e9x3f4.addBox((_0x81e9x38a - 8) * _0x81e9x2c5, _0x81e9x418 + _0x81e9x38b * _0x81e9x2c5, -0.5 * _0x81e9x2c5, 0, 0, 0, 0.5 * _0x81e9x2c5);
				_0x81e9x3f4.addBox((_0x81e9x38a - 8) * _0x81e9x2c5, _0x81e9x418 + _0x81e9x38b * _0x81e9x2c5, 0.5 * _0x81e9x2c5, 0, 0, 0, 0.5 * _0x81e9x2c5)
			}
		}
	};
	return _0x81e9x3f0
}
var BeeRenders = [];
for (var i = 0; i < 20; i++) {
	BeeRenders[i] = CreateBeeRenderer2(i / 16).renderType
};
var beeRenderer = Renderer.createHumanoidRenderer();
CreateBeeRender(beeRenderer);
var NukeRenderArray = [];

function UpdateNukeRender(_0x81e9x10, _0x81e9x2c5) {
	var _0x81e9x16 = NukeRenderArray[_0x81e9x10];
	if (!_0x81e9x16) {
		_0x81e9x16 = {
			particles: []
		};
		_0x81e9x16.age = 0;
		_0x81e9x16.renderer = Renderer.createHumanoidRenderer();
		var _0x81e9x169 = _0x81e9x16.renderer.getModel();
		NukeRenderArray[_0x81e9x10] = _0x81e9x16;
		_0x81e9x169.getPart("head").clear();
		_0x81e9x169.getPart("body").clear();
		_0x81e9x169.getPart("rightArm").clear();
		_0x81e9x169.getPart("leftArm").clear();
		_0x81e9x169.getPart("rightLeg").clear();
		_0x81e9x169.getPart("leftLeg").clear();
		for (var i = 0; i < 6.28; i += Math.random() * 0.3) {
			var _0x81e9x15b = 1 + Math.random() * Math.random();
			var _0x81e9x3d4 = Math.sin(i) * _0x81e9x15b * 4;
			var _0x81e9x3d6 = Math.cos(i) * _0x81e9x15b * 4;
			_0x81e9x16.particles.push([0, 0, 0, _0x81e9x3d4, Math.random() * 0.9 + 2.5, _0x81e9x3d6, 45, 1000 + Math.random() * item_wrench])
		};
		for (var _0x81e9x41e = 0; _0x81e9x41e < 3; _0x81e9x41e += Math.random() * 0.35) {
			_0x81e9x16.particles.push([0, 0, 0, Math.random() - 0.5, _0x81e9x41e, Math.random() - 0.5, 31, 1000 + Math.random() * item_wrench])
		}
	} else {
		var _0x81e9x169 = _0x81e9x16.renderer.getModel()
	};
	_0x81e9x16.age++;
	var _0x81e9x3f4 = _0x81e9x169.getPart("body").clear();
	_0x81e9x3f4.setTextureOffset(parseInt(Math.min(20, _0x81e9x16.age / 4)), 0);
	for (var i in _0x81e9x16.particles) {
		var _0x81e9x41f = _0x81e9x16.particles[i];
		if (!_0x81e9x41f[8]) {
			_0x81e9x41f[8] = 0
		};
		_0x81e9x3f4.setTextureOffset(parseInt(Math.min(19, _0x81e9x41f[8] / _0x81e9x41f[7] * block_recycler)), 0);
		if (_0x81e9x41f[8]++ > _0x81e9x41f[7]) {
			_0x81e9x16.particles.splice(i, 1);
			i--;
			continue
		};
		_0x81e9x3f4.addBox((_0x81e9x41f[0] += _0x81e9x41f[3] *= 0.955) * _0x81e9x2c5, (_0x81e9x41f[1] -= _0x81e9x41f[4] *= 0.994) * _0x81e9x2c5 + 24, (_0x81e9x41f[2] += _0x81e9x41f[5] *= 0.955) * _0x81e9x2c5, 0, 0, 0, _0x81e9x41f[6] * _0x81e9x2c5)
	};
	return _0x81e9x16.renderer
}
var NukeAnimationUniqueID = 0;

function NuclearExplosionAnimation(_0x81e9x26, _0x81e9x27, _0x81e9x28, _0x81e9x2c5) {
	this.id_ = NukeAnimationUniqueID++;
	this.x = _0x81e9x26;
	this.y = _0x81e9x27;
	this.z = _0x81e9x28;
	this.age = 0;
	this.update = function() {
		if (this.age == 200 && getTile(this.x, this.y, this.z) == block_light_tile_unused) {
			setTile(this.x, this.y, this.z, 0)
		};
		if (getTime() % 6 == 0) {
			Entity.remove(this.ent);
			this.ent = Level.spawnMob(this.x, this.y, this.z, 11, "nuke/explosion.png");
			Entity.setHealth(this.ent, 1500);
			Entity.setCollisionSize(this.ent, 0, 40)
		};
		setPosition(this.ent, this.x, this.y, this.z);
		BindEntityToPosition(this.ent, this.x, this.y, this.z);
		if (getTime() % 2 == 0) {
			Entity.setRenderType(this.ent, UpdateNukeRender(this.id_, _0x81e9x2c5).renderType);
			EntityDataSaver.setAnimation(this.ent)
		};
		if (this.age < 100) {
			ShowNukeEffectOverlay(Math.max(0, 1 - this.age / 80))
		};
		if (this.age == 25) {
			PlaySoundFile("Tools/NukeExplosion.ogg")
		};
		if (this.age < block_recycler) {
			var _0x81e9x2ee = Math.atan2(this.x - getPlayerX(), this.z - getPlayerZ()) / Math.PI * -180;
			Entity.setRot(getPlayerEnt(), _0x81e9x2ee + Math.random() * 6 - 3, Entity.getPitch(getPlayerEnt()) + Math.sin(this.age))
		};
		if (this.age++ > 3000) {
			this.remove = true;
			Entity.remove(this.ent)
		}
	}
}

function AnimateNuclearExplosion(_0x81e9x26, _0x81e9x27, _0x81e9x28, _0x81e9x2c5) {
	addEntityForUpdate(new NuclearExplosionAnimation(_0x81e9x26, _0x81e9x27, _0x81e9x28, _0x81e9x2c5))
}
var ANIMATION_ENTITY_DEFAULT_HEALTH = 1500;

function AnimationHandler(_0x81e9x425) {
	this.x = this.y = this.z = 0;
	this.skin = "";
	this.render = 0;
	this.height = 0;
	this.recreate = function() {
		var _0x81e9x212 = this;
		RunOnMainThread(function() {
			Entity.remove(_0x81e9x212.ent);
			_0x81e9x212.ent = Level.spawnMob(_0x81e9x212.x, _0x81e9x212.y, _0x81e9x212.z, EntityType.RABBIT, _0x81e9x212.skin);
			Entity.setRot(_0x81e9x212.ent, 0, 0);
			try {
				Entity.setRenderType(_0x81e9x212.ent, _0x81e9x212.render)
			} catch (e) {};
			Entity.setCollisionSize(_0x81e9x212.ent, 0, _0x81e9x212.height)
		})
	};
	this.update = function() {
		if (this.remove || !isInGame) {
			return
		};
		if (Entity.getHealth(this.ent) <= 0 && this.render) {
			this.recreate()
		};
		Entity.setImmobile(this.ent, true);
		Entity.setHealth(this.ent, ANIMATION_ENTITY_DEFAULT_HEALTH)
	};
	this.setSkin = function(_0x81e9x165) {
		if (this.skin != _0x81e9x165) {
			Entity.setMobSkin(this.ent, _0x81e9x165)
		};
		this.skin = _0x81e9x165
	};
	this.setRender = function(_0x81e9x3f0) {
		if (this.render != _0x81e9x3f0) {
			Entity.setRenderType(this.ent, _0x81e9x3f0)
		};
		this.render = _0x81e9x3f0
	};
	this.setHeight = function(_0x81e9x426) {
		Entity.setCollisionSize(this.ent, 0, _0x81e9x426);
		this.height = _0x81e9x426
	};
	this.setPos = function(_0x81e9x26, _0x81e9x27, _0x81e9x28) {
		setPosition(this.ent, _0x81e9x26, _0x81e9x27, _0x81e9x28);
		this.x = _0x81e9x26;
		this.y = _0x81e9x27;
		this.z = _0x81e9x28
	};
	this.addPos = function(_0x81e9x26, _0x81e9x27, _0x81e9x28) {
		this.setPos(this.x + _0x81e9x26, this.y + _0x81e9x27, this.z + _0x81e9x28)
	};
	this.destroy = function() {
		var _0x81e9x174 = this.ent;
		Entity.remove(_0x81e9x174);
		this.remove = true
	}
}

function CreateAnimation(_0x81e9x26, _0x81e9x27, _0x81e9x28) {
	var _0x81e9x212 = new AnimationHandler();
	_0x81e9x212.setPos(_0x81e9x26, _0x81e9x27, _0x81e9x28);
	addEntityForUpdate(_0x81e9x212, -1);
	return _0x81e9x212
}

function CreateNullRender() {
	var _0x81e9x3f0 = Renderer.createHumanoidRenderer();
	model = _0x81e9x3f0.getModel();
	model.getPart("head").clear();
	model.getPart("body").clear();
	model.getPart("rightArm").clear();
	model.getPart("leftArm").clear();
	model.getPart("rightLeg").clear();
	model.getPart("leftLeg").clear();
	return _0x81e9x3f0
}
var NULL_RENDER = CreateNullRender().renderType;

function BeeAnimator() {
	this.age = 0;
	this.update = function() {
		var _0x81e9x42b = Math.abs(15 - this.age % 32);
		this.age += 11;
		Entity.setRenderType(this.ent, BeeRenders[_0x81e9x42b]);
		Entity.setHealth(this.ent, 1500);
		if (Entity.getHealth(this.ent) < 1) {
			this.remove = true
		}
	}
}

function AnimateEntityAsBee(_0x81e9x38, _0x81e9x164) {
	var _0x81e9x165 = "FactorizationGUI/items/" + _0x81e9x164 + ".png";
	if (!ModPE.getBytesFromTexturePack(_0x81e9x165)) {
		if (NativeTexturepackIcons[_0x81e9x164]) {
			_0x81e9x165 = "images/items-opaque/" + NativeTexturepackIcons[_0x81e9x164]
		} else {
			_0x81e9x165 = "FactorizationGUI/items/missing_icon.png"
		}
	};
	Entity.setMobSkin(_0x81e9x38, _0x81e9x165);
	Entity.setCollisionSize(_0x81e9x38, 0.1, 0.3);
	var _0x81e9x212 = new BeeAnimator();
	Entity.setRenderType(_0x81e9x38, BeeRenders[0]);
	addEntityForUpdate(_0x81e9x212, _0x81e9x38);
	return _0x81e9x212
}
var mill_model_dist_precious = 2;

function CreateMillRenderer(_0x81e9x2ee, _0x81e9x42f, _0x81e9x31f, _0x81e9x1a1) {
	var _0x81e9x3f0 = Renderer.createHumanoidRenderer();
	model = _0x81e9x3f0.getModel();
	model.getPart("head").clear();
	model.getPart("body").clear();
	model.getPart("rightArm").clear();
	model.getPart("leftArm").clear();
	model.getPart("rightLeg").clear();
	model.getPart("leftLeg").clear();
	var _0x81e9x3f4 = model.getPart("body");
	var _0x81e9x430 = 24;
	_0x81e9x3f4.setTextureSize(4, 4);
	_0x81e9x3f4.setTextureOffset(0, 0, true);
	for (var _0x81e9x159 = 0; _0x81e9x159 < Math.PI * 2; _0x81e9x159 += Math.PI / 3 * 2) {
		for (var i = 0; i < _0x81e9x31f; i += mill_model_dist_precious) {
			var _0x81e9x2ef = _0x81e9x42f + _0x81e9x159;
			var _0x81e9x38a = Math.sin(_0x81e9x2ee) * Math.cos(_0x81e9x2ef) * i;
			var _0x81e9x384 = _0x81e9x430 + Math.sin(_0x81e9x2ef) * i;
			var _0x81e9x38b = Math.cos(_0x81e9x2ee) * Math.cos(_0x81e9x2ef) * i;
			_0x81e9x3f4.addBox(_0x81e9x38a - _0x81e9x1a1, _0x81e9x384 - _0x81e9x1a1, _0x81e9x38b - _0x81e9x1a1, 1, 1, 1, _0x81e9x1a1 - 0.5 + Math.abs(Math.sin(i * 1734.0)) * 0.25)
		}
	};
	return _0x81e9x3f0
}

function CreateWaterMillRenderer(_0x81e9x2ee, _0x81e9x42f, _0x81e9x31f, _0x81e9x1a1) {
	var _0x81e9x3f0 = Renderer.createHumanoidRenderer();
	model = _0x81e9x3f0.getModel();
	model.getPart("head").clear();
	model.getPart("body").clear();
	model.getPart("rightArm").clear();
	model.getPart("leftArm").clear();
	model.getPart("rightLeg").clear();
	model.getPart("leftLeg").clear();
	var _0x81e9x3f4 = model.getPart("body");
	var _0x81e9x430 = 24;
	_0x81e9x3f4.setTextureSize(4, 4);
	_0x81e9x3f4.setTextureOffset(0, 0, true);
	for (var _0x81e9x159 = 0; _0x81e9x159 < Math.PI * 2; _0x81e9x159 += Math.PI / 3 * 2) {
		for (var i = 0; i < _0x81e9x31f; i += mill_model_dist_precious) {
			var _0x81e9x2ef = _0x81e9x42f + _0x81e9x159;
			var _0x81e9x38a = Math.cos(_0x81e9x2ee) * Math.cos(_0x81e9x2ef) * i;
			var _0x81e9x38b = Math.sin(_0x81e9x2ef) * i;
			var _0x81e9x384 = _0x81e9x430 + Math.sin(_0x81e9x2ee) * Math.cos(_0x81e9x2ef) * i;
			_0x81e9x3f4.addBox(_0x81e9x38a - _0x81e9x1a1, _0x81e9x384 - _0x81e9x1a1, _0x81e9x38b - _0x81e9x1a1, 1, 1, 1, _0x81e9x1a1 - 0.5 + Math.abs(Math.sin(i * 1734.0)) * 0.25)
		}
	};
	return _0x81e9x3f0
}
var MillMachinesRenderList = [];
for (var i = 0; i < 32; i++) {
	MillMachinesRenderList[i] = CreateMillRenderer(0, Math.PI / 48 * i, 36, 2)
};
for (var i = 0; i < 32; i++) {
	MillMachinesRenderList[i + 32] = CreateWaterMillRenderer(0, Math.PI / 48 * i, 12, 1.2)
};

function TextAnimation(_0x81e9x425) {
	this.parent = AnimationHandler;
	this.parent(_0x81e9x425);
	this.render = NULL_RENDER;
	this.skin = "mob/char.png";
	this.height = 0;
	this.text = "";
	this.recreate = function() {
		var _0x81e9x212 = this;
		RunOnMainThread(function() {
			Entity.remove(_0x81e9x212.ent);
			_0x81e9x212.ent = Level.spawnMob(_0x81e9x212.x, _0x81e9x212.y, _0x81e9x212.z, EntityType.RABBIT, _0x81e9x212.skin);
			Entity.setRot(_0x81e9x212.ent, 0, 0);
			Entity.setImmobile(_0x81e9x212.ent, true);
			try {
				Entity.setRenderType(_0x81e9x212.ent, NULL_RENDER)
			} catch (e) {};
			Entity.setCollisionSize(_0x81e9x212.ent, 0, _0x81e9x212.height);
			Entity.setNameTag(_0x81e9x212.ent, _0x81e9x212.text + "")
		})
	};
	this.setText = function(_0x81e9x2b3) {
		this.text = _0x81e9x2b3;
		Entity.setNameTag(this.ent, this.text + "")
	}
}

function CreateTextAnimation(_0x81e9x26, _0x81e9x27, _0x81e9x28, _0x81e9x1de) {
	var _0x81e9x212 = new TextAnimation();
	_0x81e9x212.setText(_0x81e9x1de);
	_0x81e9x212.setPos(_0x81e9x26, _0x81e9x27, _0x81e9x28);
	addEntityForUpdate(_0x81e9x212, -1);
	_0x81e9x212.recreate();
	return _0x81e9x212
}
var Compressor_recipes = ValidateIDData({
	item_raw_carbon: item_carbonium_plate,
	item_composite_ingot: item_composite_plate,
	block_liquid_constone: item_compressed_constone,
	item_coal_chunk: 264,
	item_coal_ball: item_coal_ball_compressed
});
var ElectricFurnace_recipes = [
	[14, 266, 1],
	[15, 265, 1],
	[item_dust_iron, 265, 1],
	[item_dust_gold, 266, 1],
	[17, 263, 1],
	[319, 320, 1],
	[363, 364, 1],
	[365, 366, 1],
	[392, 393, 1],
	[87, 405, 1],
	[4, 1, 1],
	[item_latex, item_rubber, 1],
	[12, 20, 1],
	[item_dust_copper, item_copper_ingot, 1],
	[item_dust_tin, item_tin_ingot, 1],
	[block_copper_ore, item_copper_ingot, 1],
	[block_tin_ore, item_tin_ingot, 1],
	[265, item_steel_ingot, 1],
	[349, 350, 1],
	[337, 336, 1],
	[460, 463, 1],
	[item_bronze_dust, item_bronze_ingot, 1],
	[item_iridium_chunk, item_iridium, 1]
];
var Macerator_recipes = [
	[14, item_dust_gold, 2],
	[15, item_dust_iron, 2],
	[265, item_dust_iron, 1],
	[266, item_dust_gold, 1],
	[block_copper_ore, item_dust_copper, 2],
	[block_tin_ore, item_dust_tin, 2],
	[item_copper_ingot, item_dust_copper, 1],
	[item_tin_ingot, item_dust_tin, 1],
	[item_steel_ingot, item_dust_iron, 1],
	[263, item_coal_dust, 1],
	[4, 12, 1],
	[13, 318, 1],
	[173, item_coal_dust, 9]
];

function MachineAssembler() {
	this.parent = MachineBase;
	this.parent();
	this.id = block_assembler;
	this.getContainerId = function() {
		return 10
	};
	this.allRecipes = [];
	this.getMachineName = function() {
		return "assembler"
	};
	this.getInfo = function(_0x81e9x15a) {
		var _0x81e9x379 = this.allRecipes[_0x81e9x15a.recID];
		if (!_0x81e9x379) {
			return "no recipe"
		};
		return "recipe: " + this.getItemName(_0x81e9x379.res.id, _0x81e9x379.res.data)
	};
	this.getHelpGuideLink = function(_0x81e9x2bc) {
		return {
			chapter: "assembler"
		}
	};
	this.updateMachine = function(_0x81e9x15a) {
		if (!_0x81e9x15a.recID) {
			_0x81e9x15a.recID = -1
		};
		if (_0x81e9x15a.currentAnimation) {
			this.animateItem(_0x81e9x15a, _0x81e9x15a.currentAnimation, 3);
			if (_0x81e9x15a.currLiquid) {
				this.animateLiquid(_0x81e9x15a, _0x81e9x15a.currLiquid)
			}
		};
		var _0x81e9x2b3 = getTime();
		if (_0x81e9x2b3 % 8 == 0) {
			this.setIcons(_0x81e9x15a)
		};
		if (_0x81e9x2b3 % 30 != 0) {
			return
		};
		_0x81e9x2b3 /= 30;
		this.doCraft(_0x81e9x15a)
	};
	this.setIcons = function(_0x81e9x15a) {
		var _0x81e9x379 = this.allRecipes[_0x81e9x15a.recID];
		var _0x81e9x194 = this.getContainer(_0x81e9x15a);
		for (var i = 9; i < 19; i++) {
			_0x81e9x194.setSlot(i, 0, 0, 0);
			_0x81e9x194.getSlot(i).noDrop = true
		};
		if (!_0x81e9x379) {
			return
		};
		for (var i in _0x81e9x379.ing) {
			var _0x81e9x10 = _0x81e9x379.ing[i][0];
			var _0x81e9x16 = _0x81e9x379.ing[i][1];
			_0x81e9x194.setSlot(9 + parseInt(i), _0x81e9x10, 1, _0x81e9x16)
		};
		_0x81e9x194.setSlot(18, _0x81e9x379.res.id, _0x81e9x379.res.count, _0x81e9x379.res.data);
		var _0x81e9x17 = this.getItemName(_0x81e9x379.res.id, _0x81e9x379.res.data);
		if (_0x81e9x17) {
			_0x81e9x17 += " x" + _0x81e9x379.res.count
		} else {
			_0x81e9x17 = "no recipe"
		};
		_0x81e9x194.setGuiText(0x00, _0x81e9x17, android.graphics.Color.BLACK)
	};
	this.itemClick = function(_0x81e9x15a, _0x81e9x10, _0x81e9x16, _0x81e9x191) {
		preventDefault();
		if (!_0x81e9x15a.isChanging) {
			return
		};
		_0x81e9x15a.isChanging = false;
		for (var i in this.allRecipes) {
			var _0x81e9x159 = this.allRecipes[i];
			if (_0x81e9x159.res.id == _0x81e9x10 && (_0x81e9x159.res.data == _0x81e9x16 || !_0x81e9x159.res.data)) {
				_0x81e9x15a.recID = i;
				clientMessage("changed recipe to " + ChatColor.RED + Item.getName(_0x81e9x159.res.id, _0x81e9x159.res.data, true).split(".")[1]);
				this.animateItem(_0x81e9x15a, _0x81e9x159.part, 100);
				return
			}
		};
		clientMessage("no such recipe")
	};
	this.save = function(_0x81e9x17, _0x81e9x15a) {
		DataSaver.Save(_0x81e9x17 + "recID", _0x81e9x15a.recID)
	};
	this.read = function(_0x81e9x17, _0x81e9x15a) {
		_0x81e9x15a.recID = DataSaver.ReadNumber(_0x81e9x17 + "recID")
	};
	this.addRecipe = function(_0x81e9x439, _0x81e9x43a, _0x81e9x43b, _0x81e9x15f, _0x81e9x43c, _0x81e9x17, _0x81e9x41f) {
		var _0x81e9x43d = {
			"res": {
				"id": _0x81e9x439,
				"count": _0x81e9x43a,
				"data": _0x81e9x43b
			},
			"liquid": _0x81e9x43c || 0,
			"ing": _0x81e9x15f,
			"name": _0x81e9x17,
			"part": _0x81e9x41f
		};
		this.allRecipes.push(_0x81e9x43d)
	};
	this.animateItem = function(_0x81e9x15a, _0x81e9x43e, _0x81e9x259) {
		for (var i = 0; i < _0x81e9x259; i++) {
			var _0x81e9x1b3 = _0x81e9x15a.x + Math.random();
			var _0x81e9x1b4 = _0x81e9x15a.y + Math.random();
			var _0x81e9x1b5 = _0x81e9x15a.z + Math.random();
			var _0x81e9x2b3 = _0x81e9x43e[parseInt(_0x81e9x43e.length * Math.random())];
			_0x81e9x1b3 = Math.floor(_0x81e9x1b3 + 0.5);
			_0x81e9x1b5 = Math.floor(_0x81e9x1b5 + 0.5)
		}
	};
	this.animateLiquid = function(_0x81e9x15a, _0x81e9x1a7) {
		for (var _0x81e9x43f = 0; _0x81e9x43f < 2; _0x81e9x43f++) {
			var _0x81e9x1c7 = _0x81e9x1a7;
			var _0x81e9x2b3 = 9;
			var _0x81e9x41e = -1;
			if (!_0x81e9x1c7) {
				return
			};
			if (_0x81e9x1c7 == 1) {
				_0x81e9x1c7 = 42
			};
			if (_0x81e9x1c7 == 8) {
				_0x81e9x1c7 = 27
			};
			if (_0x81e9x1c7 == 10) {
				_0x81e9x1c7 = 19
			};
			if (_0x81e9x1c7 == 19) {
				_0x81e9x1c7 = 1;
				_0x81e9x2b3 = ParticleType.flame;
				_0x81e9x41e = -0.03
			};
			var _0x81e9x1b3 = Math.random();
			var _0x81e9x1b5 = Math.random();
			if (Math.random() < 0.5) {
				_0x81e9x1b3 = Math.floor(_0x81e9x1b3 + 0.5)
			} else {
				_0x81e9x1b5 = Math.floor(_0x81e9x1b5 + 0.5)
			};
			if (_0x81e9x1b3 == 0) {
				_0x81e9x1b3 = -0.05
			};
			if (_0x81e9x1b5 == 0) {
				_0x81e9x1b5 = -0.05
			};
			if (_0x81e9x1b3 == 1) {
				_0x81e9x1b3 = 1.05
			};
			if (_0x81e9x1b5 == 1) {
				_0x81e9x1b5 = 1.05
			};
			var _0x81e9x9 = Level.addParticle(_0x81e9x2b3, _0x81e9x15a.x + _0x81e9x1b3, Math.random() + _0x81e9x15a.y, _0x81e9x15a.z + _0x81e9x1b5, 0, _0x81e9x41e, 0, _0x81e9x1c7)
		}
	};
	this.getItemName = function(_0x81e9x10, _0x81e9x16) {
		if (_0x81e9x10 == 351 && _0x81e9x16 == 3) {
			return "cocoa beans"
		};
		var _0x81e9x162 = Item.getName(_0x81e9x10, _0x81e9x16, true);
		var _0x81e9x17 = _0x81e9x162.split(".")[1];
		return _0x81e9x17
	};
	this.getLiquidName = function(_0x81e9x10) {
		if (_0x81e9x10 == 0) {
			return ChatColor.WHITE + "none"
		};
		if (_0x81e9x10 == 1) {
			return ChatColor.WHITE + "milk"
		};
		if (_0x81e9x10 == 8) {
			return ChatColor.BLUE + "water"
		};
		if (_0x81e9x10 == 10) {
			return ChatColor.RED + "lava"
		};
		return ChatColor.YELLOW + "unknown"
	};
	this.getIngInfo = function(_0x81e9x440) {
		var _0x81e9x441 = [];
		for (var i in _0x81e9x440) {
			var _0x81e9x17 = this.getItemName(_0x81e9x440[i][0], _0x81e9x440[i][1]);
			if (!_0x81e9x441[_0x81e9x17]) {
				_0x81e9x441[_0x81e9x17] = 0
			};
			_0x81e9x441[_0x81e9x17]++
		};
		var _0x81e9x162 = "";
		for (var _0x81e9x17 in _0x81e9x441) {
			_0x81e9x162 += _0x81e9x17 + ChatColor.YELLOW + " x" + _0x81e9x441[_0x81e9x17] + "\n"
		};
		return _0x81e9x162
	};
	this.wrenchClick = function(_0x81e9x15a) {
		var _0x81e9x379 = this.allRecipes[_0x81e9x15a.recID];
		var _0x81e9x442;
		_0x81e9x15a.isChanging = true;
		if (!_0x81e9x379) {
			_0x81e9x442 = "no recipe"
		} else {
			_0x81e9x442 = "\nrecipe: " + ChatColor.RED + this.getItemName(_0x81e9x379.res.id, _0x81e9x379.res.data)
		};
		clientMessage(_0x81e9x442);
		clientMessage("Tap with item to change recipe")
	};
	this.doCraft = function(_0x81e9x15a) {
		var _0x81e9x379 = this.allRecipes[_0x81e9x15a.recID];
		if (!_0x81e9x379) {
			return [0, 0, 0]
		};
		var _0x81e9x51 = [];
		var _0x81e9x194 = this.getContainer(_0x81e9x15a);
		var _0x81e9x275 = "";
		for (var i = 0; i < 9; i++) {
			var _0x81e9x10 = _0x81e9x194.getSlot(i).id;
			var _0x81e9x13 = _0x81e9x194.getSlot(i).count;
			var _0x81e9x16 = _0x81e9x194.getSlot(i).data;
			if (_0x81e9x10 == 0) {
				continue
			};
			if (!_0x81e9x51[_0x81e9x10 + ":" + _0x81e9x16]) {
				_0x81e9x51[_0x81e9x10 + ":" + _0x81e9x16] = 0
			};
			if (!_0x81e9x51[_0x81e9x10 + ":-1"]) {
				_0x81e9x51[_0x81e9x10 + ":-1"] = 0
			};
			_0x81e9x51[_0x81e9x10 + ":" + _0x81e9x16] += _0x81e9x13;
			_0x81e9x51[_0x81e9x10 + ":-1"] += _0x81e9x13
		};
		var _0x81e9x443 = [];
		for (var i in _0x81e9x379.ing) {
			var _0x81e9x10 = _0x81e9x379.ing[i][0];
			var _0x81e9x16 = _0x81e9x379.ing[i][1];
			if (_0x81e9x10 == 0) {
				continue
			};
			if (!_0x81e9x443[_0x81e9x10 + ":" + _0x81e9x16]) {
				_0x81e9x443[_0x81e9x10 + ":" + _0x81e9x16] = 0
			};
			_0x81e9x443[_0x81e9x10 + ":" + _0x81e9x16]++
		};
		var _0x81e9x444 = true;
		for (var _0x81e9x163 in _0x81e9x443) {
			if (_0x81e9x443[_0x81e9x163] > _0x81e9x51[_0x81e9x163] || !_0x81e9x51[_0x81e9x163]) {
				_0x81e9x444 = false
			}
		};
		if (!_0x81e9x444) {
			return [0, 0, 0]
		};
		if (this.hasPlaceFor(_0x81e9x15a, _0x81e9x379.res.id, _0x81e9x379.res.count, _0x81e9x379.res.data)) {
			this.putToInv(_0x81e9x15a, _0x81e9x379.res.id, _0x81e9x379.res.count, _0x81e9x379.res.data);
			for (var _0x81e9x163 in _0x81e9x443) {
				var _0x81e9x10 = parseInt(_0x81e9x163.split(":")[0]);
				var _0x81e9x13 = _0x81e9x443[_0x81e9x163];
				var _0x81e9x16 = parseInt(_0x81e9x163.split(":")[1]);
				this.getFromInv(_0x81e9x15a, _0x81e9x10, _0x81e9x13, _0x81e9x16)
			}
		}
	};
	this.getFromInv = function(_0x81e9x15a, _0x81e9x10, _0x81e9x13, _0x81e9x16) {
		var _0x81e9x194 = this.getContainer(_0x81e9x15a);
		for (var i = 0; i < 9; i++) {
			if (_0x81e9x13 <= 0) {
				break
			};
			var _0x81e9x347 = _0x81e9x194.getSlot(i);
			if (_0x81e9x347.id == _0x81e9x10 && (_0x81e9x347.data == _0x81e9x16 || _0x81e9x16 == -1)) {
				var _0x81e9x445 = _0x81e9x347.count;
				_0x81e9x347.count = Math.max(0, _0x81e9x347.count - _0x81e9x13);
				_0x81e9x13 -= _0x81e9x445 - _0x81e9x347.count;
				if (_0x81e9x347.count == 0) {
					_0x81e9x347.id = 0
				}
			}
		}
	};
	this.putToInv = function(_0x81e9x15a, _0x81e9x10, _0x81e9x13, _0x81e9x16) {
		var _0x81e9x194 = this.getContainer(_0x81e9x15a);
		for (var i = 0; i < 9; i++) {
			if (_0x81e9x13 <= 0) {
				break
			};
			var _0x81e9x347 = _0x81e9x194.getSlot(i);
			if ((_0x81e9x347.id == _0x81e9x10 && _0x81e9x347.data == _0x81e9x16) || _0x81e9x347.id == 0) {
				var _0x81e9x445 = _0x81e9x347.count;
				_0x81e9x347.count = Math.min(64, _0x81e9x347.count + _0x81e9x13);
				_0x81e9x13 -= _0x81e9x347.count - _0x81e9x445;
				_0x81e9x347.id = _0x81e9x10
			}
		}
	};
	this.hasPlaceFor = function(_0x81e9x15a, _0x81e9x10, _0x81e9x13, _0x81e9x16) {
		var _0x81e9x194 = this.getContainer(_0x81e9x15a);
		for (var i = 0; i < 9; i++) {
			if (_0x81e9x13 <= 0) {
				break
			};
			var _0x81e9x347 = _0x81e9x194.getSlot(i);
			if ((_0x81e9x347.id == _0x81e9x10 && _0x81e9x347.data == _0x81e9x16) || _0x81e9x347.id == 0) {
				_0x81e9x13 -= 64 - _0x81e9x347.count
			}
		};
		return _0x81e9x13 <= 0
	};
	for (var _0x81e9x163 in AutoCraftRecipeList) {
		var _0x81e9x10 = parseInt(_0x81e9x163.split(":")[0]);
		var _0x81e9x13 = parseInt(_0x81e9x163.split(":")[1]);
		var _0x81e9x16 = parseInt(_0x81e9x163.split(":")[2]);
		var _0x81e9x15f = [];
		for (var i = 0; i < 9; i++) {
			_0x81e9x15f.push([AutoCraftRecipeList[_0x81e9x163][i * 2], AutoCraftRecipeList[_0x81e9x163][i * 2 + 1]])
		};
		this.addRecipe(_0x81e9x10, _0x81e9x13, _0x81e9x16, _0x81e9x15f, 0, 0, 0)
	}
}

function MachineAutoMilker() {
	this.parent = MachineBase;
	this.parent();
	this.id = block_auto_milker;
	this.updateMachine = function(_0x81e9x15a) {
		if (!_0x81e9x15a.cooldown) {
			_0x81e9x15a.cooldown = 0
		};
		if (_0x81e9x15a.cooldown > 0) {
			_0x81e9x15a.cooldown--
		};
		if (getTime() % 20 == 0) {
			var _0x81e9x447 = this.tryGetMilk(_0x81e9x15a.x + 0.5, _0x81e9x15a.y + 0.5, _0x81e9x15a.z + 0.5);
			if (_0x81e9x447 && _0x81e9x15a.cooldown < 1) {
				var _0x81e9x10 = getTile(_0x81e9x15a.x, _0x81e9x15a.y + 1, _0x81e9x15a.z);
				if (_0x81e9x10 != block_barrel) {
					return
				};
				var _0x81e9x216 = getMachine(_0x81e9x15a.x, _0x81e9x15a.y + 1, _0x81e9x15a.z);
				if (!_0x81e9x216) {
					return
				};
				if (barrel_addBucket(_0x81e9x216, LIQUID_MILK)) {
					_0x81e9x15a.cooldown = block_recycler
				}
			}
		}
	};
	this.getMachineName = function() {
		return "auto-milker"
	};
	this.tryGetMilk = function(_0x81e9x26, _0x81e9x27, _0x81e9x28) {
		var _0x81e9x448 = eh_getRandomByType(11);
		if (!_0x81e9x448) {
			return false
		};
		var _0x81e9x39a = Entity.getX(_0x81e9x448);
		var _0x81e9x449 = Entity.getY(_0x81e9x448);
		var _0x81e9x39b = Entity.getZ(_0x81e9x448);
		var _0x81e9x15b = Math.sqrt((_0x81e9x39a - _0x81e9x26) * (_0x81e9x39a - _0x81e9x26) + (_0x81e9x449 - _0x81e9x27) * (_0x81e9x449 - _0x81e9x27) + (_0x81e9x39b - _0x81e9x28) * (_0x81e9x39b - _0x81e9x28));
		if (_0x81e9x15b < 3) {
			return true
		}
	}
}

function MachineMobFeeder() {
	this.parent = MachineBase;
	this.parent();
	this.id = block_auto_feeder;
	this.updateMachine = function(_0x81e9x15a) {
		if (Math.random() > 0.29) {
			return
		};
		if (!_0x81e9x15a.entityCache) {
			_0x81e9x15a.entityCache = []
		};
		if (_0x81e9x15a.cooldown) {
			_0x81e9x15a.cooldown--
		};
		var _0x81e9x1bd = getTime();
		var _0x81e9x44b = _0x81e9x1bd % 4 + 10;
		if (_0x81e9x1bd % 12 < 4) {
			if (!_0x81e9x15a.entityCache[_0x81e9x44b]) {
				_0x81e9x15a.entityCache[_0x81e9x44b] = []
			};
			var _0x81e9x174 = eh_getRandomByType(_0x81e9x44b);
			var _0x81e9x44c = this.isInRange(_0x81e9x15a.x, _0x81e9x15a.y, _0x81e9x15a.z, _0x81e9x174);
			var _0x81e9x44d = _0x81e9x44c;
			for (var i in _0x81e9x15a.entityCache[_0x81e9x44b]) {
				var _0x81e9x44e = _0x81e9x15a.entityCache[_0x81e9x44b][i];
				if (_0x81e9x44e == _0x81e9x174) {
					if (!_0x81e9x44c) {
						_0x81e9x15a.entityCache[_0x81e9x44b].splice(i, 1);
						break
					} else {
						_0x81e9x44d = false
					}
				}
			};
			if (_0x81e9x44d) {
				_0x81e9x15a.entityCache[_0x81e9x44b].push(_0x81e9x174)
			}
		} else {
			if (_0x81e9x1bd % 12 < 8 && !_0x81e9x15a.cooldown) {
				_0x81e9x44b = parseInt(10 + Math.random() * 4);
				if (!_0x81e9x15a.entityCache[_0x81e9x44b] || _0x81e9x15a.entityCache[_0x81e9x44b].length < 2) {
					return
				};
				var _0x81e9x1cd = getChest(_0x81e9x15a.x, _0x81e9x15a.y + 1, _0x81e9x15a.z);
				if (!_0x81e9x1cd.exist) {
					return
				};
				var _0x81e9x44f = this.getFeedItemForType(_0x81e9x44b);
				var _0x81e9x164 = _0x81e9x1cd.getItem(_0x81e9x44f, 2, 0);
				if (_0x81e9x164.count == 2) {
					_0x81e9x164.count = 0;
					this.mateMobs(_0x81e9x15a.entityCache[_0x81e9x44b][1], _0x81e9x15a.entityCache[_0x81e9x44b][0]);
					_0x81e9x15a.cooldown = 1200
				};
				_0x81e9x1cd.addItem(_0x81e9x164.id, _0x81e9x164.count, _0x81e9x164.data)
			}
		}
	};
	this.getFeedItemForType = function(_0x81e9x2b3) {
		return 296
	};
	this.isInRange = function(_0x81e9x26, _0x81e9x27, _0x81e9x28, _0x81e9x174) {
		var _0x81e9x39a = Entity.getX(_0x81e9x174);
		var _0x81e9x449 = Entity.getY(_0x81e9x174);
		var _0x81e9x39b = Entity.getZ(_0x81e9x174);
		var _0x81e9x15b = Math.sqrt((_0x81e9x39a - _0x81e9x26) * (_0x81e9x39a - _0x81e9x26) + (_0x81e9x449 - _0x81e9x27) * (_0x81e9x449 - _0x81e9x27) + (_0x81e9x39b - _0x81e9x28) * (_0x81e9x39b - _0x81e9x28));
		return _0x81e9x15b < 2.5
	};
	this.mateMobs = function(_0x81e9x450, _0x81e9x451) {
		var _0x81e9x452 = Entity.getX(_0x81e9x450);
		var _0x81e9x453 = Entity.getY(_0x81e9x450);
		var _0x81e9x454 = Entity.getZ(_0x81e9x450);
		var _0x81e9x455 = Entity.getX(_0x81e9x451);
		var _0x81e9x456 = Entity.getY(_0x81e9x451);
		var _0x81e9x457 = Entity.getZ(_0x81e9x451);
		var _0x81e9x458 = (_0x81e9x452 + _0x81e9x455) / 2;
		var _0x81e9x459 = (_0x81e9x453 + _0x81e9x456) / 2;
		var _0x81e9x45a = (_0x81e9x454 + _0x81e9x457) / 2;
		Level.spawnMob(_0x81e9x458, _0x81e9x459, _0x81e9x45a, Entity.getEntityTypeId(_0x81e9x450));
		animateCoords(14, _0x81e9x452, _0x81e9x453, _0x81e9x454);
		animateCoords(14, _0x81e9x455, _0x81e9x456, _0x81e9x457)
	};
	this.wrenchClick = function(_0x81e9x15a) {
		clientMessage(this.getInfo(_0x81e9x15a))
	};
	this.getMachineName = function() {
		return "mob feeder"
	};
	this.getInfo = function(_0x81e9x15a) {
		if (!_0x81e9x15a.cooldown) {
			var _0x81e9x45b = 0
		} else {
			var _0x81e9x45b = parseInt(_0x81e9x15a.cooldown / 20)
		};
		return "next feed in " + _0x81e9x45b + "s"
	};
	this.save = function(_0x81e9x17, _0x81e9x15a) {
		DataSaver.Save(_0x81e9x17 + "feedcd", _0x81e9x15a.cooldown)
	};
	this.read = function(_0x81e9x17, _0x81e9x15a) {
		_0x81e9x15a.cooldown = DataSaver.ReadNumber(_0x81e9x17 + "feedcd")
	}
}
var LIQUID_NONE = 0;
var LIQUID_WATER = 8;
var LIQUID_LAVA = 10;
var LIQUID_MILK = 1;
var LIQUID_HONEY = 2;
var LIQUID_MEAD = 3;
var LiquidNameList = {
	0: "none",
	1: "milk",
	2: "honey",
	3: "mead",
	4: "oil",
	5: "fuel",
	6: "biomass",
	7: "matter",
	8: "water",
	10: "lava"
};

function GetLiquidName(_0x81e9x1a7) {
	if (_0x81e9x1a7 < 20) {
		return LiquidNameList[_0x81e9x1a7]
	};
	if (_0x81e9x1a7 >= 20) {
		var _0x81e9x16 = FactAPI.getCustomLiquidData(_0x81e9x1a7);
		if (_0x81e9x16) {
			return _0x81e9x16.name
		} else {
			return "unknown"
		}
	};
	return "unknown (std)"
}

function MachineBarrel() {
	this.parent = MachineBase;
	this.parent();
	this.id = block_barrel;
	this.brewingRecipes = {
		2: {
			res: 3,
			time: 1000
		}
	};
	this.getMachineName = function() {
		return "barrel"
	};
	this.getContainerId = function() {
		return 8
	};
	this.getHelpGuideLink = function(_0x81e9x2bc) {
		return {
			chapter: "storing liquids",
			page: 1
		}
	};
	this.getLiquidName = GetLiquidName;
	this.canDeactivate = function() {
		return false
	};
	this.getInfo = function(_0x81e9x15a) {
		if (!_0x81e9x15a.liquid) {
			return "empty"
		};
		return _0x81e9x15a.volume + "/" + _0x81e9x15a.maxVolume + " buckets of " + this.getLiquidName(_0x81e9x15a.liquid)
	};
	this.updateBrewing = function(_0x81e9x15a) {
		if (!_0x81e9x15a.brewing) {
			_0x81e9x15a.brewing = 0
		};
		var _0x81e9x465 = this.brewingRecipes[_0x81e9x15a.liquid];
		if (!_0x81e9x465) {
			_0x81e9x15a.brewing = 0;
			return
		};
		if (Math.random() < 0.8) {
			_0x81e9x15a.brewing++
		};
		if (_0x81e9x15a.brewing > _0x81e9x465.time) {
			_0x81e9x15a.liquid = _0x81e9x465.res;
			_0x81e9x15a.brewing = 0
		}
	};
	this.getLiquidSkin = function(_0x81e9x1a7) {
		if (_0x81e9x1a7 < 20) {
			return "mob/liquid/liqtex_" + _0x81e9x1a7 + ".png"
		} else {
			var _0x81e9x16 = FactAPI.getCustomLiquidData(_0x81e9x1a7);
			if (_0x81e9x16) {
				return _0x81e9x16.skin
			}
		}
	};
	this.updateMachine = function(_0x81e9x15a) {
		_0x81e9x15a.maxVolume = 16;
		if (!_0x81e9x15a.liquid || _0x81e9x15a.liquid < 0) {
			_0x81e9x15a.liquid = LIQUID_NONE;
			_0x81e9x15a.volume = 0
		};
		if (!_0x81e9x15a.volume || _0x81e9x15a.volume < 0) {
			_0x81e9x15a.volume = 0;
			_0x81e9x15a.liquid = LIQUID_NONE
		};
		if (!_0x81e9x15a.srcBarrel) {
			_0x81e9x15a.srcBarrel = _0x81e9x15a;
			_0x81e9x15a.maxVolume = 16
		};
		var _0x81e9x466 = this.getLiquidSkin(_0x81e9x15a.liquid);
		RunOnMainThread(function() {
			if (config_barrel_liquid_animation && allowBarrelAnimationOnHost && _0x81e9x15a.liquid > 0) {
				if (!_0x81e9x15a.anim) {
					_0x81e9x15a.anim = CreateAnimation(_0x81e9x15a.x + 0.5, _0x81e9x15a.y, _0x81e9x15a.z + 0.5)
				};
				try {
					_0x81e9x15a.anim.setRender(barrelRenders[parseInt(_0x81e9x15a.volume + 0.95)].renderType)
				} catch (e) {};
				_0x81e9x15a.anim.setSkin(_0x81e9x466)
			} else {
				if (_0x81e9x15a.anim) {
					_0x81e9x15a.anim.destroy();
					_0x81e9x15a.anim = null
				}
			}
		});
		this.getContainer(_0x81e9x15a).setLiquidBar(_0x81e9x15a.volume / 16, _0x81e9x15a.liquid);
		if (getTime() % 20 == 0) {
			this.updateBrewing(_0x81e9x15a)
		};
		if (getTime() % 6 == 0 && _0x81e9x15a.volume <= 15) {
			var _0x81e9x5b = this.getContainer(_0x81e9x15a).getSlot(0);
			var _0x81e9x467 = this.getContainer(_0x81e9x15a).getSlot(1);
			var _0x81e9x204 = GetLiquidByItem(_0x81e9x5b.id, _0x81e9x5b.data);
			if (_0x81e9x204 && (_0x81e9x15a.liquid == 0 || _0x81e9x15a.liquid == _0x81e9x204)) {
				var _0x81e9x201 = GetEmptyItemByFull(_0x81e9x5b.id, _0x81e9x5b.data);
				if ((_0x81e9x467.id == 0 || _0x81e9x467.id == _0x81e9x201) && _0x81e9x467.data == 0 && _0x81e9x467.count < 16) {
					_0x81e9x15a.volume++;
					_0x81e9x15a.liquid = _0x81e9x204;
					_0x81e9x5b.count--;
					_0x81e9x467.count++;
					_0x81e9x467.id = GetEmptyItemByFull(_0x81e9x5b.id, _0x81e9x5b.data);
					if (_0x81e9x5b.count < 1) {
						_0x81e9x5b.id = 0;
						_0x81e9x5b.data = 0
					}
				}
			}
		};
		if (getTime() % 10 == 0) {
			var _0x81e9x468 = getTile(_0x81e9x15a.x, _0x81e9x15a.y - 1, _0x81e9x15a.z);
			if (_0x81e9x468 == block_barrel) {
				var _0x81e9x469 = getMachine(_0x81e9x15a.x, _0x81e9x15a.y - 1, _0x81e9x15a.z);
				if (_0x81e9x469 && _0x81e9x469.volume < 16 && (_0x81e9x469.liquid == _0x81e9x15a.liquid || _0x81e9x469.liquid == 0)) {
					var _0x81e9x1ba = 1;
					_0x81e9x1ba = Math.min(_0x81e9x1ba, 16 - _0x81e9x469.volume);
					_0x81e9x1ba = Math.min(_0x81e9x1ba, _0x81e9x15a.volume);
					_0x81e9x469.volume += _0x81e9x1ba;
					_0x81e9x15a.volume -= _0x81e9x1ba;
					_0x81e9x469.liquid = _0x81e9x15a.liquid
				}
			}
		}
	};
	this.initSrcBarrel_ = function(_0x81e9x15a) {
		_0x81e9x15a.maxVolume = 8;
		var _0x81e9x173 = getMachine(_0x81e9x15a.x, _0x81e9x15a.y - 1, _0x81e9x15a.z);
		if (!_0x81e9x173) {
			_0x81e9x15a.srcBarrel = _0x81e9x15a;
			return
		};
		var _0x81e9x46a = getMachineType(_0x81e9x173);
		if (!_0x81e9x46a || _0x81e9x46a.id != this.id) {
			_0x81e9x15a.srcBarrel = _0x81e9x15a;
			return
		};
		if (_0x81e9x173.liquid != _0x81e9x15a.liquid && _0x81e9x173.liquid) {
			_0x81e9x15a.srcBarrel = _0x81e9x15a;
			return
		};
		if (!_0x81e9x173.srcBarrel) {
			this.initSrcBarrel(_0x81e9x173)
		};
		_0x81e9x15a.srcBarrel = _0x81e9x173.srcBarrel
	};
	this.initSrcBarrel = function(_0x81e9x15a) {
		this.initSrcBarrel_(_0x81e9x15a);
		this.checkMaxVolume(_0x81e9x15a)
	};
	this.checkMaxVolume = function(_0x81e9x15a) {
		var _0x81e9x46b = getMachine(_0x81e9x15a.x, _0x81e9x15a.y + 1, _0x81e9x15a.z);
		if (!_0x81e9x46b) {
			var _0x81e9x158 = null
		} else {
			var _0x81e9x158 = getMachineType(_0x81e9x46b)
		};
		if (_0x81e9x46b && _0x81e9x158 && _0x81e9x158.id == this.id) {
			_0x81e9x15a.srcBarrel.maxVolume = Math.max(_0x81e9x15a.srcBarrel.maxVolume, (_0x81e9x15a.y - _0x81e9x15a.srcBarrel.y + 1) * 8)
		} else {
			_0x81e9x15a.srcBarrel.maxVolume = (_0x81e9x15a.y - _0x81e9x15a.srcBarrel.y + 1) * 8
		}
	};
	this.animateLiquid = function(_0x81e9x15a) {
		var _0x81e9x1c7 = _0x81e9x15a.liquid;
		var _0x81e9x2b3 = 9;
		var _0x81e9x41e = -1;
		if (!_0x81e9x1c7) {
			return
		};
		if (_0x81e9x1c7 == 1) {
			_0x81e9x1c7 = 42
		};
		if (_0x81e9x1c7 == 8) {
			_0x81e9x1c7 = 27
		};
		if (_0x81e9x1c7 == 10) {
			_0x81e9x1c7 = 19
		};
		if (_0x81e9x1c7 == 2 || _0x81e9x1c7 == 3) {
			_0x81e9x1c7 = 2
		};
		if (_0x81e9x1c7 == 19) {
			_0x81e9x1c7 = 1;
			_0x81e9x2b3 = ParticleType.flame;
			_0x81e9x41e = -0.03
		};
		var _0x81e9x1b3 = Math.random();
		var _0x81e9x1b5 = Math.random();
		if (Math.random() < 0.5) {
			_0x81e9x1b3 = Math.floor(_0x81e9x1b3 + 0.5)
		} else {
			_0x81e9x1b5 = Math.floor(_0x81e9x1b5 + 0.5)
		};
		if (_0x81e9x1b3 == 0) {
			_0x81e9x1b3 = -0.05
		};
		if (_0x81e9x1b5 == 0) {
			_0x81e9x1b5 = -0.05
		};
		if (_0x81e9x1b3 == 1) {
			_0x81e9x1b3 = 1.05
		};
		if (_0x81e9x1b5 == 1) {
			_0x81e9x1b5 = 1.05
		};
		var _0x81e9x9 = Level.addParticle(_0x81e9x2b3, _0x81e9x15a.x + _0x81e9x1b3, Math.random() + _0x81e9x15a.y, _0x81e9x15a.z + _0x81e9x1b5, 0, _0x81e9x41e, 0, _0x81e9x1c7)
	};
	this.wrenchClick = function(_0x81e9x15a) {
		clientMessage(this.getInfo(_0x81e9x15a));
		var _0x81e9x465 = this.brewingRecipes[_0x81e9x15a.liquid];
		if (_0x81e9x465) {
			ModPE.showTipMessage(ChatColor.YELLOW + "brewing " + this.getLiquidName(_0x81e9x465.res) + " " + parseInt(_0x81e9x15a.brewing / _0x81e9x465.time * 1000) / 10 + "%")
		}
	};
	this.save = function(_0x81e9x17, _0x81e9x15a) {
		DataSaver.Save(_0x81e9x17 + "liquid", _0x81e9x15a.liquid);
		DataSaver.Save(_0x81e9x17 + "vol", _0x81e9x15a.volume);
		DataSaver.Save(_0x81e9x17 + "brew", _0x81e9x15a.brewing)
	};
	this.read = function(_0x81e9x17, _0x81e9x15a) {
		_0x81e9x15a.liquid = DataSaver.ReadNumber(_0x81e9x17 + "liquid");
		_0x81e9x15a.volume = DataSaver.ReadFloat(_0x81e9x17 + "vol");
		_0x81e9x15a.brewing = DataSaver.ReadFloat(_0x81e9x17 + "brew")
	};
	this.onDestroy = function(_0x81e9x15a) {
		if (_0x81e9x15a.anim) {
			_0x81e9x15a.anim.destroy()
		}
	};
	this.isUsingLiquid = function() {
		return true
	};
	this.getMaxVolume = function() {
		return 16
	};
	this.getLiquidType = function(_0x81e9x2bc) {
		return _0x81e9x2bc.liquid
	}
}

function MachineBeacon() {
	this.parent = MachineBase;
	this.parent();
	this.id = block_beacon;
	this.particleTypes = [{
		"id": -1,
		"name": ChatColor.GREEN + "none"
	}, {
		"id": ParticleType.flame,
		"name": ChatColor.YELLOW + "flame"
	}, {
		"id": ParticleType.crit,
		"name": "crit"
	}, {
		"id": ParticleType.redstone,
		"name": ChatColor.DARK_RED + "redstone"
	}, {
		"id": ParticleType.heart,
		"name": ChatColor.RED + "hearts"
	}, {
		"id": ParticleType.lava,
		"name": ChatColor.GOLD + "lava fx"
	}];
	this.getInfo = function(_0x81e9x15a) {
		return "particles - " + this.particleTypes[_0x81e9x15a.parType].name
	};
	this.tickInMainThread = function() {
		return true
	};
	this.isUsingEnergy = function() {
		return true
	};
	this.getMachineName = function() {
		return "beacon"
	};
	this.getMaxEnergyStored = function() {
		return 10
	};
	this.isGenerator = function() {
		return true
	};
	this.updateMachine = function(_0x81e9x15a) {
		if (!_0x81e9x15a.parType) {
			_0x81e9x15a.parType = 0
		};
		var _0x81e9x9 = ((getTime() + Math.abs(_0x81e9x15a.x) * 5894 + Math.abs(_0x81e9x15a.z) * 428) % 60) / 59;
		var _0x81e9x15b = 30;
		var _0x81e9x347 = new Coords(_0x81e9x15a.x + Math.random() * 0.4 + 0.3, _0x81e9x15a.y + _0x81e9x9 * _0x81e9x15b, _0x81e9x15a.z + Math.random() * 0.4 + 0.2);
		var _0x81e9x2b3 = this.particleTypes[_0x81e9x15a.parType].id;
		if (_0x81e9x2b3 > 0) {
			this.makeSingler(_0x81e9x2b3, _0x81e9x347.x, _0x81e9x347.y, _0x81e9x347.z);
			if (_0x81e9x9 == 1) {
				this.explode(_0x81e9x2b3, _0x81e9x347.x, _0x81e9x347.y, _0x81e9x347.z)
			}
		};
		var _0x81e9x46d = Level.getLightningLevel() * Math.pow(_0x81e9x15a.y / 128, 1.8) * 0.0075;
		if (Math.random() < _0x81e9x46d) {
			_0x81e9x15a.lightning = 10
		};
		if (_0x81e9x15a.lightning > 0) {
			_0x81e9x15a.lightning--;
			this.lightningSrikeTick(_0x81e9x15a)
		};
		this.setParticleAnimation(_0x81e9x15a, _0x81e9x15a.lightning > 0 && Math.random() < 0.65);
		this.setTextAnimation(_0x81e9x15a, 0, 0, Math.sin(globalWorldTime * 0.1) * 0.3 + 0.5, 0, ChatColor.BOLD + this.particleTypes[_0x81e9x15a.parType].name)
	};
	this.lightningSrikeTick = function(_0x81e9x15a) {
		var _0x81e9x46e = (Math.random() * 4 + 2) * 2500;
		var _0x81e9x46f = 512;
		var _0x81e9x303 = _0x81e9x15a.webObj;
		if (!_0x81e9x303) {
			return
		};
		while (_0x81e9x46e > 0) {
			var _0x81e9x1ba = Math.min(_0x81e9x46f, _0x81e9x46e);
			_0x81e9x46e -= _0x81e9x1ba;
			_0x81e9x303.addEnergy(_0x81e9x1ba, _0x81e9x15a)
		}
	};
	this.makeSingler = function(_0x81e9x2b3, _0x81e9x26, _0x81e9x27, _0x81e9x28) {
		for (var i = 0; i < 5; i++) {
			Level.addParticle(_0x81e9x2b3, _0x81e9x26 - 0.2 + Math.random() * 0.4, _0x81e9x27 - 0.2 + Math.random() * 0.4, _0x81e9x28 - 0.2 + Math.random() * 0.4, 0, 0, 0, 1)
		};
		this.explode = function(_0x81e9x2b3, _0x81e9x26, _0x81e9x27, _0x81e9x28) {
			for (var i = 0; i < 250; i++) {
				var _0x81e9x15b = Math.random() * 7.5;
				var _0x81e9x2ee = Math.random() * 6.3;
				var _0x81e9x2ef = Math.random() * 3.2 - 1.6;
				var _0x81e9x1b3 = _0x81e9x26 + Math.sin(_0x81e9x2ee) * Math.cos(_0x81e9x2ef) * _0x81e9x15b;
				var _0x81e9x1b5 = _0x81e9x28 + Math.cos(_0x81e9x2ee) * Math.cos(_0x81e9x2ef) * _0x81e9x15b;
				var _0x81e9x1b4 = _0x81e9x27 + Math.sin(_0x81e9x2ef) * _0x81e9x15b;
				var _0x81e9x3d4 = (_0x81e9x1b3 - _0x81e9x26) / _0x81e9x15b / 2;
				var _0x81e9x3d5 = (_0x81e9x1b4 - _0x81e9x27) / _0x81e9x15b / 2;
				var _0x81e9x3d6 = (_0x81e9x1b5 - _0x81e9x28) / _0x81e9x15b / 2;
				Level.addParticle(_0x81e9x2b3, _0x81e9x1b3, _0x81e9x1b4, _0x81e9x1b5, _0x81e9x3d4, _0x81e9x3d5, _0x81e9x3d6, 1)
			}
		}
	};
	this.wrenchClick = function(_0x81e9x15a) {
		if (!_0x81e9x15a.parType) {
			_0x81e9x15a.parType = 0
		};
		_0x81e9x15a.parType++;
		_0x81e9x15a.parType %= this.particleTypes.length;
		clientMessage("switched beacon to " + this.particleTypes[_0x81e9x15a.parType].name + " mode")
	};
	this.save = function(_0x81e9x17, _0x81e9x15a) {
		DataSaver.Save(_0x81e9x17 + "#fx", _0x81e9x15a.parType)
	};
	this.read = function(_0x81e9x17, _0x81e9x15a) {
		_0x81e9x15a.parType = DataSaver.ReadNumber(_0x81e9x17 + "#fx")
	};
	this.setupAnimationEntity = function(_0x81e9x15a) {
		Entity.remove(_0x81e9x15a.ent);
		_0x81e9x15a.ent = Level.spawnMob(_0x81e9x15a.x, _0x81e9x15a.y, _0x81e9x15a.z, 11);
		Entity.setHealth(_0x81e9x15a.ent, 2000);
		Entity.setRenderType(_0x81e9x15a.ent, EntityRenderType.lightningBolt)
	};
	this.updateAnimationEntity = function(_0x81e9x15a) {
		Entity.setRenderType(_0x81e9x15a.ent, EntityRenderType.lightningBolt);
		BindEntityToPosition(_0x81e9x15a.ent, _0x81e9x15a.x, _0x81e9x15a.y, _0x81e9x15a.z)
	};
	this.setParticleAnimation = function(_0x81e9x15a, _0x81e9x470) {
		if (!_0x81e9x15a.isAnimating != !_0x81e9x470) {
			_0x81e9x15a.isAnimating = _0x81e9x470;
			if (_0x81e9x470) {
				this.setupAnimationEntity(_0x81e9x15a)
			} else {
				this.removeAnimationEntity(_0x81e9x15a)
			}
		};
		if (_0x81e9x470) {
			this.updateAnimationEntity(_0x81e9x15a)
		}
	};
	this.removeAnimationEntity = function(_0x81e9x15a) {
		Entity.remove(_0x81e9x15a.ent)
	};
	this.onDestroy = function(_0x81e9x15a) {
		this.removeAnimationEntity(_0x81e9x15a)
	}
}

function MachineBiomassFact() {
	this.parent = MachineBase;
	this.parent();
	this.id = block_bioreactor;
	this.MaxEnergyInput = 32;
	this.recipes = {
		6: 1 / 24,
		18: 1 / 32,
		37: 1 / 16,
		38: 1 / 16,
		39: 1 / 16,
		40: 1 / 16,
		81: 1 / 12,
		86: 1 / 12,
		161: 1 / 32,
		170: 1 / 2.99,
		175: 1 / 16,
		295: 1 / 32,
		296: 1 / 12,
		319: 1 / 16,
		334: 1 / 12,
		338: 1 / 20,
		363: 1 / 16,
		365: 1 / 16,
		391: 1 / 24,
		392: 1 / 24,
		458: 1 / 12,
		459: 1 / 16
	};
	this.isUsingEnergy = function() {
		return true
	};
	this.getMaxEnergyStored = function() {
		return 120
	};
	this.getContainerId = function() {
		return 3
	};
	this.getHelpGuideLink = function(_0x81e9x2bc) {
		return {
			chapter: "liquid-working mech",
			page: 2
		}
	};
	this.updateMachine = function(_0x81e9x15a) {
		if (!_0x81e9x15a.prg) {
			_0x81e9x15a.prg = 0
		};
		if (!_0x81e9x15a.maxPrg) {
			_0x81e9x15a.maxPrg = 0
		};
		if (!_0x81e9x15a.volume) {
			_0x81e9x15a.volume = 0
		};
		var _0x81e9x194 = this.getContainer(_0x81e9x15a);
		_0x81e9x194.setLiquidBar(_0x81e9x15a.volume / 16, 6);
		if (_0x81e9x15a.maxPrg > 0 && (_0x81e9x15a.volume + _0x81e9x15a.maxPrg) <= 16) {
			if (this.getEnergyStored(_0x81e9x15a) < 5) {
				_0x81e9x15a.prg += 1 / 8192
			} else {
				_0x81e9x15a.prg += 1 / 1024;
				_0x81e9x15a.energyStored -= 5
			};
			_0x81e9x194.setFireBar(1 - _0x81e9x15a.prg / _0x81e9x15a.maxPrg)
		} else {
			_0x81e9x194.setFireBar(0)
		};
		if (_0x81e9x15a.maxPrg <= _0x81e9x15a.prg) {
			_0x81e9x15a.volume += _0x81e9x15a.maxPrg;
			_0x81e9x15a.prg = 0;
			_0x81e9x15a.maxPrg = 0
		};
		var _0x81e9x5b = _0x81e9x194.getSlot(0);
		if (_0x81e9x15a.maxPrg == 0 && (getTime() % 40 == 0 || !_0x81e9x15a.hasCheck)) {
			_0x81e9x15a.hasCheck = true;
			for (var i in this.recipes) {
				if (_0x81e9x5b.id == i) {
					_0x81e9x15a.maxPrg = this.recipes[i];
					_0x81e9x5b.count--;
					if (_0x81e9x5b.count < 1) {
						_0x81e9x5b.id = 0
					};
					_0x81e9x15a.hasCheck = false;
					break
				}
			}
		};
		if (_0x81e9x15a.volume >= 1 && IsEmptyLiquidItem(_0x81e9x5b.id, _0x81e9x5b.data)) {
			var _0x81e9x472 = GetFullItem(_0x81e9x5b.id, _0x81e9x5b.data, 6);
			_0x81e9x5b.id = _0x81e9x472[0];
			_0x81e9x5b.data = _0x81e9x472[1];
			_0x81e9x15a.volume--
		};
		if (_0x81e9x15a.volume >= 1 && getTime() % 60 == 0) {
			var _0x81e9x1b = getTile(_0x81e9x15a.x, _0x81e9x15a.y + 1, _0x81e9x15a.z);
			if (_0x81e9x1b != block_barrel) {
				return
			};
			var _0x81e9x216 = getMachine(_0x81e9x15a.x, _0x81e9x15a.y + 1, _0x81e9x15a.z);
			if (!_0x81e9x216 || !(_0x81e9x216.liquid == 0 || _0x81e9x216.liquid == 6)) {
				return
			};
			_0x81e9x216.liquid = 6;
			_0x81e9x216.volume++;
			_0x81e9x15a.volume--
		}
	};
	this.save = function(_0x81e9x259, _0x81e9x15a) {
		DataSaver.Save(_0x81e9x259 + "prg", _0x81e9x15a.prg);
		DataSaver.Save(_0x81e9x259 + "mprg", _0x81e9x15a.maxPrg);
		DataSaver.Save(_0x81e9x259 + "vol", _0x81e9x15a.volume)
	};
	this.read = function(_0x81e9x259, _0x81e9x15a) {
		_0x81e9x15a.prg = DataSaver.ReadFloat(_0x81e9x259 + "prg", _0x81e9x15a.prg);
		_0x81e9x15a.maxPrg = DataSaver.ReadFloat(_0x81e9x259 + "mprg");
		_0x81e9x15a.volume = DataSaver.ReadFloat(_0x81e9x259 + "vol")
	};
	this.getMachineName = function() {
		return "bioreactor"
	};
	this.isUsingLiquid = function() {
		return true
	};
	this.getMaxVolume = function() {
		return 0
	};
	this.getLiquidType = function(_0x81e9x2bc) {
		return 6
	}
}

function MachineBlockBreaker() {
	this.parent = MachineBase;
	this.parent();
	this.id = block_block_breaker;
	this.isUsingEnergy = function() {
		return true
	};
	this.getMachineName = function() {
		return "block breaker"
	};
	this.getMaxEnergyStored = function() {
		return 100
	};
	this.updateMachine = function(_0x81e9x15a) {
		if (getTime() % 20 != 0 || this.getEnergyStored(_0x81e9x15a) < 20) {
			return
		};
		var _0x81e9x10 = getTile(_0x81e9x15a.x, _0x81e9x15a.y - 1, _0x81e9x15a.z);
		var _0x81e9x16 = Level.getData(_0x81e9x15a.x, _0x81e9x15a.y - 1, _0x81e9x15a.z);
		if (!isBlockBreakable(_0x81e9x10)) {
			return
		};
		var drop = getBlockDestroyDrop(_0x81e9x10, _0x81e9x16);
		setTile(_0x81e9x15a.x, _0x81e9x15a.y - 1, _0x81e9x15a.z, 0);
		_0x81e9x15a.energyStored -= 20;
		if (drop[0] > 0) {
			StartItemTransportWithAutoPathfinding(_0x81e9x15a.x, _0x81e9x15a.y, _0x81e9x15a.z, drop[0], drop[1], drop[2], [0, 1, 0])
		}
	}
}

function MachineFiller() {
	this.parent = MachineBase;
	this.parent();
	this.id = block_bucket_filler;
	this.emptyItems = [];
	for (var _0x81e9x163 in LiquidItemMap) {
		if (LiquidItemMap[_0x81e9x163] == 2) {
			this.emptyItems.push(parseInt(_0x81e9x163.split(":")[0]))
		}
	};
	this.updateMachine = function(_0x81e9x15a) {
		if (getTime() % 22 == 0) {
			var _0x81e9x475 = getTile(_0x81e9x15a.x, _0x81e9x15a.y - 1, _0x81e9x15a.z);
			if (_0x81e9x475 != block_barrel) {
				return
			};
			var _0x81e9x216 = getMachine(_0x81e9x15a.x, _0x81e9x15a.y - 1, _0x81e9x15a.z);
			var _0x81e9x1cd = getChest(_0x81e9x15a.x, _0x81e9x15a.y + 1, _0x81e9x15a.z);
			if (!_0x81e9x216 || !_0x81e9x1cd.exist || !_0x81e9x216.volume || !_0x81e9x216.liquid) {
				return
			};
			for (var i in this.emptyItems) {
				var _0x81e9x10 = this.emptyItems[i];
				var _0x81e9x201 = _0x81e9x1cd.getItem(_0x81e9x10, 1, 0);
				if (_0x81e9x201.count) {
					var _0x81e9x472 = GetFullItem(_0x81e9x201.id, _0x81e9x201.data, _0x81e9x216.liquid);
					if (_0x81e9x472) {
						_0x81e9x1cd.addItem(_0x81e9x472[0], 1, _0x81e9x472[1]);
						_0x81e9x216.volume--;
						break
					}
				}
			}
		}
	};
	this.getMachineName = function() {
		return "bucket filler"
	}
}

function MachineCropHarvester() {
	this.parent = MachineBase;
	this.parent();
	this.id = block_crop_harvester;
	this.currentChest = null;
	this.getMachineName = function() {
		return "crop harvester"
	};
	this.tickInMainThread = function() {
		return true
	};
	this.updateMachine = function(_0x81e9x15a) {
		if (!_0x81e9x15a.progress) {
			_0x81e9x15a.progress = 0
		};
		if (getTime() % 5 == 0) {
			this.currentChest = getChest(_0x81e9x15a.x, _0x81e9x15a.y + 1, _0x81e9x15a.z);
			var _0x81e9x1b3 = _0x81e9x15a.x - 4 + parseInt(_0x81e9x15a.progress / 9);
			var _0x81e9x1b5 = _0x81e9x15a.z - 4 + parseInt(_0x81e9x15a.progress % 9);
			_0x81e9x15a.progress++;
			_0x81e9x15a.progress %= 81;
			if (_0x81e9x1b3 == _0x81e9x15a.x && _0x81e9x1b5 == _0x81e9x15a.z) {
				setTile(_0x81e9x1b3, _0x81e9x15a.y - 1, _0x81e9x1b5, 9)
			} else {
				this.checkBlock(_0x81e9x1b3, _0x81e9x15a.y + 0, _0x81e9x1b5)
			}
		}
	};
	this.checkBlock = function(_0x81e9x26, _0x81e9x27, _0x81e9x28) {
		_0x81e9x27--;
		for (var _0x81e9x384 = 0; _0x81e9x384 < 3; _0x81e9x384++) {
			var _0x81e9x10 = getTile(_0x81e9x26, _0x81e9x27, _0x81e9x28);
			if (_0x81e9x10 == 60) {
				break
			};
			if (_0x81e9x10 == 2 || _0x81e9x10 == 3) {
				Level.destroyBlock(_0x81e9x26, _0x81e9x27, _0x81e9x28);
				Level.setTile(_0x81e9x26, _0x81e9x27, _0x81e9x28, 60, 1);
				break
			};
			_0x81e9x27++;
			if (_0x81e9x384 == 2) {
				return
			}
		};
		_0x81e9x27++;
		this.useBoneMeal(_0x81e9x26, _0x81e9x27, _0x81e9x28);
		this.tryHarvest(_0x81e9x26, _0x81e9x27, _0x81e9x28);
		var _0x81e9x477 = getTile(_0x81e9x26, _0x81e9x27, _0x81e9x28);
		if (_0x81e9x477 == 0) {
			this.tryPlant(_0x81e9x26, _0x81e9x27, _0x81e9x28)
		}
	};
	this.tryHarvest = function(_0x81e9x26, _0x81e9x27, _0x81e9x28) {
		var _0x81e9x1cd = this.currentChest;
		var _0x81e9x173 = getTile(_0x81e9x26, _0x81e9x27, _0x81e9x28);
		var _0x81e9x478 = Level.getData(_0x81e9x26, _0x81e9x27, _0x81e9x28) == 7;
		var _0x81e9x479 = false;
		if (_0x81e9x173 == 17 || _0x81e9x173 == 161) {
			capitateTree(_0x81e9x26, _0x81e9x27, _0x81e9x28, _0x81e9x1cd)
		};
		if (_0x81e9x173 == 86) {
			_0x81e9x1cd.addItem(86, 1, 0);
			Level.destroyBlock(_0x81e9x26, _0x81e9x27, _0x81e9x28)
		};
		if (_0x81e9x173 == 103) {
			_0x81e9x1cd.addItem(360, Math.random() * 5 + 3, 0);
			Level.destroyBlock(_0x81e9x26, _0x81e9x27, _0x81e9x28)
		};
		if (!_0x81e9x478) {
			return
		};
		if (_0x81e9x173 == 59) {
			_0x81e9x1cd.addItem(295, Math.random() * 3 + 1, 0);
			_0x81e9x1cd.addItem(296, 1, 0);
			_0x81e9x479 = true
		};
		if (_0x81e9x173 == 141) {
			_0x81e9x1cd.addItem(391, Math.random() * 3 + 1, 0);
			_0x81e9x479 = true
		};
		if (_0x81e9x173 == 142) {
			_0x81e9x1cd.addItem(391, Math.random() * 3 + 1, 0);
			_0x81e9x479 = true
		};
		if (_0x81e9x173 == 244) {
			_0x81e9x1cd.addItem(458, Math.random() * 3, 0);
			_0x81e9x1cd.addItem(457, 1 + Math.random() * 2, 0);
			_0x81e9x479 = true
		};
		if (_0x81e9x479) {
			Level.destroyBlock(_0x81e9x26, _0x81e9x27, _0x81e9x28)
		}
	};
	this.tryPlant = function(_0x81e9x26, _0x81e9x27, _0x81e9x28) {
		var _0x81e9x1cd = this.currentChest;
		var _0x81e9x1a8 = [
			[295, 59],
			[391, 141],
			[392, 142],
			[361, 104],
			[362, 105],
			[458, 244]
		];
		for (var i in _0x81e9x1a8) {
			var _0x81e9x164 = _0x81e9x1a8[i][0];
			var _0x81e9x1b = _0x81e9x1a8[i][1];
			var _0x81e9x1a3 = _0x81e9x1cd.getItem(_0x81e9x164, 1, 0);
			if (_0x81e9x1a3.count) {
				setTile(_0x81e9x26, _0x81e9x27, _0x81e9x28, _0x81e9x1b);
				return
			}
		};
		if ((_0x81e9x26 + _0x81e9x28) % 2 == 0) {
			for (var _0x81e9x347 = 0; _0x81e9x347 < 6; _0x81e9x347++) {
				var _0x81e9x164 = 6;
				var _0x81e9x1b = 6;
				var _0x81e9x1a3 = _0x81e9x1cd.getItem(_0x81e9x164, 1, _0x81e9x347);
				if (_0x81e9x1a3.count) {
					setTile(_0x81e9x26, _0x81e9x27, _0x81e9x28, _0x81e9x1b, _0x81e9x347);
					return
				}
			}
		}
	};
	this.useBoneMeal = function(_0x81e9x26, _0x81e9x27, _0x81e9x28) {
		var _0x81e9x1b = getTile(_0x81e9x26, _0x81e9x27, _0x81e9x28);
		var _0x81e9x16 = Level.getData(_0x81e9x26, _0x81e9x27, _0x81e9x28);
		if (_0x81e9x1b == 59 || _0x81e9x1b == 104 || _0x81e9x1b == 105 || _0x81e9x1b == 141 || _0x81e9x1b == 142 || _0x81e9x1b == 244) {
			var _0x81e9x47a = this.currentChest.getItem(351, 1, 15);
			if (_0x81e9x47a.count == 0) {
				return
			};
			_0x81e9x16 += 3 + Math.random() * 3;
			if (_0x81e9x16 > 7) {
				_0x81e9x16 = 7
			};
			setTile(_0x81e9x26, _0x81e9x27, _0x81e9x28, _0x81e9x1b, _0x81e9x16);
			animateSmoke(ParticleType.cloud, _0x81e9x26, _0x81e9x27, _0x81e9x28)
		}
	}
}

function MachineCompressor() {
	this.parent = MachineBase;
	this.parent();
	this.id = block_compressor;
	this.MaxEnergyInput = 32;
	this.isUsingEnergy = function() {
		return true
	};
	this.getMachineName = function() {
		return "compressor"
	};
	this.getHelpGuideLink = function(_0x81e9x2bc) {
		return {
			chapter: "compressor"
		}
	};
	this.getMaxEnergyStored = function() {
		return 2000
	};
	this.getContainerId = function() {
		return 2
	};
	this.wrenchClick = function(_0x81e9x15a) {
		var _0x81e9x44b = 3 * Math.pow(3, _0x81e9x15a.overclockers);
		var _0x81e9x442 = "";
		if (_0x81e9x15a.progress) {
			_0x81e9x442 = ChatColor.GREEN + "progress " + parseInt(_0x81e9x15a.progress / 4) + "%"
		};
		if (_0x81e9x44b > this.getEnergyStored(_0x81e9x15a) && _0x81e9x15a.progress) {
			_0x81e9x442 = ChatColor.RED + "no energy"
		};
		if (_0x81e9x442) {
			ModPE.showTipMessage(_0x81e9x442)
		}
	};
	this.updateMachine = function(_0x81e9x15a) {
		this.showProgress(_0x81e9x15a);
		if (_0x81e9x15a.progress == 2) {
			this.playSound(_0x81e9x15a, "Machines/CompressorOp.ogg")
		};
		if (!_0x81e9x15a.overclockers) {
			_0x81e9x15a.overclockers = 0
		};
		if (_0x81e9x15a.progress > 0) {
			var _0x81e9x47c = 5 * Math.pow(3, _0x81e9x15a.overclockers);
			var _0x81e9x47d = Math.pow(2, _0x81e9x15a.overclockers);
			if (this.getEnergyStored(_0x81e9x15a) < _0x81e9x47c) {
				return
			};
			if (_0x81e9x15a.progress < 400) {
				_0x81e9x15a.energyStored -= _0x81e9x47c;
				_0x81e9x15a.progress += _0x81e9x47d
			};
			if (_0x81e9x15a.progress >= 400) {
				if (this.provideRecipe(_0x81e9x15a)) {
					_0x81e9x15a.progress = 0
				}
			}
		};
		var _0x81e9x1bd = getTime();
		if ((_0x81e9x1bd + _0x81e9x15a.x * 1551 + _0x81e9x15a.z * 578) % 40 != 0) {
			return
		};
		if (!_0x81e9x15a.progress) {
			_0x81e9x15a.progress = 0
		};
		var _0x81e9x47e = this.checkHasMaterial(_0x81e9x15a);
		if (!_0x81e9x47e) {
			if (_0x81e9x15a.progress > 0) {
				this.playSound(_0x81e9x15a, "Machines/InterruptOne.ogg")
			};
			_0x81e9x15a.progress = 0;
			return
		};
		if (_0x81e9x15a.progress < 1) {
			_0x81e9x15a.progress = 1
		};
		_0x81e9x15a.overclockers = this.getUpgrades(_0x81e9x15a)
	};
	this.checkHasMaterial = function(_0x81e9x15a) {
		var _0x81e9x47f = this.getContainer(_0x81e9x15a).getSlot(0).id;
		for (var i in this.recipes) {
			if (_0x81e9x47f == i) {
				return true
			}
		}
	};
	this.recipes = Compressor_recipes;
	this.provideRecipe = function(_0x81e9x15a) {
		var _0x81e9x194 = this.getContainer(_0x81e9x15a);
		var _0x81e9x480 = this.recipes;
		var _0x81e9x481 = _0x81e9x194.getSlot(0);
		var _0x81e9x467 = _0x81e9x194.getSlot(1);
		for (var _0x81e9x10 in this.recipes) {
			var _0x81e9x379 = this.recipes[_0x81e9x10];
			if (_0x81e9x481.id == _0x81e9x10 && (_0x81e9x467.id == _0x81e9x379 || _0x81e9x467.id == 0) && _0x81e9x467.count < 64) {
				_0x81e9x481.count--;
				if (_0x81e9x481.count < 1) {
					_0x81e9x481.id = 0
				};
				_0x81e9x467.count++;
				_0x81e9x467.id = _0x81e9x379;
				return true
			}
		}
	};
	this.save = function(_0x81e9x17, _0x81e9x15a) {
		DataSaver.Save(_0x81e9x17 + "prs", _0x81e9x15a.progress)
	};
	this.read = function(_0x81e9x17, _0x81e9x15a) {
		_0x81e9x15a.progress = DataSaver.ReadNumber(_0x81e9x17 + "prs")
	};
	this.getUpgrades = function(_0x81e9x15a) {
		var _0x81e9x347 = this.getContainer(_0x81e9x15a).getSlot(2);
		if (_0x81e9x347.id == item_overclocker_upgrade) {
			return _0x81e9x347.count
		};
		return 0
	};
	this.showProgress = function(_0x81e9x15a) {
		this.getContainer(_0x81e9x15a).setProgressBar(_0x81e9x15a.progress / 400)
	}
}

function MachineDrill() {
	this.parent = MachineBase;
	this.parent();
	this.id = block_drill_station;
	this.tickInMainThread = function() {
		return true
	};
	this.getHelpGuideLink = function(_0x81e9x2bc) {
		return {
			chapter: "mining well"
		}
	};
	this.isUsingEnergy = function() {
		return true
	};
	this.getContainerId = function() {
		return 12
	};
	this.getMaxEnergyStored = function() {
		return 500
	};
	this.getMachineName = function() {
		return "drill"
	};
	this.getInfo = function(_0x81e9x15a) {
		return "fuel: " + _0x81e9x15a.fuel
	};
	this.updateMachine = function(_0x81e9x15a) {
		if (!_0x81e9x15a.progress) {
			_0x81e9x15a.progress = 0
		};
		if (!_0x81e9x15a.fuel) {
			_0x81e9x15a.fuel = 0
		};
		var _0x81e9x194 = this.getContainer(_0x81e9x15a);
		var _0x81e9x483 = _0x81e9x194.getSlot(0);
		_0x81e9x194.setFireBar(_0x81e9x15a.fuel / 16.0);
		if (_0x81e9x15a.fuel < 1) {
			if (this.getEnergyStored(_0x81e9x15a) >= 120) {
				_0x81e9x15a.energyStored -= 120;
				_0x81e9x15a.fuel++
			}
		};
		if (getTime() % 33 == 0 || _0x81e9x15a.noDelay) {
			if (_0x81e9x15a.fuel < 1) {
				if (_0x81e9x483.id == 263) {
					_0x81e9x483.count--;
					_0x81e9x15a.fuel += 16;
					if (_0x81e9x483.count < 1) {
						_0x81e9x483.id = _0x81e9x483.data = 0
					}
				}
			};
			if (_0x81e9x15a.fuel < 1) {
				return
			};
			_0x81e9x15a.noDelay = false;
			var _0x81e9x27 = _0x81e9x15a.y - 1 - _0x81e9x15a.progress;
			if (_0x81e9x27 > 0) {
				var _0x81e9x484 = this.dig(_0x81e9x15a, _0x81e9x15a.x, _0x81e9x27, _0x81e9x15a.z);
				if (_0x81e9x484 == 0 || _0x81e9x484 == 1) {
					if (_0x81e9x484 == 1) {
						_0x81e9x15a.noDelay = true
					};
					_0x81e9x15a.progress++;
					_0x81e9x15a.fuel--;
					this.makeRedstoneRay(new Coords(_0x81e9x15a.x + 0.5, _0x81e9x15a.y + 0.5, _0x81e9x15a.z + 0.5), _0x81e9x15a.x + 0.5, _0x81e9x27 - 0.5, _0x81e9x15a.z + 0.5)
				}
			}
		}
	};
	this.dig = function(_0x81e9x15a, _0x81e9x26, _0x81e9x27, _0x81e9x28, _0x81e9x485) {
		var _0x81e9x10 = getTile(_0x81e9x26, _0x81e9x27, _0x81e9x28);
		var _0x81e9x16 = Level.getData(_0x81e9x26, _0x81e9x27, _0x81e9x28);
		if (!this.isOre(_0x81e9x10) && _0x81e9x485) {
			return 2
		};
		if (_0x81e9x10 == 0 || _0x81e9x10 == 8 || _0x81e9x10 == 9 || _0x81e9x10 == 10 || _0x81e9x10 == 11) {
			return 1
		};
		if (_0x81e9x10 == 7) {
			return 2
		};
		var drop = getBlockDestroyDrop(_0x81e9x10, _0x81e9x16);
		StartItemTransportWithAutoPathfinding(_0x81e9x15a.x, _0x81e9x15a.y, _0x81e9x15a.z, drop[0], drop[1], drop[2], [0, 1, 0]);
		setTile(_0x81e9x26, _0x81e9x27, _0x81e9x28, 0);
		if (this.isOre(_0x81e9x10) || !_0x81e9x485) {
			this.dig(_0x81e9x15a, _0x81e9x26 + 1, _0x81e9x27, _0x81e9x28, 1);
			this.dig(_0x81e9x15a, _0x81e9x26 - 1, _0x81e9x27, _0x81e9x28, 1);
			this.dig(_0x81e9x15a, _0x81e9x26, _0x81e9x27 + 1, _0x81e9x28, 1);
			this.dig(_0x81e9x15a, _0x81e9x26, _0x81e9x27 - 1, _0x81e9x28, 1);
			this.dig(_0x81e9x15a, _0x81e9x26, _0x81e9x27, _0x81e9x28 + 1, 1);
			this.dig(_0x81e9x15a, _0x81e9x26, _0x81e9x27, _0x81e9x28 - 1, 1)
		};
		return 0
	};
	this.isOre = function(_0x81e9x10) {
		return (_0x81e9x10 == 16 || _0x81e9x10 == 21 || _0x81e9x10 == 14 || _0x81e9x10 == 15 || _0x81e9x10 == 56 || _0x81e9x10 == 129 || _0x81e9x10 == 73 || _0x81e9x10 == 74 || _0x81e9x10 == block_uranium_ore || _0x81e9x10 == block_iridium_ore || _0x81e9x10 == block_blended_dust_ore || _0x81e9x10 == block_copper_ore || _0x81e9x10 == block_tin_ore)
	};
	this.getDropId = function(_0x81e9x10) {
		if (_0x81e9x10 == 1) {
			return [4, 1, 0]
		};
		if (_0x81e9x10 == 16) {
			return [263, 1, 0]
		};
		if (_0x81e9x10 == 21) {
			return [351, parseInt(Math.random() * 3 + 4), 4]
		};
		if (_0x81e9x10 == 73 || _0x81e9x10 == 74) {
			return [331, parseInt(Math.random() * 2 + 4), 0]
		};
		if (_0x81e9x10 == 56) {
			return [264, 1, 0]
		};
		if (_0x81e9x10 == 129) {
			return [388, 1, 0]
		};
		if (_0x81e9x10 == 2) {
			return [3, 1, 0]
		};
		if (_0x81e9x10 == 18) {
			return [0, 0, 0]
		};
		if (_0x81e9x10 == 31 || _0x81e9x10 == 32) {
			return [0, 0, 0]
		};
		return [_0x81e9x10, 1, 0]
	};
	this.checkLoaded = function(_0x81e9x26, _0x81e9x28) {
		return getTile(_0x81e9x26, 0, _0x81e9x28) != 0
	};
	this.makeRedstoneRay = function(_0x81e9x15a, _0x81e9x26, _0x81e9x27, _0x81e9x28) {
		var _0x81e9x1b0 = _0x81e9x26 - _0x81e9x15a.x;
		var _0x81e9x1b1 = _0x81e9x27 - _0x81e9x15a.y;
		var _0x81e9x1b2 = _0x81e9x28 - _0x81e9x15a.z;
		var _0x81e9x15b = Math.sqrt(_0x81e9x1b0 * _0x81e9x1b0 + _0x81e9x1b1 * _0x81e9x1b1 + _0x81e9x1b2 * _0x81e9x1b2);
		_0x81e9x1b0 /= _0x81e9x15b;
		_0x81e9x1b1 /= _0x81e9x15b;
		_0x81e9x1b2 /= _0x81e9x15b;
		for (var _0x81e9x1a7 = 0; _0x81e9x1a7 < _0x81e9x15b; _0x81e9x1a7 += 1) {
			var _0x81e9x1b3 = _0x81e9x15a.x + _0x81e9x1b0 * _0x81e9x1a7;
			var _0x81e9x1b4 = _0x81e9x15a.y + _0x81e9x1b1 * _0x81e9x1a7;
			var _0x81e9x1b5 = _0x81e9x15a.z + _0x81e9x1b2 * _0x81e9x1a7;
			Level.addParticle(ParticleType.redstone, _0x81e9x1b3, _0x81e9x1b4, _0x81e9x1b5, 0, 0, 0, 1)
		}
	};
	this.save = function(_0x81e9x17, _0x81e9x15a) {
		DataSaver.Save(_0x81e9x17 + "fuel", _0x81e9x15a.fuel);
		DataSaver.Save(_0x81e9x17 + "pr", _0x81e9x15a.progress)
	};
	this.read = function(_0x81e9x17, _0x81e9x15a) {
		_0x81e9x15a.fuel = DataSaver.ReadNumber(_0x81e9x17 + "fuel");
		_0x81e9x15a.progress = DataSaver.ReadNumber(_0x81e9x17 + "pr")
	}
}

function MachineMonsterDefender() {
	this.parent = MachineBase;
	this.parent();
	this.id = block_defender;
	this.isUsingEnergy = function() {
		return true
	};
	this.getMaxEnergyStored = function() {
		return 10000
	};
	this.getMachineName = function() {
		return "monster defender"
	};
	this.updateMachine = function(_0x81e9x15a) {
		var _0x81e9x1bd = getTime();
		if (_0x81e9x15a.currentTarget && _0x81e9x1bd % 6 == 0) {
			if (this.getEnergyStored(_0x81e9x15a) >= 50) {
				this.hitMob(_0x81e9x15a.currentTarget, _0x81e9x15a);
				_0x81e9x15a.energyStored -= 50
			};
			if (Entity.getY(_0x81e9x15a.currentTarget) < 1) {
				_0x81e9x15a.currentTarget = 0
			}
		} else {
			var _0x81e9x44b = parseInt(32 + Math.random() * 5);
			var _0x81e9x174 = eh_getRandomByType(_0x81e9x44b);
			if (!_0x81e9x174) {
				return
			};
			var _0x81e9x487 = this.isInRange(_0x81e9x15a.x, _0x81e9x15a.y, _0x81e9x15a.z, _0x81e9x174);
			if (_0x81e9x487) {
				_0x81e9x15a.currentTarget = _0x81e9x174
			}
		}
	};
	this.hitMob = function(_0x81e9x174) {
		var _0x81e9x39a = Entity.getX(_0x81e9x174);
		var _0x81e9x449 = Entity.getY(_0x81e9x174);
		var _0x81e9x39b = Entity.getZ(_0x81e9x174);
		Entity.setHealth(_0x81e9x174, Entity.getHealth(_0x81e9x174) - 3);
		for (var i = 0; i < Math.random() * 5; i++) {
			Level.addParticle(5, _0x81e9x39a, _0x81e9x449 + 0.7, _0x81e9x39b, (Math.random() - 0.5) * 0.1, (Math.random() - 0.5) * 0.1, (Math.random() - 0.5) * 0.1, 1)
		}
	};
	this.isInRange = function(_0x81e9x26, _0x81e9x27, _0x81e9x28, _0x81e9x174) {
		var _0x81e9x39a = Entity.getX(_0x81e9x174);
		var _0x81e9x449 = Entity.getY(_0x81e9x174);
		var _0x81e9x39b = Entity.getZ(_0x81e9x174);
		var _0x81e9x15b = Math.sqrt((_0x81e9x39a - _0x81e9x26) * (_0x81e9x39a - _0x81e9x26) + (_0x81e9x449 - _0x81e9x27) * (_0x81e9x449 - _0x81e9x27) + (_0x81e9x39b - _0x81e9x28) * (_0x81e9x39b - _0x81e9x28));
		return _0x81e9x15b < 32
	}
}

function MachineElectricFurnace() {
	this.parent = MachineBase;
	this.parent();
	this.id = block_electric_furnace;
	this.MaxEnergyInput = 32;
	this.recipes = ElectricFurnace_recipes;
	this.isUsingEnergy = function() {
		return true
	};
	this.getHelpGuideLink = function(_0x81e9x2bc) {
		return {
			chapter: "electric furnace"
		}
	};
	this.getMachineName = function() {
		return "electric furnace"
	};
	this.getMaxEnergyStored = function() {
		return 2000
	};
	this.getContainerId = function() {
		return 2
	};
	this.wrenchClick = function(_0x81e9x15a) {
		var _0x81e9x44b = 3 * Math.pow(3, _0x81e9x15a.overclockers);
		var _0x81e9x442 = "";
		if (_0x81e9x15a.progress) {
			_0x81e9x442 = ChatColor.GREEN + "progress " + parseInt(_0x81e9x15a.progress / 4) + "%"
		};
		if (_0x81e9x44b > this.getEnergyStored(_0x81e9x15a) && _0x81e9x15a.progress) {
			_0x81e9x442 = ChatColor.RED + "no energy"
		};
		if (_0x81e9x442) {
			ModPE.showTipMessage(_0x81e9x442)
		}
	};
	this.updateMachine = function(_0x81e9x15a) {
		this.showProgress(_0x81e9x15a);
		if (_0x81e9x15a.progress == 2) {
			this.playSound(_0x81e9x15a, "Machines/ElectricFurnace.ogg")
		};
		if (!_0x81e9x15a.overclockers) {
			_0x81e9x15a.overclockers = 0
		};
		if (_0x81e9x15a.progress > 0) {
			var _0x81e9x47c = 3 * Math.pow(3, _0x81e9x15a.overclockers);
			var _0x81e9x47d = Math.pow(2, _0x81e9x15a.overclockers);
			if (this.getEnergyStored(_0x81e9x15a) < _0x81e9x47c) {
				return
			};
			if (_0x81e9x15a.progress < 100) {
				_0x81e9x15a.energyStored -= _0x81e9x47c;
				_0x81e9x15a.progress += _0x81e9x47d
			};
			if (_0x81e9x15a.progress >= 100) {
				if (this.provideRecipe(_0x81e9x15a)) {
					_0x81e9x15a.progress = 0
				}
			}
		};
		var _0x81e9x1bd = getTime();
		if ((_0x81e9x1bd + _0x81e9x15a.x * 1551 + _0x81e9x15a.z * 578) % 40 != 0) {
			return
		};
		if (!_0x81e9x15a.progress) {
			_0x81e9x15a.progress = 0
		};
		var _0x81e9x47e = this.checkHasMaterial(_0x81e9x15a);
		if (!_0x81e9x47e) {
			if (_0x81e9x15a.progress > 0) {
				this.playSound(_0x81e9x15a, "Machines/InterruptOne.ogg")
			};
			_0x81e9x15a.progress = 0;
			return
		};
		if (_0x81e9x15a.progress < 1) {
			_0x81e9x15a.progress = 1
		};
		_0x81e9x15a.overclockers = this.getUpgrades(_0x81e9x15a)
	};
	this.checkHasMaterial = function(_0x81e9x15a) {
		var _0x81e9x10 = this.getContainer(_0x81e9x15a).getSlot(0).id;
		for (var i in this.recipes) {
			if (this.recipes[i][0] == _0x81e9x10) {
				return true
			}
		}
	};
	this.provideRecipe = function(_0x81e9x15a) {
		var _0x81e9x194 = this.getContainer(_0x81e9x15a);
		var _0x81e9x480 = this.recipes;
		var _0x81e9x481 = _0x81e9x194.getSlot(0);
		var _0x81e9x467 = _0x81e9x194.getSlot(1);
		for (var _0x81e9x159 in _0x81e9x480) {
			var _0x81e9x15f = _0x81e9x480[_0x81e9x159][0];
			var _0x81e9x443 = _0x81e9x480[_0x81e9x159][1];
			var _0x81e9x13 = _0x81e9x480[_0x81e9x159][2];
			if (_0x81e9x481.id == _0x81e9x15f && (_0x81e9x467.id == _0x81e9x443 || _0x81e9x467.id == 0) && _0x81e9x467.count + _0x81e9x13 <= 64) {
				_0x81e9x467.id = _0x81e9x443;
				_0x81e9x467.count += _0x81e9x13;
				_0x81e9x481.count--;
				if (!_0x81e9x481.count) {
					_0x81e9x481.id = 0
				};
				return true
			}
		};
		return false
	};
	this.save = function(_0x81e9x17, _0x81e9x15a) {
		DataSaver.Save(_0x81e9x17 + "prs", _0x81e9x15a.progress)
	};
	this.read = function(_0x81e9x17, _0x81e9x15a) {
		_0x81e9x15a.progress = DataSaver.ReadNumber(_0x81e9x17 + "prs")
	};
	this.getUpgrades = function(_0x81e9x15a) {
		var _0x81e9x347 = this.getContainer(_0x81e9x15a).getSlot(2);
		if (_0x81e9x347.id == item_overclocker_upgrade) {
			return _0x81e9x347.count
		};
		return 0
	};
	this.showProgress = function(_0x81e9x15a) {
		this.getContainer(_0x81e9x15a).setProgressBar(_0x81e9x15a.progress / 100)
	}
}

function MachineBuffer() {
	this.parent = MachineBase;
	this.parent();
	this.id = block_exchange_buffer;
	this.PutSlots = transp_ContainerPutSlots;
	this.GetSlots = transp_ContainerGetSlots;
	this.getContainerId = function() {
		return 7
	};
	this.getMachineName = function() {
		return "exchange buffer"
	};
	this.getHelpGuideLink = function(_0x81e9x2bc) {
		return {
			chapter: "exchange buffer"
		}
	};
	this.updateMachine = function(_0x81e9x2bc) {
		var _0x81e9x1bd = getTime();
		if (_0x81e9x1bd % 10 == 0) {
			_0x81e9x2bc.mbot = getMachine(_0x81e9x2bc.x, _0x81e9x2bc.y - 1, _0x81e9x2bc.z)
		};
		if (_0x81e9x2bc.mbot) {
			if (_0x81e9x2bc.mbot.removed) {
				_0x81e9x2bc.mbot = null
			} else {
				if (_0x81e9x1bd % 20 == 0) {
					this.transpFromTo(_0x81e9x2bc, _0x81e9x2bc.mbot, this.PutSlots, this.PutSlots);
					this.transpFromTo(_0x81e9x2bc.mbot, _0x81e9x2bc, this.GetSlots, this.GetSlots)
				}
			}
		}
	};
	this.transpFromTo = function(_0x81e9x314, _0x81e9x2f8, _0x81e9x48a, _0x81e9x48b) {
		var _0x81e9x164 = this.getItem(_0x81e9x314, _0x81e9x48a);
		if (!_0x81e9x164) {
			return
		};
		_0x81e9x164[1] = this.addItem(_0x81e9x2f8, _0x81e9x164[0], _0x81e9x164[1], _0x81e9x164[2], _0x81e9x48b);
		this.addItem(_0x81e9x314, _0x81e9x164[0], _0x81e9x164[1], _0x81e9x164[2], _0x81e9x48a)
	};
	this.addItem = function(_0x81e9x2bc, _0x81e9x10, _0x81e9x13, _0x81e9x16, _0x81e9x48c) {
		var _0x81e9x158 = getMachineType(_0x81e9x2bc);
		var _0x81e9x48d = _0x81e9x158.getContainerId();
		if (_0x81e9x48d < 0) {
			return _0x81e9x13
		};
		var _0x81e9x48e = _0x81e9x48c[_0x81e9x48d];
		var _0x81e9x194 = _0x81e9x158.getContainer(_0x81e9x2bc);
		for (var i in _0x81e9x48e) {
			if (_0x81e9x13 < 1) {
				return 0
			};
			var _0x81e9x5b = _0x81e9x194.getSlot(_0x81e9x48e[i]);
			if ((_0x81e9x5b.id == _0x81e9x10 && _0x81e9x5b.data == _0x81e9x16 || _0x81e9x5b.id == 0) && _0x81e9x5b.count < 64) {
				_0x81e9x5b.id = _0x81e9x10;
				_0x81e9x5b.data = _0x81e9x16;
				var _0x81e9x48f = _0x81e9x5b.count;
				_0x81e9x5b.count += _0x81e9x13;
				if (_0x81e9x5b.count > 64) {
					_0x81e9x5b.count = 64
				};
				_0x81e9x13 -= _0x81e9x5b.count - _0x81e9x48f
			}
		};
		return _0x81e9x13
	};
	this.getItem = function(_0x81e9x2bc, _0x81e9x48c) {
		var _0x81e9x158 = getMachineType(_0x81e9x2bc);
		var _0x81e9x48d = _0x81e9x158.getContainerId();
		if (_0x81e9x48d < 0) {
			return
		};
		var _0x81e9x490 = _0x81e9x48c[_0x81e9x48d];
		var _0x81e9x194 = _0x81e9x158.getContainer(_0x81e9x2bc);
		for (var i in _0x81e9x490) {
			var _0x81e9x5b = _0x81e9x194.getSlot(_0x81e9x490[i]);
			if (_0x81e9x5b.id > 0) {
				var _0x81e9x164 = [_0x81e9x5b.id, _0x81e9x5b.count, _0x81e9x5b.data];
				_0x81e9x5b.id = 0;
				_0x81e9x5b.data = 0;
				_0x81e9x5b.count = 0;
				return _0x81e9x164
			}
		};
		return null
	}
}

function MachineExtractor() {
	this.parent = MachineBase;
	this.parent();
	this.id = block_extractor;
	this.MaxEnergyInput = 32;
	this.isUsingEnergy = function() {
		return true
	};
	this.getHelpGuideLink = function(_0x81e9x2bc) {
		return {
			chapter: "extractor"
		}
	};
	this.getMachineName = function() {
		return "extractor"
	};
	this.getMaxEnergyStored = function() {
		return 2000
	};
	this.getContainerId = function() {
		return 2
	};
	this.wrenchClick = function(_0x81e9x15a) {
		var _0x81e9x44b = 3 * Math.pow(3, _0x81e9x15a.overclockers);
		var _0x81e9x442 = "";
		if (_0x81e9x15a.progress) {
			_0x81e9x442 = ChatColor.GREEN + "progress " + parseInt(_0x81e9x15a.progress / 4) + "%"
		};
		if (_0x81e9x44b > this.getEnergyStored(_0x81e9x15a) && _0x81e9x15a.progress) {
			_0x81e9x442 = ChatColor.RED + "no energy"
		};
		if (_0x81e9x442) {
			ModPE.showTipMessage(_0x81e9x442)
		}
	};
	this.updateMachine = function(_0x81e9x15a) {
		this.showProgress(_0x81e9x15a);
		if (_0x81e9x15a.progress == 2) {
			this.playSound(_0x81e9x15a, "Machines/ExtractorOp.ogg")
		};
		if (!_0x81e9x15a.overclockers) {
			_0x81e9x15a.overclockers = 0
		};
		if (_0x81e9x15a.progress > 0) {
			var _0x81e9x47c = 3 * Math.pow(3, _0x81e9x15a.overclockers);
			var _0x81e9x47d = Math.pow(2, _0x81e9x15a.overclockers);
			if (this.getEnergyStored(_0x81e9x15a) < _0x81e9x47c) {
				return
			};
			if (_0x81e9x15a.progress < 400) {
				_0x81e9x15a.energyStored -= _0x81e9x47c;
				_0x81e9x15a.progress += _0x81e9x47d
			};
			if (_0x81e9x15a.progress >= 400) {
				if (this.provideRecipe(_0x81e9x15a)) {
					_0x81e9x15a.progress = 0
				}
			}
		};
		var _0x81e9x1bd = getTime();
		if ((_0x81e9x1bd + _0x81e9x15a.x * 1551 + _0x81e9x15a.z * 578) % 40 != 0) {
			return
		};
		if (!_0x81e9x15a.progress) {
			_0x81e9x15a.progress = 0
		};
		var _0x81e9x47e = this.checkHasMaterial(_0x81e9x15a);
		if (!_0x81e9x47e) {
			if (_0x81e9x15a.progress > 0) {
				this.playSound(_0x81e9x15a, "Machines/InterruptOne.ogg")
			};
			_0x81e9x15a.progress = 0;
			return
		};
		if (_0x81e9x15a.progress < 1) {
			_0x81e9x15a.progress = 1
		};
		_0x81e9x15a.overclockers = this.getUpgrades(_0x81e9x15a)
	};
	this.checkHasMaterial = function(_0x81e9x15a) {
		var _0x81e9x10 = this.getContainer(_0x81e9x15a).getSlot(0).id;
		return _0x81e9x10 == item_latex
	};
	this.provideRecipe = function(_0x81e9x15a) {
		var _0x81e9x194 = this.getContainer(_0x81e9x15a);
		var _0x81e9x480 = this.recipes;
		var _0x81e9x481 = _0x81e9x194.getSlot(0);
		var _0x81e9x467 = _0x81e9x194.getSlot(1);
		if (_0x81e9x481.id == item_latex && (_0x81e9x467.id == 0 || _0x81e9x467.id == item_rubber) && _0x81e9x467.count < 62) {
			_0x81e9x467.id = item_rubber;
			_0x81e9x467.count += 3;
			_0x81e9x481.count--;
			if (_0x81e9x481.count == 0) {
				_0x81e9x481.id = 0
			};
			return true
		}
	};
	this.save = function(_0x81e9x17, _0x81e9x15a) {
		DataSaver.Save(_0x81e9x17 + "prs", _0x81e9x15a.progress)
	};
	this.read = function(_0x81e9x17, _0x81e9x15a) {
		_0x81e9x15a.progress = DataSaver.ReadNumber(_0x81e9x17 + "prs")
	};
	this.getUpgrades = function(_0x81e9x15a) {
		var _0x81e9x347 = this.getContainer(_0x81e9x15a).getSlot(2);
		if (_0x81e9x347.id == item_overclocker_upgrade) {
			return _0x81e9x347.count
		};
		return 0
	};
	this.showProgress = function(_0x81e9x15a) {
		this.getContainer(_0x81e9x15a).setProgressBar(_0x81e9x15a.progress / 400)
	}
}

function MachineFishingWeb() {
	this.parent = MachineBase;
	this.parent();
	this.id = block_fishing_net;
	this.updateMachine = function(_0x81e9x2bc) {
		var _0x81e9x1bd = Level.getTime();
		if (_0x81e9x1bd % 100 == 0) {
			var _0x81e9x493 = 0;
			while (getTile(_0x81e9x2bc.x, _0x81e9x2bc.y - _0x81e9x493 - 1, _0x81e9x2bc.z) == 9 && _0x81e9x493 < 5) {
				_0x81e9x493++
			};
			var random = 100 - Math.random() * 100 * Math.min(1, _0x81e9x493 / 5);
			var _0x81e9x164 = [0, 0, 0];
			if (random < 1.2) {
				_0x81e9x164 = [349, 1, 0]
			};
			if (_0x81e9x164[0] > 0) {
				var _0x81e9x38 = Level.dropItem(_0x81e9x2bc.x + Math.random(), _0x81e9x2bc.y + 1, _0x81e9x2bc.z + Math.random(), 0, _0x81e9x164[0], _0x81e9x164[1], _0x81e9x164[2]);
				setVelX(_0x81e9x38, 0);
				setVelZ(_0x81e9x38, 0);
				setVelY(_0x81e9x38, 0)
			}
		}
	}
}

function MachineFuelFact() {
	this.parent = MachineBase;
	this.parent();
	this.id = block_fuel_factory;
	this.isUsingEnergy = function() {
		return true
	};
	this.getMachineName = function() {
		return "fuel factory"
	};
	this.getMaxEnergyStored = function() {
		return 200
	};
	this.updateMachine = function(_0x81e9x15a) {
		if (!_0x81e9x15a.receiverUpdated_ || getTime() % 40 == 0) {
			this.updateBarrelHash(_0x81e9x15a);
			_0x81e9x15a.receiverUpdated_ = true
		};
		if (this.getEnergyStored(_0x81e9x15a) < 10) {
			return
		};
		if (_0x81e9x15a.barrelHash.length != 2) {
			return
		};
		var _0x81e9x495 = _0x81e9x15a.barrelHash[0];
		var _0x81e9x496 = _0x81e9x15a.barrelHash[1];
		if (_0x81e9x495.liquid != 4 || !(_0x81e9x496.liquid == 5 || _0x81e9x496.liquid == 0)) {
			return
		};
		if (_0x81e9x495.volume <= 0) {
			_0x81e9x495.volume = 0;
			return
		};
		if (_0x81e9x496.volume >= 16) {
			_0x81e9x496.volume = 16;
			return
		};
		_0x81e9x495.volume -= 1 / 1024;
		_0x81e9x496.volume += 1 / 1024;
		_0x81e9x496.liquid = 5;
		_0x81e9x15a.energyStored -= 10
	};
	this.updateBarrelHash = function(_0x81e9x15a) {
		_0x81e9x15a.barrelHash = [];
		var _0x81e9x497 = [
			[_0x81e9x15a.x - 1, _0x81e9x15a.z],
			[_0x81e9x15a.x + 1, _0x81e9x15a.z],
			[_0x81e9x15a.x, _0x81e9x15a.z + 1],
			[_0x81e9x15a.x, _0x81e9x15a.z - 1]
		];
		for (var i in _0x81e9x497) {
			var _0x81e9x193 = getTile(_0x81e9x497[i][0], _0x81e9x15a.y, _0x81e9x497[i][1]);
			if (_0x81e9x193 != block_barrel) {
				continue
			};
			var _0x81e9x197 = getMachine(_0x81e9x497[i][0], _0x81e9x15a.y, _0x81e9x497[i][1]);
			if (!_0x81e9x197) {
				continue
			};
			_0x81e9x15a.barrelHash.push(_0x81e9x197);
			if (_0x81e9x15a.barrelHash.length == 2) {
				break
			}
		};
		if (_0x81e9x15a.barrelHash.length < 2) {
			_0x81e9x15a.barrelHash = []
		} else {
			if (_0x81e9x15a.barrelHash[1].liquid == 4) {
				_0x81e9x15a.barrelHash = [_0x81e9x15a.barrelHash[1], _0x81e9x15a.barrelHash[0]]
			}
		}
	}
}

function MachineLiquidBlender() {
	this.parent = MachineBase;
	this.parent();
	this.id = block_liquid_blender;
	this.updateMachine = function(_0x81e9x15a) {
		if (getTime() % 20 != 0) {
			return
		};
		var _0x81e9x499 = this.find2Barrels(_0x81e9x15a);
		if (!_0x81e9x499) {
			return
		};
		var _0x81e9x49a = this.getBlendId(_0x81e9x499[0], _0x81e9x499[1]);
		if (_0x81e9x49a == -1) {
			return
		};
		var _0x81e9x1cd = getChest(_0x81e9x15a.x, _0x81e9x15a.y + 1, _0x81e9x15a.z);
		if (!_0x81e9x1cd.exist) {
			return
		};
		var drop = this.getDropByBlendId(_0x81e9x49a);
		_0x81e9x499[0].volume--;
		_0x81e9x499[1].volume--;
		if (Math.random() < 0.5) {
			return
		};
		var _0x81e9x1a5 = _0x81e9x1cd.addItem(drop[0], drop[1], drop[2]);
		if (_0x81e9x1a5 > 0) {
			_0x81e9x499[0].volume++;
			_0x81e9x499[1].volume++
		}
	};
	this.getBlendId = function(_0x81e9x495, _0x81e9x496) {
		var _0x81e9x15c = _0x81e9x495.liquid;
		var _0x81e9x15d = _0x81e9x496.liquid;
		if (!_0x81e9x15c || !_0x81e9x15d || _0x81e9x15c == _0x81e9x15d) {
			return -1
		};
		if ((_0x81e9x15d == 8 && _0x81e9x15c == 10) || (_0x81e9x15d == 10 && _0x81e9x15c == 8)) {
			return 0
		};
		if ((_0x81e9x15d == 8 && _0x81e9x15c == 1) || (_0x81e9x15d == 1 && _0x81e9x15c == 8)) {
			return 1
		};
		if ((_0x81e9x15d == 1 && _0x81e9x15c == 10) || (_0x81e9x15d == 10 && _0x81e9x15c == 1)) {
			return 2
		}
	};
	this.find2Barrels = function(_0x81e9x15a) {
		var _0x81e9x49b = parseInt(Math.random() * 4);
		var _0x81e9x49c = [];
		for (var i = 0; i < 4; i++) {
			var _0x81e9x15b = (parseInt(i) + _0x81e9x49b) % 4;
			var _0x81e9x26 = _0x81e9x15a.x + 1;
			var _0x81e9x28 = _0x81e9x15a.z;
			if (_0x81e9x15b == 1) {
				_0x81e9x26 = _0x81e9x15a.x;
				_0x81e9x28 = _0x81e9x15a.z + 1
			};
			if (_0x81e9x15b == 2) {
				_0x81e9x26 = _0x81e9x15a.x - 1;
				_0x81e9x28 = _0x81e9x15a.z
			};
			if (_0x81e9x15b == 3) {
				_0x81e9x26 = _0x81e9x15a.x;
				_0x81e9x28 = _0x81e9x15a.z - 1
			};
			var _0x81e9x1b = getTile(_0x81e9x26, _0x81e9x15a.y, _0x81e9x28);
			if (_0x81e9x1b != block_barrel) {
				continue
			};
			var _0x81e9x173 = getMachine(_0x81e9x26, _0x81e9x15a.y, _0x81e9x28);
			if (_0x81e9x173) {
				_0x81e9x49c.push(_0x81e9x173)
			};
			if (_0x81e9x49c.length > 1) {
				break
			}
		};
		if (_0x81e9x49c.length > 1) {
			return _0x81e9x49c
		}
	};
	this.getDropByBlendId = function(_0x81e9x10) {
		var _0x81e9x159 = (Math.random() * 2 + _0x81e9x10);
		if (_0x81e9x159 < 0.04) {
			return [264, 1, 0]
		};
		if (_0x81e9x159 < 0.12) {
			return [item_uranium, 1, 0]
		};
		if (_0x81e9x159 < 0.24) {
			return [318, 1, 0]
		};
		if (_0x81e9x159 < 2 && _0x81e9x10 == 0) {
			return [49, 1, 0]
		};
		if (_0x81e9x159 < 2.8 && _0x81e9x10 == 0) {
			return [4, 1, 0]
		};
		if (_0x81e9x159 < 1.5 && _0x81e9x10 == 1) {
			return [353, 1, 0]
		};
		if (_0x81e9x159 < 2 && _0x81e9x10 == 1) {
			return [351, 1, 7]
		};
		if (_0x81e9x159 < 2.8) {
			return [351, 1, 15]
		};
		if (_0x81e9x159 < 3.4) {
			return [289, 1, 0]
		};
		return [4, 1, 0]
	}
}

function MachineMacerator() {
	this.parent = MachineBase;
	this.parent();
	this.id = block_macerator;
	this.MaxEnergyInput = 32;
	this.isUsingEnergy = function() {
		return true
	};
	this.getMachineName = function() {
		return "macerator"
	};
	this.getMaxEnergyStored = function() {
		return 2000
	};
	this.getContainerId = function() {
		return 2
	};
	this.getHelpGuideLink = function(_0x81e9x2bc) {
		return {
			chapter: "macerator"
		}
	};
	this.wrenchClick = function(_0x81e9x15a) {
		var _0x81e9x44b = 3 * Math.pow(3, _0x81e9x15a.overclockers);
		var _0x81e9x442 = "";
		if (_0x81e9x15a.progress) {
			_0x81e9x442 = ChatColor.GREEN + "progress " + parseInt(_0x81e9x15a.progress / 4) + "%"
		};
		if (_0x81e9x44b > this.getEnergyStored(_0x81e9x15a) && _0x81e9x15a.progress) {
			_0x81e9x442 = ChatColor.RED + "no energy"
		};
		if (_0x81e9x442) {
			ModPE.showTipMessage(_0x81e9x442)
		}
	};
	this.updateMachine = function(_0x81e9x15a) {
		this.showProgress(_0x81e9x15a);
		if (_0x81e9x15a.progress == 2) {
			this.playSound(_0x81e9x15a, "Machines/MaceratorOp.ogg")
		};
		if (!_0x81e9x15a.overclockers) {
			_0x81e9x15a.overclockers = 0
		};
		if (_0x81e9x15a.progress > 0) {
			var _0x81e9x47c = 3 * Math.pow(3, _0x81e9x15a.overclockers);
			var _0x81e9x47d = Math.pow(2, _0x81e9x15a.overclockers);
			if (this.getEnergyStored(_0x81e9x15a) < _0x81e9x47c) {
				return
			};
			if (_0x81e9x15a.progress < 400) {
				_0x81e9x15a.energyStored -= _0x81e9x47c;
				_0x81e9x15a.progress += _0x81e9x47d
			};
			if (_0x81e9x15a.progress >= 400) {
				if (this.provideRecipe(_0x81e9x15a)) {
					_0x81e9x15a.progress = 0
				}
			}
		};
		var _0x81e9x1bd = getTime();
		if ((_0x81e9x1bd + _0x81e9x15a.x * 1551 + _0x81e9x15a.z * 578) % 40 != 0) {
			return
		};
		if (!_0x81e9x15a.progress) {
			_0x81e9x15a.progress = 0
		};
		var _0x81e9x47e = this.checkHasMaterial(_0x81e9x15a);
		if (!_0x81e9x47e) {
			if (_0x81e9x15a.progress > 0) {
				this.playSound(_0x81e9x15a, "Machines/InterruptOne.ogg")
			};
			_0x81e9x15a.progress = 0;
			return
		};
		if (_0x81e9x15a.progress < 1) {
			_0x81e9x15a.progress = 1
		};
		_0x81e9x15a.overclockers = this.getUpgrades(_0x81e9x15a)
	};
	this.checkHasMaterial = function(_0x81e9x15a) {
		var _0x81e9x10 = this.getContainer(_0x81e9x15a).getSlot(0).id;
		for (var i in Macerator_recipes) {
			if (Macerator_recipes[i][0] == _0x81e9x10) {
				return true
			}
		};
		return false
	};
	this.provideRecipe = function(_0x81e9x15a) {
		var _0x81e9x194 = this.getContainer(_0x81e9x15a);
		var _0x81e9x480 = Macerator_recipes;
		var _0x81e9x481 = _0x81e9x194.getSlot(0);
		var _0x81e9x467 = _0x81e9x194.getSlot(1);
		for (var _0x81e9x159 in _0x81e9x480) {
			var _0x81e9x15f = _0x81e9x480[_0x81e9x159][0];
			var _0x81e9x443 = _0x81e9x480[_0x81e9x159][1];
			var _0x81e9x13 = _0x81e9x480[_0x81e9x159][2];
			if (_0x81e9x481.id == _0x81e9x15f && (_0x81e9x467.id == _0x81e9x443 || _0x81e9x467.id == 0) && _0x81e9x467.count + _0x81e9x13 <= 64) {
				_0x81e9x467.id = _0x81e9x443;
				_0x81e9x467.count += _0x81e9x13;
				_0x81e9x481.count--;
				if (!_0x81e9x481.count) {
					_0x81e9x481.id = 0
				};
				return true
			}
		};
		return false
	};
	this.save = function(_0x81e9x17, _0x81e9x15a) {
		DataSaver.Save(_0x81e9x17 + "prs", _0x81e9x15a.progress)
	};
	this.read = function(_0x81e9x17, _0x81e9x15a) {
		_0x81e9x15a.progress = DataSaver.ReadNumber(_0x81e9x17 + "prs")
	};
	this.getUpgrades = function(_0x81e9x15a) {
		var _0x81e9x347 = this.getContainer(_0x81e9x15a).getSlot(2);
		if (_0x81e9x347.id == item_overclocker_upgrade) {
			return _0x81e9x347.count
		};
		return 0
	};
	this.showProgress = function(_0x81e9x15a) {
		this.getContainer(_0x81e9x15a).setProgressBar(_0x81e9x15a.progress / 400)
	}
}
var MagmaCrucible_MaterialList = ValidateIDData({
	1: {
		liq: 10,
		vol: 1,
		temp: 300,
		Q: 400
	},
	4: {
		liq: 10,
		vol: 1,
		temp: 300,
		Q: 400
	},
	87: {
		liq: 10,
		vol: 1.25,
		temp: 600,
		Q: 600,
		item: [331, 1, 0, 0.5]
	},
	item_uu_matter: {
		liq: 7,
		vol: 1.01,
		temp: 950,
		Q: 1000,
		item: [item_scrab, 1, 0, 1]
	}
});

function MachineHeater() {
	this.parent = MachineBase;
	this.parent();
	this.id = block_heater;
	this.MaxEnergyInput = 128;
	this.progress_per_tick = 0.0025;
	this.isUsingEnergy = function() {
		return true
	};
	this.getMaxEnergyStored = function() {
		return 10000
	};
	this.getMachineName = function() {
		return "magma crucible"
	};
	this.getHelpGuideLink = function(_0x81e9x2bc) {
		return {
			chapter: "liquid-working mech",
			page: 1
		}
	};
	this.wrenchClick = function(_0x81e9x15a) {
		ModPE.showTipMessage("temp: " + _0x81e9x15a.heat + "C")
	};
	this.getInfo = function(_0x81e9x15a) {
		return "temp: " + _0x81e9x15a.heat + "°C"
	};
	this.getContainerId = function() {
		return 18
	};
	this.updateMachine = function(_0x81e9x15a) {
		if (!_0x81e9x15a.heat) {
			_0x81e9x15a.heat = 0
		};
		if (!_0x81e9x15a.volume) {
			_0x81e9x15a.volume = 0
		};
		if (!_0x81e9x15a.liquid || _0x81e9x15a.volume <= 0) {
			_0x81e9x15a.liquid = 0
		};
		if (!_0x81e9x15a.progress) {
			_0x81e9x15a.progress = 0
		};
		if (_0x81e9x15a.heat < 1000 && _0x81e9x15a.energyStored > 6) {
			_0x81e9x15a.heat++;
			_0x81e9x15a.energyStored -= 6
		};
		var _0x81e9x194 = this.getContainer(_0x81e9x15a);
		_0x81e9x194.setLiquidBar(_0x81e9x15a.volume / 16, _0x81e9x15a.liquid);
		_0x81e9x194.setProgressBar(_0x81e9x15a.progress);
		_0x81e9x194.setCustomBar(0x01, _0x81e9x15a.heat / 1000);
		if (_0x81e9x15a.cur_res) {
			_0x81e9x194.setCustomBar(0x02, _0x81e9x15a.cur_res.temp / 1000)
		} else {
			_0x81e9x194.setCustomBar(0x02, 0)
		};
		var _0x81e9x481 = _0x81e9x194.getSlot(0);
		if (!_0x81e9x15a.cur_res) {
			_0x81e9x15a.progress = 0
		};
		if (_0x81e9x15a.progress > 0 && _0x81e9x15a.heat >= _0x81e9x15a.cur_res.temp) {
			_0x81e9x15a.progress += 1 / _0x81e9x15a.cur_res.Q;
			_0x81e9x15a.volume += (1 / _0x81e9x15a.cur_res.Q) * _0x81e9x15a.cur_res.vol;
			_0x81e9x15a.liquid = _0x81e9x15a.cur_res.liq;
			_0x81e9x15a.heat--
		};
		if (_0x81e9x15a.progress > 1) {
			_0x81e9x15a.progress = 0;
			this.putResult(_0x81e9x15a);
			_0x81e9x15a.cur_res = null
		};
		if (_0x81e9x15a.progress == 0) {
			var _0x81e9x443 = MagmaCrucible_MaterialList[_0x81e9x481.id];
			if (_0x81e9x443 && (_0x81e9x443.liq == _0x81e9x15a.liquid || _0x81e9x15a.liquid == 0)) {
				_0x81e9x15a.cur_res = _0x81e9x443;
				_0x81e9x15a.cur_res_id = _0x81e9x481.id;
				_0x81e9x15a.progress = 0.001;
				_0x81e9x481.count--;
				if (_0x81e9x481.count < 1) {
					_0x81e9x481.id = _0x81e9x481.data = 0
				}
			}
		};
		if (getTime() % 20 == 0 && _0x81e9x15a.volume >= 1 && getTile(_0x81e9x15a.x, _0x81e9x15a.y + 1, _0x81e9x15a.z) == block_barrel) {
			var _0x81e9x216 = getMachine(_0x81e9x15a.x, _0x81e9x15a.y + 1, _0x81e9x15a.z);
			if (_0x81e9x216.volume <= 15 && _0x81e9x216.liquid == _0x81e9x15a.liquid || _0x81e9x216.liquid == 0) {
				_0x81e9x15a.volume--;
				_0x81e9x216.volume++;
				_0x81e9x216.liquid = _0x81e9x15a.liquid
			}
		}
	};
	this.putResult = function(_0x81e9x15a) {
		if (_0x81e9x15a.cur_res.item && _0x81e9x15a.cur_res.item[3] > Math.random()) {
			var _0x81e9x194 = this.getContainer(_0x81e9x15a);
			var _0x81e9x5b = _0x81e9x194.getSlot(1);
			if (_0x81e9x5b.id == 0 || _0x81e9x5b.id == _0x81e9x15a.cur_res.item[0] && _0x81e9x5b.data == _0x81e9x15a.cur_res.item[2]) {
				_0x81e9x5b.id = _0x81e9x15a.cur_res.item[0];
				_0x81e9x5b.data = _0x81e9x15a.cur_res.item[2];
				_0x81e9x5b.count = Math.min(64, _0x81e9x5b.count + _0x81e9x15a.cur_res.item[1])
			}
		}
	};
	this.save = function(_0x81e9x17, _0x81e9x15a) {
		DataSaver.Save(_0x81e9x17 + "heat", _0x81e9x15a.heat);
		DataSaver.Save(_0x81e9x17 + "liquid", _0x81e9x15a.liquid);
		DataSaver.Save(_0x81e9x17 + "volume", _0x81e9x15a.volume);
		DataSaver.Save(_0x81e9x17 + "progress", _0x81e9x15a.progress);
		DataSaver.Save(_0x81e9x17 + "itemID", _0x81e9x15a.cur_res_id)
	};
	this.read = function(_0x81e9x17, _0x81e9x15a) {
		_0x81e9x15a.heat = DataSaver.ReadFloat(_0x81e9x17 + "heat");
		_0x81e9x15a.liquid = DataSaver.ReadNumber(_0x81e9x17 + "liquid");
		_0x81e9x15a.volume = DataSaver.ReadFloat(_0x81e9x17 + "volume");
		_0x81e9x15a.progress = DataSaver.ReadFloat(_0x81e9x17 + "progress");
		_0x81e9x15a.cur_res_id = DataSaver.ReadNumber(_0x81e9x17 + "itemID");
		_0x81e9x15a.cur_res = MagmaCrucible_MaterialList[_0x81e9x15a.cur_res_id]
	};
	this.isUsingLiquid = function() {
		return true
	};
	this.getMaxVolume = function() {
		return 0
	};
	this.getLiquidType = function(_0x81e9x2bc) {
		return _0x81e9x2bc.liquid
	}
}
var singler_uumatter_energy_use = 1000000;

function MachineMassFabricator() {
	this.parent = MachineBase;
	this.parent();
	this.id = block_mass_fabricator;
	this.isUsingEnergy = function() {
		return true
	};
	this.getMachineName = function() {
		return "mass fabricator"
	};
	this.getHelpGuideLink = function(_0x81e9x2bc) {
		return {
			chapter: "uu-matter",
			page: 1
		}
	};
	this.getMaxEnergyStored = function() {
		return 1000
	};
	this.getContainerId = function() {
		return 3
	};
	this.updateMachine = function(_0x81e9x15a) {
		if (!_0x81e9x15a.volume) {
			_0x81e9x15a.volume = 0
		};
		if (!_0x81e9x15a.ctls || _0x81e9x15a.ctls < 0) {
			_0x81e9x15a.ctls = 0
		};
		this.getEnergyStored(_0x81e9x15a);
		var _0x81e9x1bd = getTime();
		if (_0x81e9x1bd % 15 == 0 && _0x81e9x15a.needSound) {
			this.playSound(_0x81e9x15a, "Generators/MassFabricator/MassFabScrapSolo.ogg");
			_0x81e9x15a.needSound = false
		};
		if (_0x81e9x15a.volume < 1) {
			if (_0x81e9x15a.ctls == 0) {
				_0x81e9x15a.volume += _0x81e9x15a.energyStored / singler_uumatter_energy_use
			} else {
				_0x81e9x15a.volume += _0x81e9x15a.energyStored * 30 / singler_uumatter_energy_use;
				_0x81e9x15a.ctls -= _0x81e9x15a.energyStored / 250
			};
			if (_0x81e9x15a.energyStored > 0) {
				_0x81e9x15a.needSound = true
			};
			_0x81e9x15a.energyStored = 0
		};
		var _0x81e9x194 = this.getContainer(_0x81e9x15a);
		_0x81e9x194.setLiquidBar(_0x81e9x15a.volume, 7, 1);
		if (_0x81e9x1bd % 20 == 0) {
			var _0x81e9x4a2 = _0x81e9x194.getSlot(0);
			if (_0x81e9x4a2.id == item_scrab && _0x81e9x15a.ctls == 0) {
				_0x81e9x15a.ctls = 4;
				_0x81e9x4a2.count--;
				if (_0x81e9x4a2.count == 0) {
					_0x81e9x4a2.id = 0
				}
			};
			if (_0x81e9x4a2.id == item_scrab_box && _0x81e9x15a.ctls == 0) {
				_0x81e9x15a.ctls = 36;
				_0x81e9x4a2.count--;
				if (_0x81e9x4a2.count == 0) {
					_0x81e9x4a2.id = 0
				}
			};
			if (_0x81e9x15a.volume >= 1) {
				var _0x81e9x216 = getMachine(_0x81e9x15a.x, _0x81e9x15a.y + 1, _0x81e9x15a.z);
				if (_0x81e9x216 && (_0x81e9x216.liquid == 7 || _0x81e9x216.liquid == 0) && _0x81e9x216.volume <= 15) {
					_0x81e9x216.liquid = 7;
					_0x81e9x216.volume++;
					_0x81e9x15a.volume = 0
				};
				if (IsEmptyLiquidItem(_0x81e9x4a2.id, _0x81e9x4a2.data)) {
					var _0x81e9x472 = GetFullItem(_0x81e9x4a2.id, _0x81e9x4a2.data, 7);
					if (_0x81e9x472) {
						_0x81e9x4a2.id = _0x81e9x472[0];
						_0x81e9x4a2.count = 1;
						_0x81e9x4a2.data = _0x81e9x472[1];
						_0x81e9x15a.volume = 0
					}
				}
			}
		}
	};
	this.wrenchClick = function(_0x81e9x15a) {
		clientMessage("uu-matter progress: " + Math.floor(_0x81e9x15a.volume * 1000) / 10 + "%")
	};
	this.save = function(_0x81e9x17, _0x81e9x15a) {
		DataSaver.Save(_0x81e9x17 + "mass", _0x81e9x15a.volume);
		DataSaver.Save(_0x81e9x17 + "ctls", _0x81e9x15a.ctls)
	};
	this.getInfo = function(_0x81e9x15a) {
		return "progress " + Math.floor(_0x81e9x15a.volume * 1000) / 10 + "%"
	};
	this.read = function(_0x81e9x17, _0x81e9x15a) {
		_0x81e9x15a.volume = DataSaver.ReadFloat(_0x81e9x17 + "mass");
		_0x81e9x15a.ctls = DataSaver.ReadFloat(_0x81e9x17 + "ctls")
	};
	this.isUsingLiquid = function() {
		return true
	};
	this.getMaxVolume = function() {
		return 0
	};
	this.getLiquidType = function(_0x81e9x2bc) {
		return 7
	}
}

function MachineNuclearBomb() {
	this.parent = MachineBase;
	this.parent();
	this.id = block_nuclear_bomb;
	this.tickInMainThread = function() {
		return true
	};
	this.isUsingEnergy = function() {
		return true
	};
	this.getMaxEnergyStored = function() {
		return 100
	};
	this.getMachineName = function() {
		return "nuke"
	};
	this.updateMachine = function(_0x81e9x15a) {
		if (this.getEnergyStored(_0x81e9x15a) < 100) {
			this.setTextAnimation(_0x81e9x15a, 0, 0, Math.sin(globalWorldTime * 0.1) * 0.2 + 0.5, 0, ChatColor.DARK_RED + ChatColor.BOLD + "no energy");
			return
		};
		if (!_0x81e9x15a.timer) {
			_0x81e9x15a.timer = 600
		};
		if (_0x81e9x15a.timer == 1) {
			if (this.isKeepingLoaded(_0x81e9x15a)) {
				this.explode(_0x81e9x15a)
			} else {
				ModPE.showTipMessage(ChatColor.RED + ChatColor.BOLD + "keep chunks around nuke loaded!");
				return
			}
		} else {
			_0x81e9x15a.timer--
		};
		ModPE.showTipMessage(ChatColor.YELLOW + "explosion in " + parseInt(_0x81e9x15a.timer / 20) + "s");
		this.setTextAnimation(_0x81e9x15a, 0, 0, Math.sin(globalWorldTime * 0.1) * 0.2 + 0.5, 0, ChatColor.GOLD + ChatColor.BOLD + parseInt(_0x81e9x15a.timer / 20))
	};
	this.explode = function(_0x81e9x15a) {
		_0x81e9x15a.energyStored = 0;
		_0x81e9x15a.timer = 0;
		print("exploding... wait a second");
		var _0x81e9x1c2 = 40;
		for (var _0x81e9x38a = -_0x81e9x1c2; _0x81e9x38a <= _0x81e9x1c2; _0x81e9x38a++) {
			for (var _0x81e9x38b = -_0x81e9x1c2; _0x81e9x38b <= _0x81e9x1c2; _0x81e9x38b++) {
				var _0x81e9x15b = Math.sqrt(_0x81e9x38a * _0x81e9x38a + _0x81e9x38b * _0x81e9x38b);
				if (_0x81e9x15b > _0x81e9x1c2) {
					continue
				};
				var _0x81e9x175 = (1 - _0x81e9x15b / _0x81e9x1c2 * _0x81e9x15b / _0x81e9x1c2) * 15;
				for (var _0x81e9x384 = -_0x81e9x175; _0x81e9x384 <= _0x81e9x175 * 1.5; _0x81e9x384++) {
					var _0x81e9x10 = 0;
					if (_0x81e9x15a.y + _0x81e9x384 < 4) {
						_0x81e9x10 = getTile(_0x81e9x15a.x + _0x81e9x38a, _0x81e9x15a.y + _0x81e9x384, _0x81e9x15a.z + _0x81e9x38b)
					};
					var _0x81e9x4a4 = 0;
					if (_0x81e9x10 != 7) {
						setTile(_0x81e9x15a.x + _0x81e9x38a, _0x81e9x15a.y + _0x81e9x384, _0x81e9x15a.z + _0x81e9x38b, _0x81e9x4a4)
					};
					if (_0x81e9x10 == this.id) {
						this.explode(new Coords(_0x81e9x15a.x + _0x81e9x38a, _0x81e9x15a.y + _0x81e9x384, _0x81e9x15a.z + _0x81e9x38b))
					}
				}
			}
		};
		EntityHashData[1024] = [getPlayerEnt()];
		for (var _0x81e9x44b in EntityHashData) {
			for (var _0x81e9x4a5 in EntityHashData[_0x81e9x44b]) {
				var _0x81e9x38 = EntityHashData[_0x81e9x44b][_0x81e9x4a5];
				var _0x81e9x1b0 = Entity.getX(_0x81e9x38) - _0x81e9x15a.x;
				var _0x81e9x1b2 = Entity.getZ(_0x81e9x38) - _0x81e9x15a.z;
				if (Math.sqrt(_0x81e9x1b0 * _0x81e9x1b0 + _0x81e9x1b2 * _0x81e9x1b2) > 50) {
					continue
				};
				Entity.setVelY(_0x81e9x38, 2);
				Entity.setFireTicks(_0x81e9x38, 999)
			}
		};
		EntityHashData[1024] = [];
		AnimateNuclearExplosion(_0x81e9x15a.x, Math.max(2, _0x81e9x15a.y - 10), _0x81e9x15a.z, 2.2);
		removeMachine(_0x81e9x15a.x, _0x81e9x15a.y, _0x81e9x15a.z)
	};
	this.isKeepingLoaded = function(_0x81e9x15a) {
		for (var _0x81e9x39a = -3; _0x81e9x39a < 4; _0x81e9x39a++) {
			for (var _0x81e9x39b = -3; _0x81e9x39b < 4; _0x81e9x39b++) {
				var _0x81e9x4a6 = parseInt(_0x81e9x15a.x / 16 + _0x81e9x39a) * 16 + 8;
				var _0x81e9x4a7 = parseInt(_0x81e9x15a.z / 16 + _0x81e9x39b) * 16 + 8;
				if (getTile(_0x81e9x4a6, 0, _0x81e9x4a7) == 0) {
					return false
				}
			}
		};
		return true
	}
}

function MachineGrowthAccelerator() {
	this.parent = MachineBase;
	this.parent();
	this.id = block_growth_accelerator;
	this.tickInMainThread = function() {
		return true
	};
	this.getMachineName = function() {
		return "growth accelerator"
	};
	this.updateMachine = function(_0x81e9x15a) {
		if (getTime() % 10 == 0) {
			var _0x81e9x3aa = (getTime() / 10) % 121;
			var _0x81e9x4a9 = _0x81e9x15a.x - 5 + Math.floor(_0x81e9x3aa / 11);
			var _0x81e9x4aa = _0x81e9x15a.z - 5 + Math.floor(_0x81e9x3aa % 11);
			var _0x81e9x4ab = getTile(_0x81e9x15a.x, _0x81e9x15a.y + 1, _0x81e9x15a.z);
			if (_0x81e9x4ab != block_barrel) {
				return
			};
			var _0x81e9x216 = getMachine(_0x81e9x15a.x, _0x81e9x15a.y + 1, _0x81e9x15a.z);
			if (!_0x81e9x216 || _0x81e9x216.liquid != 8) {
				return
			};
			for (var _0x81e9x4ac = _0x81e9x15a.y - 1; _0x81e9x4ac < _0x81e9x15a.y + 2; _0x81e9x4ac++) {
				if (this.tryAccelerate(_0x81e9x4a9, _0x81e9x4ac, _0x81e9x4aa)) {
					_0x81e9x216.volume--;
					break
				}
			}
		}
	};
	this.tryAccelerate = function(_0x81e9x26, _0x81e9x27, _0x81e9x28) {
		var _0x81e9x1a8 = [59, 104, 105, 141, 142, 244];
		var _0x81e9x1b = getTile(_0x81e9x26, _0x81e9x27, _0x81e9x28);
		for (var i in _0x81e9x1a8) {
			if (_0x81e9x1b != _0x81e9x1a8[i]) {
				continue
			};
			var _0x81e9x16 = Level.getData(_0x81e9x26, _0x81e9x27, _0x81e9x28);
			if (_0x81e9x16 < 7) {
				setTile(_0x81e9x26, _0x81e9x27, _0x81e9x28, _0x81e9x1b, _0x81e9x16 + 1)
			};
			return true
		}
	}
}

function MachinePump() {
	this.parent = MachineBase;
	this.parent();
	this.id = block_pump;
	this.tickInMainThread = function() {
		return true
	};
	this.getMachineName = function() {
		return "pump"
	};
	this.isUsingEnergy = function() {
		return true
	};
	this.updateMachine = function(_0x81e9x15a) {
		if (getTime() % 20 == 0 && this.getEnergyStored(_0x81e9x15a) > 50) {
			if (isMachine(getTile(_0x81e9x15a.x, _0x81e9x15a.y - 1, _0x81e9x15a.z))) {
				var _0x81e9x204 = getLiquidTypeAtCoords(_0x81e9x15a.x, _0x81e9x15a.y - 1, _0x81e9x15a.z);
				if (_0x81e9x204 != 0 && this.sendLiquidBucket(_0x81e9x15a, _0x81e9x204)) {
					pullBucketOfLiquid(_0x81e9x15a.x, _0x81e9x15a.y - 1, _0x81e9x15a.z);
					_0x81e9x15a.energyStored -= 50;
					this.playSound(_0x81e9x15a, "Tools/Treetap.ogg")
				};
				return
			};
			var _0x81e9x2c0 = this.getPumpingCoords(_0x81e9x15a);
			if (_0x81e9x2c0 == null) {
				return
			};
			var _0x81e9x204 = getLiquidTypeAtCoords(_0x81e9x2c0.x, _0x81e9x2c0.y, _0x81e9x2c0.z);
			if (!_0x81e9x204) {
				return
			};
			if (this.sendLiquidBucket(_0x81e9x15a, _0x81e9x204)) {
				pullBucketOfLiquid(_0x81e9x2c0.x, _0x81e9x2c0.y, _0x81e9x2c0.z);
				updateNearbyOil(_0x81e9x2c0.x, _0x81e9x2c0.y, _0x81e9x2c0.z);
				_0x81e9x15a.energyStored -= 50;
				this.playSound(_0x81e9x15a, "Tools/Treetap.ogg")
			}
		}
	};
	this.getMaxEnergyStored = function() {
		return 200
	};
	this.sendLiquidBucket = function(_0x81e9x15a, _0x81e9x204) {
		if (!_0x81e9x15a.pipeUpdated_ || !_0x81e9x15a.pipeConnections) {
			RebuildPipeConnections(_0x81e9x15a);
			_0x81e9x15a.pipeUpdated_ = true;
			_0x81e9x15a.receiverUpdated_ = false
		};
		if (!_0x81e9x15a.receiverUpdated_ || !_0x81e9x15a.rData) {
			this.rebuildReceiverData(_0x81e9x15a);
			_0x81e9x15a.receiverUpdated_ = true
		};
		var i = parseInt(Math.random() * _0x81e9x15a.rData.length);
		var _0x81e9x3dc = 0;
		while (true) {
			var _0x81e9x173 = _0x81e9x15a.rData[i];
			if (barrel_addBucket(_0x81e9x173, _0x81e9x204)) {
				AnimateLiquidInPipe(_0x81e9x173.pump_path, _0x81e9x204);
				return true
			};
			i = (i + 1) % _0x81e9x15a.rData.length;
			if (_0x81e9x3dc++ > _0x81e9x15a.rData.length) {
				break
			}
		};
		if (getTile(_0x81e9x15a.x, _0x81e9x15a.y + 1, _0x81e9x15a.z) == block_barrel) {
			var _0x81e9x173 = getMachine(_0x81e9x15a.x, _0x81e9x15a.y + 1, _0x81e9x15a.z);
			if (_0x81e9x173) {
				return barrel_addBucket(_0x81e9x173, _0x81e9x204)
			}
		};
		return false
	};
	this.recive = function(_0x81e9x26, _0x81e9x27, _0x81e9x28, _0x81e9x1a7) {
		var _0x81e9x2c0 = [
			[_0x81e9x26 + 1, _0x81e9x27, _0x81e9x28],
			[_0x81e9x26 - 1, _0x81e9x27, _0x81e9x28],
			[_0x81e9x26, _0x81e9x27 + 1, _0x81e9x28],
			[_0x81e9x26, _0x81e9x27 - 1, _0x81e9x28],
			[_0x81e9x26, _0x81e9x27, _0x81e9x28 + 1],
			[_0x81e9x26, _0x81e9x27, _0x81e9x28 - 1]
		];
		for (var i in _0x81e9x2c0) {
			var _0x81e9x39a = _0x81e9x2c0[i][0];
			var _0x81e9x449 = _0x81e9x2c0[i][1];
			var _0x81e9x39b = _0x81e9x2c0[i][2];
			var _0x81e9x10 = getTile(_0x81e9x39a, _0x81e9x449, _0x81e9x39b);
			if (_0x81e9x10 != block_barrel) {
				continue
			};
			var _0x81e9x173 = getMachine(_0x81e9x39a, _0x81e9x449, _0x81e9x39b);
			if (_0x81e9x173) {
				if (barrel_addBucket(_0x81e9x173, _0x81e9x1a7)) {
					return true
				}
			}
		}
	};
	this.getLiquid = function(_0x81e9x15a) {
		var _0x81e9x173 = getTile(_0x81e9x15a.x, _0x81e9x15a.y - 1, _0x81e9x15a.z);
		var _0x81e9x15b = Level.getData(_0x81e9x15a.x, _0x81e9x15a.y - 1, _0x81e9x15a.z);
		if (_0x81e9x15b != 0) {
			return 0
		};
		if (_0x81e9x173 == 8 || _0x81e9x173 == 9) {
			Level.destroyBlock(_0x81e9x15a.x, _0x81e9x15a.y - 1, _0x81e9x15a.z);
			return 8
		};
		if (_0x81e9x173 == 10 || _0x81e9x173 == 11) {
			Level.destroyBlock(_0x81e9x15a.x, _0x81e9x15a.y - 1, _0x81e9x15a.z);
			return 10
		}
	};
	this.rebuildReceiverData = function(_0x81e9x15a) {
		_0x81e9x15a.rData = [];
		for (var _0x81e9x9 in _0x81e9x15a.pipeConnections) {
			var _0x81e9x16 = _0x81e9x15a.pipeConnections[_0x81e9x9];
			var _0x81e9x2c0 = _0x81e9x16.dst;
			var _0x81e9x2bc = getMachine(_0x81e9x2c0.x, _0x81e9x2c0.y, _0x81e9x2c0.z);
			if (_0x81e9x2bc) {
				var _0x81e9x158 = getMachineType(_0x81e9x2bc);
				if (_0x81e9x158.isUsingLiquid() && _0x81e9x158.getMaxVolume()) {
					_0x81e9x2bc.pump_path = _0x81e9x16.path;
					if (_0x81e9x2bc) {
						_0x81e9x15a.rData.push(_0x81e9x2bc)
					}
				}
			}
		}
	};
	this.getPumpingCoords = function(_0x81e9x15a) {
		var _0x81e9x26 = _0x81e9x15a.x;
		var _0x81e9x27 = _0x81e9x15a.y - 1;
		var _0x81e9x28 = _0x81e9x15a.z;
		while (getTile(_0x81e9x26, _0x81e9x27, _0x81e9x28) == 0 && _0x81e9x27 > 0) {
			_0x81e9x27--
		};
		var _0x81e9x193 = getTile(_0x81e9x26, _0x81e9x27, _0x81e9x28);
		var _0x81e9x2c0 = this.getCoordsForLevel(_0x81e9x26, _0x81e9x27, _0x81e9x28);
		return _0x81e9x2c0
	};
	this.getCoordsForLevel = function(_0x81e9x26, _0x81e9x27, _0x81e9x28, _0x81e9x16, _0x81e9x279, _0x81e9x4ae) {
		if (!_0x81e9x279) {
			_0x81e9x279 = []
		};
		if (!_0x81e9x4ae) {
			_0x81e9x4ae = 0
		};
		var _0x81e9x163 = _0x81e9x26 + "#" + _0x81e9x27 + "#" + _0x81e9x28;
		if (_0x81e9x279[_0x81e9x163]) {
			return null
		};
		_0x81e9x279[_0x81e9x163] = true;
		_0x81e9x4ae++;
		if (!_0x81e9x16) {
			_0x81e9x16 = 9
		};
		var _0x81e9x193 = getTile(_0x81e9x26, _0x81e9x27, _0x81e9x28);
		var _0x81e9x1a = Level.getData(_0x81e9x26, _0x81e9x27, _0x81e9x28);
		if (_0x81e9x1a >= _0x81e9x16) {
			return null
		};
		var _0x81e9x4af = null;
		if (this.isLiquidSource(_0x81e9x193, _0x81e9x1a)) {
			_0x81e9x4af = new Coords(_0x81e9x26, _0x81e9x27, _0x81e9x28);
			_0x81e9x16 = 9
		};
		if (!this.isLiquidFlow(_0x81e9x193, _0x81e9x1a) && !_0x81e9x4af) {
			return _0x81e9x4af
		};
		if (_0x81e9x4ae > 32) {
			return _0x81e9x4af
		};
		var _0x81e9x497 = [
			[_0x81e9x26 + 1, _0x81e9x27, _0x81e9x28],
			[_0x81e9x26 - 1, _0x81e9x27, _0x81e9x28],
			[_0x81e9x26, _0x81e9x27, _0x81e9x28 + 1],
			[_0x81e9x26, _0x81e9x27, _0x81e9x28 - 1],
			[_0x81e9x26, _0x81e9x27 - 1, _0x81e9x28],
			[_0x81e9x26, _0x81e9x27 + 1, _0x81e9x28]
		];
		for (var _0x81e9x1c8 in _0x81e9x497) {
			var _0x81e9x45b = this.getCoordsForLevel(_0x81e9x497[_0x81e9x1c8][0], _0x81e9x497[_0x81e9x1c8][1], _0x81e9x497[_0x81e9x1c8][2], _0x81e9x1a, _0x81e9x279, _0x81e9x4ae);
			if (_0x81e9x45b != null) {
				return _0x81e9x45b
			}
		};
		return _0x81e9x4af
	};
	this.isLiquidSource = function(_0x81e9x10, _0x81e9x16) {
		return ((_0x81e9x10 == 8 || _0x81e9x10 == 9 || _0x81e9x10 == 10 || _0x81e9x10 == 11) && _0x81e9x16 == 0) || (_0x81e9x10 == block_oil)
	};
	this.isLiquidFlow = function(_0x81e9x10, _0x81e9x16) {
		return ((_0x81e9x10 == 8 || _0x81e9x10 == 9 || _0x81e9x10 == 10 || _0x81e9x10 == 11) && _0x81e9x16 > 0) || (_0x81e9x10 == block_oil2)
	};
	this.isLiquidFall = function(_0x81e9x10, _0x81e9x16) {
		return ((_0x81e9x10 == 8 || _0x81e9x10 == 9 || _0x81e9x10 == 10 || _0x81e9x10 == 11) && _0x81e9x16 == 8) || (_0x81e9x10 == block_oil2 && _0x81e9x16 == 0)
	}
}

function MachineReplicator() {
	this.parent = MachineBase;
	this.parent();
	this.id = block_replicator;
	this.MaxEnergyInput = 512;
	this.getHelpGuideLink = function(_0x81e9x2bc) {
		return {
			chapter: "uu-matter",
			page: 2
		}
	};
	this.getContainerId = function() {
		return 0
	};
	this.isUsingEnergy = function() {
		return true
	};
	this.getMaxEnergyStored = function() {
		return 2000
	};
	this.updateMachine = function(_0x81e9x15a) {
		if (!_0x81e9x15a.progress) {
			_0x81e9x15a.progress = 0
		};
		var _0x81e9x194 = this.getContainer(_0x81e9x15a);
		var _0x81e9x481 = _0x81e9x194.getSlot(0);
		var _0x81e9x467 = _0x81e9x194.getSlot(1);
		_0x81e9x194.setProgressBar(_0x81e9x15a.progress / 1024);
		if (_0x81e9x15a.progress == 0 && getTime() % 40 == 0) {
			if (_0x81e9x481.id == item_scrab) {
				var _0x81e9x193 = getTile(_0x81e9x15a.x, _0x81e9x15a.y - 1, _0x81e9x15a.z);
				var _0x81e9x216 = getMachine(_0x81e9x15a.x, _0x81e9x15a.y - 1, _0x81e9x15a.z);
				if (_0x81e9x216 && _0x81e9x193 == block_barrel && _0x81e9x216.liquid == 7 && _0x81e9x216.volume >= 1) {
					_0x81e9x216.volume--;
					_0x81e9x15a.progress = 1;
					_0x81e9x481.count--;
					if (_0x81e9x481.count == 0) {
						_0x81e9x481.id = 0
					}
				}
			}
		};
		if (_0x81e9x15a.progress >= 1024) {
			if ((_0x81e9x467.id == item_uu_matter || _0x81e9x467.id == 0) && _0x81e9x467.count < 64) {
				_0x81e9x15a.progress = 0;
				_0x81e9x467.id = item_uu_matter;
				_0x81e9x467.count++
			}
		} else {
			if (_0x81e9x15a.progress > 0) {
				if (this.getEnergyStored(_0x81e9x15a) >= 8) {
					_0x81e9x15a.energyStored -= 8;
					_0x81e9x15a.progress++
				}
			}
		}
	};
	this.save = function(_0x81e9x17, _0x81e9x15a) {
		DataSaver.Save(_0x81e9x17 + "prs", _0x81e9x15a.progress)
	};
	this.read = function(_0x81e9x17, _0x81e9x15a) {
		_0x81e9x15a.progress = DataSaver.ReadNumber(_0x81e9x17 + "prs")
	};
	this.getMachineName = function() {
		return "replicator"
	}
}

function MachineRecycler() {
	this.parent = MachineBase;
	this.parent();
	this.id = block_recycler;
	this.isUsingEnergy = function() {
		return true
	};
	this.getMachineName = function() {
		return "recycler"
	};
	this.getHelpGuideLink = function(_0x81e9x2bc) {
		return {
			chapter: "recycler"
		}
	};
	this.getMaxEnergyStored = function() {
		return 300
	};
	this.getContainerId = function() {
		return 0
	};
	this.wrenchClick = function(_0x81e9x15a) {
		var _0x81e9x44b = 3 * Math.pow(3, _0x81e9x15a.overclockers);
		var _0x81e9x442 = "";
		if (_0x81e9x15a.progress) {
			_0x81e9x442 = ChatColor.GREEN + "progress " + parseInt(_0x81e9x15a.progress / 4) + "%"
		};
		if (_0x81e9x44b > this.getEnergyStored(_0x81e9x15a) && _0x81e9x15a.progress) {
			_0x81e9x442 = ChatColor.RED + "no energy"
		};
		if (_0x81e9x442) {
			ModPE.showTipMessage(_0x81e9x442)
		}
	};
	this.updateMachine = function(_0x81e9x15a) {
		this.showProgress(_0x81e9x15a);
		if (_0x81e9x15a.progress == 2) {
			this.playSound(_0x81e9x15a, "Machines/RecyclerOp.ogg")
		};
		if (!_0x81e9x15a.overclockers) {
			_0x81e9x15a.overclockers = 0
		};
		if (_0x81e9x15a.progress > 0) {
			var _0x81e9x47c = 1 * Math.pow(3, _0x81e9x15a.overclockers);
			var _0x81e9x47d = Math.pow(2, _0x81e9x15a.overclockers);
			if (this.getEnergyStored(_0x81e9x15a) < _0x81e9x47c) {
				return
			};
			if (_0x81e9x15a.progress < 16) {
				_0x81e9x15a.energyStored -= _0x81e9x47c;
				_0x81e9x15a.progress += _0x81e9x47d
			};
			if (_0x81e9x15a.progress >= 16) {
				if (this.provideRecipe(_0x81e9x15a)) {
					_0x81e9x15a.progress = 0
				}
			}
		};
		var _0x81e9x1bd = getTime();
		if ((_0x81e9x1bd + _0x81e9x15a.x * 1551 + _0x81e9x15a.z * 578) % 3 != 0) {
			return
		};
		if (!_0x81e9x15a.progress) {
			_0x81e9x15a.progress = 0
		};
		var _0x81e9x47e = this.checkHasMaterial(_0x81e9x15a);
		if (!_0x81e9x47e) {
			_0x81e9x15a.progress = 0;
			return
		};
		if (_0x81e9x15a.progress < 1) {
			_0x81e9x15a.progress = 1
		};
		_0x81e9x15a.overclockers = 0
	};
	this.checkHasMaterial = function(_0x81e9x15a) {
		var _0x81e9x10 = this.getContainer(_0x81e9x15a).getSlot(0).id;
		if (_0x81e9x10 > 0) {
			return true
		}
	};
	this.provideRecipe = function(_0x81e9x15a) {
		var _0x81e9x194 = this.getContainer(_0x81e9x15a);
		var _0x81e9x481 = _0x81e9x194.getSlot(0);
		var _0x81e9x467 = _0x81e9x194.getSlot(1);
		if (_0x81e9x481.id != 0 && (_0x81e9x467.id == item_scrab || _0x81e9x467.id == 0) && _0x81e9x467.count < 64) {
			_0x81e9x481.count--;
			if (_0x81e9x481.count == 0) {
				_0x81e9x481.id = 0
			};
			if (Math.random() * 8 < 1) {
				_0x81e9x467.id = item_scrab;
				_0x81e9x467.count++
			};
			return true
		};
		return false
	};
	this.save = function(_0x81e9x17, _0x81e9x15a) {
		DataSaver.Save(_0x81e9x17 + "prs", _0x81e9x15a.progress)
	};
	this.read = function(_0x81e9x17, _0x81e9x15a) {
		_0x81e9x15a.progress = DataSaver.ReadNumber(_0x81e9x17 + "prs")
	};
	this.showProgress = function(_0x81e9x15a) {
		this.getContainer(_0x81e9x15a).setProgressBar(_0x81e9x15a.progress / 16)
	}
}

function MachineMobSlayer() {
	this.parent = MachineBase;
	this.parent();
	this.id = block_mob_slayer;
	this.isUsingEnergy = function() {
		return true
	};
	this.getMaxEnergyStored = function() {
		return item_wrench
	};
	this.updateMachine = function(_0x81e9x15a) {
		animateRange(ParticleType.redstone, _0x81e9x15a.x + 0.5, _0x81e9x15a.y + 0.5, _0x81e9x15a.z + 0.5, 6);
		if (Math.random() > 0.29) {
			return
		};
		if (!_0x81e9x15a.cachedEntities) {
			_0x81e9x15a.cachedEntities = []
		};
		if (_0x81e9x15a.cooldown) {
			_0x81e9x15a.cooldown--
		};
		var _0x81e9x44b = getTime() % 7 + 10;
		if (this.getEnergyStored(_0x81e9x15a) < item_wrench) {
			return
		};
		if (_0x81e9x44b < 14) {
			var _0x81e9x174 = eh_getRandomByType(_0x81e9x44b);
			var _0x81e9x44c = this.isInRange(_0x81e9x15a.x, _0x81e9x15a.y, _0x81e9x15a.z, _0x81e9x174);
			var _0x81e9x44d = _0x81e9x44c;
			for (var i in _0x81e9x15a.cachedEntities) {
				var _0x81e9x44e = _0x81e9x15a.cachedEntities[i];
				if (_0x81e9x44e == _0x81e9x174) {
					if (!_0x81e9x44c) {
						_0x81e9x15a.cachedEntities.splice(i, 1);
						this.markEntity(_0x81e9x174, "");
						break
					} else {
						_0x81e9x44d = false
					}
				}
			};
			if (_0x81e9x44d) {
				this.markEntity(_0x81e9x174, "will be slayed");
				_0x81e9x15a.cachedEntities.push(_0x81e9x174)
			}
		} else {
			if (_0x81e9x44b == 14 && !_0x81e9x15a.cooldown) {
				if (!_0x81e9x15a.destructCount) {
					_0x81e9x15a.destructCount = 1
				};
				if (_0x81e9x15a.cachedEntities.length <= _0x81e9x15a.destructCount) {
					return
				};
				var _0x81e9x1cd = getChest(_0x81e9x15a.x, _0x81e9x15a.y + 1, _0x81e9x15a.z);
				if (!_0x81e9x1cd.exist) {
					return
				};
				this.slayMob(_0x81e9x15a, _0x81e9x15a.cachedEntities.pop(), _0x81e9x1cd)
			}
		}
	};
	this.isInRange = function(_0x81e9x26, _0x81e9x27, _0x81e9x28, _0x81e9x174) {
		var _0x81e9x39a = Entity.getX(_0x81e9x174);
		var _0x81e9x449 = Entity.getY(_0x81e9x174);
		var _0x81e9x39b = Entity.getZ(_0x81e9x174);
		var _0x81e9x15b = Math.sqrt((_0x81e9x39a - _0x81e9x26) * (_0x81e9x39a - _0x81e9x26) + (_0x81e9x449 - _0x81e9x27) * (_0x81e9x449 - _0x81e9x27) + (_0x81e9x39b - _0x81e9x28) * (_0x81e9x39b - _0x81e9x28));
		return _0x81e9x15b < 5
	};
	this.markEntity = function(_0x81e9x174, _0x81e9x259) {
		var _0x81e9x158 = Entity.getEntityTypeId(_0x81e9x174)
	};
	this.slayMob = function(_0x81e9x15a, _0x81e9x174, _0x81e9x1cd) {
		var _0x81e9x158 = Entity.getEntityTypeId(_0x81e9x174);
		this.animateSlay(_0x81e9x15a, _0x81e9x174);
		Entity.remove(_0x81e9x174);
		var drop = this.getDropByType(_0x81e9x158);
		for (var i in drop) {
			_0x81e9x1cd.addItem(drop[i], 1, 0)
		};
		_0x81e9x15a.energyStored -= item_wrench;
		_0x81e9x15a.cooldown = 75
	};
	this.animateSlay = function(_0x81e9x15a, _0x81e9x174) {
		var _0x81e9x26 = Entity.getX(_0x81e9x174);
		var _0x81e9x27 = Entity.getY(_0x81e9x174);
		var _0x81e9x28 = Entity.getZ(_0x81e9x174);
		animateCoords(5, _0x81e9x26, _0x81e9x27 + 0.5, _0x81e9x28)
	};
	this.getDropByType = function(_0x81e9x2b3) {
		var drop = [];
		if (_0x81e9x2b3 == 10) {
			drop.push(366);
			if (Math.random() < 0.5) {
				drop.push(288)
			}
		};
		if (_0x81e9x2b3 == 12) {
			for (var i = 0; i < Math.random() * 3; i++) {
				drop.push(320)
			}
		};
		if (_0x81e9x2b3 == 13) {
			drop.push(35)
		};
		if (_0x81e9x2b3 == 11) {
			for (var i = 0; i < Math.random() * 3; i++) {
				drop.push(364)
			};
			for (var i = 0; i < Math.random() * 3; i++) {
				drop.push(334)
			}
		};
		return drop
	};
	this.wrenchClick = function(_0x81e9x15a) {
		_0x81e9x15a.destructCount++;
		if (!_0x81e9x15a.destructCount || _0x81e9x15a.destructCount > 8) {
			_0x81e9x15a.destructCount = 1
		};
		clientMessage("slay trigger count changed to " + _0x81e9x15a.destructCount)
	};
	this.getMachineName = function() {
		return "mob slayer"
	};
	this.getInfo = function(_0x81e9x15a) {
		return "slay trigger count " + _0x81e9x15a.destructCount
	};
	this.save = function(_0x81e9x17, _0x81e9x15a) {
		DataSaver.Save(_0x81e9x17 + "stc", _0x81e9x15a.destructCount)
	};
	this.read = function(_0x81e9x17, _0x81e9x15a) {
		_0x81e9x15a.destructCount = DataSaver.ReadNumber(_0x81e9x17 + "stc")
	}
}

function MachineTerraformer() {
	this.parent = MachineBase;
	this.parent();
	this.id = block_terraformer;
	this.MaxEnergyInput = item_cell_empty;
	this.modes = [ChatColor.WHITE + "flatting", ChatColor.YELLOW + "freezing", ChatColor.RED + "desertation", ChatColor.GREEN + "greening"];
	this.tickInMainThread = function() {
		return true
	};
	this.isUsingEnergy = function() {
		return true
	};
	this.getMaxEnergyStored = function() {
		return 10000
	};
	this.updateMachine = function(_0x81e9x15a) {
		if (!_0x81e9x15a.rad || _0x81e9x15a.rad < 1) {
			_0x81e9x15a.rad = 1
		};
		if (!_0x81e9x15a.prg) {
			_0x81e9x15a.prg = 0
		};
		if (_0x81e9x15a.prg >= _0x81e9x15a.rad * 8) {
			_0x81e9x15a.prg = 0;
			_0x81e9x15a.rad++
		};
		if (!_0x81e9x15a.cooldown) {
			_0x81e9x15a.cooldown = 0
		};
		if (_0x81e9x15a.cooldown > 0) {
			_0x81e9x15a.cooldown--;
			return
		};
		if (_0x81e9x15a.mode != _0x81e9x15a.mode) {
			_0x81e9x15a.mode = -1
		};
		if (_0x81e9x15a.mode == -1) {
			return
		};
		var _0x81e9x2c0 = this.calcCoords(_0x81e9x15a);
		if (getTime() % 20 != 0) {
			return
		};
		var _0x81e9x26 = _0x81e9x2c0[0];
		var _0x81e9x28 = _0x81e9x2c0[1];
		var _0x81e9x27 = this.getTerrainY(_0x81e9x26, _0x81e9x15a.y, _0x81e9x28);
		var _0x81e9x173 = false;
		if (_0x81e9x15a.mode == 0) {
			_0x81e9x173 = this.provideFlatting(_0x81e9x15a, _0x81e9x26, _0x81e9x27, _0x81e9x28)
		};
		if (_0x81e9x15a.mode == 1) {
			_0x81e9x173 = this.provideFreezing(_0x81e9x15a, _0x81e9x26, _0x81e9x27, _0x81e9x28)
		};
		if (_0x81e9x15a.mode == 2) {
			_0x81e9x173 = this.provideDesertation(_0x81e9x15a, _0x81e9x26, _0x81e9x27, _0x81e9x28)
		};
		if (_0x81e9x15a.mode == 3) {
			_0x81e9x173 = this.provideGreening(_0x81e9x15a, _0x81e9x26, _0x81e9x27, _0x81e9x28)
		};
		if (_0x81e9x173) {
			_0x81e9x15a.prg++
		}
	};
	this.wrenchClick = function(_0x81e9x15a) {
		_0x81e9x15a.mode = (_0x81e9x15a.mode + 1) % 4;
		if (!_0x81e9x15a.mode) {
			_0x81e9x15a.mode = 0
		};
		_0x81e9x15a.rad = 1;
		_0x81e9x15a.prg = 0;
		clientMessage("changed mode to " + ChatColor.BOLD + this.modes[_0x81e9x15a.mode])
	};
	this.checkChunk = function(_0x81e9x26, _0x81e9x28) {
		return getTile(_0x81e9x26 * 16 + 8, 0, _0x81e9x28 * 16 + 8) != 0
	};
	this.calcCoords = function(_0x81e9x15a) {
		var _0x81e9x4b4 = _0x81e9x15a.rad * 8;
		var _0x81e9x4b5 = parseInt(_0x81e9x15a.prg / _0x81e9x15a.rad / 2);
		var _0x81e9x9 = _0x81e9x15a.prg % (_0x81e9x15a.rad * 2);
		var _0x81e9x26 = 0;
		var _0x81e9x27 = 0;
		if (_0x81e9x4b5 == 0) {
			_0x81e9x26 = (_0x81e9x9 - _0x81e9x15a.rad + 1);
			_0x81e9x27 = _0x81e9x15a.rad
		};
		if (_0x81e9x4b5 == 1) {
			_0x81e9x26 = _0x81e9x15a.rad;
			_0x81e9x27 = -(_0x81e9x9 - _0x81e9x15a.rad + 1)
		};
		if (_0x81e9x4b5 == 2) {
			_0x81e9x26 = -(_0x81e9x9 - _0x81e9x15a.rad + 1);
			_0x81e9x27 = -_0x81e9x15a.rad
		};
		if (_0x81e9x4b5 == 3) {
			_0x81e9x26 = -_0x81e9x15a.rad;
			_0x81e9x27 = (_0x81e9x9 - _0x81e9x15a.rad + 1)
		};
		return [_0x81e9x15a.x + _0x81e9x26, _0x81e9x15a.z + _0x81e9x27]
	};
	this.getTerrainY = function(_0x81e9x26, _0x81e9x27, _0x81e9x28) {
		var _0x81e9x4b6 = isTerrainBlock(getTile(_0x81e9x26, _0x81e9x27, _0x81e9x28));
		while (_0x81e9x4b6 == isTerrainBlock(getTile(_0x81e9x26, _0x81e9x27, _0x81e9x28)) && _0x81e9x27 > 0) {
			if (_0x81e9x4b6) {
				_0x81e9x27++
			} else {
				_0x81e9x27--
			}
		};
		if (_0x81e9x4b6) {
			_0x81e9x27--
		};
		return _0x81e9x27
	};
	this.provideFlatting = function(_0x81e9x15a, _0x81e9x26, _0x81e9x27, _0x81e9x28) {
		if (this.getEnergyStored(_0x81e9x15a) < 300) {
			return 0
		};
		_0x81e9x15a.energyStored -= 300;
		var _0x81e9x4b7 = [];
		for (var i = 0; i < 4; i++) {
			var _0x81e9x10 = getTile(_0x81e9x26, _0x81e9x27 - i, _0x81e9x28);
			if (isTerrainBlock(_0x81e9x10)) {
				_0x81e9x4b7.push(_0x81e9x10)
			} else {
				break
			}
		};
		var _0x81e9x4b8 = _0x81e9x15a.y > _0x81e9x27;
		var _0x81e9x384 = Math.min(_0x81e9x15a.y, _0x81e9x27);
		var _0x81e9x4b9 = Math.max(_0x81e9x15a.y, _0x81e9x27);
		if (!_0x81e9x4b8) {
			_0x81e9x4b9++
		};
		for (var _0x81e9x1cf = _0x81e9x384; _0x81e9x1cf < _0x81e9x4b9; _0x81e9x1cf++) {
			if (_0x81e9x4b8) {
				setTile(_0x81e9x26, _0x81e9x1cf, _0x81e9x28, 1)
			} else {
				setTile(_0x81e9x26, _0x81e9x1cf, _0x81e9x28, 0)
			}
		};
		_0x81e9x15a.cooldown = Math.abs(_0x81e9x1cf - _0x81e9x4b9) * 3 + 10;
		for (var i in _0x81e9x4b7) {
			setTile(_0x81e9x26, _0x81e9x15a.y - 1 - i, _0x81e9x28, _0x81e9x4b7[i])
		};
		return true
	};
	this.provideFreezing = function(_0x81e9x15a, _0x81e9x26, _0x81e9x27, _0x81e9x28) {
		if (this.getEnergyStored(_0x81e9x15a) < 50) {
			return 0
		};
		_0x81e9x15a.energyStored -= 50;
		_0x81e9x15a.cooldown = 10;
		Level.setGrassColor(_0x81e9x26, _0x81e9x28, 0x82b595);
		var _0x81e9x10 = getTile(_0x81e9x26, _0x81e9x27 + 1, _0x81e9x28);
		if (_0x81e9x10 == 0 || isPlantBlock(_0x81e9x10)) {
			setTile(_0x81e9x26, _0x81e9x27 + 1, _0x81e9x28, 78)
		};
		_0x81e9x27++;
		while (_0x81e9x10 == 8 || _0x81e9x10 == 9) {
			setTile(_0x81e9x26, _0x81e9x27, _0x81e9x28, 79);
			_0x81e9x27++;
			_0x81e9x10 = getTile(_0x81e9x26, _0x81e9x27, _0x81e9x28)
		};
		return true
	};
	this.provideGreening = function(_0x81e9x15a, _0x81e9x26, _0x81e9x27, _0x81e9x28) {
		if (this.getEnergyStored(_0x81e9x15a) < 50) {
			return 0
		};
		_0x81e9x15a.energyStored -= 50;
		_0x81e9x15a.cooldown = 10;
		Level.setGrassColor(_0x81e9x26, _0x81e9x28, 0x5dc93a);
		var _0x81e9x384 = 0;
		for (var i = 0; i < 5; i++) {
			var _0x81e9x10 = getTile(_0x81e9x26, _0x81e9x27 - _0x81e9x384, _0x81e9x28);
			if (isTerrainBlock(_0x81e9x10)) {
				if (_0x81e9x384 == 0) {
					setTile(_0x81e9x26, _0x81e9x27 - _0x81e9x384, _0x81e9x28, 2)
				} else {
					setTile(_0x81e9x26, _0x81e9x27 - _0x81e9x384, _0x81e9x28, 3)
				}
			};
			_0x81e9x384++
		};
		var _0x81e9x4ba = getTile(_0x81e9x26, _0x81e9x27 + 1, _0x81e9x28);
		if (_0x81e9x4ba == 0 || _0x81e9x4ba == 78) {
			setTile(_0x81e9x26, _0x81e9x27 + 1, _0x81e9x28, 31, 0);
			if (Math.random() < 0.1) {
				setTile(_0x81e9x26, _0x81e9x27 + 1, _0x81e9x28, 31, 1)
			};
			if (Math.random() < 0.1) {
				setTile(_0x81e9x26, _0x81e9x27 + 1, _0x81e9x28, 38, parseInt(Math.random() * 8))
			}
		};
		return true
	};
	this.provideDesertation = function(_0x81e9x15a, _0x81e9x26, _0x81e9x27, _0x81e9x28) {
		if (this.getEnergyStored(_0x81e9x15a) < 50) {
			return 0
		};
		_0x81e9x15a.energyStored -= 50;
		_0x81e9x15a.cooldown = 10;
		Level.setGrassColor(_0x81e9x26, _0x81e9x28, 0xacbb50);
		var _0x81e9x384 = 0;
		for (var i = 0; i < 7; i++) {
			var _0x81e9x10 = getTile(_0x81e9x26, _0x81e9x27 - _0x81e9x384, _0x81e9x28);
			if (isTerrainBlock(_0x81e9x10)) {
				if (_0x81e9x384 < 4) {
					setTile(_0x81e9x26, _0x81e9x27 - _0x81e9x384, _0x81e9x28, 12)
				} else {
					setTile(_0x81e9x26, _0x81e9x27 - _0x81e9x384, _0x81e9x28, 24)
				}
			};
			_0x81e9x384++
		};
		_0x81e9x384 = 1;
		while (true) {
			var _0x81e9x10 = getTile(_0x81e9x26, _0x81e9x27 + _0x81e9x384, _0x81e9x28);
			if (_0x81e9x10 == 8 || _0x81e9x10 == 9) {
				setTile(_0x81e9x26, _0x81e9x27 + _0x81e9x384, _0x81e9x28, 0)
			} else {
				break
			}
		};
		return true
	};
	this.save = function(_0x81e9x259, _0x81e9x15a) {
		DataSaver.Save(_0x81e9x259 + "#mode", _0x81e9x15a.mode);
		DataSaver.Save(_0x81e9x259 + "#prg", _0x81e9x15a.prg);
		DataSaver.Save(_0x81e9x259 + "#rad", _0x81e9x15a.rad)
	};
	this.read = function(_0x81e9x259, _0x81e9x15a) {
		_0x81e9x15a.mode = DataSaver.ReadNumber(_0x81e9x259 + "#mode");
		_0x81e9x15a.prg = DataSaver.ReadNumber(_0x81e9x259 + "#prg");
		_0x81e9x15a.rad = DataSaver.ReadNumber(_0x81e9x259 + "#rad")
	};
	this.getMachineName = function() {
		return "terraformer"
	};
	this.getInfo = function(_0x81e9x15a) {
		var _0x81e9x4bb = this.modes[_0x81e9x15a.mode];
		if (!_0x81e9x4bb) {
			_0x81e9x4bb = "none"
		};
		_0x81e9x4bb = _0x81e9x4bb.substring(2, _0x81e9x4bb.length);
		return "mode: " + _0x81e9x4bb
	}
}

function isTerrainBlock(_0x81e9x10) {
	return _0x81e9x10 == 1 || _0x81e9x10 == 2 || _0x81e9x10 == 3 || _0x81e9x10 == 12 || _0x81e9x10 == 13 || _0x81e9x10 == 14 || _0x81e9x10 == 15 || _0x81e9x10 == 16 || _0x81e9x10 == 56 || _0x81e9x10 == 24 || _0x81e9x10 == 82
}

function isPlantBlock(_0x81e9x10) {
	return _0x81e9x10 == 6 || _0x81e9x10 == 31 || _0x81e9x10 == 32 || _0x81e9x10 == 37 || _0x81e9x10 == 3 || _0x81e9x10 == 39 || _0x81e9x10 == 40 || _0x81e9x10 == 83 || _0x81e9x10 == 175
}

function MachineTeleporter() {
	this.parent = MachineBase;
	this.parent();
	this.id = block_teleporter;
	this.MaxEnergyInput = item_cell_empty;
	this.getMachineName = function() {
		return "teleporter"
	};
	this.getInfo = function(_0x81e9x15a) {
		return "frequency " + this.getFreq(_0x81e9x15a)
	};
	this.isUsingEnergy = function() {
		return true
	};
	this.getMaxEnergyStored = function() {
		return 20000
	};
	this.teleportEntity = function(_0x81e9x174, _0x81e9x15a) {
		if (this.getEnergyStored(_0x81e9x15a) < 1000) {
			clientMessage("no energy");
			return
		};
		var _0x81e9x4bf = [];
		for (var i in this.MachineCoords) {
			var _0x81e9x2c0 = this.MachineCoords[i];
			if (this.getFreq(_0x81e9x2c0) == this.getFreq(_0x81e9x15a) && _0x81e9x15a != _0x81e9x2c0) {
				_0x81e9x4bf.push(_0x81e9x2c0)
			}
		};
		if (_0x81e9x4bf.length > 0) {
			var _0x81e9x4c0 = _0x81e9x4bf[parseInt(Math.random() * _0x81e9x4bf.length)];
			setPosition(_0x81e9x174, _0x81e9x4c0.x + 0.5, _0x81e9x4c0.y + 3.12, _0x81e9x4c0.z + 0.5);
			_0x81e9x15a.energyStored -= 1000;
			clientMessage("teleported " + Player.getName(_0x81e9x174) + " to " + _0x81e9x4c0.x + ", " + _0x81e9x4c0.y + ", " + _0x81e9x4c0.z);
			return true
		} else {
			clientMessage("no teleporters on current frequency")
		}
	};
	this.wrenchClick = function(_0x81e9x15a) {
		_0x81e9x15a.freq = (this.getFreq(_0x81e9x15a) + 1) % 16;
		clientMessage("changed frequency to " + _0x81e9x15a.freq)
	};
	this.getFreq = function(_0x81e9x15a) {
		if (!_0x81e9x15a.freq) {
			_0x81e9x15a.freq = 0
		};
		return _0x81e9x15a.freq
	};
	this.save = function(_0x81e9x17, _0x81e9x15a) {
		DataSaver.Save(_0x81e9x17 + "#freq", this.getFreq(_0x81e9x15a))
	};
	this.read = function(_0x81e9x17, _0x81e9x15a) {
		_0x81e9x15a.freq = DataSaver.ReadNumber(_0x81e9x17 + "#freq")
	}
}

function MachineObsidianPipe() {
	this.parent = MachineBase;
	this.parent();
	this.id = block_obsidian_pipe;
	this.isUsingEnergy = function() {
		return true
	};
	this.getMaxEnergyStored = function() {
		return 50
	};
	this.getMachineName = function() {
		return "obsidian pipe"
	};
	this.CheckItem = function(_0x81e9x2bc, _0x81e9x4c2) {
		var _0x81e9x4c3 = 1.2;
		if (this.getEnergyStored(_0x81e9x2bc) >= 50) {
			_0x81e9x4c3 = 5
		};
		var _0x81e9x4c4 = Math.sqrt(Math.pow(Entity.getX(_0x81e9x4c2) - _0x81e9x2bc.x - 0.5, 2) + Math.pow(Entity.getY(_0x81e9x4c2) - _0x81e9x2bc.y - 0.5, 2) + Math.pow(Entity.getZ(_0x81e9x4c2) - _0x81e9x2bc.z - 0.5, 2));
		if (!_0x81e9x2bc.grabbed) {
			_0x81e9x2bc.grabbed = []
		};
		if (_0x81e9x4c4 < _0x81e9x4c3) {
			_0x81e9x2bc.energyStored = Math.max(0, _0x81e9x2bc.energyStored - 50);
			_0x81e9x2bc.grabbed.push(_0x81e9x4c2)
		}
	};
	this.MoveGrabbed = function(_0x81e9x2bc) {
		for (var i in _0x81e9x2bc.grabbed) {
			var _0x81e9x164 = _0x81e9x2bc.grabbed[i];
			var _0x81e9x27 = Entity.getY(_0x81e9x164);
			if (_0x81e9x27 <= 0) {
				_0x81e9x2bc.grabbed.splice(i--, 1);
				continue
			};
			var _0x81e9x1b1 = _0x81e9x2bc.y + 0.5 - _0x81e9x27;
			var _0x81e9x1b0 = _0x81e9x2bc.x + 0.5 - Entity.getX(_0x81e9x164);
			var _0x81e9x1b2 = _0x81e9x2bc.z + 0.5 - Entity.getZ(_0x81e9x164);
			var _0x81e9x15b = Math.sqrt(_0x81e9x1b0 * _0x81e9x1b0 + _0x81e9x1b1 * _0x81e9x1b1 + _0x81e9x1b2 * _0x81e9x1b2);
			var _0x81e9x1b9 = 0.2;
			setVelX(_0x81e9x164, _0x81e9x1b0 / _0x81e9x15b * 0.2);
			setVelY(_0x81e9x164, _0x81e9x1b1 / _0x81e9x15b * 0.2);
			setVelZ(_0x81e9x164, _0x81e9x1b2 / _0x81e9x15b * 0.2);
			if (_0x81e9x15b < 0.5) {
				StartItemTransportWithAutoPathfinding(_0x81e9x2bc.x, _0x81e9x2bc.y, _0x81e9x2bc.z, Entity.getItemEntityId(_0x81e9x164), Entity.getItemEntityCount(_0x81e9x164), Entity.getItemEntityData(_0x81e9x164), [0, 1, 0]);
				Entity.remove(_0x81e9x164)
			}
		}
	};
	this.updateMachine = function(_0x81e9x2bc) {
		var _0x81e9x4c2 = eh_getRandomByType(64);
		this.CheckItem(_0x81e9x2bc, _0x81e9x4c2);
		this.MoveGrabbed(_0x81e9x2bc)
	}
}
var FuelGen_EnergyByItem = [
	[263, 400],
	[5, 75],
	[280, 25],
	[6, 25],
	[17, 75],
	[325, 1000]
];

function MachineFuelGen() {
	this.parent = MachineBase;
	this.parent();
	this.id = block_fuel_generator;
	this.isUsingEnergy = function() {
		return true
	};
	this.getMachineName = function() {
		return "fuel generator"
	};
	this.getHelpGuideLink = function(_0x81e9x2bc) {
		return {
			chapter: "fuel & liquid fuel gens",
			page: 0
		}
	};
	this.getMaxEnergyStored = function() {
		return 10000
	};
	this.isGenerator = function() {
		return true
	};
	this.getContainerId = function() {
		return 12
	};
	this.getEnergyOutput = function(_0x81e9x15a) {
		if (getTime() % 4 != 0) {
			return
		};
		var _0x81e9x174 = this.getEnergyStored(_0x81e9x15a);
		if (_0x81e9x174 > 32) {
			_0x81e9x15a.energyStored -= 32;
			return 32
		};
		_0x81e9x15a.energyStored -= _0x81e9x174;
		return _0x81e9x174
	};
	this.updateMachine = function(_0x81e9x15a) {
		this.getEnergyStored(_0x81e9x15a);
		if (!_0x81e9x15a.fuel) {
			_0x81e9x15a.fuel = 0
		};
		if (!_0x81e9x15a.maxFuel || _0x81e9x15a.maxFuel < _0x81e9x15a.fuel) {
			_0x81e9x15a.maxFuel = _0x81e9x15a.fuel
		};
		if (_0x81e9x15a.maxFuel < 1) {
			_0x81e9x15a.maxFuel = 1
		};
		if (_0x81e9x15a.fuel < 1 && _0x81e9x15a.energyStored < this.getMaxEnergyStored() && getTime() % 20 == 0) {
			_0x81e9x15a.maxFuel = 1;
			var _0x81e9x5b = this.getContainer(_0x81e9x15a).getSlot(0);
			var _0x81e9x4c7 = FuelGen_EnergyByItem;
			for (var i in _0x81e9x4c7) {
				var _0x81e9x10 = _0x81e9x4c7[i][0];
				if (_0x81e9x10 == 325 && _0x81e9x5b.data != 10) {
					continue
				};
				if (_0x81e9x10 == _0x81e9x5b.id) {
					_0x81e9x5b.count--;
					_0x81e9x15a.fuel += _0x81e9x4c7[i][1];
					if (_0x81e9x5b.count == 0) {
						_0x81e9x5b.id = 0
					}
				}
			};
			this.getContainer(_0x81e9x15a).setFireBar(0)
		};
		if (_0x81e9x15a.fuel > 1 && getTime() % 40 == 0) {
			this.playSound(_0x81e9x15a, "Generators/GeneratorLoop.ogg")
		};
		if (_0x81e9x15a.fuel > 0) {
			if (_0x81e9x15a.energyStored < this.getMaxEnergyStored()) {
				_0x81e9x15a.energyStored = Math.min(_0x81e9x15a.energyStored + 10, this.getMaxEnergyStored());
				_0x81e9x15a.fuel--
			};
			if (_0x81e9x15a.maxFuel > 0) {
				this.getContainer(_0x81e9x15a).setFireBar(_0x81e9x15a.fuel / _0x81e9x15a.maxFuel)
			}
		} else {
			this.getContainer(_0x81e9x15a).setFireBar(0)
		}
	};
	this.save = function(_0x81e9x17, _0x81e9x15a) {
		DataSaver.Save(_0x81e9x17 + "fuel", _0x81e9x15a.fuel)
	};
	this.read = function(_0x81e9x17, _0x81e9x15a) {
		_0x81e9x15a.fuel = DataSaver.ReadNumber(_0x81e9x17 + "fuel")
	}
}

function MachineGenGeotermal() {
	this.parent = MachineBase;
	this.parent();
	this.id = block_geotermal_generator;
	this.getMachineName = function() {
		return "geotermal generator"
	};
	this.getHelpGuideLink = function(_0x81e9x2bc) {
		return {
			chapter: "geotermal gen",
			page: 0
		}
	};
	this.isUsingEnergy = function() {
		return true
	};
	this.getMaxEnergyStored = function() {
		return 200
	};
	this.isGenerator = function() {
		return true
	};
	this.getContainerId = function() {
		return 8
	};
	this.updateMachine = function(_0x81e9x15a) {
		if (!_0x81e9x15a.volume || _0x81e9x15a.volume < 0) {
			_0x81e9x15a.volume = 0
		};
		if (_0x81e9x15a.volume > 0 && this.getEnergyStored(_0x81e9x15a) < 60) {
			_0x81e9x15a.energyStored += 20;
			_0x81e9x15a.volume -= 0.001
		};
		if (getTime() % 40 == 0 && _0x81e9x15a.volume > 0) {
			this.playSound(_0x81e9x15a, "Generators/GeothermalLoop.ogg")
		};
		var _0x81e9x194 = this.getContainer(_0x81e9x15a);
		_0x81e9x194.setLiquidBar(_0x81e9x15a.volume / 16, 10);
		if (_0x81e9x15a.volume <= 15 && getTime() % 10 == 0) {
			var _0x81e9x481 = _0x81e9x194.getSlot(0);
			var _0x81e9x467 = _0x81e9x194.getSlot(1);
			if (GetLiquidByItem(_0x81e9x481.id, _0x81e9x481.data) == 10) {
				var _0x81e9x201 = GetEmptyItemByFull(_0x81e9x481.id, _0x81e9x481.data);
				if ((_0x81e9x201 == _0x81e9x467.id || _0x81e9x467.id == 0) && _0x81e9x467.data == 0 && _0x81e9x467.count < 16) {
					_0x81e9x481.count--;
					if (_0x81e9x481.count < 1) {
						_0x81e9x481.id = 0;
						_0x81e9x481.data = 0
					};
					_0x81e9x467.id = _0x81e9x201;
					_0x81e9x467.count++;
					_0x81e9x15a.volume++
				}
			};
			if (getTile(_0x81e9x15a.x, _0x81e9x15a.y + 1, _0x81e9x15a.z) == block_barrel) {
				var _0x81e9x216 = getMachine(_0x81e9x15a.x, _0x81e9x15a.y + 1, _0x81e9x15a.z);
				if (_0x81e9x216 && _0x81e9x216.liquid == 10 && _0x81e9x216.volume >= 1) {
					_0x81e9x216.volume--;
					_0x81e9x15a.volume++
				}
			}
		}
	};
	this.getEnergyOutput = function(_0x81e9x15a) {
		if (this.getEnergyStored(_0x81e9x15a) > 0 && getTime() % 8 == 0) {
			var _0x81e9x18c = Math.min(_0x81e9x15a.energyStored, 32);
			_0x81e9x15a.energyStored -= _0x81e9x18c;
			return _0x81e9x18c
		};
		return 0
	};
	this.save = function(_0x81e9x17, _0x81e9x15a) {
		DataSaver.Save(_0x81e9x17 + "#vol", _0x81e9x15a.volume)
	};
	this.read = function(_0x81e9x259, _0x81e9x15a) {
		_0x81e9x15a.volume = DataSaver.ReadNumber(_0x81e9x259 + "#vol")
	};
	this.isUsingLiquid = function() {
		return true
	};
	this.getMaxVolume = function() {
		return 16
	};
	this.getLiquidType = function(_0x81e9x2bc) {
		return 10
	}
}
var LiquidEngine_EnegryPerBucket = {
	10: 10000,
	4: 10000,
	5: 32000,
	6: 20000
};

function MachineLiquidEngine() {
	this.parent = MachineBase;
	this.parent();
	this.id = block_liquid_fuel_engine;
	this.energyPerBucket = LiquidEngine_EnegryPerBucket;
	this.liquidByBucket = {
		"325:1": 1,
		"325:8": 8,
		"325:10": 10,
		"item_oil_bucket:-1": 4,
		"item_fuel_bucket:-1": 5,
		"item_biomass_bucket:-1": 6,
		"item_liquid_matter_bucket:-1": 7
	};
	this.isUsingEnergy = function() {
		return true
	};
	this.getMachineName = function() {
		return "liquid fuel engine"
	};
	this.getMaxEnergyStored = function() {
		return block_recycler
	};
	this.getContainerId = function() {
		return 3
	};
	this.isGenerator = function() {
		return true
	};
	this.getHelpGuideLink = function(_0x81e9x2bc) {
		return {
			chapter: "fuel & liquid fuel gens",
			page: 1
		}
	};
	this.updateMachine = function(_0x81e9x15a) {
		if (_0x81e9x15a.AnimationPos != _0x81e9x15a.AnimationPos && getTile(_0x81e9x15a.x, _0x81e9x15a.y, _0x81e9x15a.z) == this.id) {
			_0x81e9x15a.AnimationPos = Level.getData(_0x81e9x15a.x, _0x81e9x15a.y, _0x81e9x15a.z);
			_0x81e9x15a.AnimationDir = 1
		};
		var _0x81e9x1bd = getTime();
		if (!_0x81e9x15a.liquid || !_0x81e9x15a.volume || _0x81e9x15a.volume == 0) {
			_0x81e9x15a.liquid = 0;
			_0x81e9x15a.volume = 0
		};
		this.getContainer(_0x81e9x15a).setLiquidBar(_0x81e9x15a.volume / 16, _0x81e9x15a.liquid);
		if (_0x81e9x1bd % 8 == 0) {
			this.getContainer(_0x81e9x15a).setFireBar(0)
		};
		if (_0x81e9x1bd % 20 == 0 && _0x81e9x15a.volume <= 15) {
			var _0x81e9x5b = this.getContainer(_0x81e9x15a).getSlot(0);
			var _0x81e9x4cb = GetLiquidByItem(_0x81e9x5b.id, _0x81e9x5b.data);
			if (_0x81e9x4cb && this.energyPerBucket[_0x81e9x4cb] && (_0x81e9x4cb == _0x81e9x15a.liquid || _0x81e9x15a.liquid == 0)) {
				var _0x81e9x201 = GetEmptyItemByFull(_0x81e9x5b.id, _0x81e9x5b.data);
				_0x81e9x5b.id = _0x81e9x201;
				_0x81e9x5b.data = 0;
				_0x81e9x15a.liquid = _0x81e9x4cb;
				_0x81e9x15a.volume++
			};
			var _0x81e9x1b = getTile(_0x81e9x15a.x, _0x81e9x15a.y + 1, _0x81e9x15a.z);
			if (_0x81e9x1b != block_barrel) {
				return
			};
			var _0x81e9x216 = getMachine(_0x81e9x15a.x, _0x81e9x15a.y + 1, _0x81e9x15a.z);
			if (_0x81e9x216 && _0x81e9x216.liquid != 0 && _0x81e9x216.volume >= 1 && (_0x81e9x216.liquid == _0x81e9x15a.liquid || _0x81e9x15a.liquid == 0)) {
				_0x81e9x15a.liquid = _0x81e9x216.liquid;
				_0x81e9x216.volume--;
				_0x81e9x15a.volume++
			}
		};
		if (!_0x81e9x15a.liquid || !_0x81e9x15a.volume) {
			_0x81e9x15a.liquid = 0;
			_0x81e9x15a.volume = 0
		};
		if (!_0x81e9x15a.volume) {
			_0x81e9x15a.AnimationDir = -1
		};
		if (_0x81e9x15a.liquid == 0) {
			return
		};
		if (this.getEnergyStored(_0x81e9x15a) >= 200) {
			_0x81e9x15a.energyStored = 200;
			return
		};
		if (!this.energyPerBucket[_0x81e9x15a.liquid]) {
			return
		};
		if (_0x81e9x1bd % 8 == 1) {
			this.getContainer(_0x81e9x15a).setFireBar(1)
		};
		_0x81e9x15a.volume -= 1 / 1024;
		_0x81e9x15a.energyStored += this.energyPerBucket[_0x81e9x15a.liquid] / 1024;
		if (_0x81e9x15a.volume < 0) {
			_0x81e9x15a.volume = 0;
			_0x81e9x15a.liquid = 0
		}
	};
	this.getEnergyOutput = function(_0x81e9x15a) {
		var _0x81e9x174 = 0;
		if (getTime() % 5 == 0) {
			_0x81e9x174 = Math.min(32, this.getEnergyStored(_0x81e9x15a));
			_0x81e9x15a.energyStored -= _0x81e9x174
		};
		return _0x81e9x174
	};
	this.save = function(_0x81e9x17, _0x81e9x15a) {
		DataSaver.Save(_0x81e9x17 + "liquid", _0x81e9x15a.liquid);
		DataSaver.Save(_0x81e9x17 + "vol", _0x81e9x15a.volume)
	};
	this.read = function(_0x81e9x17, _0x81e9x15a) {
		_0x81e9x15a.liquid = DataSaver.ReadNumber(_0x81e9x17 + "liquid");
		_0x81e9x15a.volume = DataSaver.ReadFloat(_0x81e9x17 + "vol")
	};
	this.isUsingLiquid = function() {
		return true
	};
	this.getMaxVolume = function() {
		return 16
	};
	this.getLiquidType = function(_0x81e9x2bc) {
		return _0x81e9x2bc.liquid
	}
}

function MachineGenSolar() {
	this.parent = MachineBase;
	this.parent();
	this.id = block_solar_pannel;
	this.isUsingEnergy = function() {
		return true
	};
	this.getMachineName = function() {
		return "solar panel"
	};
	this.getMaxEnergyStored = function() {
		return 1
	};
	this.isGenerator = function() {
		return true
	};
	this.getEnergyOutput = function(_0x81e9x15a) {
		if (getTime() % 20 > 0) {
			return 0
		};
		if (Level.getBrightness(_0x81e9x15a.x, _0x81e9x15a.y + 1, _0x81e9x15a.z) == 15) {
			return 20
		} else {
			return 0
		}
	}
}

function MachineWatermill() {
	this.parent = MachineBase;
	this.parent();
	this.id = block_watermill;
	this.getMachineName = function() {
		return "watermill"
	};
	this.getHelpGuideLink = function(_0x81e9x2bc) {
		return {
			chapter: "water & wind mills",
			page: 1
		}
	};
	this.isUsingEnergy = function() {
		return true
	};
	this.getMaxEnergyStored = function() {
		return 32
	};
	this.isGenerator = function() {
		return true
	};
	this.getEnergyOutput = function(_0x81e9x15a) {
		if (_0x81e9x15a.energyStored > 0) {
			var _0x81e9x1a3 = _0x81e9x15a.energyStored;
			_0x81e9x15a.energyStored = 0;
			return _0x81e9x1a3
		} else {
			if (getTime() % 16 == 0) {
				var _0x81e9x4ce = getTile(_0x81e9x15a.x - 1 + Math.random() * 3, _0x81e9x15a.y - 1 + Math.random() * 2, _0x81e9x15a.z - 1 + Math.random() * 3);
				if (_0x81e9x4ce == 8 || _0x81e9x4ce == 9) {
					return 16
				}
			}
		};
		return 0
	};
	this.getContainerId = function() {
		return 8
	};
	this.updateMachine = function(_0x81e9x15a) {
		if (!_0x81e9x15a.volume || _0x81e9x15a.volume < 0) {
			_0x81e9x15a.volume = 0
		};
		if (!_0x81e9x15a.anim_tick) {
			_0x81e9x15a.anim_tick = 0
		};
		if (config_mill_animation) {
			var _0x81e9x4cf = MillMachinesRenderList[parseInt(_0x81e9x15a.anim_tick) % 32 + 32].renderType;
			if (!_0x81e9x15a.anim) {
				_0x81e9x15a.anim = CreateAnimation(_0x81e9x15a.x + 0.5, _0x81e9x15a.y + 1, _0x81e9x15a.z + 0.5);
				_0x81e9x15a.anim.setSkin("mob/wood_texture.png")
			};
			_0x81e9x15a.anim.setRender(_0x81e9x4cf)
		};
		if (_0x81e9x15a.volume > 0.005) {
			_0x81e9x15a.anim_tick += 2.5
		};
		_0x81e9x15a.anim_tick += 0.75;
		if (_0x81e9x15a.volume >= 0.005 && _0x81e9x15a.energyStored < 20) {
			_0x81e9x15a.volume -= 0.005;
			_0x81e9x15a.energyStored += 2.4
		};
		var _0x81e9x194 = this.getContainer(_0x81e9x15a);
		_0x81e9x194.setLiquidBar(_0x81e9x15a.volume / 16, 8);
		if (_0x81e9x15a.volume <= 15 && getTime() % 10 == 0) {
			var _0x81e9x481 = _0x81e9x194.getSlot(0);
			var _0x81e9x467 = _0x81e9x194.getSlot(1);
			if (GetLiquidByItem(_0x81e9x481.id, _0x81e9x481.data) == 8) {
				var _0x81e9x201 = GetEmptyItemByFull(_0x81e9x481.id, _0x81e9x481.data);
				if ((_0x81e9x201 == _0x81e9x467.id || _0x81e9x467.id == 0) && _0x81e9x467.data == 0 && _0x81e9x467.count < 16) {
					_0x81e9x481.count--;
					if (_0x81e9x481.count < 1) {
						_0x81e9x481.id = 0;
						_0x81e9x481.data = 0
					};
					_0x81e9x467.id = _0x81e9x201;
					_0x81e9x467.count++;
					_0x81e9x15a.volume++
				}
			};
			if (getTile(_0x81e9x15a.x, _0x81e9x15a.y + 1, _0x81e9x15a.z) == block_barrel) {
				var _0x81e9x216 = getMachine(_0x81e9x15a.x, _0x81e9x15a.y + 1, _0x81e9x15a.z);
				if (_0x81e9x216 && _0x81e9x216.liquid == 8 && _0x81e9x216.volume >= 1) {
					_0x81e9x216.volume--;
					_0x81e9x15a.volume++
				}
			}
		}
	};
	this.save = function(_0x81e9x17, _0x81e9x15a) {
		DataSaver.Save(_0x81e9x17 + "#vol", _0x81e9x15a.volume)
	};
	this.read = function(_0x81e9x259, _0x81e9x15a) {
		_0x81e9x15a.volume = DataSaver.ReadNumber(_0x81e9x259 + "#vol")
	};
	this.onDestroy = function(_0x81e9x15a) {
		if (_0x81e9x15a.anim) {
			_0x81e9x15a.anim.destroy()
		}
	};
	this.isUsingLiquid = function() {
		return true
	};
	this.getMaxVolume = function() {
		return 16
	};
	this.getLiquidType = function(_0x81e9x2bc) {
		return 8
	}
}

function MachineWindmill() {
	this.parent = MachineBase;
	this.parent();
	this.id = block_windmill;
	this.getMachineName = function() {
		return "windmill"
	};
	this.isUsingEnergy = function() {
		return true
	};
	this.getMaxEnergyStored = function() {
		return 1
	};
	this.isGenerator = function() {
		return true
	};
	this.getEnergyOutput = function(_0x81e9x15a) {
		if (getTime() % 20 == 0) {
			var _0x81e9x4ce = getTile(_0x81e9x15a.x - 4 + Math.random() * 9, _0x81e9x15a.y - 4 + Math.random() * 9, _0x81e9x15a.z - 4 + Math.random() * 9);
			var _0x81e9x4d1 = Math.max(0, (_0x81e9x15a.y - 60) / 60 * 7);
			if (_0x81e9x4ce == 0) {
				return Math.floor(20 * _0x81e9x4d1)
			}
		};
		return 0
	};
	this.updateMachine = function(_0x81e9x2bc) {
		if (config_mill_animation) {
			var _0x81e9x4d2 = Math.max(0, (_0x81e9x2bc.y - 60) / 60) * 5.4;
			var _0x81e9x3f0 = MillMachinesRenderList[parseInt(getTime() * _0x81e9x4d2) % 32].renderType;
			if (!_0x81e9x2bc.anim) {
				_0x81e9x2bc.anim = CreateAnimation(_0x81e9x2bc.x + 1.2, _0x81e9x2bc.y + 0.5, _0x81e9x2bc.z + 0.5)
			};
			_0x81e9x2bc.anim.setRender(_0x81e9x3f0);
			_0x81e9x2bc.anim.setSkin("materials/material_iridium.png")
		}
	};
	this.onDestroy = function(_0x81e9x2bc) {
		if (_0x81e9x2bc.anim) {
			_0x81e9x2bc.anim.destroy()
		}
	}
}
var NuclearReactor_coolant = ValidateIDData({
	item_coolant_cell_singler: 5000,
	item_coolant_cell_triple: 15000,
	item_coolant_cell_six: 30000
});
var NuclearReactor_uranium = ValidateIDData({
	504: 1,
	item_uranium_rod_singler: 5,
	item_uranium_rod_double: 10,
	item_uranium_rod_quad: 20
});
var NuclearReactor_red_render = ValidateIDData({
	item_reactor_reflector: true,
	item_advanced_reactor_reflector: true,
	item_reactor_plating: true,
	item_reactor_vent: true
});
var NuclearReactor_ActiveElements = ValidateIDData({
	item_uranium_rod_singler: 0.5,
	item_uranium_rod_double: 0.7,
	item_uranium_rod_quad: 0.9,
	item_reactor_reflector: 1,
	item_advanced_reactor_reflector: 1.5
});
var REACTOR = {
	const_reaction_speed: 1,
	FRAMETYPE: {
		HEATING: 0,
		COOLING: 1,
		NOTICK: 8
	},
	NULLFUNC: function() {},
	ItemData: ValidateIDData({
		item_uranium_rod_singler: {
			frametype: 0,
			powermp: 1,
			framefunc: function(_0x81e9x2bc, _0x81e9x5b, _0x81e9x4d8) {
				var _0x81e9x2c1 = this.getElementPower(_0x81e9x2bc, _0x81e9x5b);
				var _0x81e9x4d9 = 1 * (_0x81e9x2c1 + 1) * this.getRodPower(_0x81e9x2bc);
				this.addHeat(_0x81e9x2bc, _0x81e9x5b, _0x81e9x4d9);
				this.addGamma(_0x81e9x2bc, _0x81e9x5b, _0x81e9x4d9 * 2);
				damage = _0x81e9x4d9 * 1;
				_0x81e9x4d8.data += damage * REACTOR.const_reaction_speed;
				if (_0x81e9x4d8.data > 25000) {
					_0x81e9x4d8.id = item_uranium_rod_singler_depleted;
					_0x81e9x4d8.data = 25000
				}
			}
		},
		item_uranium_rod_double: {
			frametype: 0,
			powermp: 1,
			framefunc: function(_0x81e9x2bc, _0x81e9x5b, _0x81e9x4d8) {
				var _0x81e9x2c1 = this.getElementPower(_0x81e9x2bc, _0x81e9x5b);
				var _0x81e9x4d9 = 2 * (_0x81e9x2c1 + 1) * this.getRodPower(_0x81e9x2bc);
				this.addHeat(_0x81e9x2bc, _0x81e9x5b, _0x81e9x4d9);
				this.addGamma(_0x81e9x2bc, _0x81e9x5b, _0x81e9x4d9 * 2);
				damage = _0x81e9x4d9 * 0.5;
				_0x81e9x4d8.data += damage * REACTOR.const_reaction_speed;
				if (_0x81e9x4d8.data > 25000) {
					_0x81e9x4d8.id = item_uranium_rod_double_depleted;
					_0x81e9x4d8.data = 25000
				}
			}
		},
		item_uranium_rod_quad: {
			frametype: 0,
			powermp: 1.25,
			framefunc: function(_0x81e9x2bc, _0x81e9x5b, _0x81e9x4d8) {
				var _0x81e9x2c1 = this.getElementPower(_0x81e9x2bc, _0x81e9x5b);
				var _0x81e9x4d9 = 4 * (_0x81e9x2c1 + 1) * this.getRodPower(_0x81e9x2bc);
				this.addHeat(_0x81e9x2bc, _0x81e9x5b, _0x81e9x4d9);
				this.addGamma(_0x81e9x2bc, _0x81e9x5b, _0x81e9x4d9 * 2);
				damage = _0x81e9x4d9 * 0.25;
				_0x81e9x4d8.data += damage * REACTOR.const_reaction_speed;
				if (_0x81e9x4d8.data > 25000) {
					_0x81e9x4d8.id = item_uranium_rod_quad_depleted;
					_0x81e9x4d8.data = 25000
				}
			}
		},
		item_uranium_rod_singler_depleted: {
			frametype: 1,
			powermp: 0,
			framefunc: function(_0x81e9x2bc, _0x81e9x5b, _0x81e9x4d8) {
				if (_0x81e9x4d8.data <= 1) {
					_0x81e9x4d8.data = 1;
					if (this.useCoalDust(_0x81e9x2bc)) {
						_0x81e9x4d8.id = item_uranium_rod_singler
					}
				}
			},
			gammafunc: function(_0x81e9x2bc, _0x81e9x5b, _0x81e9x4da) {
				var _0x81e9x4db = _0x81e9x4da * REACTOR.const_reaction_speed / 1;
				var _0x81e9x4d8 = _0x81e9x2bc.container.getSlot(_0x81e9x5b);
				_0x81e9x4d8.data -= _0x81e9x4db
			}
		},
		item_uranium_rod_double_depleted: {
			frametype: 1,
			powermp: 0,
			framefunc: function(_0x81e9x2bc, _0x81e9x5b, _0x81e9x4d8) {
				if (_0x81e9x4d8.data <= 1) {
					_0x81e9x4d8.data = 1;
					if (this.useCoalDust(_0x81e9x2bc)) {
						_0x81e9x4d8.id = item_uranium_rod_double
					}
				}
			},
			gammafunc: function(_0x81e9x2bc, _0x81e9x5b, _0x81e9x4da) {
				var _0x81e9x4db = _0x81e9x4da * REACTOR.const_reaction_speed / 2;
				var _0x81e9x4d8 = _0x81e9x2bc.container.getSlot(_0x81e9x5b);
				_0x81e9x4d8.data -= _0x81e9x4db
			}
		},
		item_uranium_rod_quad_depleted: {
			frametype: 1,
			powermp: 0,
			framefunc: function(_0x81e9x2bc, _0x81e9x5b, _0x81e9x4d8) {
				if (_0x81e9x4d8.data <= 1) {
					_0x81e9x4d8.data = 1;
					if (this.useCoalDust(_0x81e9x2bc)) {
						_0x81e9x4d8.id = item_uranium_rod_quad
					}
				}
			},
			gammafunc: function(_0x81e9x2bc, _0x81e9x5b, _0x81e9x4da) {
				var _0x81e9x4db = _0x81e9x4da * REACTOR.const_reaction_speed / 4;
				var _0x81e9x4d8 = _0x81e9x2bc.container.getSlot(_0x81e9x5b);
				_0x81e9x4d8.data -= _0x81e9x4db
			}
		},
		item_coolant_circuit: {
			frametype: 1,
			powermp: 0,
			framefunc: function(_0x81e9x2bc, _0x81e9x5b, _0x81e9x4d8) {
				var _0x81e9x4dc = Math.min(10, _0x81e9x2bc.temp);
				var _0x81e9x4dd = this.heatNeighbourElements(_0x81e9x2bc, _0x81e9x5b, _0x81e9x4dc);
				_0x81e9x2bc.temp += _0x81e9x4dd - _0x81e9x4dc
			}
		},
		item_coolant_cell_singler: {
			frametype: 1,
			powermp: 0,
			heatfunc: function(_0x81e9x2bc, _0x81e9x5b, _0x81e9x4da) {
				var _0x81e9x4d8 = _0x81e9x2bc.container.getSlot(_0x81e9x5b);
				if (_0x81e9x4d8.data >= 5000) {
					_0x81e9x4d8.data = 5000;
					return _0x81e9x4da
				};
				_0x81e9x4d8.data += _0x81e9x4da / 2;
				return 0
			}
		},
		item_coolant_cell_triple: {
			frametype: 1,
			powermp: 0,
			heatfunc: function(_0x81e9x2bc, _0x81e9x5b, _0x81e9x4da) {
				var _0x81e9x4d8 = _0x81e9x2bc.container.getSlot(_0x81e9x5b);
				if (_0x81e9x4d8.data >= 15000) {
					_0x81e9x4d8.data = 15000;
					return _0x81e9x4da
				};
				_0x81e9x4d8.data += _0x81e9x4da / 2;
				return 0
			}
		},
		item_coolant_cell_six: {
			frametype: 1,
			powermp: 0,
			heatfunc: function(_0x81e9x2bc, _0x81e9x5b, _0x81e9x4da) {
				var _0x81e9x4d8 = _0x81e9x2bc.container.getSlot(_0x81e9x5b);
				if (_0x81e9x4d8.data >= 30000) {
					_0x81e9x4d8.data = 30000;
					return _0x81e9x4da
				};
				_0x81e9x4d8.data += _0x81e9x4da / 2;
				return 0
			}
		},
		item_cooling_vent: {
			frametype: 0,
			powermp: 0,
			framefunc: function(_0x81e9x2bc, _0x81e9x5b, _0x81e9x4d8) {
				_0x81e9x4d8.heat = 0
			},
			heatfunc: function(_0x81e9x2bc, _0x81e9x5b, _0x81e9x4da) {
				var _0x81e9x4d8 = _0x81e9x2bc.container.getSlot(_0x81e9x5b);
				var _0x81e9x4d9 = Math.min(_0x81e9x4da, 1 - _0x81e9x4d8.heat);
				_0x81e9x4d8.heat += _0x81e9x4d9;
				return _0x81e9x4da - _0x81e9x4d9
			}
		},
		item_cooling_vent_redstone: {
			frametype: 0,
			powermp: 0,
			framefunc: function(_0x81e9x2bc, _0x81e9x5b, _0x81e9x4d8) {
				_0x81e9x4d8.heat = 0
			},
			heatfunc: function(_0x81e9x2bc, _0x81e9x5b, _0x81e9x4da) {
				var _0x81e9x4d8 = _0x81e9x2bc.container.getSlot(_0x81e9x5b);
				var _0x81e9x4d9 = Math.min(_0x81e9x4da, 2 - _0x81e9x4d8.heat);
				_0x81e9x4d8.heat += _0x81e9x4d9;
				return _0x81e9x4da - _0x81e9x4d9
			}
		},
		item_cooling_vent_lapis: {
			frametype: 0,
			powermp: 0,
			framefunc: function(_0x81e9x2bc, _0x81e9x5b, _0x81e9x4d8) {
				_0x81e9x4d8.heat = 0
			},
			heatfunc: function(_0x81e9x2bc, _0x81e9x5b, _0x81e9x4da) {
				var _0x81e9x4d8 = _0x81e9x2bc.container.getSlot(_0x81e9x5b);
				var _0x81e9x4d9 = Math.min(_0x81e9x4da, 4 - _0x81e9x4d8.heat);
				_0x81e9x4d8.heat += _0x81e9x4d9;
				return _0x81e9x4da - _0x81e9x4d9
			}
		},
		item_heating_circuit: {
			frametype: 0,
			powermp: 0,
			framefunc: function(_0x81e9x2bc, _0x81e9x5b, _0x81e9x4d8) {
				_0x81e9x4d8.heat = 0
			},
			heatfunc: function(_0x81e9x2bc, _0x81e9x5b, _0x81e9x4da) {
				var _0x81e9x4d8 = _0x81e9x2bc.container.getSlot(_0x81e9x5b);
				var _0x81e9x4d9 = Math.min(_0x81e9x4da, 1 - _0x81e9x4d8.heat);
				_0x81e9x2bc.waterQ += _0x81e9x4d9;
				_0x81e9x4d8.heat += _0x81e9x4d9;
				return _0x81e9x4da - _0x81e9x4d9
			}
		},
		item_heating_circuit_redstone: {
			frametype: 0,
			powermp: 0,
			framefunc: function(_0x81e9x2bc, _0x81e9x5b, _0x81e9x4d8) {
				_0x81e9x4d8.heat = 0
			},
			heatfunc: function(_0x81e9x2bc, _0x81e9x5b, _0x81e9x4da) {
				var _0x81e9x4d8 = _0x81e9x2bc.container.getSlot(_0x81e9x5b);
				var _0x81e9x4d9 = Math.min(_0x81e9x4da, 3 - _0x81e9x4d8.heat);
				_0x81e9x2bc.waterQ += _0x81e9x4d9;
				_0x81e9x4d8.heat += _0x81e9x4d9;
				return _0x81e9x4da - _0x81e9x4d9
			}
		},
		item_heating_circuit_golden: {
			frametype: 0,
			powermp: 0,
			framefunc: function(_0x81e9x2bc, _0x81e9x5b, _0x81e9x4d8) {
				_0x81e9x4d8.heat = 0
			},
			heatfunc: function(_0x81e9x2bc, _0x81e9x5b, _0x81e9x4da) {
				var _0x81e9x4d8 = _0x81e9x2bc.container.getSlot(_0x81e9x5b);
				var _0x81e9x4d9 = Math.min(_0x81e9x4da, 6 - _0x81e9x4d8.heat);
				_0x81e9x2bc.waterQ += _0x81e9x4d9;
				_0x81e9x4d8.heat += _0x81e9x4d9;
				return _0x81e9x4da - _0x81e9x4d9
			}
		},
		item_reactor_plating: {
			frametype: 0,
			powermp: 0,
			heatfunc: function(_0x81e9x2bc, _0x81e9x5b, _0x81e9x4da) {
				return _0x81e9x4da * 0.9
			}
		}
	}),
	getItemData: function(_0x81e9x10) {
		return this.ItemData[_0x81e9x10]
	}
};

function MachineReactorCell() {
	this.parent = MachineBase;
	this.parent();
	this.id = block_uranium_rod_controller;
	this.getMachineName = function() {
		return "uranium rod controller"
	};
	this.canDeactivate = function() {
		return false
	};
	this.updateMachine = function(_0x81e9x2bc) {
		if (_0x81e9x2bc.removed) {
			return
		};
		var _0x81e9x1bd = getTime();
		RunOnMainThread(function() {
			if (_0x81e9x1bd % 10 == 0) {
				var _0x81e9x401 = 0;
				if (_0x81e9x2bc.reactor_) {
					_0x81e9x401 = _0x81e9x2bc.reactor_.coal_rod
				};
				var _0x81e9x4df = (getTime() % 20) / 20;
				var _0x81e9x16 = [{
					type: 0,
					len: 1
				}, {
					type: 0,
					len: 1
				}, {
					type: 0,
					len: 1
				}, {
					type: 0,
					len: 1
				}];
				Entity.remove(_0x81e9x2bc.ent);
				if (config_rod_renderer && allowBarrelAnimationOnHost) {
					if (!_0x81e9x2bc.anim) {
						_0x81e9x2bc.anim = CreateAnimation(_0x81e9x2bc.x + 0.5, _0x81e9x2bc.y - 2, _0x81e9x2bc.z + 0.5);
						_0x81e9x2bc.anim.setSkin("mob/reactor_model.png");
						_0x81e9x2bc.anim.setHeight(1.5)
					};
					if (_0x81e9x2bc.reactor_) {
						var _0x81e9x158 = getMachineType(_0x81e9x2bc.reactor_);
						var _0x81e9x198 = _0x81e9x158.getContainer(_0x81e9x2bc.reactor_);
						var _0x81e9x1c0 = (_0x81e9x2bc.reactor_position % 3) * 2 + parseInt(_0x81e9x2bc.reactor_position / 3) * 12;
						for (var i = 0; i < 4; i++) {
							var _0x81e9x1c7 = 0;
							if (i > 1) {
								_0x81e9x1c7 = 4
							};
							var _0x81e9x5b = _0x81e9x198.getSlot(_0x81e9x1c0 + i + _0x81e9x1c7);
							if (NuclearReactor_uranium[_0x81e9x5b.id]) {
								_0x81e9x16[i].type = 1
							};
							if (NuclearReactor_coolant[_0x81e9x5b.id]) {
								_0x81e9x16[i].type = 2
							};
							if (NuclearReactor_red_render[_0x81e9x5b.id]) {
								_0x81e9x16[i].type = 3
							}
						}
					};
					_0x81e9x2bc.anim.setRender(CreateReactorModel(_0x81e9x2bc.uniqueID, _0x81e9x16, _0x81e9x401).renderType)
				}
			}
		})
	};
	this.getInfo = function(_0x81e9x15a) {
		if (_0x81e9x15a.reactor_) {
			return "[DEBUG] pos: " + _0x81e9x15a.reactor_position
		} else {
			return "[DEBUG] no reactor"
		}
	};
	this.onDestroy = function(_0x81e9x2bc) {
		if (_0x81e9x2bc.anim) {
			_0x81e9x2bc.anim.destroy()
		};
		if (_0x81e9x2bc.reactor_) {
			var _0x81e9x158 = getMachineType(_0x81e9x2bc.reactor_);
			var _0x81e9x198 = _0x81e9x158.getContainer(_0x81e9x2bc.reactor_);
			var _0x81e9x1c0 = (_0x81e9x2bc.reactor_position % 3) * 2 + parseInt(_0x81e9x2bc.reactor_position / 3) * 12;
			for (var i = 0; i < 4; i++) {
				var _0x81e9x1c7 = 0;
				if (i > 1) {
					_0x81e9x1c7 = 4
				};
				var _0x81e9x5b = _0x81e9x198.getSlot(_0x81e9x1c0 + i + _0x81e9x1c7);
				if (_0x81e9x5b.id) {
					Level.dropItem(_0x81e9x2bc.x + 0.5, _0x81e9x2bc.y + 0.5, _0x81e9x2bc.z + 0.5, 0, _0x81e9x5b.id, _0x81e9x5b.count, _0x81e9x5b.data)
				};
				_0x81e9x5b.id = _0x81e9x5b.count = _0x81e9x5b.data = 0
			}
		}
	}
}

function MachineNuclearReactor() {
	this.parent = MachineBase;
	this.parent();
	this.id = block_nuclear_reactor_controller;
	this.getInfo = function(_0x81e9x15a) {
		return "heat: " + _0x81e9x15a.temp
	};
	this.getMachineName = function() {
		return "nuclear reactor core"
	};
	this.getHelpGuideLink = function(_0x81e9x2bc) {
		return {
			chapter: "nuclear powerplant",
			page: 0
		}
	};
	this.getContainerId = function() {
		return 9
	};
	this.getGUIMetadata = function(_0x81e9x15a) {
		if (_0x81e9x15a.GUIMetadata) {
			return _0x81e9x15a.GUIMetadata
		};
		return 0
	};
	this.getInfo = function(_0x81e9x2bc) {
		return "Temp: " + parseInt(_0x81e9x2bc.temp) + "/" + parseInt(_0x81e9x2bc.chain_reaction_temp) + "°C\n + " + parseInt(_0x81e9x2bc.info_current_heating) + "°C/s\nOut: " + parseInt(_0x81e9x2bc.info_output)
	};
	this.updateMachine = function(_0x81e9x15a) {
		var _0x81e9x1bd = getTime();
		if (!_0x81e9x15a.coal_rod) {
			_0x81e9x15a.coal_rod = 0
		};
		if (!_0x81e9x15a.volume) {
			_0x81e9x15a.volume = 0
		};
		if (!_0x81e9x15a.temp) {
			_0x81e9x15a.temp = 0
		};
		if (!_0x81e9x15a.waterQ) {
			_0x81e9x15a.waterQ = 0
		};
		if (!_0x81e9x15a.coal_rod_target && _0x81e9x15a.coal_rod_target != 0) {
			_0x81e9x15a.coal_rod_target = 1
		};
		if (!_0x81e9x15a.chain_reaction) {
			_0x81e9x15a.chain_reaction = 0
		};
		if (_0x81e9x1bd % 40 == 0 || !_0x81e9x15a.borders) {
			this.CheckBorders(_0x81e9x15a)
		};
		var _0x81e9x194 = this.getContainer(_0x81e9x15a);
		if (_0x81e9x1bd % 4 == 0) {
			_0x81e9x194.setLiquidBar(_0x81e9x15a.volume / 16, 8);
			_0x81e9x194.setCustomBar(0x00, _0x81e9x15a.coal_rod);
			_0x81e9x194.setCustomBarPos(0x01, 217, 17 + parseInt(_0x81e9x15a.coal_rod_target * 120));
			_0x81e9x194.setCustomBar(0x01, 1);
			_0x81e9x194.setCustomBar(0x02, _0x81e9x15a.temp / _0x81e9x15a.chain_reaction_temp);
			var _0x81e9x4e1 = "heating: " + _0x81e9x15a.info_casing_heating;
			if (_0x81e9x15a.info_casing_heating < 0) {
				var _0x81e9x4e1 = "cooling: " + -_0x81e9x15a.info_casing_heating
			};
			_0x81e9x194.setGuiText(0x05, "casing temp: " + parseInt(_0x81e9x15a.temp) + "/" + parseInt(_0x81e9x15a.casing_max_heat) + "  (" + _0x81e9x4e1 + ")" + "\noverheat temp: " + parseInt(_0x81e9x15a.chain_reaction_temp) + "\noutput: " + parseInt(_0x81e9x15a.info_output) + " Eu/t", android.graphics.Color.BLACK);
			var _0x81e9x1b9 = 0.0075;
			if (_0x81e9x15a.throwing_rods) {
				_0x81e9x1b9 = 0.05
			};
			_0x81e9x15a.coal_rod = addToTarget(_0x81e9x15a.coal_rod, _0x81e9x15a.coal_rod_target, _0x81e9x1b9);
			if (_0x81e9x15a.coal_rod > 0.999) {
				_0x81e9x15a.throwing_rods = false
			}
		};
		if (_0x81e9x15a.borders && _0x81e9x1bd % 2 == 0) {
			this.CheckCasing(_0x81e9x15a);
			if (_0x81e9x1bd % 6 == 0) {
				_0x81e9x194.lockSlots = (_0x81e9x15a.temp > 1000 || _0x81e9x15a.chain_reaction > 0.1);
				if (_0x81e9x194.lockSlots) {
					_0x81e9x194.setGuiText(0x03, "LOCKED", android.graphics.Color.RED)
				} else {
					_0x81e9x194.setGuiText(0x03, "UNLOCKED", android.graphics.Color.BLACK)
				}
			};
			if (!_0x81e9x15a.info_output) {
				_0x81e9x15a.info_output = 0
			};
			_0x81e9x194.setGuiText(0x04, "out: " + parseInt(_0x81e9x15a.info_output) + " Eu/t", android.graphics.Color.BLUE)
		};
		this.ReactionTick(_0x81e9x15a, _0x81e9x1bd % 2);
		if (_0x81e9x1bd % 2 == 1) {
			this.outputEnergy(_0x81e9x15a)
		};
		this.updateCasingHeat(_0x81e9x15a)
	};
	this.ReactionTick = function(_0x81e9x2bc, _0x81e9x4e2) {
		var _0x81e9x198 = this.getContainer(_0x81e9x2bc);
		if (_0x81e9x4e2 == 0) {
			_0x81e9x2bc.info_casing_heating = parseInt(_0x81e9x2bc.temp - _0x81e9x2bc.last_casing_heat);
			_0x81e9x2bc.last_casing_heat = _0x81e9x2bc.temp
		};
		for (var i in _0x81e9x198.slots) {
			var _0x81e9x5b = _0x81e9x198.slots[i];
			var _0x81e9x16 = REACTOR.getItemData(_0x81e9x5b.id);
			if (_0x81e9x16 && _0x81e9x16.frametype == _0x81e9x4e2) {
				this.func_ = _0x81e9x16.framefunc;
				if (this.func_) {
					this.func_(_0x81e9x2bc, parseInt(i), _0x81e9x5b)
				}
			}
		}
	};
	this.getRodPower = function(_0x81e9x2bc) {
		return 1 - _0x81e9x2bc.coal_rod + _0x81e9x2bc.chain_reaction
	};
	this.getElementData = function(_0x81e9x194, _0x81e9x5b) {
		var _0x81e9x5b = _0x81e9x194.getSlot(_0x81e9x5b);
		if (!_0x81e9x5b) {
			return null
		};
		return REACTOR.getItemData(_0x81e9x5b.id)
	};
	this.getElementDataVal = function(_0x81e9x194, _0x81e9x5b, _0x81e9x4e3, _0x81e9x156) {
		var _0x81e9x16 = this.getElementData(_0x81e9x194, _0x81e9x5b);
		if (!_0x81e9x16 || _0x81e9x16[_0x81e9x4e3] + "" == "undefined") {
			return _0x81e9x156
		};
		return _0x81e9x16[_0x81e9x4e3]
	};
	this.getElementPower = function(_0x81e9x2bc, _0x81e9x5b) {
		var _0x81e9x194 = _0x81e9x2bc.container;
		var _0x81e9x4e4 = this.getElementDataVal(_0x81e9x194, _0x81e9x5b + 1, "powermp", 0);
		var _0x81e9x4e5 = this.getElementDataVal(_0x81e9x194, _0x81e9x5b - 1, "powermp", 0);
		var _0x81e9x4e6 = this.getElementDataVal(_0x81e9x194, _0x81e9x5b + 6, "powermp", 0);
		var _0x81e9x4e7 = this.getElementDataVal(_0x81e9x194, _0x81e9x5b - 6, "powermp", 0);
		return _0x81e9x4e4 + _0x81e9x4e5 + _0x81e9x4e6 + _0x81e9x4e7
	};
	this.provideNeighbourCooling = function(_0x81e9x2bc, _0x81e9x5b, _0x81e9x4da) {
		var _0x81e9x194 = _0x81e9x2bc.container
	};
	this.addHeatToWater = function(_0x81e9x2bc, _0x81e9x4da) {
		_0x81e9x2bc.waterQ += _0x81e9x4da
	};
	this.addHeatToCasing = function(_0x81e9x2bc, _0x81e9x4da) {
		_0x81e9x2bc.temp += _0x81e9x4da
	};
	this.addHeat = function(_0x81e9x2bc, _0x81e9x5b, _0x81e9x4da) {
		var _0x81e9x4e8 = _0x81e9x4da * 0.1;
		_0x81e9x4da -= _0x81e9x4e8;
		var _0x81e9x263 = this.getRodPower(_0x81e9x2bc) * 3;
		var _0x81e9x4e9 = Math.min(_0x81e9x4da, _0x81e9x263);
		_0x81e9x4e8 += _0x81e9x4da - _0x81e9x4e9;
		this.addHeatToWater(_0x81e9x2bc, _0x81e9x4e9);
		this.addHeatToCasing(_0x81e9x2bc, _0x81e9x4e8)
	};
	this.heatElement = function(_0x81e9x2bc, _0x81e9x5b, _0x81e9x4da) {
		this.func_ = this.getElementDataVal(_0x81e9x2bc.container, _0x81e9x5b, "heatfunc", null);
		if (this.func_) {
			return this.func_(_0x81e9x2bc, _0x81e9x5b, _0x81e9x4da) || 0
		};
		return _0x81e9x4da
	};
	this.heatNeighbourElements = function(_0x81e9x2bc, _0x81e9x5b, _0x81e9x4da) {
		var _0x81e9x1a5 = 0;
		_0x81e9x1a5 += this.heatElement(_0x81e9x2bc, _0x81e9x5b - 1, _0x81e9x4da / 4);
		_0x81e9x1a5 += this.heatElement(_0x81e9x2bc, _0x81e9x5b + 1, _0x81e9x4da / 4);
		_0x81e9x1a5 += this.heatElement(_0x81e9x2bc, _0x81e9x5b - 6, _0x81e9x4da / 4);
		_0x81e9x1a5 += this.heatElement(_0x81e9x2bc, _0x81e9x5b + 6, _0x81e9x4da / 4);
		return _0x81e9x1a5
	};
	this.addGamma = function(_0x81e9x2bc, _0x81e9x5b, _0x81e9x4da) {
		var _0x81e9x194 = _0x81e9x2bc.container;
		this.func_ = this.getElementDataVal(_0x81e9x194, _0x81e9x5b + 1, "gammafunc", REACTOR.NULLFUNC);
		this.func_(_0x81e9x2bc, _0x81e9x5b + 1, _0x81e9x4da / 4);
		this.func_ = this.getElementDataVal(_0x81e9x194, _0x81e9x5b - 1, "gammafunc", REACTOR.NULLFUNC);
		this.func_(_0x81e9x2bc, _0x81e9x5b - 1, _0x81e9x4da / 4);
		this.func_ = this.getElementDataVal(_0x81e9x194, _0x81e9x5b + 6, "gammafunc", REACTOR.NULLFUNC);
		this.func_(_0x81e9x2bc, _0x81e9x5b + 6, _0x81e9x4da / 4);
		this.func_ = this.getElementDataVal(_0x81e9x194, _0x81e9x5b - 6, "gammafunc", REACTOR.NULLFUNC);
		this.func_(_0x81e9x2bc, _0x81e9x5b - 6, _0x81e9x4da / 4)
	};
	this.useCoalDust = function(_0x81e9x2bc) {
		var _0x81e9x4ea = _0x81e9x2bc.container.getSlot(36);
		if (_0x81e9x4ea.id == item_coal_dust) {
			_0x81e9x4ea.count--;
			if (_0x81e9x4ea.count < 1) {
				_0x81e9x4ea.id = 0
			};
			return true
		};
		return false
	};
	this.outputEnergy = function(_0x81e9x2bc) {
		if (!_0x81e9x2bc.waterQ) {
			_0x81e9x2bc.waterQ = 0
		};
		var _0x81e9x4eb = Math.min(_0x81e9x2bc.volume, _0x81e9x2bc.waterQ / 200);
		_0x81e9x2bc.waterQ -= _0x81e9x4eb * 200;
		_0x81e9x2bc.temp += _0x81e9x2bc.waterQ;
		_0x81e9x2bc.waterQ = 0;
		_0x81e9x2bc.volume -= _0x81e9x4eb;
		var _0x81e9x18c = _0x81e9x4eb * 1000;
		if (_0x81e9x2bc.reactor_turbine) {
			_0x81e9x2bc.reactor_turbine.reactor_energy += _0x81e9x18c
		};
		_0x81e9x2bc.info_output = _0x81e9x18c / 2
	};
	this.updateCasingHeat = function(_0x81e9x2bc) {
		_0x81e9x2bc.casing_max_heat = 10000;
		_0x81e9x2bc.chain_reaction_temp = 1000 + 2000 * _0x81e9x2bc.coal_rod;
		_0x81e9x2bc.temp = Math.max(0, _0x81e9x2bc.temp - 0.2);
		if (_0x81e9x2bc.temp > _0x81e9x2bc.casing_max_heat) {
			this.NukeExplosion(_0x81e9x2bc);
			return
		};
		if (_0x81e9x2bc.coal_rod > 0.99) {
			_0x81e9x2bc.chain_reaction = Math.max(0, _0x81e9x2bc.chain_reaction - 0.01)
		} else {
			if (_0x81e9x2bc.temp > _0x81e9x2bc.chain_reaction_temp && _0x81e9x2bc.chain_reaction < 0.2) {
				_0x81e9x2bc.chain_reaction = 0.2
			} else {
				if (_0x81e9x2bc.chain_reaction > 0) {
					_0x81e9x2bc.chain_reaction += 0.005;
					ModPE.showTipMessage("§e" + translate("Chain reaction in nuclear reactor! Overheating: ") + parseInt(_0x81e9x2bc.chain_reaction * 10) / 10)
				}
			}
		};
		if (!_0x81e9x2bc.FullCasing) {
			_0x81e9x2bc.volume = Math.max(_0x81e9x2bc.volume - 0.1, 0)
		}
	};
	this.initValues = function(_0x81e9x15a) {
		if (!_0x81e9x15a.temp) {
			_0x81e9x15a.temp = 0
		};
		this.getEnergyStored(_0x81e9x15a)
	};
	this.NukeExplosion = function(_0x81e9x2bc) {
		if (_0x81e9x2bc.exploded) {
			return
		};
		_0x81e9x2bc.container.dropInv();
		explode(_0x81e9x2bc.x, _0x81e9x2bc.y, _0x81e9x2bc.z, 40);
		AnimateNuclearExplosion(_0x81e9x2bc.x, _0x81e9x2bc.y, _0x81e9x2bc.z, 0.85);
		_0x81e9x2bc.exploded = true
	};
	this.SmallExplosion = function(_0x81e9x2bc) {
		if (_0x81e9x2bc.exploded) {
			return
		};
		explode(_0x81e9x2bc.x, _0x81e9x2bc.y, _0x81e9x2bc.z, 2 + _0x81e9x2bc.temp / 300);
		AnimateNuclearExplosion(_0x81e9x2bc.x, _0x81e9x2bc.y, _0x81e9x2bc.z, 0.22);
		_0x81e9x2bc.exloded = true
	};
	this.onDestroy = function(_0x81e9x2bc) {
		if (_0x81e9x2bc.chain_reaction > 0.5) {
			this.NukeExplosion(_0x81e9x2bc)
		} else {
			if (_0x81e9x2bc.temp > 1000) {
				this.SmallExplosion(_0x81e9x2bc)
			}
		}
	};
	this.canDeactivate = function() {
		return false
	};
	this.isUsingLiquid = function() {
		return true
	};
	this.getMaxVolume = function() {
		return 16
	};
	this.getLiquidType = function(_0x81e9x2bc) {
		return 8
	};
	this.CheckBorders = function(_0x81e9x2bc) {
		var _0x81e9x10 = block_uranium_rod_controller;
		_0x81e9x2bc.borders = [0, 0, 0, 0];
		_0x81e9x2bc.controllers = [];
		_0x81e9x2bc.GUIMetadata = 0;
		for (var _0x81e9x26 = -1; _0x81e9x26 <= 1; _0x81e9x26++) {
			for (var _0x81e9x28 = -1; _0x81e9x28 <= 1; _0x81e9x28++) {
				if (getTile(_0x81e9x2bc.x + _0x81e9x26, _0x81e9x2bc.y - 1, _0x81e9x2bc.z + _0x81e9x28) == _0x81e9x10) {
					var _0x81e9x15a = getMachine(_0x81e9x2bc.x + _0x81e9x26, _0x81e9x2bc.y - 1, _0x81e9x2bc.z + _0x81e9x28);
					_0x81e9x2bc.GUIMetadata |= 1 << ((_0x81e9x26 + 1) * 3 + _0x81e9x28 + 1);
					if (_0x81e9x15a) {
						_0x81e9x15a.reactor_ = _0x81e9x2bc;
						_0x81e9x15a.reactor_position = ((1 + _0x81e9x26) * 3 + 1 + _0x81e9x28);
						_0x81e9x2bc.controllers.push(_0x81e9x15a);
						_0x81e9x2bc.borders[0] = Math.min(_0x81e9x2bc.borders[0], _0x81e9x26);
						_0x81e9x2bc.borders[1] = Math.max(_0x81e9x2bc.borders[1], _0x81e9x26);
						_0x81e9x2bc.borders[2] = Math.min(_0x81e9x2bc.borders[2], _0x81e9x28);
						_0x81e9x2bc.borders[3] = Math.max(_0x81e9x2bc.borders[3], _0x81e9x28)
					}
				}
			}
		}
	};
	this.PlaceWaterInsideCasing = function(_0x81e9x2bc) {
		for (var _0x81e9x26 = _0x81e9x2bc.borders[0]; _0x81e9x26 <= _0x81e9x2bc.borders[1]; _0x81e9x26++) {
			for (var _0x81e9x28 = _0x81e9x2bc.borders[2]; _0x81e9x28 <= _0x81e9x2bc.borders[3]; _0x81e9x28++) {
				for (var _0x81e9x27 = 0; _0x81e9x27 < 3; _0x81e9x27++) {
					var _0x81e9x2b3 = getTile(_0x81e9x2bc.x + _0x81e9x26, _0x81e9x2bc.y - 4 + _0x81e9x27, _0x81e9x2bc.z + _0x81e9x28);
					if (_0x81e9x2b3 == 8 || _0x81e9x2b3 == 9) {
						setTile(_0x81e9x2bc.x + _0x81e9x26, _0x81e9x2bc.y - 4 + _0x81e9x27, _0x81e9x2bc.z + _0x81e9x28, 0)
					}
				};
				for (var _0x81e9x27 = 0; _0x81e9x27 < _0x81e9x2bc.volume / 8; _0x81e9x27++) {
					var _0x81e9x1a = 8 - _0x81e9x2bc.volume + _0x81e9x27 * 8;
					if (_0x81e9x1a <= 0) {
						_0x81e9x1a = 0
					};
					var _0x81e9x2b3 = getTile(_0x81e9x2bc.x + _0x81e9x26, _0x81e9x2bc.y - 4 + _0x81e9x27, _0x81e9x2bc.z + _0x81e9x28);
					if (_0x81e9x2b3 == 0 || _0x81e9x2b3 == 8 || _0x81e9x2b3 == 9) {
						setTile(_0x81e9x2bc.x + _0x81e9x26, _0x81e9x2bc.y - 4 + _0x81e9x27, _0x81e9x2bc.z + _0x81e9x28, 8, _0x81e9x1a)
					}
				}
			}
		}
	};
	this.CheckCasing = function(_0x81e9x2bc) {
		if (!_0x81e9x2bc.casing_check) {
			_0x81e9x2bc.casing_check = 0;
			_0x81e9x2bc.FullCasing_ = _0x81e9x2bc.FullCasing = true
		};
		var _0x81e9x1b0 = _0x81e9x2bc.borders[1] - _0x81e9x2bc.borders[0] + 3;
		var _0x81e9x1b2 = _0x81e9x2bc.borders[3] - _0x81e9x2bc.borders[2] + 3;
		var _0x81e9x38d = _0x81e9x2bc.casing_check % (_0x81e9x1b0 * _0x81e9x1b2);
		if (_0x81e9x38d == 0) {
			_0x81e9x2bc.FullCasing = _0x81e9x2bc.FullCasing_;
			_0x81e9x2bc.FullCasing_ = true
		};
		var _0x81e9x1ce = _0x81e9x38d % _0x81e9x1b0;
		var _0x81e9x1d0 = parseInt(_0x81e9x38d / _0x81e9x1b0);
		var _0x81e9x4ec = (_0x81e9x1ce == 0 || _0x81e9x1d0 == 0 || _0x81e9x1ce == _0x81e9x1b0 - 1 || _0x81e9x1d0 == _0x81e9x1b2 - 1);
		_0x81e9x1ce += _0x81e9x2bc.borders[0] - 1 + _0x81e9x2bc.x;
		_0x81e9x1d0 += _0x81e9x2bc.borders[2] - 1 + _0x81e9x2bc.z;
		for (var _0x81e9x1cf = -5; _0x81e9x1cf < 0; _0x81e9x1cf++) {
			var _0x81e9x193 = getTile(_0x81e9x1ce, _0x81e9x2bc.y + _0x81e9x1cf, _0x81e9x1d0);
			if (!_0x81e9x4ec) {
				if (_0x81e9x1cf == -5 && _0x81e9x193 != block_hardened_block && _0x81e9x193 != block_hardened_glass) {
					_0x81e9x2bc.FullCasing_ = false
				} else {
					if (_0x81e9x1cf == -1 && _0x81e9x193 != block_uranium_rod_controller) {
						_0x81e9x2bc.FullCasing_ = false
					} else {
						if (_0x81e9x193 != 0 && _0x81e9x193 != 8 && _0x81e9x193 != 9 && _0x81e9x1cf != -5 && _0x81e9x1cf != -1) {
							_0x81e9x2bc.FullCasing_ = false
						}
					}
				}
			};
			if (_0x81e9x4ec) {
				if (_0x81e9x193 == block_nuclear_reactor_turbine && _0x81e9x1cf < -1 && _0x81e9x1cf > -5) {
					var _0x81e9x4ed = getMachine(_0x81e9x1ce, _0x81e9x2bc.y + _0x81e9x1cf, _0x81e9x1d0);
					if (_0x81e9x4ed) {
						_0x81e9x2bc.reactor_turbine = _0x81e9x4ed
					}
				} else {
					if (_0x81e9x193 != block_hardened_block && _0x81e9x193 != block_hardened_glass) {
						_0x81e9x2bc.FullCasing_ = false
					}
				}
			}
		};
		if (!_0x81e9x2bc.FullCasing_) {
			_0x81e9x2bc.reactor_turbine = null
		};
		_0x81e9x2bc.casing_check++
	};
	this.provideReactionFrame = function(_0x81e9x15a) {
		var _0x81e9x198 = this.getContainer(_0x81e9x15a);
		var _0x81e9x4ee = 0;
		for (var i in _0x81e9x198.slots) {
			var _0x81e9x5b = _0x81e9x198.slots[i];
			var _0x81e9x10 = _0x81e9x5b.id;
			if (NuclearReactor_uranium[_0x81e9x10]) {
				_0x81e9x4ee += this.ProvideUranium(_0x81e9x198, parseInt(i))
			}
		};
		var _0x81e9x4ef = (1 - _0x81e9x15a.coal_rod) * 1.5;
		_0x81e9x15a.chain_reaction_temp = _0x81e9x15a.coal_rod * 4000 + 300;
		if (_0x81e9x15a.chain_reaction && _0x81e9x15a.chain_reaction > 0) {
			_0x81e9x4ef += _0x81e9x15a.chain_reaction;
			_0x81e9x15a.chain_reaction += 0.05;
			if (_0x81e9x15a.coal_rod > 0.999) {
				_0x81e9x15a.chain_reaction -= 0.75
			};
			ModPE.showTipMessage("§e" + translate("Chain reaction in nuclear reactor! Overheating: ") + parseInt(_0x81e9x4ef * 10) / 10)
		};
		_0x81e9x4ee *= _0x81e9x4ef;
		_0x81e9x15a.info_current_heating = _0x81e9x4ee;
		_0x81e9x15a.temp += _0x81e9x4ee;
		if (_0x81e9x15a.temp > 0) {
			_0x81e9x15a.temp--
		};
		if (_0x81e9x15a.temp < 0) {
			_0x81e9x15a.temp = 0
		};
		if (_0x81e9x15a.temp > _0x81e9x15a.chain_reaction_temp && !_0x81e9x15a.chain_reaction) {
			_0x81e9x15a.chain_reaction = 0.2
		};
		if (_0x81e9x15a.temp > 7000) {
			this.NukeExplosion(_0x81e9x15a)
		}
	};
	this.ProvideOutput = function(_0x81e9x15a) {
		if (!_0x81e9x15a.FullCasing) {
			_0x81e9x15a.volume = Math.max(_0x81e9x15a.volume - 2, 0)
		};
		if (_0x81e9x15a.temp > 100) {
			var _0x81e9x4eb = Math.min(Math.min(5, _0x81e9x15a.volume), (_0x81e9x15a.temp - 100) / 350);
			_0x81e9x15a.temp -= _0x81e9x4eb * 350;
			var _0x81e9x189 = _0x81e9x4eb * 1000;
			_0x81e9x15a.info_output = _0x81e9x189;
			_0x81e9x15a.info_cooling = _0x81e9x4eb * 350;
			_0x81e9x15a.volume -= _0x81e9x4eb;
			if (_0x81e9x15a.reactor_turbine) {
				_0x81e9x15a.reactor_turbine.reactor_energy += _0x81e9x189
			}
		}
	};
	this.ProvideUranium = function(_0x81e9x194, _0x81e9x4f0) {
		var _0x81e9x5b = _0x81e9x194.getSlot(_0x81e9x4f0);
		var _0x81e9x4f1 = NuclearReactor_uranium[_0x81e9x5b.id];
		if (!_0x81e9x4f1) {
			return 0
		};
		var _0x81e9x4f2 = this.CalcElementHeating(_0x81e9x194, _0x81e9x4f0 - 6, _0x81e9x4f1);
		var _0x81e9x4f3 = this.CalcElementHeating(_0x81e9x194, _0x81e9x4f0 + 6, _0x81e9x4f1);
		var _0x81e9x4f4 = this.CalcElementHeating(_0x81e9x194, _0x81e9x4f0 - 1, _0x81e9x4f1);
		var _0x81e9x4f5 = this.CalcElementHeating(_0x81e9x194, _0x81e9x4f0 + 1, _0x81e9x4f1);
		var _0x81e9x4f6 = Math.max(0, _0x81e9x4f2) + Math.max(0, _0x81e9x4f3) + Math.max(0, _0x81e9x4f4) + Math.max(0, _0x81e9x4f5) + _0x81e9x4f1;
		var _0x81e9x4f7 = _0x81e9x4f2 + _0x81e9x4f3 + _0x81e9x4f4 + _0x81e9x4f5 + _0x81e9x4f1;
		_0x81e9x5b.data += parseInt(_0x81e9x4f6 / _0x81e9x4f1) / 2;
		if (_0x81e9x5b.data > 25000) {
			_0x81e9x5b.id = _0x81e9x5b.count = _0x81e9x5b.data = 0
		};
		return _0x81e9x4f7
	};
	this.CalcElementHeating = function(_0x81e9x194, _0x81e9x4f0, _0x81e9x4f8) {
		var _0x81e9x5b = _0x81e9x194.getSlot(_0x81e9x4f0);
		if (!_0x81e9x5b) {
			return 0
		};
		if (NuclearReactor_ActiveElements[_0x81e9x5b.id]) {
			return _0x81e9x4f8 * NuclearReactor_ActiveElements[_0x81e9x5b.id]
		};
		if (NuclearReactor_coolant[_0x81e9x5b.id]) {
			var _0x81e9x263 = NuclearReactor_coolant[_0x81e9x5b.id];
			var _0x81e9x4f9 = Math.min(_0x81e9x263 - _0x81e9x5b.data, _0x81e9x4f8);
			_0x81e9x5b.data += _0x81e9x4f9 / 2;
			return -_0x81e9x4f9
		};
		return 0
	};
	this.save = function(_0x81e9x17, _0x81e9x15a) {
		DataSaver.Save(_0x81e9x17 + "temp", _0x81e9x15a.temp);
		DataSaver.Save(_0x81e9x17 + "volume", _0x81e9x15a.volume);
		DataSaver.Save(_0x81e9x17 + "chain_reaction", _0x81e9x15a.chain_reaction);
		DataSaver.Save(_0x81e9x17 + "cRod", _0x81e9x15a.coal_rod);
		DataSaver.Save(_0x81e9x17 + "cRodTarget", _0x81e9x15a.coal_rod_target)
	};
	this.read = function(_0x81e9x17, _0x81e9x15a) {
		_0x81e9x15a.temp = DataSaver.ReadFloat(_0x81e9x17 + "temp");
		_0x81e9x15a.volume = DataSaver.ReadFloat(_0x81e9x17 + "volume");
		_0x81e9x15a.chain_reaction = DataSaver.ReadFloat(_0x81e9x17 + "chain_reaction");
		_0x81e9x15a.coal_rod = DataSaver.ReadFloat(_0x81e9x17 + "cRod");
		_0x81e9x15a.coal_rod_target = DataSaver.ReadFloat(_0x81e9x17 + "cRodTarget")
	};
	this.cacheCells = function(_0x81e9x15a) {
		if (getTime() % 23 != 0) {
			return
		};
		_0x81e9x15a.cells = [];
		var _0x81e9x2c0 = [
			[_0x81e9x15a.x - 1, _0x81e9x15a.y, _0x81e9x15a.z],
			[_0x81e9x15a.x + 1, _0x81e9x15a.y, _0x81e9x15a.z],
			[_0x81e9x15a.x, _0x81e9x15a.y - 1, _0x81e9x15a.z],
			[_0x81e9x15a.x, _0x81e9x15a.y + 1, _0x81e9x15a.z],
			[_0x81e9x15a.x, _0x81e9x15a.y, _0x81e9x15a.z - 1],
			[_0x81e9x15a.x, _0x81e9x15a.y, _0x81e9x15a.z + 1]
		];
		for (var i in _0x81e9x2c0) {
			var _0x81e9x26 = _0x81e9x2c0[i][0];
			var _0x81e9x27 = _0x81e9x2c0[i][1];
			var _0x81e9x28 = _0x81e9x2c0[i][2];
			var _0x81e9x2b3 = getTile(_0x81e9x26, _0x81e9x27, _0x81e9x28);
			if (_0x81e9x2b3 == block_uranium_rod_controller) {
				var _0x81e9x2bc = getMachine(_0x81e9x26, _0x81e9x27, _0x81e9x28);
				if (_0x81e9x2bc) {
					_0x81e9x15a.cells.push(_0x81e9x2bc);
					_0x81e9x2bc.reactor = _0x81e9x15a
				}
			}
		}
	}
}

function MachineReactorTurbine() {
	this.parent = MachineBase;
	this.parent();
	this.id = block_nuclear_reactor_turbine;
	this.isUsingEnergy = function() {
		return true
	};
	this.isGenerator = function() {
		return true
	};
	this.getEnergyOutput = function(_0x81e9x2bc) {
		if (_0x81e9x2bc.reactor_energy) {
			var _0x81e9x18c = Math.min(2048, _0x81e9x2bc.reactor_energy);
			_0x81e9x2bc.reactor_energy -= _0x81e9x18c;
			return _0x81e9x18c
		}
	};
	this.updateMachine = function(_0x81e9x2bc) {
		if (!_0x81e9x2bc.reactor_energy) {
			_0x81e9x2bc.reactor_energy = 0
		}
	}
}

function MachineTransformator(_0x81e9x10, _0x81e9x4fc, _0x81e9x4fd) {
	this.parent = MachineBase;
	this.parent();
	this.id = _0x81e9x10;
	this.isTransformator = true;
	this.isUsingEnergy = function() {
		return true
	};
	this.highV = _0x81e9x4fd;
	this.lowV = _0x81e9x4fc;
	this.updateMachine = function(_0x81e9x2bc) {
		if (globalWorldTime % 4 == 1) {
			var _0x81e9x4fe = Level.getData(_0x81e9x2bc.x, _0x81e9x2bc.y, _0x81e9x2bc.z);
			var _0x81e9x13 = 0,
				_0x81e9x4ff = 0;
			for (var i in _0x81e9x2bc.WebBySide) {
				var _0x81e9x304 = _0x81e9x2bc.WebBySide[i];
				_0x81e9x4ff += _0x81e9x304.energy;
				_0x81e9x13++;
				if (_0x81e9x304.voltage > this.highV) {
					this.explode(_0x81e9x2bc);
					return
				}
			};
			var _0x81e9x500 = _0x81e9x4ff / _0x81e9x13;
			for (var i in _0x81e9x2bc.WebBySide) {
				var _0x81e9x304 = _0x81e9x2bc.WebBySide[i];
				var _0x81e9x501 = _0x81e9x304.energy;
				_0x81e9x304.energy = _0x81e9x500;
				if (_0x81e9x304.energy > _0x81e9x501) {
					if (i == _0x81e9x4fe) {
						_0x81e9x304.voltage = Math.max(_0x81e9x304.voltage, this.highV)
					} else {
						_0x81e9x304.voltage = Math.max(_0x81e9x304.voltage, this.lowV)
					}
				}
			}
		}
	};
	this.explode = function(_0x81e9x2bc) {
		for (var i = 0; i < block_exchange_buffer; i++) {
			var _0x81e9x2ef = Math.random() * 6;
			var _0x81e9x2ee = Math.random() * 7;
			var _0x81e9x2fc = Math.random() * 3;
			var _0x81e9x1b3 = _0x81e9x2bc.x + 0.5 + Math.sin(_0x81e9x2ee) * Math.cos(_0x81e9x2ef) * _0x81e9x2fc;
			var _0x81e9x1b5 = _0x81e9x2bc.z + 0.5 + Math.cos(_0x81e9x2ee) * Math.cos(_0x81e9x2ef) * _0x81e9x2fc;
			var _0x81e9x1b4 = _0x81e9x2bc.y + 0.5 + Math.sin(_0x81e9x2ef) * _0x81e9x2fc;
			var _0x81e9x158 = ParticleType.cloud;
			if (Math.random() < 0.5) {
				_0x81e9x158 = ParticleType.lava
			};
			Level.addParticle(_0x81e9x158, _0x81e9x1b3, _0x81e9x1b4, _0x81e9x1b5, 0, 0, 0)
		};
		removeMachine(_0x81e9x2bc.x, _0x81e9x2bc.y, _0x81e9x2bc.z);
		setTile(_0x81e9x2bc.x, _0x81e9x2bc.y, _0x81e9x2bc.z, 0);
		wpdOnChange(_0x81e9x2bc.x + "," + _0x81e9x2bc.y + "," + _0x81e9x2bc.z);
		WebRebuildTimer = 0
	}
}

function MachineMarker1() {
	this.parent = MachineBase;
	this.parent();
	this.id = block_marker;
	this.getMachineName = function() {
		return "marker"
	};
	this.updateMachine = function(_0x81e9x2bc) {
		if (!_0x81e9x2bc.connected) {
			_0x81e9x2bc.connected = []
		};
		if (_0x81e9x2bc.anim != _0x81e9x2bc.anim) {
			_0x81e9x2bc.anim = 1
		};
		if (_0x81e9x2bc.anim < 1) {
			this.animateAll(_0x81e9x2bc);
			_0x81e9x2bc.anim += 1 / 60
		} else {
			if (globalWorldTime % 80 == 0) {
				_0x81e9x2bc.anim = 0
			}
		};
		if (getTime() % 20 == 0 && !this.canStandOn(getTile(_0x81e9x2bc.x, _0x81e9x2bc.y - 1, _0x81e9x2bc.z))) {
			marker_DropAndDestroy(_0x81e9x2bc)
		}
	};
	this.wrenchClick = function(_0x81e9x2bc) {
		this.findNearby(_0x81e9x2bc)
	};
	this.findNearby = function(_0x81e9x2bc) {
		_0x81e9x2bc.connected = [];
		var _0x81e9x503 = [
			[1, 0],
			[-1, 0],
			[0, 1],
			[0, -1]
		];
		for (var i in _0x81e9x503) {
			var _0x81e9x1ac = _0x81e9x503[i][0];
			var _0x81e9x1ad = _0x81e9x503[i][1];
			for (var _0x81e9x1a7 = 1; _0x81e9x1a7 < 64; _0x81e9x1a7++) {
				var _0x81e9x1ce = _0x81e9x2bc.x + _0x81e9x1ac * _0x81e9x1a7;
				var _0x81e9x1d0 = _0x81e9x2bc.z + _0x81e9x1ad * _0x81e9x1a7;
				if (getTile(_0x81e9x1ce, _0x81e9x2bc.y, _0x81e9x1d0) == this.id) {
					var _0x81e9x2f8 = getMachine(_0x81e9x1ce, _0x81e9x2bc.y, _0x81e9x1d0);
					if (_0x81e9x2f8) {
						this.connectTo(_0x81e9x2bc, _0x81e9x2f8);
						break
					}
				}
			}
		};
		_0x81e9x2bc.anim = 0
	};
	this.connectTo = function(_0x81e9x2bc, _0x81e9x2f8) {
		if (!_0x81e9x2f8.connected) {
			_0x81e9x2bc.connected = []
		};
		_0x81e9x2bc.connected.push(_0x81e9x2f8);
		for (var i in _0x81e9x2f8.connected) {
			if (_0x81e9x2bc == _0x81e9x2f8.connected[i]) {
				return
			}
		};
		_0x81e9x2f8.connected.push(_0x81e9x2bc)
	};
	this.animateAll = function(_0x81e9x2bc) {
		for (var i in _0x81e9x2bc.connected) {
			var _0x81e9x2f8 = _0x81e9x2bc.connected[i];
			if (_0x81e9x2f8.removed) {
				_0x81e9x2bc.connected.splice(i, 1);
				break
			};
			var _0x81e9x1b0 = _0x81e9x2f8.x - _0x81e9x2bc.x;
			var _0x81e9x1b1 = _0x81e9x2f8.y - _0x81e9x2bc.y;
			var _0x81e9x1b2 = _0x81e9x2f8.z - _0x81e9x2bc.z;
			var _0x81e9x15b = Math.sqrt(_0x81e9x1b0 * _0x81e9x1b0 + _0x81e9x1b1 * _0x81e9x1b1 + _0x81e9x1b2 * _0x81e9x1b2);
			Level.addParticle(ParticleType.flame, _0x81e9x2bc.x + 0.5 + _0x81e9x1b0 * _0x81e9x2bc.anim, _0x81e9x2bc.y + 0.5 + _0x81e9x1b1 * _0x81e9x2bc.anim, _0x81e9x2bc.z + 0.5 + _0x81e9x1b2 * _0x81e9x2bc.anim, 0, 0, 0)
		}
	};
	this.onDestroy = function(_0x81e9x2bc) {
		Level.destroyBlock(_0x81e9x2bc.x, _0x81e9x2bc.y, _0x81e9x2bc.z);
		Level.dropItem(_0x81e9x2bc.x + 0.5, _0x81e9x2bc.y + 0.5, _0x81e9x2bc.z + 0.5, 0, block_marker, 1, 0);
		preventDefault()
	};
	this.save = function(_0x81e9x259, _0x81e9x2bc) {
		DataSaver.Save(_0x81e9x259 + "anyconnected", !(!_0x81e9x2bc.connected))
	};
	this.read = function(_0x81e9x259, _0x81e9x2bc) {
		if (DataSaver.ReadBool(_0x81e9x259 + "anyconnected")) {
			this.findNearby(_0x81e9x2bc)
		}
	};
	this.getInfo = function(_0x81e9x2bc) {
		return "connected " + _0x81e9x2bc.connected.length
	};
	this.canStandOn = function(_0x81e9x193) {
		return !(_0x81e9x193 == 0 || _0x81e9x193 == 8 || _0x81e9x193 == 9 || _0x81e9x193 == 10 || _0x81e9x193 == 11 || _0x81e9x193 == 32 || _0x81e9x193 == 64 || _0x81e9x193 == this.id)
	};
	this.canDeactivate = function() {
		return false
	}
}

function marker_DropAndDestroy(_0x81e9x2bc) {
	RemoveMachineImmediately(_0x81e9x2bc.x, _0x81e9x2bc.y, _0x81e9x2bc.z)
}

function marker_getRect(_0x81e9x2bc, drop) {
	var _0x81e9x506 = [];
	for (var i in _0x81e9x2bc.connected) {
		var _0x81e9x2f8 = _0x81e9x2bc.connected[i];
		if (_0x81e9x2bc.x != _0x81e9x2f8.x) {
			for (var _0x81e9x19 in _0x81e9x2bc.connected) {
				var _0x81e9x507 = _0x81e9x2bc.connected[_0x81e9x19];
				if (_0x81e9x507.z != _0x81e9x2bc.z) {
					_0x81e9x506.push([_0x81e9x2f8, _0x81e9x507])
				}
			}
		}
	};
	for (var i in _0x81e9x506) {
		var _0x81e9x26 = _0x81e9x506[i][0].x;
		var _0x81e9x28 = _0x81e9x506[i][1].z;
		if (getTile(_0x81e9x26, _0x81e9x2bc.y, _0x81e9x28) == block_marker) {
			var _0x81e9x508 = getMachine(_0x81e9x26, _0x81e9x2bc.y, _0x81e9x28);
			if (_0x81e9x508) {
				if (drop) {
					marker_DropAndDestroy(_0x81e9x2bc, true);
					marker_DropAndDestroy(_0x81e9x508, true);
					marker_DropAndDestroy(_0x81e9x506[i][0], true);
					marker_DropAndDestroy(_0x81e9x506[i][1], true)
				};
				return _0x81e9x508
			}
		}
	}
}

function MachineQuarry() {
	this.parent = MachineBase;
	this.parent();
	this.id = block_quarry;
	this.tickInMainThread = function() {
		return true
	};
	this.isUsingEnergy = function() {
		return true
	};
	this.getMaxEnergyStored = function() {
		return 500
	};
	this.getMachineName = function() {
		return "quarry"
	};
	this.getHelpGuideLink = function(_0x81e9x2bc) {
		return {
			chapter: "quarry",
			page: 0
		}
	};
	this.getContainerId = function() {
		return 1
	};
	this.canDeactivate = function() {
		return false
	};
	this.updateMachine = function(_0x81e9x15a) {
		if (!_0x81e9x15a.progress) {
			_0x81e9x15a.progress = 0
		};
		this.updateDrone(_0x81e9x15a);
		if (!(_0x81e9x15a.mark1 && _0x81e9x15a.mark2)) {
			return
		};
		var _0x81e9x1bd = getTime();
		var _0x81e9x314 = _0x81e9x15a.mark1;
		var _0x81e9x2f8 = _0x81e9x15a.mark2;
		if (_0x81e9x15a.upgr != _0x81e9x15a.upgr || _0x81e9x1bd % 20 == 0) {
			var _0x81e9x5b = this.getContainer(_0x81e9x15a).getSlot(0);
			if (_0x81e9x5b.id == item_overclocker_upgrade) {
				_0x81e9x15a.upgr = _0x81e9x5b.count
			} else {
				_0x81e9x15a.upgr = 0
			};
			if (_0x81e9x15a.upgr > 0) {
				_0x81e9x15a.delay = Math.max(3, parseInt(10 / _0x81e9x15a.upgr / 1.5))
			} else {
				_0x81e9x15a.delay = 10
			}
		};
		if (_0x81e9x1bd % 5 == 0 && (Math.abs(_0x81e9x314.x - _0x81e9x2f8.x) + 1) * (Math.abs(_0x81e9x314.z - _0x81e9x2f8.z) + 1) > _0x81e9x15a.progress) {
			this.animate(_0x81e9x15a.mark1, _0x81e9x15a.mark2)
		};
		if (_0x81e9x1bd % (_0x81e9x15a.delay * 2) == 0 || _0x81e9x15a.noDelay) {
			this.ProcessAreaCleaning(_0x81e9x15a)
		};
		if (_0x81e9x1bd % _0x81e9x15a.delay == 0 || _0x81e9x15a.noDelay) {
			this.ProcessDigging(_0x81e9x15a)
		}
	};
	this.clearAreaSpot = function(_0x81e9x26, _0x81e9x27, _0x81e9x28, _0x81e9x15a, _0x81e9x50a) {
		var _0x81e9x50b = true;
		var _0x81e9x175 = 0;
		_0x81e9x15a.noDelay = !_0x81e9x50a;
		while (_0x81e9x175 < 7) {
			var _0x81e9x193 = getTile(_0x81e9x26, _0x81e9x27, _0x81e9x28);
			if (_0x81e9x193 != block_marker_fence && _0x81e9x193 > 0 && _0x81e9x193) {
				var drop = getBlockDestroyDrop(_0x81e9x193, Level.getData(_0x81e9x26, _0x81e9x27, _0x81e9x28));
				if (drop[0]) {
					Level.dropItem(_0x81e9x26 + 0.5, _0x81e9x27 + 0.5, _0x81e9x28 + 0.5, 0, drop[0], drop[1], drop[2])
				};
				Level.setTile(_0x81e9x26, _0x81e9x27, _0x81e9x28, 0);
				_0x81e9x15a.noDelay = false
			};
			if (_0x81e9x50b && _0x81e9x50a) {
				setTile(_0x81e9x26, _0x81e9x27, _0x81e9x28, block_marker_fence)
			};
			_0x81e9x50b = false;
			_0x81e9x27++;
			_0x81e9x175++
		};
		if (!_0x81e9x15a.noDelay) {
			_0x81e9x15a.energyStored -= 80
		}
	};
	this.ProcessAreaCleaning = function(_0x81e9x2bc) {
		var _0x81e9x304 = Math.abs(_0x81e9x2bc.mark1.x - _0x81e9x2bc.mark2.x) + 1;
		var _0x81e9x175 = Math.abs(_0x81e9x2bc.mark1.z - _0x81e9x2bc.mark2.z) + 1;
		if (_0x81e9x2bc.progress >= _0x81e9x304 * _0x81e9x175) {
			return
		};
		var _0x81e9x38a = Math.min(_0x81e9x2bc.mark1.x, _0x81e9x2bc.mark2.x);
		var _0x81e9x38b = Math.min(_0x81e9x2bc.mark1.z, _0x81e9x2bc.mark2.z);
		var _0x81e9x26 = _0x81e9x38a + _0x81e9x2bc.progress % _0x81e9x304;
		var _0x81e9x28 = _0x81e9x38b + parseInt(_0x81e9x2bc.progress / _0x81e9x304);
		if ((_0x81e9x28 - _0x81e9x38b) % 2 == 1) {
			_0x81e9x26 = _0x81e9x38a + _0x81e9x304 - 1 - _0x81e9x2bc.progress % _0x81e9x304
		};
		var _0x81e9x50c = this.getEnergyStored(_0x81e9x2bc) >= 80;
		if (this.getEnergyStored(_0x81e9x2bc) >= 80) {
			this.clearAreaSpot(_0x81e9x26, _0x81e9x2bc.y, _0x81e9x28, _0x81e9x2bc, (_0x81e9x26 == _0x81e9x38a || _0x81e9x26 == _0x81e9x38a + _0x81e9x304 - 1 || _0x81e9x28 == _0x81e9x38b || _0x81e9x28 == _0x81e9x38b + _0x81e9x175 - 1));
			_0x81e9x2bc.progress++
		};
		this.setDroneTarget(_0x81e9x2bc, _0x81e9x50c)
	};
	this.getInfo = function(_0x81e9x2bc) {
		if (_0x81e9x2bc.mark1 && _0x81e9x2bc.mark2) {
			return "area: " + (Math.abs(_0x81e9x2bc.mark1.x - _0x81e9x2bc.mark2.x) - 1) + "x" + (Math.abs(_0x81e9x2bc.mark1.z - _0x81e9x2bc.mark2.z) - 1)
		};
		return "no area"
	};
	this.wrenchClick = function(_0x81e9x2bc) {
		if (_0x81e9x2bc.mark1 && _0x81e9x2bc.mark2) {
			clientMessage(ChatColor.RED + "Area already defined");
			return
		};
		var _0x81e9x2c0 = [
			[1, 0],
			[-1, 0],
			[0, -1],
			[0, 1]
		];
		for (var i in _0x81e9x2c0) {
			var _0x81e9x26 = _0x81e9x2c0[i][0] + _0x81e9x2bc.x;
			var _0x81e9x28 = _0x81e9x2c0[i][1] + _0x81e9x2bc.z;
			if (getTile(_0x81e9x26, _0x81e9x2bc.y, _0x81e9x28) == block_marker) {
				var _0x81e9x50d = getMachine(_0x81e9x26, _0x81e9x2bc.y, _0x81e9x28);
				if (_0x81e9x50d) {
					var _0x81e9x50e = marker_getRect(_0x81e9x50d, true);
					if (_0x81e9x50e) {
						_0x81e9x2bc.mark1 = _0x81e9x50d, _0x81e9x2bc.mark2 = _0x81e9x50e;
						clientMessage(ChatColor.YELLOW + "Quarry area: " + (Math.abs(_0x81e9x50d.x - _0x81e9x50e.x) - 1) + "x" + (Math.abs(_0x81e9x50d.z - _0x81e9x50e.z) - 1));
						return
					}
				}
			}
		};
		_0x81e9x2bc.mark1 = _0x81e9x2bc.mark2 = null;
		clientMessage(ChatColor.RED + "No marker rectangle found")
	};
	this.animate = function(_0x81e9x314, _0x81e9x2f8) {
		var _0x81e9x3f4 = ParticleType.redstone;
		for (var _0x81e9x1b3 = 0; _0x81e9x1b3 < Math.abs(_0x81e9x314.x - _0x81e9x2f8.x); _0x81e9x1b3 += Math.random() * 2) {
			Level.addParticle(_0x81e9x3f4, Math.min(_0x81e9x314.x, _0x81e9x2f8.x) + _0x81e9x1b3 + 0.5, _0x81e9x314.y + 0.5, Math.min(_0x81e9x314.z, _0x81e9x2f8.z) + 0.5, 0, 0, 0);
			Level.addParticle(_0x81e9x3f4, Math.min(_0x81e9x314.x, _0x81e9x2f8.x) + _0x81e9x1b3 + 0.5, _0x81e9x314.y + 0.5, Math.max(_0x81e9x314.z, _0x81e9x2f8.z) + 0.5, 0, 0, 0)
		};
		for (var _0x81e9x1b5 = 0; _0x81e9x1b5 < Math.abs(_0x81e9x314.z - _0x81e9x2f8.z); _0x81e9x1b5 += Math.random() * 2) {
			Level.addParticle(_0x81e9x3f4, Math.min(_0x81e9x314.x, _0x81e9x2f8.x) + 0.5, _0x81e9x314.y + 0.5, Math.min(_0x81e9x314.z, _0x81e9x2f8.z) + _0x81e9x1b5 + 0.5, 0, 0, 0);
			Level.addParticle(_0x81e9x3f4, Math.max(_0x81e9x314.x, _0x81e9x2f8.x) + 0.5, _0x81e9x314.y + 0.5, Math.min(_0x81e9x314.z, _0x81e9x2f8.z) + _0x81e9x1b5 + 0.5, 0, 0, 0)
		}
	};
	this.updateDrone = function(_0x81e9x2bc) {
		if (_0x81e9x2bc.progress == 0) {
			return
		};
		if (!_0x81e9x2bc.dronex) {
			_0x81e9x2bc.dronex = _0x81e9x2bc.x;
			_0x81e9x2bc.droney = _0x81e9x2bc.y + 2;
			_0x81e9x2bc.dronez = _0x81e9x2bc.z
		};
		var _0x81e9x50f = this;
		if (!_0x81e9x2bc.drone_anim) {
			_0x81e9x2bc.drone_anim = CreateAnimation(_0x81e9x2bc.dronex, _0x81e9x2bc.droney, _0x81e9x2bc.dronez);
			_0x81e9x2bc.drone_anim.setSkin("mob/quarry_laser.png")
		};
		_0x81e9x2bc.drone = _0x81e9x2bc.drone_anim.ent;
		_0x81e9x2bc.drone_anim.setPos(_0x81e9x2bc.dronex, _0x81e9x2bc.droney, _0x81e9x2bc.dronez);
		_0x81e9x50f.UpdDroneModel(_0x81e9x2bc)
	};
	this.ProcessDigging = function(_0x81e9x2bc) {
		var _0x81e9x304 = Math.abs(_0x81e9x2bc.mark1.x - _0x81e9x2bc.mark2.x) - 1;
		var _0x81e9x175 = Math.abs(_0x81e9x2bc.mark1.z - _0x81e9x2bc.mark2.z) - 1;
		if (_0x81e9x2bc.progress < (_0x81e9x304 + 2) * (_0x81e9x175 + 2)) {
			return
		};
		var _0x81e9x38a = Math.min(_0x81e9x2bc.mark1.x, _0x81e9x2bc.mark2.x);
		var _0x81e9x38b = Math.min(_0x81e9x2bc.mark1.z, _0x81e9x2bc.mark2.z);
		var _0x81e9x510 = _0x81e9x2bc.progress - (_0x81e9x304 + 2) * (_0x81e9x175 + 2);
		var _0x81e9x26 = _0x81e9x38a + 1 + _0x81e9x510 % _0x81e9x304;
		var _0x81e9x28 = _0x81e9x38b + 1 + parseInt((_0x81e9x510 % (_0x81e9x304 * _0x81e9x175)) / _0x81e9x304);
		if ((_0x81e9x28 - _0x81e9x38b - 1) % 2 == 1) {
			_0x81e9x26 = _0x81e9x38a + _0x81e9x304 - _0x81e9x510 % _0x81e9x304
		};
		var _0x81e9x27 = _0x81e9x2bc.y - 1 - parseInt(_0x81e9x510 / _0x81e9x304 / _0x81e9x175);
		var _0x81e9x50c = this.getEnergyStored(_0x81e9x2bc) >= 80;
		if (this.getEnergyStored(_0x81e9x2bc) >= 80) {
			if (this.DigABlock(_0x81e9x26, _0x81e9x27, _0x81e9x28, _0x81e9x2bc)) {
				_0x81e9x2bc.noDelay = true
			} else {}
		};
		this.setDroneTarget(_0x81e9x2bc, _0x81e9x50c)
	};
	this.setDroneTarget = function(_0x81e9x2bc, _0x81e9x511) {
		var _0x81e9x304 = Math.abs(_0x81e9x2bc.mark1.x - _0x81e9x2bc.mark2.x) - 1;
		var _0x81e9x175 = Math.abs(_0x81e9x2bc.mark1.z - _0x81e9x2bc.mark2.z) - 1;
		_0x81e9x2bc.dronee = _0x81e9x511;
		if (_0x81e9x2bc.progress < (_0x81e9x304 + 2) * (_0x81e9x175 + 2)) {
			_0x81e9x304 += 2;
			_0x81e9x175 += 2;
			var _0x81e9x38a = Math.min(_0x81e9x2bc.mark1.x, _0x81e9x2bc.mark2.x);
			var _0x81e9x38b = Math.min(_0x81e9x2bc.mark1.z, _0x81e9x2bc.mark2.z);
			_0x81e9x2bc.dronex = _0x81e9x38a + _0x81e9x2bc.progress % _0x81e9x304;
			_0x81e9x2bc.dronez = _0x81e9x38b + parseInt(_0x81e9x2bc.progress / _0x81e9x304);
			if ((_0x81e9x2bc.dronez - _0x81e9x38b) % 2 == 1) {
				_0x81e9x2bc.dronex = _0x81e9x38a + _0x81e9x304 - 1 - _0x81e9x2bc.progress % _0x81e9x304
			};
			_0x81e9x2bc.dronex += 0.5;
			_0x81e9x2bc.dronez += 0.5;
			_0x81e9x2bc.droney = _0x81e9x2bc.y + 1.5
		} else {
			var _0x81e9x38a = Math.min(_0x81e9x2bc.mark1.x, _0x81e9x2bc.mark2.x);
			var _0x81e9x38b = Math.min(_0x81e9x2bc.mark1.z, _0x81e9x2bc.mark2.z);
			var _0x81e9x510 = _0x81e9x2bc.progress - (_0x81e9x304 + 2) * (_0x81e9x175 + 2);
			_0x81e9x2bc.dronex = _0x81e9x38a + 1 + _0x81e9x510 % _0x81e9x304;
			_0x81e9x2bc.dronez = _0x81e9x38b + 1 + parseInt((_0x81e9x510 % (_0x81e9x304 * _0x81e9x175)) / _0x81e9x304);
			if ((_0x81e9x2bc.dronez - _0x81e9x38b - 1) % 2 == 1) {
				_0x81e9x2bc.dronex = _0x81e9x38a + _0x81e9x304 - _0x81e9x510 % _0x81e9x304
			};
			_0x81e9x2bc.dronex += 0.5;
			_0x81e9x2bc.dronez += 0.5;
			_0x81e9x2bc.droney = _0x81e9x2bc.y - 1 - parseInt(_0x81e9x510 / _0x81e9x304 / _0x81e9x175) + 1.5
		}
	};
	this.UpdDroneModel = function(_0x81e9x2bc) {
		var _0x81e9x512 = parseInt(_0x81e9x2bc.delay / 2);
		var _0x81e9x304 = Math.abs(_0x81e9x2bc.mark1.x - _0x81e9x2bc.mark2.x) + 1;
		var _0x81e9x175 = Math.abs(_0x81e9x2bc.mark1.z - _0x81e9x2bc.mark2.z) + 1;
		var _0x81e9x15b = _0x81e9x2bc.delay;
		var _0x81e9x158 = 1;
		if (_0x81e9x2bc.progress < _0x81e9x304 * _0x81e9x175) {
			_0x81e9x15b *= 2;
			_0x81e9x158 = 2
		};
		var _0x81e9x212 = getTime() % _0x81e9x15b;
		if (_0x81e9x212 >= _0x81e9x512 && _0x81e9x2bc.dronee) {
			_0x81e9x2bc.drone_anim.setRender(QuarryModels[_0x81e9x158].renderType)
		} else {
			_0x81e9x2bc.drone_anim.setRender(QuarryModels[0].renderType)
		}
	};
	this.DigABlock = function(_0x81e9x26, _0x81e9x27, _0x81e9x28, _0x81e9x15a, _0x81e9x1cd) {
		var drop = getBlockDestroyDrop(getTile(_0x81e9x26, _0x81e9x27, _0x81e9x28), Level.getData(_0x81e9x26, _0x81e9x27, _0x81e9x28));
		_0x81e9x15a.noDelay = false;
		if (drop[0] == 7) {
			return
		};
		if (drop[0] && drop[0] != 8 && drop[0] != 9 && drop[0] != 10 && drop[0] != 11) {
			StartItemTransportWithAutoPathfinding(_0x81e9x15a.x, _0x81e9x15a.y, _0x81e9x15a.z, drop[0], drop[1], drop[2], [0, 1, 0]);
			setTile(_0x81e9x26, _0x81e9x27, _0x81e9x28, 0);
			_0x81e9x15a.energyStored -= 80;
			if (getTile(_0x81e9x26, _0x81e9x27 + 1, _0x81e9x28) > 0 && _0x81e9x27 < _0x81e9x15a.y) {
				this.DigABlock(_0x81e9x26, _0x81e9x27 + 1, _0x81e9x28, _0x81e9x15a, _0x81e9x1cd);
				_0x81e9x15a.progress--
			}
		};
		_0x81e9x15a.progress++;
		if (drop[0] == 0) {
			return true
		};
		return false
	};
	this.checkLoaded = function(_0x81e9x26, _0x81e9x28) {
		return getTile(_0x81e9x26, 0, _0x81e9x28) != 0
	};
	this.makeRedstoneRay = function(_0x81e9x15a, _0x81e9x26, _0x81e9x27, _0x81e9x28) {
		var _0x81e9x1b0 = _0x81e9x26 - _0x81e9x15a.x;
		var _0x81e9x1b1 = _0x81e9x27 - _0x81e9x15a.y;
		var _0x81e9x1b2 = _0x81e9x28 - _0x81e9x15a.z;
		var _0x81e9x15b = Math.sqrt(_0x81e9x1b0 * _0x81e9x1b0 + _0x81e9x1b1 * _0x81e9x1b1 + _0x81e9x1b2 * _0x81e9x1b2);
		_0x81e9x1b0 /= _0x81e9x15b;
		_0x81e9x1b1 /= _0x81e9x15b;
		_0x81e9x1b2 /= _0x81e9x15b;
		var _0x81e9x13 = 0;
		for (var _0x81e9x1a7 = 0; _0x81e9x1a7 < _0x81e9x15b; _0x81e9x1a7 += 0.75 + Math.random() * 0.5) {
			var _0x81e9x1b3 = _0x81e9x15a.x + _0x81e9x1b0 * _0x81e9x1a7;
			var _0x81e9x1b4 = _0x81e9x15a.y + _0x81e9x1b1 * _0x81e9x1a7;
			var _0x81e9x1b5 = _0x81e9x15a.z + _0x81e9x1b2 * _0x81e9x1a7;
			Level.addParticle(5, _0x81e9x1b3, _0x81e9x1b4, _0x81e9x1b5, 0, 0, 0, 1);
			_0x81e9x13++;
			if (_0x81e9x13 > 75) {
				break
			}
		}
	};
	this.save = function(_0x81e9x17, _0x81e9x15a) {
		DataSaver.SaveCoords(_0x81e9x17 + "mark1", _0x81e9x15a.mark1);
		DataSaver.SaveCoords(_0x81e9x17 + "mark2", _0x81e9x15a.mark2);
		DataSaver.Save(_0x81e9x17 + "pr", _0x81e9x15a.progress)
	};
	this.read = function(_0x81e9x17, _0x81e9x15a) {
		_0x81e9x15a.mark1 = DataSaver.ReadCoords(_0x81e9x17 + "mark1");
		_0x81e9x15a.mark2 = DataSaver.ReadCoords(_0x81e9x17 + "mark2");
		_0x81e9x15a.progress = Math.max(DataSaver.ReadNumber(_0x81e9x17 + "pr") - 10, 0)
	};
	this.onDestroy = function(_0x81e9x2bc) {
		if (_0x81e9x2bc.drone_anim) {
			_0x81e9x2bc.drone_anim.destroy()
		}
	}
}

function MachineRubTreeRoot() {
	this.parent = MachineBase;
	this.parent();
	this.id = block_rubber_tree_wood;
	this.tickInMainThread = function() {
		return true
	};
	this.canDeactivate = function() {
		return false
	};
	this.updateMachine = function(_0x81e9x15a) {
		if (Math.random() * 80 < 1 && getTime() % 75 == 0) {
			var _0x81e9x175 = 0;
			var _0x81e9x514 = 0;
			while (true) {
				var _0x81e9x2b3 = getTile(_0x81e9x15a.x, _0x81e9x15a.y + 1 + _0x81e9x175, _0x81e9x15a.z);
				if (_0x81e9x2b3 == block_rubber_wood_with_latex) {
					_0x81e9x514++
				};
				if (!(_0x81e9x2b3 == block_rubber_tree_wood || _0x81e9x2b3 == block_rubber_wood_with_latex)) {
					break
				};
				_0x81e9x175++
			};
			if (_0x81e9x175 == 0 || _0x81e9x514 > 1) {
				return
			};
			setTile(_0x81e9x15a.x, _0x81e9x15a.y + 1 + parseInt(Math.random() * _0x81e9x175), _0x81e9x15a.z, block_rubber_wood_with_latex)
		};
		if (getTime() % 75 == 0) {
			var _0x81e9x193 = getTile(_0x81e9x15a.x, _0x81e9x15a.y - 1, _0x81e9x15a.z);
			if (_0x81e9x193 == this.id || _0x81e9x193 == block_rubber_wood_with_latex) {
				RemoveMachineImmediately(_0x81e9x15a.x, _0x81e9x15a.y, _0x81e9x15a.z)
			}
		}
	}
}

function MachineRubTreeSapling() {
	this.parent = MachineBase;
	this.parent();
	this.id = block_rubber_tree_sappling;
	this.tickInMainThread = function() {
		return true
	};
	this.onDestroy = function(_0x81e9x15a) {
		if (!_0x81e9x15a.nodrop) {
			Level.dropItem(_0x81e9x15a.x + 0.5, _0x81e9x15a.y + 0.5, _0x81e9x15a.z + 0.5, 0, item_rubber_tree_sapling, 1, 0)
		}
	};
	this.canDeactivate = function() {
		return false
	};
	this.updateMachine = function(_0x81e9x15a) {
		if (!_0x81e9x15a.age) {
			_0x81e9x15a.age = 0
		};
		if (getTime() % 22 == 0) {
			var _0x81e9x2b3 = Level.getTile(_0x81e9x15a.x, _0x81e9x15a.y - 1, _0x81e9x15a.z);
			if (!(_0x81e9x2b3 == 2 || _0x81e9x2b3 == 3 || _0x81e9x2b3 == 60)) {
				Level.destroyBlock(_0x81e9x15a.x, _0x81e9x15a.y, _0x81e9x15a.z)
			}
		};
		_0x81e9x15a.age += Math.random();
		if (_0x81e9x15a.age > 600 * 10) {
			genRubberTree(_0x81e9x15a.x, _0x81e9x15a.y, _0x81e9x15a.z, false);
			setTile(_0x81e9x15a.x, _0x81e9x15a.y, _0x81e9x15a.z, block_rubber_tree_wood);
			_0x81e9x15a.nodrop = true;
			RemoveMachineImmediately(_0x81e9x15a.x, _0x81e9x15a.y, _0x81e9x15a.z);
			activateMachine(_0x81e9x15a.x, _0x81e9x15a.y, _0x81e9x15a.z);
			currentMachinePlace = _0x81e9x15a;
			_0x81e9x15a.age = 0
		};
		_0x81e9x15a.isActivated = true
	};
	this.save = function(_0x81e9x259, _0x81e9x15a) {
		DataSaver.Save(_0x81e9x259 + "age", _0x81e9x15a.age)
	};
	this.read = function(_0x81e9x259, _0x81e9x15a) {
		_0x81e9x15a.age = DataSaver.ReadNumber(_0x81e9x259 + "age")
	};
	this.getInfo = function(_0x81e9x15a) {
		return "growing: " + parseInt(_0x81e9x15a.age / 60)
	}
}
var batBox_itemsToCharge = {};
var ChargableItems = {
	0: ValidateIDData({
		item_drill: 80,
		item_drill_usual: 50,
		item_chainsaw: 50,
		item_battery: 10,
		item_jetpack: 10,
		item_batpack: 10,
		item_condition_controller: 10,
		item_electric_hoe: 50,
		item_electric_treetap: 100
	}),
	1: ValidateIDData({
		item_nano_saber: 4,
		item_nano_boots: 125,
		item_nano_leggings: 125,
		item_nano_suit: 125,
		item_nano_helmet: 125,
		item_nano_boots_uncharged: 125,
		item_nano_leggings_uncharged: 125,
		item_nano_suit_uncharged: 125,
		item_nano_helmet_uncharged: 125,
		item_energy_crystal: 10,
		item_mining_laser: 100,
		item_latpack: 10
	}),
	2: ValidateIDData({
		item_quantum_helmet: 100,
		item_quantum_suit: 100,
		item_quantum_leggings: 100,
		item_quantum_boots: 100,
		item_quantum_helmet_uncharged: 100,
		item_quantum_suit_uncharged: 100,
		item_quantum_leggings_uncharged: 100,
		item_quantum_boots_uncharged: 100
	})
};

function MachineBatBox() {
	this.parent = MachineBase;
	this.parent();
	this.id = block_bat_box;
	this.MaxEnergyInput = 32;
	this.getMachineName = function() {
		return "bat-box"
	};
	this.getHelpGuideLink = function(_0x81e9x2bc) {
		return {
			chapter: "energy & storage",
			page: 2
		}
	};
	this.setChargingLevel = function(_0x81e9x519) {
		this.itemsToCharge = {};
		for (var i = 0; i < _0x81e9x519; i++) {
			for (var _0x81e9x10 in ChargableItems[i]) {
				this.itemsToCharge[_0x81e9x10] = ChargableItems[i][_0x81e9x10]
			}
		}
	};
	this.setChargingLevel(1);
	this.isUsingEnergy = function() {
		return true
	};
	this.getMaxEnergyStored = function() {
		return 40000
	};
	this.getEnergyOutput = function(_0x81e9x15a) {
		if (globalWorldTime % 4 != 1 && !config_voltage_check_enabled) {
			return 0
		};
		var _0x81e9x51a = Math.min(256, this.MaxEnergyInput);
		if (!config_voltage_check_enabled) {
			_0x81e9x51a *= 4
		};
		var _0x81e9x174 = this.getEnergyStored(_0x81e9x15a);
		if (_0x81e9x174 > _0x81e9x51a) {
			_0x81e9x15a.energyStored -= _0x81e9x51a;
			return _0x81e9x51a
		};
		var _0x81e9x18c = _0x81e9x15a.energyStored;
		_0x81e9x15a.energyStored = 0;
		return _0x81e9x18c
	};
	this.getContainerId = function() {
		return 1
	};
	this.updateMachine = function(_0x81e9x15a) {
		if (getTime() % 2 == 0) {
			this.getEnergyStored(_0x81e9x15a);
			var _0x81e9x347 = this.getContainer(_0x81e9x15a).getSlot(0);
			if (this.itemsToCharge[_0x81e9x347.id] > 0 && _0x81e9x347.data > 1) {
				var _0x81e9x51b = 0;
				while (_0x81e9x15a.energyStored >= 100 && _0x81e9x51b < 8 && _0x81e9x347.data > 1) {
					_0x81e9x51b++;
					_0x81e9x347.data--;
					_0x81e9x15a.energyStored -= this.itemsToCharge[_0x81e9x347.id]
				}
			}
		}
	}
}

function MachineMFE() {
	this.parent = MachineBatBox;
	this.parent();
	this.id = block_MFE;
	this.MaxEnergyInput = 128;
	this.setChargingLevel(2);
	this.getMaxEnergyStored = function() {
		return 600000
	};
	this.getMachineName = function() {
		return "MFE"
	};
	this.getHelpGuideLink = function(_0x81e9x2bc) {
		return {
			chapter: "energy & storage",
			page: 3
		}
	}
}

function MachineMFSU() {
	this.parent = MachineBatBox;
	this.parent();
	this.id = block_MFSU;
	this.MaxEnergyInput = item_cell_empty;
	this.setChargingLevel(3);
	this.getMaxEnergyStored = function() {
		return 10000000
	};
	this.getMachineName = function() {
		return "MFSU"
	};
	this.getHelpGuideLink = function(_0x81e9x2bc) {
		return {
			chapter: "energy & storage",
			page: 4
		}
	}
}
var transp_ContainerPutSlots = {
	0: [0],
	1: [0],
	2: [0],
	3: [0],
	4: [2, 3, 4, 5, 6, 7, 8],
	5: [0, 1, 2, 3, 4, 5, 6, 7, 8],
	6: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31],
	7: [0, 1, 2, 3, 4, 5, 6, 7, 8],
	10: [0, 1, 2, 3, 4, 5, 6, 7, 8],
	12: [0],
	13: [0],
	15: [0],
	18: [0]
};
var transp_ContainerGetSlots = {
	0: [1],
	1: [0],
	2: [1],
	3: [0],
	4: [2, 3, 4, 5, 6, 7, 8],
	5: [0, 1, 2, 3, 4, 5, 6, 7, 8],
	6: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31],
	7: [9, 10, 11, 12, 13, 14, 15, 16, 17],
	10: [0, 1, 2, 3, 4, 5, 6, 7, 8],
	12: [0],
	13: [1, 3, 4, 5],
	15: [0],
	18: [1]
};

function MachineReceiver() {
	this.parent = MachineBase;
	this.parent();
	this.id = block_filter_pipe;
	this.getMachineName = function() {
		return "filter pipe"
	};
	this.getContainerId = function() {
		return 5
	};
	this.updateMachine = function(_0x81e9x15a) {};
	this.getHelpGuideLink = function(_0x81e9x2bc) {
		return {
			chapter: "transporting pipes",
			page: 5
		}
	};
	this.canItemBeTrasportedThrough = function(_0x81e9x2bc, _0x81e9x10, _0x81e9x16) {
		var _0x81e9x194 = this.getContainer(_0x81e9x2bc);
		var _0x81e9x521 = false;
		for (var i in _0x81e9x194.slots) {
			var _0x81e9x347 = _0x81e9x194.slots[i];
			if (_0x81e9x347.id != 0) {
				_0x81e9x521 = true;
				if (_0x81e9x347.id == _0x81e9x10 && _0x81e9x347.data == _0x81e9x16) {
					return true
				}
			}
		};
		return !_0x81e9x521
	};
	this.canDeactivate = function() {
		return false
	}
}

function MachineSorterPipe() {
	this.parent = MachineBase;
	this.parent();
	this.id = block_diamond_pipe;
	this.getContainerId = function() {
		return 14
	};
	this.getMachineName = function() {
		return "sorter pipe"
	};
	this.getHelpGuideLink = function(_0x81e9x2bc) {
		return {
			chapter: "transporting pipes",
			page: 7
		}
	};
	this.updateMachine = function(_0x81e9x2bc) {};
	this.VecByDir = {
		0: [0, 1, 0],
		1: [0, -1, 0],
		2: [-1, 0, 0],
		3: [1, 0, 0],
		4: [0, 0, 1],
		5: [0, 0, -1]
	};
	this.getPossibleSideIndicies = function(_0x81e9x2bc) {
		var _0x81e9x523 = [];
		for (var i in this.VecByDir) {
			var _0x81e9x26a = this.VecByDir[i];
			if (CanItemMoveTo(getTile(_0x81e9x2bc.x + _0x81e9x26a[0], _0x81e9x2bc.y + _0x81e9x26a[1], _0x81e9x2bc.z + _0x81e9x26a[2]))) {
				_0x81e9x523.push(i)
			}
		};
		return _0x81e9x523
	};
	this.getTransportingDirectionVec = function(_0x81e9x2bc, _0x81e9x10, _0x81e9x16, _0x81e9x3cb) {
		var _0x81e9x194 = this.getContainer(_0x81e9x2bc);
		var _0x81e9x524 = [];
		var _0x81e9x523 = this.getPossibleSideIndicies(_0x81e9x2bc);
		for (var _0x81e9x19 in _0x81e9x523) {
			var i = _0x81e9x523[_0x81e9x19];
			var _0x81e9x484 = this.isItemInSlotGroup_State(_0x81e9x194, i, _0x81e9x10, _0x81e9x16);
			if (_0x81e9x484 == 1) {
				var _0x81e9x240 = this.VecByDir[i];
				if ((_0x81e9x240[0] != -_0x81e9x3cb.x || _0x81e9x3cb.x == 0) && (_0x81e9x240[1] != -_0x81e9x3cb.y || _0x81e9x3cb.y == 0) && (_0x81e9x240[2] != -_0x81e9x3cb.z || _0x81e9x3cb.z == 0)) {
					_0x81e9x524.push(_0x81e9x240)
				}
			};
			if (_0x81e9x484 == 2) {
				_0x81e9x524 = [this.VecByDir[i]];
				break
			}
		};
		var _0x81e9x3cb = _0x81e9x524[parseInt(Math.random() * _0x81e9x524.length)];
		return _0x81e9x3cb
	};
	this.isItemInSlotGroup_State = function(_0x81e9x194, _0x81e9x20, _0x81e9x10, _0x81e9x16) {
		var _0x81e9x14 = _0x81e9x20 * 9;
		var _0x81e9x525 = true;
		for (var i = 0; i < 9; i++) {
			var _0x81e9x5b = _0x81e9x194.getSlot(_0x81e9x14 + i);
			if (_0x81e9x5b.id != 0) {
				_0x81e9x525 = false;
				if (_0x81e9x5b.id == _0x81e9x10 && _0x81e9x5b.data == _0x81e9x16) {
					return 2
				}
			}
		};
		if (_0x81e9x525) {
			return 1
		};
		return 0
	}
}

function MachineTesseract() {
	this.parent = MachineBase;
	this.parent();
	this.id = block_teleport_pipe;
	this.getContainerId = function() {
		return 15
	};
	this.getMachineName = function() {
		return "tesseract"
	};
	this.getHelpGuideLink = function(_0x81e9x2bc) {
		return {
			chapter: "transporting pipes",
			page: 8
		}
	};
	this.updateMachine = function(_0x81e9x2bc) {
		if (!_0x81e9x2bc.frequency) {
			_0x81e9x2bc.frequency = 0
		};
		var _0x81e9x194 = this.getContainer(_0x81e9x2bc);
		_0x81e9x194.setGuiText(0x00, "frequency: " + _0x81e9x2bc.frequency, android.graphics.Color.BLACK);
		if (_0x81e9x2bc.cache_updated) {
			_0x81e9x194.setGuiText(0x01, "connected tesseracts: " + _0x81e9x2bc.cached.length, android.graphics.Color.BLACK)
		} else {
			var _0x81e9x162 = "scaning.";
			var _0x81e9x527 = parseInt(getTime() / 5) % 3;
			for (var i = 0; i < _0x81e9x527; i++) {
				_0x81e9x162 += "."
			};
			_0x81e9x194.setGuiText(0x01, _0x81e9x162, android.graphics.Color.BLACK)
		};
		var _0x81e9x5b = _0x81e9x194.getSlot(0);
		if (_0x81e9x2bc.cache_updated && _0x81e9x5b.id > 0 && _0x81e9x5b.count > 0 && _0x81e9x2bc.cached && _0x81e9x2bc.cached.length > 0) {
			var _0x81e9x2f8 = _0x81e9x2bc.cached[parseInt(_0x81e9x2bc.cached.length * Math.random())];
			this.swap(_0x81e9x2bc, _0x81e9x2f8)
		};
		if (_0x81e9x5b.id > 0 && _0x81e9x5b.count > 0) {
			StartItemTransportWithAutoPathfinding(_0x81e9x2bc.x, _0x81e9x2bc.y, _0x81e9x2bc.z, _0x81e9x5b.id, _0x81e9x5b.count, _0x81e9x5b.data, [0, 1, 0]);
			_0x81e9x5b.id = 0;
			_0x81e9x5b.data = 0;
			_0x81e9x5b.count = 0
		};
		if (getTime() % 40 == 0) {
			this.updateCache(_0x81e9x2bc)
		};
		_0x81e9x2bc.trigger = false
	};
	this.swap = function(_0x81e9x314, _0x81e9x2f8) {
		if (_0x81e9x314.trigger) {
			return
		};
		var _0x81e9x481 = this.getContainer(_0x81e9x314).getSlot(0);
		var _0x81e9x467 = this.getContainer(_0x81e9x2f8).getSlot(0);
		var _0x81e9x528 = [_0x81e9x481.id, _0x81e9x481.count, _0x81e9x481.data];
		_0x81e9x481.id = _0x81e9x467.id;
		_0x81e9x481.count = _0x81e9x467.count;
		_0x81e9x481.data = _0x81e9x467.data;
		_0x81e9x467.id = _0x81e9x528[0];
		_0x81e9x467.count = _0x81e9x528[1];
		_0x81e9x467.data = _0x81e9x528[2];
		_0x81e9x2f8.trigger = true;
		return _0x81e9x528
	};
	this.updateCache = function(_0x81e9x2bc) {
		_0x81e9x2bc.cached = [];
		for (var i in this.MachineCoords) {
			var _0x81e9x2c0 = this.MachineCoords[i];
			if (_0x81e9x2c0.frequency == _0x81e9x2bc.frequency && _0x81e9x2bc != _0x81e9x2c0) {
				_0x81e9x2bc.cached.push(_0x81e9x2c0)
			}
		};
		_0x81e9x2bc.cache_updated = true
	};
	this.save = function(_0x81e9x17, _0x81e9x2bc) {
		DataSaver.Save(_0x81e9x17 + "frequency", _0x81e9x2bc.frequency)
	};
	this.read = function(_0x81e9x17, _0x81e9x2bc) {
		_0x81e9x2bc.frequency = DataSaver.ReadNumber(_0x81e9x17 + "frequency")
	}
}

function MachineChestTransporter() {
	this.parent = MachineBase;
	this.parent();
	this.id = block_wooden_pipe;
	this.getMachineName = function() {
		return "wooden pipe"
	};
	this.getHelpGuideLink = function(_0x81e9x2bc) {
		return {
			chapter: "transporting pipes",
			page: 2
		}
	};
	this.getContainerId = function() {
		return 11
	};
	this.isUsingEnergy = function() {
		return true
	};
	this.getMaxEnergyStored = function() {
		return 32
	};
	this.updateMachine = function(_0x81e9x15a) {
		if (!_0x81e9x15a.stacksize) {
			_0x81e9x15a.stacksize = 1
		};
		_0x81e9x15a.energyPerItem = parseInt((_0x81e9x15a.stacksize + 6) / 8) * 4;
		if (getTime() % 16 == 0) {
			var _0x81e9x52a = this.FindContainerSpot(_0x81e9x15a);
			var _0x81e9x52b = this.CreateFilterArray(_0x81e9x15a);
			if (_0x81e9x52a) {
				this.transFromContainer(_0x81e9x15a, _0x81e9x52a, _0x81e9x52b)
			}
		};
		var _0x81e9x194 = this.getContainer(_0x81e9x15a);
		_0x81e9x194.setGuiText(0, "stack: " + _0x81e9x15a.stacksize + " (" + _0x81e9x15a.energyPerItem + " Eu)", android.graphics.Color.BLACK)
	};
	this.CreateFilterArray = function(_0x81e9x2bc) {
		var _0x81e9x194 = this.getContainer(_0x81e9x2bc);
		var _0x81e9x52c = 0;
		var _0x81e9x52b = {};
		for (var i = 0; i < 9; i++) {
			var _0x81e9x5b = _0x81e9x194.slots[i];
			if (_0x81e9x5b.id > 0) {
				_0x81e9x52b[_0x81e9x5b.id + "_" + _0x81e9x5b.data] = true;
				_0x81e9x52c++
			}
		};
		if (_0x81e9x52c) {
			return _0x81e9x52b
		};
		return null
	};
	this.ContainerPutSlots = transp_ContainerPutSlots;
	this.ContainerGetSlots = transp_ContainerGetSlots;
	this.getItemFromChest = function(_0x81e9x1cd, _0x81e9x152, _0x81e9x52b) {
		var _0x81e9x13 = 0;
		var _0x81e9x10 = 0,
			_0x81e9x16 = 0;
		for (var _0x81e9x347 in _0x81e9x1cd.slots) {
			var _0x81e9x5b = _0x81e9x1cd.slots[_0x81e9x347];
			if (_0x81e9x5b.id == 0) {
				continue
			};
			var _0x81e9x52d = true;
			if (_0x81e9x52b) {
				var _0x81e9x52e = _0x81e9x5b.id + "_" + _0x81e9x5b.data;
				_0x81e9x52d = _0x81e9x52b[_0x81e9x52e]
			};
			if (_0x81e9x52d && (_0x81e9x10 == _0x81e9x5b.id && _0x81e9x16 == _0x81e9x5b.data || _0x81e9x10 == 0) && _0x81e9x5b.id != 0) {
				var _0x81e9x1a3 = Math.min(_0x81e9x5b.count, _0x81e9x152 - _0x81e9x13);
				_0x81e9x5b.count -= _0x81e9x1a3;
				_0x81e9x13 += _0x81e9x1a3;
				_0x81e9x10 = _0x81e9x5b.id;
				_0x81e9x16 = _0x81e9x5b.data;
				if (_0x81e9x5b.count < 1) {
					_0x81e9x5b.id = _0x81e9x5b.data = 0
				};
				_0x81e9x1cd.setSlot(_0x81e9x347, _0x81e9x5b.id, _0x81e9x5b.count, _0x81e9x5b.data)
			};
			if (_0x81e9x13 >= _0x81e9x152) {
				break
			}
		};
		return {
			id: _0x81e9x10,
			count: _0x81e9x13,
			data: _0x81e9x16
		}
	};
	this.getItemFromContainer = function(_0x81e9x198, _0x81e9x152, _0x81e9x52b) {
		var _0x81e9x13 = 0;
		var _0x81e9x10 = 0,
			_0x81e9x16 = 0;
		var _0x81e9x52f = this.ContainerGetSlots[_0x81e9x198.id];
		for (var i in _0x81e9x52f) {
			var _0x81e9x5b = _0x81e9x198.slots[_0x81e9x52f[i]];
			if (_0x81e9x5b.id == 0) {
				continue
			};
			var _0x81e9x52d = true;
			if (_0x81e9x52b) {
				var _0x81e9x52e = _0x81e9x5b.id + "_" + _0x81e9x5b.data;
				_0x81e9x52d = _0x81e9x52b[_0x81e9x52e]
			};
			if (_0x81e9x52d && (_0x81e9x10 == _0x81e9x5b.id && _0x81e9x16 == _0x81e9x5b.data || _0x81e9x10 == 0) && _0x81e9x5b.id != 0) {
				var _0x81e9x1a3 = Math.min(_0x81e9x5b.count, _0x81e9x152 - _0x81e9x13);
				_0x81e9x5b.count -= _0x81e9x1a3;
				_0x81e9x13 += _0x81e9x1a3;
				_0x81e9x10 = _0x81e9x5b.id;
				_0x81e9x16 = _0x81e9x5b.data;
				if (_0x81e9x5b.count < 1) {
					_0x81e9x5b.id = _0x81e9x5b.data = 0
				}
			};
			if (_0x81e9x13 >= _0x81e9x152) {
				break
			}
		};
		return {
			id: _0x81e9x10,
			count: _0x81e9x13,
			data: _0x81e9x16
		}
	};
	this.getItemFromContainer_ = function(_0x81e9x2bc) {
		var _0x81e9x158 = getMachineType(_0x81e9x2bc);
		if (!_0x81e9x158) {
			return null
		};
		var _0x81e9x194 = _0x81e9x158.getContainer(_0x81e9x2bc);
		if (!_0x81e9x194) {
			return null
		};
		for (var i in this.ContainerGetSlots[_0x81e9x194.id]) {
			var _0x81e9x530 = this.ContainerGetSlots[_0x81e9x194.id][i];
			var _0x81e9x347 = _0x81e9x194.getSlot(_0x81e9x530);
			if (_0x81e9x347.id && _0x81e9x347.count) {
				var _0x81e9x10 = _0x81e9x347.id;
				if (_0x81e9x347.count < 2) {
					_0x81e9x10 = 0
				};
				_0x81e9x194.setSlot(_0x81e9x530, _0x81e9x10, _0x81e9x347.count - 1, _0x81e9x347.data);
				_0x81e9x347.count = 1;
				return _0x81e9x347
			}
		};
		return null
	};
	this.FindContainerSpot = function(_0x81e9x2bc) {
		var _0x81e9x2c0 = [
			[-1, 0, 0],
			[1, 0, 0],
			[0, -1, 0],
			[0, 1, 0],
			[0, 0, -1],
			[0, 0, 1]
		];
		var _0x81e9x14 = parseInt(Math.random() * _0x81e9x2c0.length);
		for (var i = 0; i < _0x81e9x2c0.length; i++) {
			var _0x81e9x15a = _0x81e9x2c0[(_0x81e9x14 + i) % _0x81e9x2c0.length];
			var _0x81e9x2b3 = getTile(_0x81e9x2bc.x + _0x81e9x15a[0], _0x81e9x2bc.y + _0x81e9x15a[1], _0x81e9x2bc.z + _0x81e9x15a[2]);
			if (_0x81e9x2b3 == 54) {
				return _0x81e9x15a
			};
			if (isMachine(_0x81e9x2b3) && _0x81e9x2b3 != this.id && _0x81e9x2b3 != block_filter_pipe) {
				var _0x81e9x531 = getMachine(_0x81e9x2bc.x + _0x81e9x15a[0], _0x81e9x2bc.y + _0x81e9x15a[1], _0x81e9x2bc.z + _0x81e9x15a[2]);
				if (_0x81e9x531 && _0x81e9x531.container) {
					return _0x81e9x15a
				}
			}
		}
	};
	this.transFromContainer = function(_0x81e9x15a, _0x81e9x52a, _0x81e9x52b) {
		var _0x81e9x26 = _0x81e9x15a.x + _0x81e9x52a[0];
		var _0x81e9x27 = _0x81e9x15a.y + _0x81e9x52a[1];
		var _0x81e9x28 = _0x81e9x15a.z + _0x81e9x52a[2];
		var _0x81e9x193 = getTile(_0x81e9x26, _0x81e9x27, _0x81e9x28);
		var _0x81e9x164 = {
			id: 0,
			count: 0,
			data: 0
		};
		var _0x81e9x152 = _0x81e9x15a.stacksize;
		if (_0x81e9x15a.energyStored < _0x81e9x15a.energyPerItem) {
			_0x81e9x152 = 1
		};
		if (_0x81e9x193 == 54) {
			var _0x81e9x1cd = getChest(_0x81e9x26, _0x81e9x27, _0x81e9x28);
			_0x81e9x164 = this.getItemFromChest(_0x81e9x1cd, _0x81e9x152, _0x81e9x52b)
		};
		if (isMachine(_0x81e9x193) && _0x81e9x193 != block_filter_pipe && _0x81e9x193 != block_wooden_pipe) {
			var _0x81e9x2bc = getMachine(_0x81e9x26, _0x81e9x27, _0x81e9x28);
			if (!_0x81e9x2bc) {
				return
			};
			var _0x81e9x35e = getMachineType(_0x81e9x2bc);
			if (!_0x81e9x35e) {
				return
			};
			_0x81e9x164 = this.getItemFromContainer(_0x81e9x35e.getContainer(_0x81e9x2bc), _0x81e9x152, _0x81e9x52b)
		};
		if (_0x81e9x164 && _0x81e9x164.id > 0 && _0x81e9x164.count > 0) {
			StartItemTransport(_0x81e9x26, _0x81e9x27, _0x81e9x28, _0x81e9x164.id, _0x81e9x164.count, _0x81e9x164.data, [-_0x81e9x52a[0], -_0x81e9x52a[1], -_0x81e9x52a[2]]);
			if (_0x81e9x152 > 1) {
				_0x81e9x15a.energyStored -= _0x81e9x15a.energyPerItem
			}
		}
	};
	this.save = function(_0x81e9x17, _0x81e9x15a) {
		DataSaver.Save(_0x81e9x17 + "stacksize", _0x81e9x15a.stacksize)
	};
	this.read = function(_0x81e9x17, _0x81e9x15a) {
		_0x81e9x15a.stacksize = DataSaver.ReadNumber(_0x81e9x17 + "stacksize")
	}
}

function MachineBeeHive() {
	this.parent = MachineBase;
	this.parent();
	this.id = block_bee_hive;
	this.getContainerId = function() {
		return 4
	};
	this.getHelpGuideLink = function(_0x81e9x2bc) {
		return {
			chapter: "beekeeping",
			page: 2
		}
	};
	this.updateMachine = function(_0x81e9x15a) {
		try {
			var _0x81e9x1bd = getTime();
			if (_0x81e9x1bd % 10 == 0) {
				this.searchFlower(_0x81e9x15a)
			};
			if (_0x81e9x15a.hasBees && _0x81e9x15a.flower) {
				this.updateBees(_0x81e9x15a)
			};
			if (_0x81e9x1bd % 40 == 15) {
				this.provideChest(_0x81e9x15a)
			};
			this.getContainer(_0x81e9x15a).setProgressBar(Math.min(1, Math.max(0, _0x81e9x15a.progressbar_val)));
			this.getContainer(_0x81e9x15a).setGuiText(0x00, _0x81e9x15a.text_message || "", android.graphics.Color.BLACK)
		} catch (e) {
			ModPE.showTipMessage(ChatColor.RED + "error in bee hive. It will be enabled in few seconds.");
			clientMessage(e.message)
		}
	};
	this.searchFlower = function(_0x81e9x15a) {
		if (_0x81e9x15a.flCooldown > 0) {
			_0x81e9x15a.flCooldown--;
			return
		};
		if (!_0x81e9x15a.flCooldown) {
			_0x81e9x15a.flCooldown = 0
		};
		var _0x81e9x533 = _0x81e9x15a.x - 4 + parseInt(Math.random() * 9);
		var _0x81e9x534 = _0x81e9x15a.y - 1 + parseInt(Math.random() * 3);
		var _0x81e9x535 = _0x81e9x15a.z - 4 + parseInt(Math.random() * 9);
		var _0x81e9x10 = getTile(_0x81e9x533, _0x81e9x534, _0x81e9x535);
		if (this.isFlower(_0x81e9x15a, _0x81e9x10) && this.canWork(_0x81e9x15a)) {
			_0x81e9x15a.flower = {
				x: _0x81e9x533,
				y: _0x81e9x534,
				z: _0x81e9x535
			};
			_0x81e9x15a.flCooldown = 25
		} else {
			_0x81e9x15a.flower = {
				x: _0x81e9x15a.x,
				y: _0x81e9x15a.y + 1,
				z: _0x81e9x15a.z
			}
		}
	};
	this.isFlower = function(_0x81e9x2bc, _0x81e9x10, _0x81e9x16) {
		if (_0x81e9x2bc.beetype) {
			return _0x81e9x2bc.beetype.isFlower(_0x81e9x10, _0x81e9x16)
		};
		return false
	};
	this.wrenchClick = function(_0x81e9x15a) {
		ModPE.showTipMessage("honey: " + parseInt(_0x81e9x15a.honey / 2) + "%")
	};
	this.getInfo = function(_0x81e9x15a) {
		return "honey: " + parseInt(_0x81e9x15a.honey / 2) + "%"
	};
	this.getMachineName = function() {
		return "bee hive"
	};
	this.provideChest = function(_0x81e9x15a) {
		if (!_0x81e9x15a.honey) {
			_0x81e9x15a.honey = 0
		};
		_0x81e9x15a.progressbar_val = _0x81e9x15a.honey / 200;
		_0x81e9x15a.text_message = "idle";
		var _0x81e9x536 = 0;
		var _0x81e9x194 = this.getContainer(_0x81e9x15a);
		_0x81e9x15a.beetype = BeeRegistry.GetTypeByQueen(_0x81e9x194.getSlot(1).id);
		var _0x81e9x537 = _0x81e9x15a.beetype;
		if (!_0x81e9x15a.beetype) {
			_0x81e9x15a.hasBees = false;
			_0x81e9x15a.honey = 0;
			_0x81e9x15a.mutation_progress = 0;
			return
		};
		if (_0x81e9x194.getSlot(0).id == _0x81e9x15a.beetype.drone) {
			_0x81e9x536 = _0x81e9x194.getSlot(0).count
		} else {
			var _0x81e9x538 = _0x81e9x15a.beetype;
			var _0x81e9x539 = BeeRegistry.GetTypeByDrone(_0x81e9x194.getSlot(0).id);
			if (_0x81e9x539) {
				this.ProvideMutation(_0x81e9x15a, _0x81e9x538, _0x81e9x539);
				return
			}
		};
		_0x81e9x15a.hasBees = (_0x81e9x537 && _0x81e9x536 > 0);
		if (!this.canWork(_0x81e9x15a)) {
			if (!_0x81e9x15a.beeEntities) {
				_0x81e9x15a.beeEntities = []
			};
			if (!_0x81e9x15a.hasBees) {
				this.onDestroy(_0x81e9x15a)
			};
			return
		};
		_0x81e9x15a.mutation_progress = 0;
		var _0x81e9x53a = _0x81e9x194.getSlot(9);
		if (_0x81e9x53a.id == item_condition_controller && _0x81e9x53a.data < 2000 && getTime() % 80 == 15) {
			_0x81e9x53a.data++
		};
		if (Math.random() < 0.7) {
			var _0x81e9x53b = _0x81e9x194.getSlot(1);
			_0x81e9x53b.data++;
			if (_0x81e9x53b.data > _0x81e9x15a.beetype.queen_life) {
				this.onQueenReborn(_0x81e9x15a)
			}
		};
		if (_0x81e9x15a.flower.x != _0x81e9x15a.x || _0x81e9x15a.flower.z != _0x81e9x15a.z) {
			_0x81e9x15a.honey += (_0x81e9x536 / 6 + 0.3) * 1.5 * _0x81e9x15a.beetype.speed_mul
		};
		if (_0x81e9x15a.honey >= 200) {
			var _0x81e9x51b = this.provideHoney(_0x81e9x15a);
			if (_0x81e9x51b) {
				_0x81e9x15a.honey = 0
			} else {
				_0x81e9x15a.honey = 200
			}
		};
		_0x81e9x15a.progressbar_val = _0x81e9x15a.honey / 200;
		_0x81e9x15a.text_message = "working..."
	};
	this.ProvideMutation = function(_0x81e9x15a, _0x81e9x538, _0x81e9x539) {
		var _0x81e9x53c = 32;
		if (!_0x81e9x15a.mutation_progress) {
			_0x81e9x15a.mutation_progress = 0
		};
		var _0x81e9x194 = this.getContainer(_0x81e9x15a);
		_0x81e9x15a.mutation_progress++;
		_0x81e9x15a.progressbar_val = _0x81e9x15a.mutation_progress / _0x81e9x53c;
		_0x81e9x15a.text_message = "mutation...";
		if (_0x81e9x15a.mutation_progress >= _0x81e9x53c) {
			var _0x81e9x53d = BeeRegistry.GetMutation(_0x81e9x538, _0x81e9x539);
			var _0x81e9x53e = 0;
			for (var _0x81e9x347 = 2; _0x81e9x347 < 9; _0x81e9x347++) {
				if (_0x81e9x194.getSlot(_0x81e9x347).id == 0) {
					_0x81e9x53e++
				}
			};
			if (_0x81e9x53e < 2) {
				_0x81e9x15a.mutation_progress = _0x81e9x53c;
				return
			};
			var _0x81e9x53f = 0;
			for (var _0x81e9x347 = 2; _0x81e9x347 < 9; _0x81e9x347++) {
				var _0x81e9x5b = _0x81e9x194.getSlot(_0x81e9x347);
				if (_0x81e9x5b.id == 0) {
					_0x81e9x5b.count++;
					if (_0x81e9x53f == 0) {
						_0x81e9x5b.id = _0x81e9x53d.drone
					};
					if (_0x81e9x53f == 1) {
						_0x81e9x5b.id = _0x81e9x53d.queen;
						break;;
					};
					_0x81e9x53f++
				}
			};
			var _0x81e9x483 = _0x81e9x194.getSlot(0);
			var _0x81e9x481 = _0x81e9x194.getSlot(1);
			_0x81e9x483.count--;
			if (_0x81e9x483.count < 1) {
				_0x81e9x483.id = _0x81e9x483.count = _0x81e9x483.data = 0
			};
			_0x81e9x481.count--;
			if (_0x81e9x481.count < 1) {
				_0x81e9x481.id = _0x81e9x481.count = _0x81e9x481.data = 0
			};
			_0x81e9x15a.mutation_progress = 0;
			_0x81e9x15a.progressbar_val = 0
		}
	};
	this.canWork = function(_0x81e9x15a) {
		var _0x81e9x53a = this.getContainer(_0x81e9x15a).getSlot(9);
		var _0x81e9x540 = _0x81e9x53a.id == item_condition_controller && _0x81e9x53a.data < 2000;
		return _0x81e9x15a.hasBees && _0x81e9x15a.flower && _0x81e9x15a.beetype && (_0x81e9x15a.beetype.canWork(_0x81e9x15a) || _0x81e9x540)
	};
	this.provideHoney = function(_0x81e9x15a) {
		var _0x81e9x541 = false;
		var _0x81e9x201 = _0x81e9x15a.beetype.empty_frame;
		var _0x81e9x472 = _0x81e9x15a.beetype.full_frame;
		var _0x81e9x194 = this.getContainer(_0x81e9x15a);
		for (var i = 2; i < 9; i++) {
			var _0x81e9x5b = _0x81e9x194.getSlot(i);
			if (_0x81e9x5b.id == _0x81e9x201) {
				_0x81e9x5b.id = _0x81e9x472;
				_0x81e9x541 = true;
				break
			}
		};
		if (_0x81e9x541) {
			for (var _0x81e9x259 in _0x81e9x15a.beetype.additional_drop) {
				var drop = _0x81e9x15a.beetype.additional_drop[_0x81e9x259];
				if (drop.chance < Math.random()) {
					continue
				};
				for (var i = 2; i < 9; i++) {
					var _0x81e9x5b = _0x81e9x194.getSlot(i);
					if (_0x81e9x5b.id == drop.id && _0x81e9x5b.data == drop.data || _0x81e9x5b.id == 0) {
						_0x81e9x5b.id = drop.id;
						_0x81e9x5b.data = drop.data;
						_0x81e9x5b.count = Math.min(_0x81e9x5b.count + drop.count, 64);
						return true
					}
				}
			}
		};
		return _0x81e9x541
	};
	this.onQueenReborn = function(_0x81e9x15a) {
		var _0x81e9x194 = this.getContainer(_0x81e9x15a);
		if (_0x81e9x15a.beetype) {
			_0x81e9x15a.beetype.onReborn(_0x81e9x194)
		}
	};
	this.updateBees = function(_0x81e9x15a) {
		if (!_0x81e9x15a.beeEntities) {
			_0x81e9x15a.beeEntities = []
		};
		var _0x81e9x1bd = getTime();
		if (_0x81e9x1bd % 20 == 0) {
			this.checkEntities(_0x81e9x15a)
		};
		if (_0x81e9x1bd % 20 == 10 && this.canWork(_0x81e9x15a)) {
			this.addMissedEntities(_0x81e9x15a)
		};
		this.holdEntityY(_0x81e9x15a);
		if (_0x81e9x1bd % 30 == 0) {
			this.moveBees(_0x81e9x15a, 0)
		};
		if (_0x81e9x1bd % 30 == 15) {
			this.moveBees(_0x81e9x15a, 1)
		}
	};
	this.checkEntities = function(_0x81e9x15a) {
		for (var i in _0x81e9x15a.beeEntities) {
			if (Entity.getY(_0x81e9x15a.beeEntities[i]) == 0) {
				_0x81e9x15a.beeEntities.splice(i, 1);
				i--
			}
		}
	};
	this.addMissedEntities = function(_0x81e9x15a) {
		if (_0x81e9x15a.beetype && _0x81e9x15a.beeEntities.length < 1) {
			var _0x81e9x212 = _0x81e9x15a.beetype.CreateBee(_0x81e9x15a.x + 0.5, _0x81e9x15a.y + 0.2, _0x81e9x15a.z + 0.5, false);
			_0x81e9x15a.beeEntities.push(_0x81e9x212.ent)
		}
	};
	this.moveBees = function(_0x81e9x15a, _0x81e9x3c0) {
		var _0x81e9x542 = (_0x81e9x15a.flower.x == _0x81e9x15a.x && _0x81e9x15a.flower.z == _0x81e9x15a.z);
		if (!_0x81e9x15a.moveData) {
			_0x81e9x15a.moveData = [{
				x: 0,
				y: 0,
				z: 0,
				rot: 0,
				rotAdd: 0
			}, {
				x: 0,
				y: 0,
				z: 0,
				rot: 0,
				rotAdd: 0
			}]
		};
		for (var i in _0x81e9x15a.beeEntities) {
			if (_0x81e9x3c0 == _0x81e9x3c0 && i != _0x81e9x3c0) {
				continue
			};
			var _0x81e9x543 = _0x81e9x15a.beeEntities[i];
			var _0x81e9x544 = Entity.getX(_0x81e9x543);
			var _0x81e9x545 = Entity.getY(_0x81e9x543);
			var _0x81e9x546 = Entity.getZ(_0x81e9x543);
			var _0x81e9x533 = _0x81e9x15a.flower.x + Math.random() * 0.5 + 0.25;
			var _0x81e9x534 = _0x81e9x15a.flower.y + Math.random() + 0.5;
			var _0x81e9x535 = _0x81e9x15a.flower.z + Math.random() * 0.5 + 0.25;
			if (_0x81e9x542) {
				_0x81e9x533 = _0x81e9x15a.x + 0.5;
				_0x81e9x535 = _0x81e9x15a.z + 1;
				_0x81e9x534 = _0x81e9x15a.y + 0.5
			};
			var _0x81e9x3d4 = _0x81e9x533 - _0x81e9x544;
			var _0x81e9x3d5 = _0x81e9x534 - _0x81e9x545;
			var _0x81e9x3d6 = _0x81e9x535 - _0x81e9x546;
			var _0x81e9x15b = Math.sqrt(_0x81e9x3d4 * _0x81e9x3d4 + _0x81e9x3d5 * _0x81e9x3d5 + _0x81e9x3d6 * _0x81e9x3d6);
			_0x81e9x3d4 *= 0.02 / _0x81e9x15b;
			_0x81e9x3d5 *= 0.02 / _0x81e9x15b;
			_0x81e9x3d6 *= 0.02 / _0x81e9x15b;
			if (_0x81e9x542 && Math.abs(_0x81e9x544 - (_0x81e9x15a.x + 0.5)) < 0.75 && Math.abs(_0x81e9x545 - (_0x81e9x15a.y + 0.5)) < 0.65 && Math.abs(_0x81e9x546 - (_0x81e9x15a.z + 0.5)) < 0.75) {
				Entity.remove(_0x81e9x543);
				break
			};
			_0x81e9x15a.moveData[i].x = _0x81e9x3d4;
			_0x81e9x15a.moveData[i].y = _0x81e9x3d5;
			_0x81e9x15a.moveData[i].z = _0x81e9x3d6;
			_0x81e9x15a.moveData[i].rot = Math.random() * 360;
			if (Math.random() < 0.5) {
				_0x81e9x15a.moveData[i].rotAdd = 3
			} else {
				_0x81e9x15a.moveData[i].rotAdd = -3
			}
		}
	};
	this.holdEntityY = function(_0x81e9x15a) {
		for (var i in _0x81e9x15a.beeEntities) {
			if (!_0x81e9x15a.moveData) {
				setVelY(_0x81e9x15a.beeEntities[i], 0)
			} else {
				setVelX(_0x81e9x15a.beeEntities[i], _0x81e9x15a.moveData[i].x);
				setVelY(_0x81e9x15a.beeEntities[i], _0x81e9x15a.moveData[i].y);
				setVelZ(_0x81e9x15a.beeEntities[i], _0x81e9x15a.moveData[i].z);
				Entity.setRot(_0x81e9x15a.beeEntities[i], _0x81e9x15a.moveData[i].rot, 0)
			}
		}
	};
	this.onDestroy = function(_0x81e9x15a) {
		for (var i in _0x81e9x15a.beeEntities) {
			Entity.remove(_0x81e9x15a.beeEntities[i])
		};
		_0x81e9x15a.beeEntities = []
	};
	this.save = function(_0x81e9x259, _0x81e9x15a) {
		DataSaver.Save(_0x81e9x259 + "honey", _0x81e9x15a.honey);
		DataSaver.Save(_0x81e9x259 + "mutation", _0x81e9x15a.mutation_progress)
	};
	this.read = function(_0x81e9x259, _0x81e9x15a) {
		_0x81e9x15a.honey = DataSaver.ReadFloat(_0x81e9x259 + "honey");
		_0x81e9x15a.mutation_progress = DataSaver.ReadFloat(_0x81e9x259 + "mutation")
	}
}

function MachineWildBeeHive() {
	this.parent = MachineBase;
	this.parent();
	this.id = block_wild_hive;
	this.updateMachine = function(_0x81e9x15a) {
		if (!_0x81e9x15a.beetype) {
			_0x81e9x15a.beetype = BeeRegistry.GetRandomByCoords(_0x81e9x15a.x, _0x81e9x15a.z)
		};
		if (!_0x81e9x15a.beeEntities) {
			_0x81e9x15a.beeEntities = []
		};
		var _0x81e9x1bd = getTime();
		if (_0x81e9x1bd % 20 == 0) {
			this.checkEntities(_0x81e9x15a)
		};
		if (_0x81e9x1bd % 20 == 10) {
			this.addMissedEntities(_0x81e9x15a)
		};
		if (_0x81e9x1bd % 30 == 1) {
			this.moveBees(_0x81e9x15a, 0)
		};
		if (_0x81e9x1bd % 30 == 16) {
			this.moveBees(_0x81e9x15a, 1)
		};
		this.holdEntityY(_0x81e9x15a)
	};
	this.checkEntities = function(_0x81e9x15a) {
		for (var i in _0x81e9x15a.beeEntities) {
			if (Entity.getY(_0x81e9x15a.beeEntities[i]) == 0) {
				_0x81e9x15a.beeEntities.splice(i, 1);
				i--
			}
		}
	};
	this.addMissedEntities = function(_0x81e9x15a) {
		if (_0x81e9x15a.beeEntities.length < 2 && _0x81e9x15a.beetype) {
			var _0x81e9x548 = _0x81e9x15a.beetype.CreateBee(_0x81e9x15a.x, _0x81e9x15a.y + 0.5, _0x81e9x15a.z + 0.5, _0x81e9x15a.beeEntities.length == 1);
			_0x81e9x15a.beeEntities.push(_0x81e9x548.ent)
		}
	};
	this.moveBees = function(_0x81e9x15a, _0x81e9x3c0) {
		if (!_0x81e9x15a.moveData) {
			_0x81e9x15a.moveData = [{
				x: 0,
				y: 0,
				z: 0,
				rot: 0,
				rotAdd: 0
			}, {
				x: 0,
				y: 0,
				z: 0,
				rot: 0,
				rotAdd: 0
			}]
		};
		for (var i in _0x81e9x15a.beeEntities) {
			if (_0x81e9x3c0 == _0x81e9x3c0 && i != _0x81e9x3c0) {
				continue
			};
			var _0x81e9x543 = _0x81e9x15a.beeEntities[i];
			var _0x81e9x544 = Entity.getX(_0x81e9x543);
			var _0x81e9x545 = Entity.getY(_0x81e9x543);
			var _0x81e9x546 = Entity.getZ(_0x81e9x543);
			var _0x81e9x533 = _0x81e9x15a.x - 1 + Math.random() * 2;
			var _0x81e9x534 = _0x81e9x15a.y + Math.random() + 1;
			var _0x81e9x535 = _0x81e9x15a.z + Math.random() * 2 + 1;
			var _0x81e9x3d4 = _0x81e9x533 - _0x81e9x544;
			var _0x81e9x3d5 = _0x81e9x534 - _0x81e9x545;
			var _0x81e9x3d6 = _0x81e9x535 - _0x81e9x546;
			var _0x81e9x15b = Math.sqrt(_0x81e9x3d4 * _0x81e9x3d4 + _0x81e9x3d5 * _0x81e9x3d5 + _0x81e9x3d6 * _0x81e9x3d6);
			_0x81e9x3d4 *= 0.04 / _0x81e9x15b;
			_0x81e9x3d5 *= 0.04 / _0x81e9x15b;
			_0x81e9x3d6 *= 0.04 / _0x81e9x15b;
			_0x81e9x15a.moveData[i].x = _0x81e9x3d4;
			_0x81e9x15a.moveData[i].y = _0x81e9x3d5;
			_0x81e9x15a.moveData[i].z = _0x81e9x3d6;
			_0x81e9x15a.moveData[i].rot = Math.random() * 360;
			if (Math.random() < 0.5) {
				_0x81e9x15a.moveData[i].rotAdd = 3
			} else {
				_0x81e9x15a.moveData[i].rotAdd = -3
			}
		}
	};
	this.holdEntityY = function(_0x81e9x15a) {
		for (var i in _0x81e9x15a.beeEntities) {
			if (!_0x81e9x15a.moveData) {
				setVelY(_0x81e9x15a.beeEntities[i], 0)
			} else {
				setVelX(_0x81e9x15a.beeEntities[i], _0x81e9x15a.moveData[i].x);
				setVelY(_0x81e9x15a.beeEntities[i], _0x81e9x15a.moveData[i].y);
				setVelZ(_0x81e9x15a.beeEntities[i], _0x81e9x15a.moveData[i].z);
				Entity.setRot(_0x81e9x15a.beeEntities[i], _0x81e9x15a.moveData[i].rot, 0)
			}
		}
	};
	this.onDestroy = function(_0x81e9x15a) {
		for (var i in _0x81e9x15a.beeEntities) {
			if (_0x81e9x15a.beetype) {
				var _0x81e9x10 = _0x81e9x15a.beetype.drone;
				if (i == 0) {
					_0x81e9x10 = _0x81e9x15a.beetype.queen
				}
			} else {
				var _0x81e9x10 = item_usual_drone
			};
			var _0x81e9x174 = _0x81e9x15a.beeEntities[i];
			Level.dropItem(Entity.getX(_0x81e9x174), Entity.getY(_0x81e9x174), Entity.getZ(_0x81e9x174), 0, _0x81e9x10, 1, 0);
			Entity.remove(_0x81e9x15a.beeEntities[i])
		}
	};
	this.getMachineName = function() {
		return "wild bee hive"
	};
	this.save = function(_0x81e9x17, _0x81e9x15a) {
		if (_0x81e9x15a.beetype) {
			DataSaver.Save(_0x81e9x17 + "beetype", _0x81e9x15a.beetype.id)
		}
	};
	this.read = function(_0x81e9x17, _0x81e9x15a) {
		var _0x81e9x10 = DataSaver.ReadNumber(_0x81e9x17 + "beetype");
		_0x81e9x15a.beetype = BeeRegistry.GetById(_0x81e9x10)
	}
}
var MachineCentrefuge_recipes = [{
	"source": [18, 8, -1],
	"liquid": 6,
	"result": [6, 1, 0],
	"random": [
		[260, [1, 2], 0, 0.25],
		[322, [1, 1], 0, 0.01]
	]
}, {
	"source": [item_dust_gold, 2, -1],
	"liquid": 0,
	"result": [item_dust_gold, 1, 0],
	"random": [
		[item_dust_gold, [1, 1], 0, 0.5],
		[item_dust_iron, [1, 1], 0, 0.4],
		[item_dust_copper, [1, 1], 0, 0.2],
		[item_dust_tin, [1, 1], 0, 0.2]
	]
}, {
	"source": [item_dust_iron, 2, -1],
	"liquid": 0,
	"result": [item_dust_iron, 1, 0],
	"random": [
		[item_dust_gold, [1, 1], 0, 0.2],
		[item_dust_iron, [1, 1], 0, 0.5],
		[item_dust_copper, [1, 1], 0, 0.25],
		[item_dust_tin, [1, 1], 0, 0.2]
	]
}, {
	"source": [item_dust_copper, 2, -1],
	"liquid": 0,
	"result": [item_dust_copper, 1, 0],
	"random": [
		[item_dust_gold, [1, 1], 0, 0.1],
		[item_dust_iron, [1, 1], 0, 0.2],
		[item_dust_copper, [1, 1], 0, 0.5],
		[item_dust_tin, [1, 1], 0, 0.3]
	]
}, {
	"source": [item_dust_tin, 2, -1],
	"liquid": 0,
	"result": [item_dust_tin, 1, 0],
	"random": [
		[item_dust_gold, [1, 1], 0, 0.1],
		[item_dust_iron, [1, 1], 0, 0.2],
		[item_dust_copper, [1, 1], 0, 0.3],
		[item_dust_tin, [1, 1], 0, 0.5]
	]
}, {
	"source": [item_honey_frame, 1, -1],
	"liquid": 2,
	"result": [item_empty_frame, 1, 0],
	"random": [
		[item_honey_drop, [1, 1], 0, 1]
	]
}, {
	"source": [item_cocoa_frame, 1, -1],
	"liquid": 2,
	"result": [item_empty_frame, 1, 0],
	"random": [
		[item_honey_drop, [1, 1], 0, 0.5],
		[351, [1, 2], 3, 1]
	]
}, {
	"source": [item_swamp_frame, 1, -1],
	"liquid": 6,
	"result": [item_empty_frame, 1, 0],
	"random": []
}, {
	"source": [item_hell_frame, 1, -1],
	"liquid": 0,
	"result": [item_empty_frame, 1, 0],
	"random": [
		[263, [1, 1], 0, 0.8],
		[348, [1, 3], 0, 0.25],
		[289, [1, 1], 0, 0.4],
		[377, [1, 2], 0, 0.25]
	]
}, {
	"source": [item_precious_frame, 1, -1],
	"liquid": 0,
	"result": [item_empty_frame, 1, 0],
	"random": [
		[item_dust_copper, [1, 1], 0, 0.2],
		[item_dust_iron, [1, 1], 0, 0.25],
		[item_dust_gold, [1, 1], 0, 0.25],
		[item_dust_tin, [1, 1], 0, 0.25],
		[item_diamond_shard, [1, 1], 0, 0.25],
		[351, [1, 3], 4, 0.2],
		[348, [1, 3], 0, 0.15],
		[331, [1, 3], 0, 0.3]
	]
}, {
	"source": [item_nano_frame_full, 1, -1],
	"liquid": 0,
	"result": [item_nano_frame_empty, 1, 0],
	"random": [
		[item_matter_chunk, [1, 1], 0, 1]
	]
}];

function MachineCentrefuge() {
	this.parent = MachineBase;
	this.parent();
	this.id = block_centrefuge;
	this.MaxEnergyInput = 32;
	this.isUsingEnergy = function() {
		return true
	};
	this.getMachineName = function() {
		return "centrefuge"
	};
	this.getHelpGuideLink = function(_0x81e9x2bc) {
		return {
			chapter: "beekeeping",
			page: 4
		}
	};
	this.getMaxEnergyStored = function() {
		return 2000
	};
	this.getContainerId = function() {
		return 13
	};
	this.wrenchClick = function(_0x81e9x15a) {
		var _0x81e9x44b = 3 * Math.pow(3, _0x81e9x15a.overclockers);
		var _0x81e9x442 = "";
		if (_0x81e9x15a.progress) {
			_0x81e9x442 = ChatColor.GREEN + "progress " + parseInt(_0x81e9x15a.progress / 4) + "%"
		};
		if (_0x81e9x44b > this.getEnergyStored(_0x81e9x15a) && _0x81e9x15a.progress) {
			_0x81e9x442 = ChatColor.RED + "no energy"
		};
		if (_0x81e9x442) {
			ModPE.showTipMessage(_0x81e9x442)
		}
	};
	this.getCurrentRecipe = function(_0x81e9x194) {
		var _0x81e9x5b = _0x81e9x194.getSlot(0);
		for (var i in MachineCentrefuge_recipes) {
			var _0x81e9x54b = MachineCentrefuge_recipes[i].source;
			if (_0x81e9x54b[0] == _0x81e9x5b.id && _0x81e9x54b[1] <= _0x81e9x5b.count && (_0x81e9x5b.data == _0x81e9x54b[2] || _0x81e9x54b[2] == -1)) {
				return MachineCentrefuge_recipes[i]
			}
		};
		return null
	};
	this.canProgressGo = function(_0x81e9x194, _0x81e9x465) {
		if (!_0x81e9x465) {
			return false
		};
		var _0x81e9x5b = _0x81e9x194.getSlot(2);
		if (_0x81e9x465.liquid == 0 || IsEmptyLiquidItem(_0x81e9x5b.id, _0x81e9x5b.data)) {
			return GetFullItem(_0x81e9x5b.id, _0x81e9x5b.data, _0x81e9x465.liquid)
		};
		return false
	};
	this.setProgressBars = function(_0x81e9x194, _0x81e9x9) {
		_0x81e9x194.setCustomBar(0x0, _0x81e9x9);
		_0x81e9x194.setCustomBar(0x1, _0x81e9x9);
		_0x81e9x194.setCustomBar(0x2, _0x81e9x9);
		_0x81e9x194.setCustomBar(0x3, _0x81e9x9)
	};
	this.processRecipe = function(_0x81e9x194, _0x81e9x465) {
		if (!_0x81e9x465) {
			return true
		};
		var _0x81e9x54c = _0x81e9x194.getSlot(0);
		var _0x81e9x54d = _0x81e9x194.getSlot(1);
		var _0x81e9x54e = _0x81e9x194.getSlot(2);
		var _0x81e9x54f = 64;
		var _0x81e9x550 = [];
		for (var i in _0x81e9x465.random) {
			var _0x81e9x3c2 = _0x81e9x465.random[i];
			if (_0x81e9x3c2[3] < Math.random()) {
				continue
			};
			var _0x81e9x13 = _0x81e9x3c2[1][0] + parseInt(Math.random() * (_0x81e9x3c2[1][1] - _0x81e9x3c2[1][0] + 1));
			_0x81e9x550[i % 2] = [_0x81e9x3c2[0], _0x81e9x13, _0x81e9x3c2[2]];
			if (_0x81e9x550.length >= 2) {
				break
			}
		};
		if (!(_0x81e9x54d.id == 0 || _0x81e9x54d.id == _0x81e9x465.result[0]) || _0x81e9x54f < _0x81e9x465.result[1] + _0x81e9x54d.count || _0x81e9x54d.data != _0x81e9x465.result[2]) {
			return false
		};
		if (_0x81e9x465.liquid != 0 && !GetFullItem(_0x81e9x54e.id, _0x81e9x54e.data, _0x81e9x465.liquid)) {
			return false
		};
		if (_0x81e9x465.liquid != 0) {
			var _0x81e9x551 = _0x81e9x194.getSlot(5);
			var _0x81e9x472 = GetFullItem(_0x81e9x54e.id, _0x81e9x54e.data, _0x81e9x465.liquid);
			if ((_0x81e9x472[0] == _0x81e9x551.id && _0x81e9x472[1] == _0x81e9x551.data || _0x81e9x551.id == 0) && _0x81e9x551.count < 16) {
				_0x81e9x551.id = _0x81e9x472[0];
				_0x81e9x551.data = _0x81e9x472[1];
				_0x81e9x551.count++;
				_0x81e9x54e.count--;
				if (_0x81e9x54e.count <= 0) {
					_0x81e9x54e.id = _0x81e9x54e.data = 0
				}
			} else {
				return false
			}
		};
		_0x81e9x54d.count += _0x81e9x465.result[1];
		_0x81e9x54d.id = _0x81e9x465.result[0];
		_0x81e9x54d.data = _0x81e9x465.result[2];
		_0x81e9x54c.count -= _0x81e9x465.source[1];
		if (_0x81e9x54c.count <= 0) {
			_0x81e9x54c.id = _0x81e9x54c.data = 0
		};
		for (var i in _0x81e9x550) {
			var _0x81e9x552 = _0x81e9x194.getSlot(3 + parseInt(i));
			var drop = _0x81e9x550[i];
			if ((drop[0] == _0x81e9x552.id && drop[2] == _0x81e9x552.data || _0x81e9x552.id == 0) && _0x81e9x552.count + drop[1] <= 64) {
				_0x81e9x552.id = drop[0];
				_0x81e9x552.data = drop[2];
				_0x81e9x552.count += drop[1]
			}
		};
		return true
	};
	this.updateMachine = function(_0x81e9x15a) {
		var _0x81e9x1bd = getTime();
		var _0x81e9x194 = this.getContainer(_0x81e9x15a);
		if (_0x81e9x1bd % 10 == 0) {
			var _0x81e9x465 = this.getCurrentRecipe(_0x81e9x194);
			var _0x81e9x553 = this.canProgressGo(_0x81e9x194, _0x81e9x465);
			if (!_0x81e9x465) {
				_0x81e9x15a.progress = 0
			} else {
				if (_0x81e9x15a.progress <= 0) {
					_0x81e9x15a.progress = 1
				}
			}
		};
		if (!_0x81e9x15a.progress) {
			_0x81e9x15a.progress = 0
		};
		this.setProgressBars(_0x81e9x194, _0x81e9x15a.progress / 400);
		if (_0x81e9x15a.progress > 0 && this.getEnergyStored(_0x81e9x15a) >= 4 && _0x81e9x15a.progress < 400) {
			_0x81e9x15a.energyStored -= 4;
			_0x81e9x15a.progress++
		};
		if (_0x81e9x15a.progress >= 400) {
			var _0x81e9x465 = this.getCurrentRecipe(_0x81e9x194);
			if (this.processRecipe(_0x81e9x194, _0x81e9x465)) {
				_0x81e9x15a.progress = 0
			} else {
				_0x81e9x15a.progress = 400
			}
		}
	};
	this.save = function(_0x81e9x17, _0x81e9x15a) {
		DataSaver.Save(_0x81e9x17 + "prs", _0x81e9x15a.progress)
	};
	this.read = function(_0x81e9x17, _0x81e9x15a) {
		_0x81e9x15a.progress = DataSaver.ReadNumber(_0x81e9x17 + "prs")
	};
	this.getUpgrades = function(_0x81e9x15a) {
		var _0x81e9x347 = this.getContainer(_0x81e9x15a).getSlot(2);
		if (_0x81e9x347.id == item_overclocker_upgrade) {
			return _0x81e9x347.count
		};
		return 0
	};
	this.showProgress = function(_0x81e9x15a) {
		this.getContainer(_0x81e9x15a).setProgressBar(_0x81e9x15a.progress / 400)
	}
}
var BeeRegistry = {
	BeeTypes: {},
	LastID: 0,
	TotalRarity: 0,
	RegisterNewBeeType: function(_0x81e9x555, _0x81e9x556, _0x81e9x557) {
		var _0x81e9x10 = this.LastID++;
		var _0x81e9x158 = new BeeType(_0x81e9x10, _0x81e9x555, _0x81e9x556, _0x81e9x557);
		this.BeeTypes[_0x81e9x10] = _0x81e9x158;
		this.TotalRarity += _0x81e9x557;
		return _0x81e9x158
	},
	GetById: function(_0x81e9x10) {
		return this.BeeTypes[_0x81e9x10]
	},
	GetRandom: function() {
		var _0x81e9x3c2 = Math.random() * this.TotalRarity;
		var _0x81e9x558 = 0;
		for (var _0x81e9x10 in this.BeeTypes) {
			_0x81e9x558 += this.BeeTypes[_0x81e9x10].rarity;
			if (_0x81e9x558 > _0x81e9x3c2 && _0x81e9x558 - this.BeeTypes[_0x81e9x10].rarity < _0x81e9x3c2) {
				return this.BeeTypes[_0x81e9x10]
			}
		};
		return null
	},
	GetTypeByQueen: function(_0x81e9x559) {
		for (var _0x81e9x10 in this.BeeTypes) {
			if (this.BeeTypes[_0x81e9x10].queen == _0x81e9x559) {
				return this.BeeTypes[_0x81e9x10]
			}
		}
	},
	GetTypeByDrone: function(_0x81e9x55a) {
		for (var _0x81e9x10 in this.BeeTypes) {
			if (this.BeeTypes[_0x81e9x10].drone == _0x81e9x55a) {
				return this.BeeTypes[_0x81e9x10]
			}
		}
	},
	GetRandomByCoords: function(_0x81e9x26, _0x81e9x28, _0x81e9x34d) {
		if (!_0x81e9x34d) {
			_0x81e9x34d = null
		};
		var _0x81e9x3c2 = Math.random() * this.TotalRarity;
		var _0x81e9x558 = 0;
		for (var _0x81e9x10 in this.BeeTypes) {
			_0x81e9x558 += this.BeeTypes[_0x81e9x10].rarity;
			if (_0x81e9x558 > _0x81e9x3c2 && _0x81e9x558 - this.BeeTypes[_0x81e9x10].rarity < _0x81e9x3c2) {
				var _0x81e9x158 = this.BeeTypes[_0x81e9x10];
				if (!_0x81e9x158.CheckBiome(_0x81e9x26, _0x81e9x28) && _0x81e9x34d < 30) {
					return this.GetRandomByCoords(_0x81e9x26, _0x81e9x28, _0x81e9x34d + 1)
				};
				return _0x81e9x158
			}
		};
		return null
	},
	GetMutation: function(_0x81e9x538, _0x81e9x539) {
		var _0x81e9x55b = [];
		for (var _0x81e9x55c in _0x81e9x538.mutation_chances) {
			_0x81e9x55b[_0x81e9x55c] = _0x81e9x538.getMutationChance(_0x81e9x55c) * _0x81e9x539.getMutationChance(_0x81e9x55c)
		};
		for (var _0x81e9x55c in _0x81e9x55b) {
			if (Math.random() < _0x81e9x55b[_0x81e9x55c]) {
				return this.GetById(_0x81e9x55c)
			}
		};
		if (Math.random() < 0.8) {
			return _0x81e9x538
		} else {
			return _0x81e9x539
		}
	}
};

function BeeType(_0x81e9x10, _0x81e9x55a, _0x81e9x559, _0x81e9x557) {
	this.queen = _0x81e9x559;
	this.drone = _0x81e9x55a;
	this.id = _0x81e9x10;
	this.rarity = _0x81e9x557;
	this.queen_life = 1000;
	this.speed_mul = 1;
	this.empty_frame = 0;
	this.full_frame = 0;
	this.additional_drop = [];
	this.mutation_chances = [];
	this.addMutation = function(_0x81e9x10, _0x81e9x55e) {
		this.mutation_chances[_0x81e9x10] = _0x81e9x55e
	};
	this.getMutationChance = function(_0x81e9x10, _0x81e9x55e) {
		if (this.mutation_chances[_0x81e9x10]) {
			return this.mutation_chances[_0x81e9x10]
		};
		return 0
	};
	this.setFrameItems = function(_0x81e9x201, _0x81e9x472) {
		this.empty_frame = _0x81e9x201;
		this.full_frame = _0x81e9x472
	};
	this.addDrop = function(_0x81e9x10, _0x81e9x13, _0x81e9x16, _0x81e9x55e) {
		this.additional_drop.push({
			chance: _0x81e9x55e,
			id: _0x81e9x10,
			count: _0x81e9x13,
			data: _0x81e9x16
		})
	};
	this.setWorkSpeed = function(_0x81e9x1b9) {
		this.speed_mul = _0x81e9x1b9
	};
	this.setQueenLife = function(_0x81e9x1bd) {
		this.queen_life = _0x81e9x1bd
	};
	this.setRebornFunc = function(_0x81e9xd) {
		this.onReborn = _0x81e9xd
	};
	this.setWorkFunc = function(_0x81e9xd) {
		this.canWork = _0x81e9xd
	};
	this.setFlowerFunc = function(_0x81e9xd) {
		this.isFlower = _0x81e9xd
	};
	this.onReborn = function(_0x81e9x194) {
		var _0x81e9x467 = _0x81e9x194.getSlot(1);
		if (_0x81e9x467.id == this.queen) {
			_0x81e9x467.data = 1
		};
		for (var i = 2; i < 9; i++) {
			var _0x81e9x5b = _0x81e9x194.getSlot(i);
			if (_0x81e9x5b.id == 0 || _0x81e9x5b.id == this.drone) {
				_0x81e9x5b.id = this.drone;
				_0x81e9x5b.count++;
				break
			}
		}
	};
	this.canWork = function(_0x81e9x2bc) {
		return Level.getBrightness(_0x81e9x2bc.x, _0x81e9x2bc.y + 1, _0x81e9x2bc.z) > 14 && this.CheckBiome(_0x81e9x2bc.x, _0x81e9x2bc.z)
	};
	this.isFlower = function(_0x81e9x10, _0x81e9x16) {
		return (_0x81e9x10 == 37 || _0x81e9x10 == 38 || _0x81e9x10 == 175)
	};
	this.biomes = [];
	this.setBiomeArray = function(_0x81e9x499) {
		this.biomes = _0x81e9x499
	};
	this.addBiome = function(_0x81e9x173) {
		this.biomes.push(_0x81e9x173)
	};
	this.CheckBiome = function(_0x81e9x26, _0x81e9x28) {
		if (this.biomes && this.biomes.length) {
			var _0x81e9x3b2 = Level.getBiome(_0x81e9x26, _0x81e9x28);
			for (var i in this.biomes) {
				if (this.biomes[i] == _0x81e9x3b2) {
					return true
				}
			};
			return false
		};
		return true
	};
	this.CreateBee = function(_0x81e9x26, _0x81e9x27, _0x81e9x28, _0x81e9x55f) {
		var _0x81e9x10 = this.drone;
		if (_0x81e9x55f) {
			_0x81e9x10 = this.queen
		};
		var _0x81e9x543 = Level.spawnMob(_0x81e9x26, _0x81e9x27, _0x81e9x28, EntityType.RABBIT);
		var _0x81e9x212 = AnimateEntityAsBee(_0x81e9x543, _0x81e9x10);
		return _0x81e9x212
	};
	this.getTextState = function(_0x81e9x15a) {}
}
var BeeTypeFuncs = {
	isFlowerCactus: function(_0x81e9x10) {
		return _0x81e9x10 == 81
	},
	isNetherWart: function(_0x81e9x10) {
		return _0x81e9x10 == 115
	},
	isFlowerOrSwampPlant: function(_0x81e9x10) {
		return _0x81e9x10 == 111 || _0x81e9x10 == 106 || _0x81e9x10 == 43 || _0x81e9x10 == 175 || _0x81e9x10 == 37 || _0x81e9x10 == 38
	},
	canWorkOnlyInHell: function(_0x81e9x2bc) {
		return Level.getBiome(_0x81e9x2bc.x, _0x81e9x2bc.z) == 8
	},
	canWorkInAnyExeptDesert: function(_0x81e9x2bc) {
		return Level.getBrightness(_0x81e9x2bc.x, _0x81e9x2bc.y + 1, _0x81e9x2bc.z) > 14 && Level.getBiome(_0x81e9x2bc.x, _0x81e9x2bc.z) != 2
	},
	canWorkInAnyBiome: function(_0x81e9x2bc) {
		return Level.getBrightness(_0x81e9x2bc.x, _0x81e9x2bc.y + 1, _0x81e9x2bc.z) > 14
	}
};
var bee_type_usual = BeeRegistry.RegisterNewBeeType(item_usual_drone, item_usual_queen, 0.5);
bee_type_usual.setFrameItems(item_empty_frame, item_honey_frame);
var bee_type_swamp = BeeRegistry.RegisterNewBeeType(item_swamp_drone, item_swamp_queen, 1);
bee_type_swamp.setWorkSpeed(0.5);
bee_type_swamp.setBiomeArray([6]);
bee_type_swamp.setFlowerFunc(BeeTypeFuncs.isFlowerOrSwampPlant);
bee_type_swamp.setWorkFunc(BeeTypeFuncs.canWorkInAnyExeptDesert);
bee_type_swamp.setFrameItems(item_empty_frame, item_swamp_frame);
bee_type_swamp.addDrop(item_rubber, 1, 0, 0.25);
var bee_type_meadow = BeeRegistry.RegisterNewBeeType(item_meadow_drone, item_meadow_queen, 0.4);
bee_type_meadow.setWorkSpeed(2.1);
bee_type_meadow.setBiomeArray([1]);
bee_type_meadow.setFrameItems(item_empty_frame, item_honey_frame);
bee_type_meadow.addDrop(item_honey_drop, 1, 0, 0.4);
var bee_type_hell = BeeRegistry.RegisterNewBeeType(item_hell_drone, item_hell_queen, 0.75);
bee_type_hell.setWorkSpeed(0.3);
bee_type_hell.setBiomeArray([8]);
bee_type_hell.setFrameItems(item_empty_frame, item_hell_frame);
bee_type_hell.setFlowerFunc(BeeTypeFuncs.isNetherWart);
bee_type_hell.setWorkFunc(BeeTypeFuncs.canWorkOnlyInHell);
bee_type_hell.addDrop(348, 1, 0, 0.5);
var bee_type_tropical = BeeRegistry.RegisterNewBeeType(item_tropical_drone, item_tropical_queen, 1);
bee_type_tropical.setWorkSpeed(1.2);
bee_type_tropical.setBiomeArray([21]);
bee_type_tropical.setFrameItems(item_empty_frame, item_cocoa_frame);
var bee_type_wise = BeeRegistry.RegisterNewBeeType(item_wise_drone, item_wise_queen, 0.04);
bee_type_wise.setWorkSpeed(0.2);
bee_type_wise.setFrameItems(item_essense_bottle, 384);
var bee_type_precious = BeeRegistry.RegisterNewBeeType(item_precious_drone, item_precious_queen, 0.25);
bee_type_precious.setWorkSpeed(0.3);
bee_type_precious.setBiomeArray([3]);
bee_type_precious.setFrameItems(item_empty_frame, item_precious_frame);
var bee_type_legendary = BeeRegistry.RegisterNewBeeType(item_legendary_drone, item_legendary_queen, 0.01);
bee_type_legendary.setWorkSpeed(0.05);
bee_type_legendary.setFrameItems(item_nano_frame_empty, item_nano_frame_full);
bee_type_legendary.addDrop(item_diamond_shard, 1, 0, 0.25);
bee_type_usual.addMutation(bee_type_meadow.id, 1);
bee_type_usual.addMutation(bee_type_tropical.id, 0.5);
bee_type_usual.addMutation(bee_type_precious.id, 0.3);
bee_type_usual.addMutation(bee_type_swamp.id, 1);
bee_type_tropical.addMutation(bee_type_swamp.id, 1);
bee_type_swamp.addMutation(bee_type_meadow.id, 0.5);
bee_type_swamp.addMutation(bee_type_tropical.id, 0.7);
bee_type_meadow.addMutation(bee_type_wise.id, 0.15);
bee_type_meadow.addMutation(bee_type_tropical.id, 1);
bee_type_hell.addMutation(bee_type_wise.id, 0.5);
bee_type_hell.addMutation(bee_type_precious.id, 0.5);
bee_type_precious.addMutation(bee_type_legendary.id, 0.25);
bee_type_wise.addMutation(bee_type_legendary.id, 0.4);

function DefineAllFzWire() {
	DefineUIDBlock(block_wire, [{
		name: "copper wire",
		texture: [
			["wire", 0],
			["wire", 0],
			["wire", 0],
			["wire", 0],
			["wire", 0],
			["wire", 0]
		]
	}, {
		name: "golden wire",
		texture: [
			["wire", 1],
			["wire", 1],
			["wire", 1],
			["wire", 1],
			["wire", 1],
			["wire", 1]
		]
	}, {
		name: "steel wire",
		texture: [
			["wire", 2],
			["wire", 2],
			["wire", 2],
			["wire", 2],
			["wire", 2],
			["wire", 2]
		]
	}, {
		name: "crystal wire",
		texture: [
			["wire", 3],
			["wire", 3],
			["wire", 3],
			["wire", 3],
			["wire", 3],
			["wire", 3]
		]
	}, {
		name: "superconductor",
		texture: [
			["wire", 4],
			["wire", 4],
			["wire", 4],
			["wire", 4],
			["wire", 4],
			["wire", 4]
		]
	}], UID_OFFSET_WPD);
	Block.setShape(block_wire, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75)
}

function DefineAllFzPipes() {
	DefineUIDBlock(block_transporting_pipe, [{
		name: "transporting pipe",
		texture: [
			["pipe", 0],
			["pipe", 0],
			["pipe", 0],
			["pipe", 0],
			["pipe", 0],
			["pipe", 0]
		]
	}], UID_OFFSET_WPD);
	Block.setShape(block_transporting_pipe, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75);
	DefineUIDBlock(block_filter_pipe, [{
		name: "filter pipe",
		texture: [
			["pipe", 1],
			["pipe", 1],
			["pipe", 1],
			["pipe", 1],
			["pipe", 1],
			["pipe", 1]
		]
	}], UID_OFFSET_WPD);
	Block.setShape(block_filter_pipe, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75);
	DefineUIDBlock(block_golden_pipe, [{
		name: "golden pipe",
		texture: [
			["pipe", 2],
			["pipe", 2],
			["pipe", 2],
			["pipe", 2],
			["pipe", 2],
			["pipe", 2]
		]
	}], UID_OFFSET_WPD);
	Block.setShape(block_golden_pipe, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75);
	DefineUIDBlock(block_wooden_pipe, [{
		name: "wooden pipe",
		texture: [
			["pipe", 4],
			["pipe", 4],
			["pipe", 4],
			["pipe", 4],
			["pipe", 4],
			["pipe", 4]
		]
	}], UID_OFFSET_WPD);
	Block.setShape(block_wooden_pipe, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75);
	DefineUIDBlock(block_valve_pipe, [{
		name: "valve pipe",
		texture: [
			["pipe", 3],
			["pipe", 3],
			["pipe", 3],
			["pipe", 3],
			["pipe", 3],
			["pipe", 3]
		]
	}, {
		name: "valve pipe",
		texture: [
			["pipe", 3],
			["pipe", 3],
			["pipe", 3],
			["pipe", 3],
			["pipe", 3],
			["pipe", 3]
		]
	}, {
		name: "valve pipe",
		texture: [
			["pipe", 3],
			["pipe", 3],
			["pipe", 3],
			["pipe", 3],
			["pipe", 3],
			["pipe", 3]
		]
	}, {
		name: "valve pipe",
		texture: [
			["pipe", 3],
			["pipe", 3],
			["pipe", 3],
			["pipe", 3],
			["pipe", 3],
			["pipe", 3]
		]
	}, {
		name: "valve pipe",
		texture: [
			["pipe", 3],
			["pipe", 3],
			["pipe", 3],
			["pipe", 3],
			["pipe", 3],
			["pipe", 3]
		]
	}, {
		name: "valve pipe",
		texture: [
			["pipe", 3],
			["pipe", 3],
			["pipe", 3],
			["pipe", 3],
			["pipe", 3],
			["pipe", 3]
		]
	}], UID_OFFSET_WPD);
	Block.setShape(block_valve_pipe, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75);
	DefineUIDBlock(block_valve_pipe_opaque, [{
		name: "valve pipe opaque",
		texture: [
			["pipe", 5],
			["pipe", 5],
			["pipe", 5],
			["pipe", 5],
			["pipe", 5],
			["pipe", 5]
		]
	}], UID_OFFSET_WPD);
	Block.setShape(block_valve_pipe_opaque, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75);
	DefineUIDBlock(block_obsidian_pipe, [{
		name: "obsidian pipe",
		texture: [
			["pipe", 6],
			["pipe", 6],
			["pipe", 6],
			["pipe", 6],
			["pipe", 6],
			["pipe", 6]
		]
	}], UID_OFFSET_WPD);
	Block.setShape(block_obsidian_pipe, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75);
	DefineUIDBlock(block_teleport_pipe, [{
		name: "tesseract",
		texture: [
			["pipe_teleport", 0],
			["pipe_teleport", 0],
			["pipe_teleport", 0],
			["pipe_teleport", 0],
			["pipe_teleport", 0],
			["pipe_teleport", 0]
		]
	}], UID_OFFSET_WPD);
	Block.setShape(block_teleport_pipe, 0.125, 0.125, 0.125, 0.875, 0.875, 0.875);
	DefineUIDBlock(block_teleport_pipe_anim, [{
		name: "tesseract animation",
		texture: [
			["portal", 0],
			["portal", 0],
			["portal", 0],
			["portal", 0],
			["portal", 0],
			["portal", 0]
		]
	}], UID_OFFSET_WPD);
	Block.setShape(block_teleport_pipe_anim, 0.125, 0.125, 0.125, 0.875, 0.875, 0.875);
	var _0x81e9x56b = [];
	for (var i = 0; i < 7; i++) {
		_0x81e9x56b[i] = {
			name: "diamond pipe",
			texture: []
		};
		for (var _0x81e9x19 = 0; _0x81e9x19 < 6; _0x81e9x19++) {
			_0x81e9x56b[i].texture[_0x81e9x19] = ["pipe_diamond", i]
		}
	};
	DefineUIDBlock(block_diamond_pipe, _0x81e9x56b, UID_OFFSET_WPD);
	Block.setShape(block_diamond_pipe, 0.25, 0.25, 0.25, 0.75, 0.75, 0.75);
	UnlimitedAPI.SetCustomDropFunc(block_valve_pipe, function(_0x81e9x26, _0x81e9x27, _0x81e9x28, _0x81e9x10, _0x81e9x16) {
		return [
			[_0x81e9x10, 0]
		]
	});
	UnlimitedAPI.SetCustomDropFunc(block_teleport_pipe_anim, function(_0x81e9x26, _0x81e9x27, _0x81e9x28, _0x81e9x10, _0x81e9x16) {
		return [
			[block_teleport_pipe, 0]
		]
	})
}

function DefineAllPipes() {
	var _0x81e9x56d = ["pipe", 0];
	var _0x81e9x56e = ["pipe", 3];
	var _0x81e9x56f = ["pipe", 5];
	var _0x81e9x570 = ["pipe", 2];
	var _0x81e9x571 = [_0x81e9x56d];
	DefineWireCoreBlock(block_transporting_pipe, "transporting pipe", _0x81e9x571);
	var _0x81e9x571 = [_0x81e9x570];
	DefineWireCoreBlock(block_golden_pipe, "golden pipe", _0x81e9x571);
	_0x81e9x571 = [_0x81e9x56e];
	DefineWireCoreBlock(block_valve_pipe, "valve pipe", _0x81e9x571);
	DefineWireCoreBlock(block_valve_pipe_opaque, "valve pipe render block", ["pipe", 5]);
	DefineWireCoreBlock(block_obsidian_pipe, "obsidian pipe", ["pipe", 6]);
	DefineWireCoreBlock(block_teleport_pipe, "tesseract", [
		["pipe_teleport", 0],
		["pipe_teleport", 0],
		["pipe_teleport", 0],
		["pipe_teleport", 0],
		["pipe_teleport", 0],
		["pipe_teleport", 0],
		["portal", 0],
		["portal", 0],
		["portal", 0],
		["portal", 0],
		["portal", 0],
		["portal", 0]
	]);
	Block.setShape(block_teleport_pipe, 0.125, 0.125, 0.125, 0.875, 0.875, 0.875);
	var _0x81e9x572 = [];
	for (var i = 0; i < 7; i++) {
		for (var _0x81e9x19 = 0; _0x81e9x19 < 6; _0x81e9x19++) {
			_0x81e9x572.push(["pipe_diamond", i])
		}
	};
	for (var _0x81e9x19 = 0; _0x81e9x19 < 6; _0x81e9x19++) {
		_0x81e9x572.push(["portal", 0])
	};
	DefineWireCoreBlock(block_diamond_pipe, "diamond pipe", _0x81e9x572)
}

function DefineWireCoreBlock(_0x81e9x10, _0x81e9x17, _0x81e9x571) {
	Block.defineBlock(_0x81e9x10, _0x81e9x17, _0x81e9x571, 20, false, 0);
	Block.setDestroyTime(_0x81e9x10, 0.1);
	Block.setRenderLayer(_0x81e9x10, 4);
	Block.setLightOpacity(_0x81e9x10, 0);
	Block.setShape(_0x81e9x10, 4 / 16, 4 / 16, 4 / 16, 12 / 16, 12 / 16, 12 / 16);
	Block.setRedstoneConsumer(_0x81e9x10, true)
}

function defineMachine(_0x81e9x10, _0x81e9x17, _0x81e9x18, _0x81e9x24, _0x81e9x1c7, _0x81e9x173) {
	if (!_0x81e9x1c7) {
		_0x81e9x1c7 = 0
	};
	if (_0x81e9x173 + "" == "undefined") {
		_0x81e9x173 = _0x81e9x1c7
	};
	var _0x81e9x571 = [
		[_0x81e9x18[0], _0x81e9x1c7],
		[_0x81e9x18[0], _0x81e9x1c7],
		[_0x81e9x18[0], _0x81e9x1c7],
		[_0x81e9x18[0], _0x81e9x1c7],
		[_0x81e9x18[0], _0x81e9x1c7],
		[_0x81e9x18[0], _0x81e9x1c7]
	];
	if (!_0x81e9x24) {
		_0x81e9x571 = [
			[_0x81e9x18[0], _0x81e9x1c7],
			[_0x81e9x18[0], _0x81e9x1c7],
			[_0x81e9x18[0], _0x81e9x1c7],
			[_0x81e9x18[1], _0x81e9x173],
			[_0x81e9x18[0], _0x81e9x1c7],
			[_0x81e9x18[0], _0x81e9x1c7],
			[_0x81e9x18[0], _0x81e9x1c7],
			[_0x81e9x18[0], _0x81e9x1c7],
			[_0x81e9x18[1], _0x81e9x173],
			[_0x81e9x18[0], _0x81e9x1c7],
			[_0x81e9x18[0], _0x81e9x1c7],
			[_0x81e9x18[0], _0x81e9x1c7],
			[_0x81e9x18[0], _0x81e9x1c7],
			[_0x81e9x18[0], _0x81e9x1c7],
			[_0x81e9x18[0], _0x81e9x1c7],
			[_0x81e9x18[0], _0x81e9x1c7],
			[_0x81e9x18[0], _0x81e9x1c7],
			[_0x81e9x18[1], _0x81e9x173],
			[_0x81e9x18[0], _0x81e9x1c7],
			[_0x81e9x18[0], _0x81e9x1c7],
			[_0x81e9x18[0], _0x81e9x1c7],
			[_0x81e9x18[0], _0x81e9x1c7],
			[_0x81e9x18[1], _0x81e9x173],
			[_0x81e9x18[0], _0x81e9x1c7]
		]
	} else {
		_0x81e9x571[1] = [_0x81e9x18[1], _0x81e9x173]
	};
	if (_0x81e9x24 == 2) {
		_0x81e9x571[0] = [_0x81e9x18[1], _0x81e9x173]
	};
	Block.defineBlock(_0x81e9x10, _0x81e9x17, _0x81e9x571, 20, false, 0);
	Block.setRedstoneConsumer(_0x81e9x10, true);
	Block.setDestroyTime(_0x81e9x10, 1);
	Block.setRenderLayer(_0x81e9x10, 4);
	Block.setLightOpacity(_0x81e9x10, 1)
}
var block6SideMachine = [];

function define6SideMachine(_0x81e9x10, _0x81e9x17, _0x81e9x18, _0x81e9x577, _0x81e9x1c7, _0x81e9x173) {
	if (!_0x81e9x1c7) {
		_0x81e9x1c7 = 0
	};
	if (_0x81e9x173 + "" == "undefined") {
		_0x81e9x173 = _0x81e9x1c7
	};
	var _0x81e9x571 = [];
	for (var i = 0; i < 6; i++) {
		for (var _0x81e9x19 = 0; _0x81e9x19 < 6; _0x81e9x19++) {
			if (i == _0x81e9x19) {
				_0x81e9x571.push([_0x81e9x18[1], _0x81e9x173])
			} else {
				_0x81e9x571.push([_0x81e9x18[0], _0x81e9x1c7])
			}
		}
	};
	Block.defineBlock(_0x81e9x10, _0x81e9x17, _0x81e9x571, 20, false, 0);
	Block.setRedstoneConsumer(_0x81e9x10, true);
	Block.setDestroyTime(_0x81e9x10, 1);
	Block.setRenderLayer(_0x81e9x10, 4);
	Block.setLightOpacity(_0x81e9x10, 0);
	block6SideMachine[_0x81e9x10] = true
}

function defineWire(_0x81e9x10, _0x81e9x17, _0x81e9x18) {
	var _0x81e9x1c7 = 0;
	var _0x81e9x571 = [
		[_0x81e9x18[0], _0x81e9x1c7],
		[_0x81e9x18[0], _0x81e9x1c7],
		[_0x81e9x18[0], _0x81e9x1c7],
		[_0x81e9x18[0], _0x81e9x1c7],
		[_0x81e9x18[0], _0x81e9x1c7],
		[_0x81e9x18[0], _0x81e9x1c7]
	];
	Block.defineBlock(_0x81e9x10, _0x81e9x17, _0x81e9x571, 20, false, 0);
	Block.setDestroyTime(_0x81e9x10, 0.1);
	Block.setRenderLayer(_0x81e9x10, 4);
	Block.setLightOpacity(_0x81e9x10, 0);
	if (_0x81e9x10 == block_wire || _0x81e9x10 == block_transporting_pipe) {
		Block.setShape(block_wire, 4 / 16, 4 / 16, 4 / 16, 12 / 16, 12 / 16, 12 / 16)
	}
}

function defineAllWire() {
	var _0x81e9x18 = [];
	for (var i = 0; i < 5; i++) {
		for (var _0x81e9x19 = 0; _0x81e9x19 < 6; _0x81e9x19++) {
			_0x81e9x18.push(["wire", i])
		}
	};
	Block.defineBlock(block_wire, "wire", _0x81e9x18, 20, false, 0);
	Block.setDestroyTime(block_wire, 0.1);
	Block.setRenderLayer(block_wire, 4);
	Block.setLightOpacity(block_wire, 0);
	Block.setShape(block_wire, 4 / 16, 4 / 16, 4 / 16, 12 / 16, 12 / 16, 12 / 16)
}

function defineAllFzMachines() {
	DefineUIDMachine_Type1(block_recycler, "recycler", ["machineblock", 0], ["recycler", 0]);
	DefineUIDMachine_Type1(block_crop_harvester, "crop harvester", ["machineblock", 0], ["harvester", 0]);
	DefineUIDMachine_Type1(block_quarry, "quarry", ["machineblock", 0], ["quarry", 0]);
	DefineUIDMachine_Type3(block_macerator, "macerator", ["macerator", 0], ["macerator", 1]);
	DefineUIDMachine_Type2(block_beacon, "beacon", ["machineblock", 0], ["beacontop", 0], UID_OFFSET_LIGHT);
	DefineUIDMachine_Type3(block_drill_station, "drill station", ["pump", 0], ["bcmachine", 0]);
	DefineUIDMachine_Type3(block_barrel, "barrel", ["barrel", 0], ["barrel", 1]);
	DefineUIDMachine_Type2(block_solar_pannel, "solar pannel", ["machineblock", 0], ["solar", 0]);
	DefineUIDMachine_Type2(block_bat_box, "bat-box", ["machineside", 0], ["machinewire1x", 0]);
	DefineUIDMachine_Type1(block_fuel_generator, "fuel generator", ["machineblock", 0], ["genfuel", 0]);
	DefineUIDMachine_Type3(block_nuclear_reactor_controller, "nuclear reactor controller", ["reactor", 1], ["reactor", 0], UID_OFFSET_LIGHT);
	DefineUIDMachine_Type1(block_electric_furnace, "electric furnace", ["machineblock", 0], ["elfurnace", 0]);
	DefineUIDMachine_Type1(block_mass_fabricator, "mass fabricator", ["advmachine", 0], ["massfab", 0]);
	DefineUIDMachine_Type2(block_teleporter, "teleporter", ["advmachine", 0], ["teleporter", 0]);
	DefineUIDMachine_Type3(block_windmill, "windmill", ["millwind", 0], ["machineblock", 0]);
	DefineUIDMachine_Type3(block_watermill, "watermill", ["millwater", 0], ["machineblock", 0]);
	DefineUIDMachine_Type1(block_geotermal_generator, "geotermal generator", ["machineblock", 0], ["gengeotermal", 0]);
	DefineUIDMachine_Type3(block_pump, "pump", ["pump", 0], ["machineblock", 0]);
	DefineUIDMachine_Type3(block_auto_milker, "auto-milker", ["automilker", 0], ["machineblock", 0]);
	DefineUIDMachine_Type3(block_bucket_filler, "bucket filler", ["bucketfiller", 0], ["machineblock", 0]);
	DefineUIDMachine_Type3(block_growth_accelerator, "growth accelerator", ["harvester", 0], ["machineblock", 0]);
	DefineUIDMachine_Type3(block_mob_slayer, "mob slayer", ["mobslayer", 0], ["machineblock", 0]);
	DefineUIDMachine_Type3(block_auto_feeder, "auto feeder", ["mobfeeder", 0], ["machineblock", 0]);
	DefineUIDMachine_Type3(block_defender, "defender", ["wireblock", 0], ["wireblock", 0]);
	DefineUIDMachine_Type3(block_assembler, "assembler", ["assembler", 0], ["assembler", 0]);
	DefineUIDMachine_Type2(block_block_breaker, "block breaker", ["machineblock", 0], ["bcmachine", 0]);
	DefineUIDMachine_Type3(block_heater, "magma crucible", ["gengeotermal", 0], ["bcmachine", 0]);
	DefineUIDMachine_Type3(block_nuclear_bomb, "nuclear bomb", ["nuke", 0], ["tnt", 1]);
	DefineUIDMachine_Type2(block_MFE, "MFE", ["machineside", 1], ["machinewire1x", 1]);
	DefineUIDMachine_Type3(block_wild_hive, "wild hive", ["beehiveside", 0], ["beehivetop", 0]);
	DefineUIDMachine_Type3(block_bee_hive, "alveary", ["beehive", 0], ["planks", 0]);
	DefineUIDMachine_Type2(block_centrefuge, "centrefuge", ["machineblock", 0], ["centifuge", 0]);
	DefineUIDMachine_Type1(block_extractor, "extractor", ["machineblock", 0], ["extractor", 0]);
	DefineUIDMachine_Type3(block_terraformer, "terraformer", ["terraformer", 0], ["machineblock", 0]);
	DefineUIDMachine_Type3(block_bioreactor, "bioreactor", ["bioreactor", 0], ["log", 0]);
	DefineUIDMachine_Type3(block_fuel_factory, "fuel factory", ["fuel_factory", 0], ["fuel_factory", 1]);
	DefineUIDMachine_Type3(block_liquid_fuel_engine, "liquid fuel engine", ["genliquid", 0], ["machineblock", 0], UID_OFFSET_LIQUID_ENGINE);
	DefineUIDMachine_Type3(block_replicator, "replicator", ["replicator", 0], ["replicator", 1]);
	DefineUIDMachine_Type2(block_MFSU, "MFSU", ["machineside", 2], ["machinewire1x", 2]);
	DefineUIDMachine_Type1(block_compressor, "compressor", ["machineblock", 0], ["compressor", 0]);
	DefineUIDMachine_Type3(block_uranium_rod_controller, "uranium rod controller", ["reactor", 0], ["machineblock", 0]);
	DefineUIDMachine_Type1(block_exchange_buffer, "exchange buffer", ["advmachine", 0], ["transporter", 0]);
	DefineUIDMachine_Type1(block_nuclear_reactor_turbine, "nuclear reactor turbine", ["advmachine", 0], ["millwind", 1]);
	DefineUIDMachine_Type5(block_transformator_LV, "transformator LV", ["machinewire", 0], ["machinewire3x", 0]);
	DefineUIDMachine_Type5(block_transformator_MV, "transformator MV", ["machinewire", 1], ["machinewire3x", 1]);
	DefineUIDMachine_Type5(block_transformator_HV, "transformator HV", ["machinewire", 2], ["machinewire3x", 2]);
	DefineAllFzWire();
	DefineAllFzPipes()
}

function defineAllFzBlocks() {
	Block.defineBlock(block_oil, "flowing oil", ["grass", 0], 9, 0, 4);
	Block.defineBlock(block_oil2, "still oil", ["grass", 0], 9, 0, 4);
	Block.setShape_origin(block_oil, 0, 0, 0, 0, 0, 0);
	Block.setShape_origin(block_oil2, 0, 0, 0, 0, 0, 0);
	defineOre(block_uranium_ore, "uranium ore", "oreuranium");
	defineOre(block_iridium_ore, "iridium ore", "oreiridium");
	defineOre(block_blended_dust_ore, "blended dust ore", "oreblend");
	defineOre(block_copper_ore, "copper ore", "orecopper", true);
	defineOre(block_tin_ore, "tin ore", "oretin", true);
	UnlimitedAPI.SetCustomDropFunc(block_copper_ore, function(_0x81e9x26, _0x81e9x27, _0x81e9x28, _0x81e9x10, _0x81e9x1a, _0x81e9x27b) {
		if (_0x81e9x27b > 0) {
			return [
				[item_copper_ore]
			]
		};
		return []
	});
	UnlimitedAPI.SetCustomDropFunc(block_tin_ore, function(_0x81e9x26, _0x81e9x27, _0x81e9x28, _0x81e9x10, _0x81e9x1a, _0x81e9x27b) {
		if (_0x81e9x27b > 0) {
			return [
				[item_tin_ore]
			]
		};
		return []
	});
	DefineUIDBlock(block_rubber_tree_leaves, [{
		name: "rubber tree leaves",
		texture: [
			["leaves", 6],
			["leaves", 6],
			["leaves", 6],
			["leaves", 6],
			["leaves", 6],
			["leaves", 6]
		]
	}], UID_OFFSET_LEAVES);
	DefineUIDBlock(block_rubber_tree_wood, [{
		name: "rubber wood with latex",
		texture: [
			["Gibeah", 0],
			["Gibeah", 0],
			["Gibeah", 1],
			["Gibeah", 1],
			["Gibeah", 1],
			["Gibeah", 1]
		]
	}], UID_OFFSET_WOOD);
	DefineUIDBlock(block_rubber_wood_with_latex, [{
		name: "rubber wood with latex",
		texture: [
			["Gibeah", 0],
			["Gibeah", 0],
			["Gibeah", 2],
			["Gibeah", 2],
			["Gibeah", 2],
			["Gibeah", 2]
		]
	}], UID_OFFSET_WOOD);
	DefineUIDBlock(block_hardened_block, [{
		name: "hardened block",
		texture: [
			["hardened_block", 0],
			["hardened_block", 0],
			["hardened_block", 0],
			["hardened_block", 0],
			["hardened_block", 0],
			["hardened_block", 0]
		]
	}, {
		name: "hardened glass",
		texture: [
			["hardened_block", 1],
			["hardened_block", 1],
			["hardened_block", 1],
			["hardened_block", 1],
			["hardened_block", 1],
			["hardened_block", 1]
		]
	}], UID_OFFSET_HARDENED);
	DefineUIDBlock(block_rubber_tree_sappling, [{
		name: "rubber tree sapling",
		texture: [
			["rubtreesapling", 0],
			["rubtreesapling", 0],
			["rubtreesapling", 0],
			["rubtreesapling", 0],
			["rubtreesapling", 0],
			["rubtreesapling", 0]
		]
	}], UID_OFFSET_SAPLING);
	DefineUIDBlock(block_marker, [{
		name: "marker",
		texture: [
			["marker", 0],
			["marker", 0],
			["marker", 0],
			["marker", 0],
			["marker", 0],
			["marker", 0]
		]
	}], UID_OFFSET_LIGHT);
	Block.setShape(block_marker, 7 / 16, 0, 7 / 16, 9 / 16, 10 / 16, 9 / 16);
	DefineUIDBlock(block_fishing_net, [{
		name: "fishing net",
		texture: [
			["fishingnet", 0],
			["fishingnet", 0],
			["fishingnet", 0],
			["fishingnet", 0],
			["fishingnet", 0],
			["fishingnet", 0]
		]
	}]);
	Block.setShape(block_fishing_net, 0, 0, 0, 1, 0.0625, 1);
	DefineUIDBlock(block_marker_fence, [{
		name: "marker fence",
		texture: [
			["markerfence", 0],
			["markerfence", 0],
			["markerfence", 0],
			["markerfence", 0],
			["markerfence", 0],
			["markerfence", 0],
			["markerfence", 0]
		]
	}]);
	Block.setShape(block_marker_fence, 0.25, 0.0, 0.25, 0.75, 1.0, 0.75)
}

function defineOre(_0x81e9x10, _0x81e9x17, _0x81e9x18) {
	DefineUIDBlock(_0x81e9x10, [{
		name: _0x81e9x17,
		texture: [
			[_0x81e9x18, 0],
			[_0x81e9x18, 0],
			[_0x81e9x18, 0],
			[_0x81e9x18, 0],
			[_0x81e9x18, 0],
			[_0x81e9x18, 0]
		]
	}], UID_OFFSET_ORE);
	ItemsToAddInCreative[_0x81e9x10 + ":64"] = true
}

function oilTick() {
	if (getTime() % 4 == 0) {
		updateOil()
	}
}

function isOilBlock(_0x81e9x10) {
	return (_0x81e9x10 == block_oil || _0x81e9x10 == block_oil2)
}

function placeFlowingOil(_0x81e9x26, _0x81e9x27, _0x81e9x28, _0x81e9x16) {
	var _0x81e9x1a = Level.getData(_0x81e9x26, _0x81e9x27, _0x81e9x28);
	var _0x81e9x10 = getTile(_0x81e9x26, _0x81e9x27, _0x81e9x28);
	if (!(_0x81e9x10 == block_oil2 && _0x81e9x1a < _0x81e9x16) && canOilFlow(_0x81e9x10)) {
		setTile(_0x81e9x26, _0x81e9x27, _0x81e9x28, block_oil2, _0x81e9x16);
		return true
	}
}

function canOilFlow(_0x81e9x10) {
	return (_0x81e9x10 == 0 || _0x81e9x10 == 31 || _0x81e9x10 == 32 || _0x81e9x10 == block_oil2 || _0x81e9x10 == 51 || _0x81e9x10 == 30 || _0x81e9x10 == 175 || _0x81e9x10 == 37 || _0x81e9x10 == 38 || _0x81e9x10 == 39 || _0x81e9x10 == 40)
}
var oilBlocksUpdateCoords = [];
var oilAddedThisTick = 0;

function addOilUpdate(_0x81e9x26, _0x81e9x27, _0x81e9x28, _0x81e9x584) {
	key = _0x81e9x26 + "#" + _0x81e9x27 + "#" + _0x81e9x28;
	oilAddedThisTick++;
	oilBlocksUpdateCoords[key] = _0x81e9x584
}

function oilArrayCopy() {
	var _0x81e9x586 = [];
	for (var i in oilBlocksUpdateCoords) {
		var _0x81e9x16 = oilBlocksUpdateCoords[i];
		_0x81e9x586[i] = _0x81e9x16
	};
	return _0x81e9x586
}

function updateOilByKeyAndVal(_0x81e9x163, _0x81e9x184) {
	var _0x81e9x2a0 = _0x81e9x163.split("#");
	var _0x81e9x26 = parseInt(_0x81e9x2a0[0]);
	var _0x81e9x27 = parseInt(_0x81e9x2a0[1]);
	var _0x81e9x28 = parseInt(_0x81e9x2a0[2]);
	updateOilCoords(_0x81e9x26, _0x81e9x27, _0x81e9x28, _0x81e9x184)
}
var nextTickOilArrayUpdates = null;

function updateOil() {
	var _0x81e9x1c4 = oilArrayCopy();
	if (nextTickOilArrayUpdates) {
		_0x81e9x1c4 = nextTickOilArrayUpdates
	} else {
		oilAddedThisTick = 0;
		oilBlocksUpdateCoords = []
	};
	var _0x81e9x58a = 0;
	var _0x81e9x58b = 0;
	var _0x81e9x1a5 = [];
	var _0x81e9x58c = 0;
	var _0x81e9x58d = 32;
	for (var i in _0x81e9x1c4) {
		if (_0x81e9x58c < _0x81e9x58d) {
			updateOilByKeyAndVal(i, _0x81e9x1c4[i])
		} else {
			_0x81e9x1a5[i] = _0x81e9x1c4[i]
		};
		_0x81e9x58c++
	};
	if (_0x81e9x58c <= _0x81e9x58d) {
		nextTickOilArrayUpdates = null
	} else {
		nextTickOilArrayUpdates = _0x81e9x1a5
	}
}

function updateOilCoords(_0x81e9x26, _0x81e9x27, _0x81e9x28, _0x81e9x584) {
	var _0x81e9x58f = Level.getData(_0x81e9x26, _0x81e9x27, _0x81e9x28) % 8;
	if (_0x81e9x584) {
		var _0x81e9x590 = getTile(_0x81e9x26, _0x81e9x27, _0x81e9x28);
		var _0x81e9x591 = getTile(_0x81e9x26, _0x81e9x27 - 1, _0x81e9x28);
		if (canOilFlow(_0x81e9x591)) {
			placeFlowingOil(_0x81e9x26, _0x81e9x27 - 1, _0x81e9x28, 0);
			addOilUpdate(_0x81e9x26, _0x81e9x27 - 1, _0x81e9x28, true);
			if (_0x81e9x590 != block_oil) {
				return
			}
		};
		if (_0x81e9x591 == block_oil && _0x81e9x590 != block_oil) {
			return
		};
		if (_0x81e9x58f == 7) {
			return
		};
		var _0x81e9x2c0 = [
			[_0x81e9x26 - 1, _0x81e9x28],
			[_0x81e9x26, _0x81e9x28 - 1],
			[_0x81e9x26 + 1, _0x81e9x28],
			[_0x81e9x26, _0x81e9x28 + 1]
		];
		for (var _0x81e9x1c8 in _0x81e9x2c0) {
			var _0x81e9x51b = placeFlowingOil(_0x81e9x2c0[_0x81e9x1c8][0], _0x81e9x27, _0x81e9x2c0[_0x81e9x1c8][1], _0x81e9x58f + 1);
			if (_0x81e9x51b) {
				addOilUpdate(_0x81e9x2c0[_0x81e9x1c8][0], _0x81e9x27, _0x81e9x2c0[_0x81e9x1c8][1], true)
			}
		}
	} else {
		var _0x81e9x591 = getTile(_0x81e9x26, _0x81e9x27 - 1, _0x81e9x28);
		var _0x81e9x592 = Level.getData(_0x81e9x26, _0x81e9x27 - 1, _0x81e9x28);
		setTile(_0x81e9x26, _0x81e9x27, _0x81e9x28, 0);
		if (_0x81e9x591 == block_oil2 && _0x81e9x592 == 0) {
			addOilUpdate(_0x81e9x26, _0x81e9x27 - 1, _0x81e9x28, false)
		};
		if (_0x81e9x58f == 7) {
			return
		};
		var _0x81e9x2c0 = [
			[_0x81e9x26 - 1, _0x81e9x28],
			[_0x81e9x26, _0x81e9x28 - 1],
			[_0x81e9x26 + 1, _0x81e9x28],
			[_0x81e9x26, _0x81e9x28 + 1]
		];
		for (var _0x81e9x1c8 in _0x81e9x2c0) {
			var _0x81e9x193 = getTile(_0x81e9x2c0[_0x81e9x1c8][0], _0x81e9x27, _0x81e9x2c0[_0x81e9x1c8][1]);
			var _0x81e9x1a = Level.getData(_0x81e9x2c0[_0x81e9x1c8][0], _0x81e9x27, _0x81e9x2c0[_0x81e9x1c8][1]);
			if (_0x81e9x193 == block_oil2 && _0x81e9x1a == _0x81e9x58f + 1) {
				addOilUpdate(_0x81e9x2c0[_0x81e9x1c8][0], _0x81e9x27, _0x81e9x2c0[_0x81e9x1c8][1], false)
			} else {
				if (_0x81e9x193 == block_oil2 && _0x81e9x1a <= _0x81e9x58f + 1) {
					addOilUpdate(_0x81e9x2c0[_0x81e9x1c8][0], _0x81e9x27, _0x81e9x2c0[_0x81e9x1c8][1], isOilHasSource(_0x81e9x2c0[_0x81e9x1c8][0], _0x81e9x27, _0x81e9x2c0[_0x81e9x1c8][1]))
				} else {
					if (_0x81e9x193 == block_oil) {
						addOilUpdate(_0x81e9x2c0[_0x81e9x1c8][0], _0x81e9x27, _0x81e9x2c0[_0x81e9x1c8][1], true)
					}
				}
			}
		}
	}
}
var GUIName = "factorization";

function canBreakBlocks() {
	return oilAddedThisTick == 0
}

function updateOilBlock(_0x81e9x26, _0x81e9x27, _0x81e9x28) {
	if (isOilBlock(getTile(_0x81e9x26, _0x81e9x27, _0x81e9x28))) {
		addOilUpdate(_0x81e9x26, _0x81e9x27, _0x81e9x28, isOilHasSource(_0x81e9x26, _0x81e9x27, _0x81e9x28))
	}
}

function addGUIString() {}
addGUIString = clientMessage;

function updateNearbyOil(_0x81e9x26, _0x81e9x27, _0x81e9x28) {
	updateOilBlock(_0x81e9x26, _0x81e9x27, _0x81e9x28 + 1);
	updateOilBlock(_0x81e9x26, _0x81e9x27, _0x81e9x28 - 1);
	updateOilBlock(_0x81e9x26 + 1, _0x81e9x27, _0x81e9x28);
	updateOilBlock(_0x81e9x26 - 1, _0x81e9x27, _0x81e9x28);
	updateOilBlock(_0x81e9x26, _0x81e9x27 + 1, _0x81e9x28);
	updateOilBlock(_0x81e9x26, _0x81e9x27 - 1, _0x81e9x28)
}

function isOilHasSource(_0x81e9x26, _0x81e9x27, _0x81e9x28, _0x81e9x279, _0x81e9x599) {
	if (!_0x81e9x279) {
		_0x81e9x279 = []
	};
	if (!_0x81e9x599) {
		_0x81e9x599 = 8
	};
	var _0x81e9x163 = _0x81e9x26 + "#" + _0x81e9x27 + "#" + _0x81e9x28;
	if (_0x81e9x279[_0x81e9x163]) {
		return false
	};
	_0x81e9x279[_0x81e9x163] = true;
	var _0x81e9x59a = getTile(_0x81e9x26, _0x81e9x27, _0x81e9x28);
	var _0x81e9x59b = Level.getData(_0x81e9x26, _0x81e9x27, _0x81e9x28);
	if (!isOilBlock(_0x81e9x59a)) {
		return false
	};
	if (_0x81e9x59a == block_oil) {
		return true
	};
	if (_0x81e9x59b >= _0x81e9x599) {
		return false
	};
	if (_0x81e9x59b == 0) {
		return isOilHasSource(_0x81e9x26, _0x81e9x27 + 1, _0x81e9x28, _0x81e9x279)
	};
	var _0x81e9x2c0 = [
		[_0x81e9x26 - 1, _0x81e9x28],
		[_0x81e9x26, _0x81e9x28 - 1],
		[_0x81e9x26 + 1, _0x81e9x28],
		[_0x81e9x26, _0x81e9x28 + 1]
	];
	for (var _0x81e9x1c8 in _0x81e9x2c0) {
		if (isOilHasSource(_0x81e9x2c0[_0x81e9x1c8][0], _0x81e9x27, _0x81e9x2c0[_0x81e9x1c8][1], _0x81e9x279, _0x81e9x59b)) {
			return true
		}
	}
}

function defineOilBlocks() {
	Block.setShape(block_oil, 0, 0, 0, 0, 0, 0);
	Block.setShape(block_oil2, 0, 0, 0, 0, 0, 0);
	Block.setLightOpacity(block_oil, 0);
	Block.setLightOpacity(block_oil2, 0);
	Block.setExplosionResistance(block_oil, 6000);
	Block.setExplosionResistance(block_oil2, 6000)
}

function DryConstone(_0x81e9x26, _0x81e9x27, _0x81e9x28) {
	for (var _0x81e9x38a = -2; _0x81e9x38a < 3; _0x81e9x38a++) {
		for (var _0x81e9x384 = -2; _0x81e9x384 < 3; _0x81e9x384++) {
			for (var _0x81e9x38b = -2; _0x81e9x38b < 3; _0x81e9x38b++) {
				var _0x81e9x15b = Math.sqrt(_0x81e9x38a * _0x81e9x38a + _0x81e9x384 * _0x81e9x384 + _0x81e9x38b * _0x81e9x38b);
				if (_0x81e9x15b <= 2 && getTile(_0x81e9x38a + _0x81e9x26, _0x81e9x384 + _0x81e9x27, _0x81e9x38b + _0x81e9x28) == block_liquid_constone) {
					setTile(_0x81e9x38a + _0x81e9x26, _0x81e9x384 + _0x81e9x27, _0x81e9x38b + _0x81e9x28, block_constone)
				}
			}
		}
	}
}

function BuildConstone(_0x81e9x26, _0x81e9x27, _0x81e9x28, _0x81e9x1a5, _0x81e9x59f) {
	var _0x81e9x591 = getTile(_0x81e9x26, _0x81e9x27 - 1, _0x81e9x28);
	var _0x81e9x10 = getTile(_0x81e9x26, _0x81e9x27, _0x81e9x28);
	if (_0x81e9x1a5 < 1) {
		return _0x81e9x1a5
	};
	if (isBlockSolid(_0x81e9x10)) {
		return _0x81e9x1a5
	};
	if (_0x81e9x59f && _0x81e9x591 != block_liquid_constone && _0x81e9x591 != 4 && _0x81e9x591 != block_constone) {
		return _0x81e9x1a5
	};
	if (!isBlockSolid(_0x81e9x591)) {
		_0x81e9x1a5 = BuildConstone(_0x81e9x26, _0x81e9x27 - 1, _0x81e9x28, _0x81e9x1a5);
		return _0x81e9x1a5
	};
	setTile(_0x81e9x26, _0x81e9x27, _0x81e9x28, block_liquid_constone);
	_0x81e9x1a5--;
	var _0x81e9x5a0 = false;
	if (_0x81e9x591 == block_liquid_constone || _0x81e9x591 == 4 || _0x81e9x591 == block_constone) {
		_0x81e9x5a0 = true
	};
	_0x81e9x1a5 = BuildConstone(_0x81e9x26 - 1, _0x81e9x27, _0x81e9x28, _0x81e9x1a5, _0x81e9x5a0);
	_0x81e9x1a5 = BuildConstone(_0x81e9x26 + 1, _0x81e9x27, _0x81e9x28, _0x81e9x1a5, _0x81e9x5a0);
	_0x81e9x1a5 = BuildConstone(_0x81e9x26, _0x81e9x27, _0x81e9x28 - 1, _0x81e9x1a5, _0x81e9x5a0);
	_0x81e9x1a5 = BuildConstone(_0x81e9x26, _0x81e9x27, _0x81e9x28 + 1, _0x81e9x1a5, _0x81e9x5a0);
	return _0x81e9x1a5
}

function ConstoneDestroyBlock(_0x81e9x26, _0x81e9x27, _0x81e9x28) {
	var _0x81e9x1b = getTile(_0x81e9x26, _0x81e9x27, _0x81e9x28);
	if (_0x81e9x1b == block_liquid_constone || _0x81e9x1b == block_constone) {
		preventDefault();
		Level.destroyBlock(_0x81e9x26, _0x81e9x27, _0x81e9x28)
	}
}
var MoreTexturedItemsDefined = false;

function defineAllFzItems() {
	try {
		ModPE.setItem(item_guide_book, "guide_book", 0, "guide book", 1);
		ModPE.setItem(item_wrench, "wrench", 0, "wrench", 1);
		ModPE.setItem(item_dust_iron, "dustiron", 0, "dust iron");;;
		ModPE.setItem(item_dust_gold, "dustgold", 0, "dust gold");
		ModPE.setItem(item_overclocker_upgrade, "overclocker", 0, "overclocker upgrade", 4);
		ModPE.setItem(item_advanced_machine_module, "advmodule", 0, "advanced machine module");
		ModPE.setItem(item_uu_matter, "uumatter", 0, "uu-matter");
		ModPE.setItem(item_teleport_accesser, "teleportstaff", 0, "teleport accesser", 1);
		ModPE.setItem(item_battery, "battery", 0, "battery", 1);
		ModPE.setItem(item_nano_saber, "nanosaber", 0, "nano saber", 1);
		ModPE.setItem(item_circuit, "circuit", 0, "circuit");
		ModPE.setItem(item_advanced_circuit, "circuitadv", 0, "advanced circuit");
		ModPE.setItem(item_steel_ingot, "ingotsteel", 0, "steel ingot");
		ModPE.setItem(item_iridium_composite, "iridiumplate", 0, "iridium composite");
		ModPE.setItem(item_liquid_matter_bucket, "bucketmatter", 0, "liquid matter bucket", 1);
		ModPE.setItem(item_biomass_bucket, "bucketbio", 0, "biomass bucket", 1);
		ModPE.setItem(item_fuel_bucket, "bucketfuel", 0, "fuel bucket", 1);
		ModPE.setItem(item_oil_bucket, "bucketoil", 0, "oil bucket", 1);
		ModPE.setItem(item_carbonium_plate, "carbonplate", 0, "carbonium plate");
		ModPE.setItem(item_composite_plate, "compositeplate", 0, "composite plate");
		ModPE.setItem(item_raw_carbon, "rawcarbon", 0, "raw carbon");
		ModPE.setItem(item_composite_ingot, "ingotcomposite", 0, "composite ingot");
		ModPE.setItem(item_coal_dust, "dustcoal", 0, "coal dust");
		ModPE.setItem(item_energy_crystal, "energycrystal", 0, "energy crystal", 1);
		ModPE.setItem(item_coal_ball, "coalmass", 0, "coal ball");
		ModPE.setItem(item_coal_ball_compressed, "coalball", 0, "compressed coal ball");
		ModPE.setItem(item_coal_chunk, "coalchunk", 0, "coal chunk");
		Item.setMaxDamage(504, 1024);
		Item.setMaxDamage(505, 4096);
		Item.setMaxDamage(item_battery, 1002);
		Item.setMaxDamage(item_nano_saber, 2000);
		Item.setMaxDamage(item_energy_crystal, 10000);
		ModPE.setItem(item_iridium, "ingotiridium", 0, "iridium");
		ModPE.setItem(item_mining_laser, "laser", 0, "mining laser", 1);
		Item.setMaxDamage(item_mining_laser, 1000);
		ModPE.setItem(item_uranium, "uranium", 0, "uranium");
		ModPE.setItem(item_iridium_chunk, "iridium", 0, "iridium chunk");
		ModPE.setItem(item_copper_ore, "copper_ore", 0, "copper ore");
		ModPE.setItem(item_tin_ore, "tin_ore", 0, "tin ore");
		ModPE.setItem(item_copper_ingot, "ingotcopper", 0, "copper ingot");
		ModPE.setItem(item_tin_ingot, "ingottin", 0, "tin ingot");
		ModPE.setItem(item_dust_copper, "dustcopper", 0, "dust copper");
		ModPE.setItem(item_dust_tin, "dusttin", 0, "dust tin");
		ModPE.setItem(item_latex, "latex", 0, "latex");
		ModPE.setItem(item_rubber_tree_sapling, "rubtreesapling", 0, "rubber tree sapling");
		ModPE.setItem(item_rubber, "rubber", 0, "rubber");
		ModPE.setItem(item_scrab, "scrab", 0, "scrab", 64);
		ModPE.setItem(item_scrab_box, "scrabbox", 0, "scrab box", 64);
		ModPE.setItem(item_leash, "lead", 0, "leash", 1);
		Item.setMaxDamage(item_leash, 4000);
		ModPE.setItem(item_treetap, "treetap", 0, "treetap", 1);
		Item.setMaxDamage(item_treetap, 17);
		ModPE.setFoodItem(item_honey_bottle, "bottlehoney", 0, 5, "bottle with honey", 1);
		ModPE.setFoodItem(item_mead_bottle, "bottlemead", 0, 8, "bottle with mead", 1);
		ModPE.setItem(item_cell_empty, "cell", 0, "cell - empty", 16);
		ModPE.setItem(item_cell_milk, "cell", 3, "cell - milk", 16);
		ModPE.setItem(item_cell_honey, "cell", 7, "cell - honey", 16);
		ModPE.setItem(item_cell_mead, "cell", 8, "cell - mead", 16);
		ModPE.setItem(item_cell_oil, "cell", 6, "cell - oil", 16);
		ModPE.setItem(item_cell_fuel, "cell", 5, "cell - fuel", 16);
		ModPE.setItem(item_cell_biomass, "cell", 4, "cell - biomass", 16);
		ModPE.setItem(item_cell_liquid_matter, "cell", 9, "cell - liquid matter", 16);
		ModPE.setItem(item_cell_water, "cell", 2, "cell - water", 16);
		ModPE.setItem(item_cell_lava, "cell", 1, "cell - lava", 16);
		ModPE.setItem(item_uranium_rod_singler, "reactor_uranium", 0, "uranium rod - singler", 1);
		ModPE.setItem(item_uranium_rod_double, "reactor_uranium", 1, "uranium rod - double", 1);
		ModPE.setItem(item_uranium_rod_quad, "reactor_uranium", 2, "uranium rod - quad", 1);
		ModPE.setItem(item_uranium_rod_singler_depleted, "reactor_uranium_depleted", 0, "depleted uranium rod - singler", 1);
		ModPE.setItem(item_uranium_rod_double_depleted, "reactor_uranium_depleted", 1, "depleted uranium rod - double", 1);
		ModPE.setItem(item_uranium_rod_quad_depleted, "reactor_uranium_depleted", 2, "depleted uranium rod - quad", 1);
		ModPE.setItem(item_reactor_reflector, "reactor_reflector", 0, "reactor reflector", 1);
		ModPE.setItem(item_advanced_reactor_reflector, "reactor_reflector", 1, "advanced reactor reflector", 1);
		ModPE.setItem(item_coolant_circuit, "circuit_cooling", 0, "coolant circuit", 1);
		ModPE.setItem(item_heating_circuit, "circuit_heating", 0, "heating circuit", 1);
		ModPE.setItem(item_heating_circuit_redstone, "circuit_heating", 1, "redstone heating circuit", 1);
		ModPE.setItem(item_heating_circuit_golden, "circuit_heating", 2, "golden heating circuit", 1);
		ModPE.setItem(item_cooling_vent, "cooling_vent", 0, "reactor vent", 1);
		ModPE.setItem(item_cooling_vent_redstone, "cooling_vent", 1, "redstone reactor vent", 1);
		ModPE.setItem(item_cooling_vent_lapis, "cooling_vent", 2, "lapis reactor vent", 1);
		ModPE.setItem(item_coolant_cell_singler, "reactor_coolant", 0, "coolant cell - singler", 1);
		ModPE.setItem(item_coolant_cell_triple, "reactor_coolant", 1, "coolant cell - triple", 1);
		ModPE.setItem(item_coolant_cell_six, "reactor_coolant", 2, "coolant cell - six", 1);
		ModPE.setItem(item_reactor_plating, "reactor_plating", 0, "reactor plating", 1);
		Item.setMaxDamage(item_uranium_rod_singler, 25000);
		Item.setMaxDamage(item_uranium_rod_double, 25000);
		Item.setMaxDamage(item_uranium_rod_quad, 25000);
		Item.setMaxDamage(item_uranium_rod_singler_depleted, 25000);
		Item.setMaxDamage(item_uranium_rod_double_depleted, 25000);
		Item.setMaxDamage(item_uranium_rod_quad_depleted, 25000);
		Item.setMaxDamage(item_coolant_cell_singler, 5000);
		Item.setMaxDamage(item_coolant_cell_triple, 15000);
		Item.setMaxDamage(item_coolant_cell_six, 30000);
		ModPE.setItem(block_machine_block, "machine_casing", 0, "machine casing");
		ModPE.setItem(block_advanced_machine_block, "machine_casing_adv", 0, "advanced machine casing");
		ModPE.setItem(item_bee_spawn_egg, "bee_spawn_egg", 0, "spawn egg - bee");
		DefineAllFzBees();
		DefineFzArmor();
		ModPE.setItem(item_bronze_ingot, "bronze_ingot", 0, "bronze ingot", 64);
		ModPE.setItem(item_bronze_dust, "dustbronze", 0, "bronze dust", 64);
		ModPE.setItem(item_bronze_axe, "bronze_axe", 0, "bronze axe", 1);
		ModPE.setItem(item_bronze_pickaxe, "bronze_pickaxe", 0, "bronze pickaxe", 1);
		ModPE.setItem(item_bronze_shovel, "bronze_shovel", 0, "bronze shovel", 1);
		ModPE.setItem(item_bronze_sword, "bronze_sword", 0, "bronze sword", 1);
		ModPE.setItem(item_bronze_hoe, "bronze_hoe", 0, "bronze hoe", 1);
		ModPE.setItem(item_bronze_axe_broken, "bronze_axe", 1, "broken bronze axe", 1);
		ModPE.setItem(item_bronze_pickaxe_broken, "bronze_pickaxe", 1, "broken bronze pickaxe", 1);
		ModPE.setItem(item_bronze_shovel_broken, "bronze_shovel", 1, "broken bronze shovel", 1);
		ModPE.setItem(item_bronze_sword_broken, "bronze_sword", 1, "broken bronze sword", 1);
		ModPE.setItem(item_bronze_hoe_broken, "bronze_hoe", 1, "broken bronze hoe", 1);
		Item.defineArmor(item_bronze_boots, "bronze_boots", 0, "bronze boots", "armor/bronze.png", 3, 176, ArmorType.boots);
		Item.defineArmor(item_bronze_leggings, "bronze_leggings", 0, "bronze leggings", "armor/bronze_2.png", 4, 203, ArmorType.leggings);
		Item.defineArmor(item_bronze_chestplate, "bronze_chestplate", 0, "bronze chestplate", "armor/bronze.png", 6, 216, ArmorType.chestplate);
		Item.defineArmor(item_bronze_helmet, "bronze_helmet", 0, "bronze helmet", "armor/bronze.png", 3, 149, ArmorType.helmet);
		ModPE.setItem(item_electric_hoe, "electric_hoe", 0, "electric hoe", 1);
		Item.setMaxDamage(item_electric_hoe, 200);
		ModPE.setItem(item_electric_treetap, "electric_treetap", 0, "electric treetap", 1);
		Item.setMaxDamage(item_electric_treetap, 100);
		ModPE.setItem(item_drill_usual, "drill", 0, "drill", 1);
		ModPE.setItem(item_drill, "drill", 1, "diamond drill", 1);
		ModPE.setItem(item_chainsaw, "chainsaw", 0, "chainsaw", 1);
		Item.setHandEquipped(item_electric_treetap, true);
		Item.setHandEquipped(item_electric_hoe, true);
		Item.setHandEquipped(item_nano_saber, true);
		ModPE.setItem(item_copper_wire, "wireitem", 0, "copper wire");
		ModPE.setItem(item_crystal_wire, "wireitem", 1, "crystal wire");
		ModPE.setItem(item_golden_wire, "wireitem", 2, "golden wire");
		ModPE.setItem(item_steel_wire, "wireitem", 3, "steel wire");
		ModPE.setItem(item_super_conductor, "wireitem", 4, "super conductor");
		ModPE.setItem(item_ec_meter, "vmeter", 0, "ec-meter", 1);
		MoreTexturedItemsDefined = true
	} catch (e) {
		print("Error. Items will be re-defined: " + e)
	}
}
var qArmorData = [0, 0, 0, 0];
var qArmorHealthMode = 0;
var qArmorLastHealth = -1;
var qArmorRTime = 0;
var quantiumMaxDamage = 10000;
var nanoMaxDamage = 800;
var QuantumArmorData = {
	state: {
		1: 1,
		2: 0
	},
	0: [3, 5],
	1: [6, 9],
	2: [4, 6],
	3: [2, 5]
};
var NanoArmorData = {
	state: {
		6: 1,
		7: 0
	},
	0: [2, 4],
	1: [4, 8],
	2: [3, 5],
	3: [2, 5]
};
var ArmorChangeFlag;

function resetArmorChangeFlag() {
	ArmorChangeFlag = {
		quantum: {},
		nano: {}
	}
}
resetArmorChangeFlag();
var BatpackDataCache;
var PowerBackpackMaxDamage = ValidateIDData({
	item_batpack: 6000,
	item_latpack: 30000
});
var ArmorIDData = {
	0: {
		0: [item_quantum_helmet, item_quantum_helmet_uncharged],
		1: [item_quantum_suit, item_quantum_suit_uncharged],
		2: [item_quantum_leggings, item_quantum_leggings_uncharged],
		3: [item_quantum_boots, item_quantum_boots_uncharged]
	},
	1: {
		0: [item_nano_helmet, item_nano_helmet_uncharged],
		1: [item_nano_suit, item_nano_suit_uncharged],
		2: [item_nano_leggings, item_nano_leggings_uncharged],
		3: [item_nano_boots, item_nano_boots_uncharged]
	}
};

function getIDByArmorState(_0x81e9x5b2, _0x81e9x5b3) {
	var _0x81e9x5b;
	var _0x81e9x158;
	for (var _0x81e9x5b4 in ArmorIDData) {
		for (var _0x81e9x5b5 in ArmorIDData[_0x81e9x5b4]) {
			for (var _0x81e9x484 in ArmorIDData[_0x81e9x5b4][_0x81e9x5b5]) {
				if (ArmorIDData[_0x81e9x5b4][_0x81e9x5b5][_0x81e9x484] == _0x81e9x5b2) {
					_0x81e9x5b = _0x81e9x5b5;
					_0x81e9x158 = _0x81e9x5b4
				}
			}
		}
	};
	var _0x81e9x484 = 1;
	if (_0x81e9x5b3) {
		_0x81e9x484 = 0
	};
	return ArmorIDData[_0x81e9x158][_0x81e9x5b][_0x81e9x484]
}

function DefineJetpackArmor(_0x81e9x5b7) {
	var _0x81e9x1e8 = "armor/jetpack.png";
	Item.defineArmor(item_jetpack, "jetpack", 0, "jetpack", _0x81e9x1e8, 1, 2000, ArmorType.chestplate)
}

function updateQuantiumArmor() {
	if (Entity.getHealth(getPlayerEnt()) < 1) {
		return
	};
	var _0x81e9x1bd = getTime();
	var _0x81e9x5b9 = Entity.getHealth(getPlayerEnt());
	var _0x81e9x5ba = Entity.getVelY(getPlayerEnt()) < -0.2;
	var _0x81e9x5bb = getPlayerEnt();
	if (_0x81e9x1bd % 5 == 0) {
		var _0x81e9x5bc = false;
		for (var i in qArmorData) {
			var _0x81e9x5bd = qArmorGetSlotState(i);
			qArmorData[i] = _0x81e9x5bd;
			var _0x81e9x5be = Player.getArmorSlot(i);
			if (_0x81e9x5bd == 1 || _0x81e9x5bd == 2) {
				if (_0x81e9x5bd == 2) {
					Player.setArmorSlot(i, _0x81e9x5be, quantiumMaxDamage - 3)
				};
				var _0x81e9x5bf = parseInt(getIDByArmorState(_0x81e9x5be, _0x81e9x5bd == 1));
				Player.setArmorSlot(i, _0x81e9x5bf, Player.getArmorSlotDamage(i))
			};
			if (_0x81e9x5bd == 6 || _0x81e9x5bd == 7) {
				if (_0x81e9x5bd == 7) {
					Player.setArmorSlot(i, _0x81e9x5be, nanoMaxDamage - 3)
				};
				var _0x81e9x5bf = parseInt(getIDByArmorState(_0x81e9x5be, _0x81e9x5bd == 6));
				Player.setArmorSlot(i, _0x81e9x5bf, Player.getArmorSlotDamage(i))
			}
		};
		if (qArmorData[2] == 1 || qArmorData[3] == 1) {
			createQArmorButtons()
		} else {
			removeGUI_qArmor()
		};
		if (qArmorData[1] == 1) {
			Entity.addEffect(_0x81e9x5bb, 12, 10, 2)
		}
	};
	if (qArmorData[1] == 1 || qArmorData[1] == 3) {
		createJetpackGUI();
		var _0x81e9x5c0 = Entity.getVelY(getPlayerEnt());
		if (jetpackButtonPressed) {
			if (_0x81e9x1bd % 10 == 0) {
				if (Player.getArmorSlot(1) > 0) {
					Player.setArmorSlot(1, Player.getArmorSlot(1), Player.getArmorSlotDamage(1) + 1)
				}
			};
			setVelY(getPlayerEnt(), Math.min(_0x81e9x5c0 + 0.15, 0.6))
		};
		if (_0x81e9x5c0 < -0.08 && _0x81e9x5c0 > -1.2) {
			Entity.addEffect(_0x81e9x5bb, 8, 2, 255)
		}
	} else {
		dismissJetpackGUI();
		jetpackButtonPressed = false
	};
	if (qArmorRTime > 0 && qArmorData[2] == 1) {
		qArmorRTime--;
		if (getTime() % 2 == 0) {
			var _0x81e9x3d4 = Entity.getVelX(getPlayerEnt());
			var _0x81e9x3d6 = Entity.getVelZ(getPlayerEnt());
			var _0x81e9x15b = Math.sqrt(_0x81e9x3d4 * _0x81e9x3d4 + _0x81e9x3d6 * _0x81e9x3d6);
			_0x81e9x3d4 /= _0x81e9x15b;
			_0x81e9x3d6 /= _0x81e9x15b;
			if (_0x81e9x15b > 0.1) {
				setVelX(getPlayerEnt(), _0x81e9x3d4);
				setVelZ(getPlayerEnt(), _0x81e9x3d6)
			}
		}
	};
	if (qArmorData[1] == 5) {
		var _0x81e9x5c1 = Player.getArmorSlotDamage(1);
		var _0x81e9x5c2 = Player.getArmorSlot(1);
		var _0x81e9x5c3 = PowerBackpackMaxDamage[_0x81e9x5c2] - 5;
		if (!BatpackDataCache) {
			BatpackDataCache = {};
			for (var i in ChargableItems) {
				for (var _0x81e9x19 in ChargableItems[i]) {
					BatpackDataCache[_0x81e9x19] = ChargableItems[i][_0x81e9x19]
				}
			}
		};
		var _0x81e9x251 = getCarriedItem();
		var _0x81e9x5c4 = Player.getCarriedItemData();
		var _0x81e9x5c5 = BatpackDataCache[_0x81e9x251];
		if (_0x81e9x5c5 && _0x81e9x5c4 > 1 && _0x81e9x5c1 < _0x81e9x5c3) {
			var _0x81e9x5c6 = _0x81e9x5c5;
			if (_0x81e9x5c6 % 10 != 0) {
				_0x81e9x5c6 *= 2
			};
			if (_0x81e9x5c6 % 10 != 0) {
				_0x81e9x5c6 *= 5
			};
			_0x81e9x5c4 = Math.max(1, _0x81e9x5c4 - _0x81e9x5c6 / _0x81e9x5c5);
			_0x81e9x5c1 += _0x81e9x5c6 / 10;
			setPlayerItem(_0x81e9x251, Player.getCarriedItemCount(), _0x81e9x5c4)
		};
		_0x81e9x5c1 = Math.min(_0x81e9x5c3, _0x81e9x5c1);
		Player.setArmorSlot(1, Player.getArmorSlot(1), _0x81e9x5c1)
	};
	if (_0x81e9x5ba) {
		if (qArmorData[3] == 1) {
			Entity.addEffect(_0x81e9x5bb, 8, 2, 255)
		};
		if (qArmorData[3] == 6) {
			Entity.addEffect(_0x81e9x5bb, 8, 2, 8)
		}
	}
}

function qArmorGetSlotState(i) {
	var _0x81e9x10 = Player.getArmorSlot(i);
	var _0x81e9x16 = Player.getArmorSlotDamage(i);
	if (_0x81e9x10 == item_nano_boots || _0x81e9x10 == item_nano_leggings || _0x81e9x10 == item_nano_suit || _0x81e9x10 == item_nano_helmet || _0x81e9x10 == item_nano_boots_uncharged || _0x81e9x10 == item_nano_leggings_uncharged || _0x81e9x10 == item_nano_suit_uncharged || _0x81e9x10 == item_nano_helmet_uncharged) {
		if (_0x81e9x16 > nanoMaxDamage - 5) {
			return 7
		} else {
			return 6
		}
	};
	if (_0x81e9x10 == item_jetpack && _0x81e9x16 < 1999) {
		return 3
	};
	if (_0x81e9x10 == item_jetpack) {
		return 4
	};
	if (PowerBackpackMaxDamage[_0x81e9x10]) {
		return 5
	};
	if (_0x81e9x10 == item_quantum_helmet || _0x81e9x10 == item_quantum_boots || _0x81e9x10 == item_quantum_leggings || _0x81e9x10 == item_quantum_suit || _0x81e9x10 == item_quantum_helmet_uncharged || _0x81e9x10 == item_quantum_boots_uncharged || _0x81e9x10 == item_quantum_leggings_uncharged || _0x81e9x10 == item_quantum_suit_uncharged) {
		if (_0x81e9x16 >= quantiumMaxDamage - 5) {
			return 2
		} else {
			return 1
		}
	};
	return 0
}

function qArmorUpdateSkin(_0x81e9x16) {
	var _0x81e9x165 = "mob/char.png";
	if (_0x81e9x16 == 3 || _0x81e9x16 == 4) {
		_0x81e9x165 = "mob/jetpack.png"
	};
	if (_0x81e9x16 == 5) {
		_0x81e9x165 = "mob/batpack.png"
	};
	var _0x81e9x5c9 = 0;
	for (var i in qArmorData) {
		if (qArmorData[i] == 6 || qArmorData[i] == 7) {
			_0x81e9x5c9 += Math.pow(2, 3 - i)
		}
	};
	if (_0x81e9x5c9 > 0) {
		_0x81e9x165 = "mob/nano/nano_" + _0x81e9x5c9 + ".png"
	};
	Entity.setMobSkin(getPlayerEnt(), _0x81e9x165)
}

function resetQuantiumArmor() {
	qArmorData = [0, 0, 0, 0];
	qArmorHealthMode = 0;
	qArmorLathHealth = -1;
	qArmorRTime = 0
}

function qArmorJump() {
	if (qArmorData[3] != 1) {
		return
	};
	var _0x81e9x5c0 = Entity.getVelY(getPlayerEnt());
	if (_0x81e9x5c0 > -0.1 && _0x81e9x5c0 < -0.04) {
		setVelY(getPlayerEnt(), 1.3)
	}
}

function qArmorRun() {
	qArmorRTime = 30
}
var ArmorDefineState = {};
var DisableArmorItemsDefine = false;
var DefineArmorReplacingItems = false;

function DefineNanoArmorUnit(_0x81e9x5b, _0x81e9x484) {
	if (DisableArmorItemsDefine) {
		return
	};
	ArmorDefineState[_0x81e9x5b + ":" + _0x81e9x484] = true;
	var _0x81e9x5b3 = parseInt(NanoArmorData.state[_0x81e9x484]);
	var _0x81e9x156 = NanoArmorData[_0x81e9x5b][_0x81e9x5b3];
	if (_0x81e9x5b3 == 1) {
		if (_0x81e9x5b == 3) {
			Item.defineArmor(item_nano_boots, "nanosuit", 3, "nano boots", "armor/nano_1.png", _0x81e9x156, nanoMaxDamage, ArmorType.boots)
		} else {
			if (_0x81e9x5b == 2) {
				Item.defineArmor(item_nano_leggings, "nanosuit", 2, "nano leggings", "armor/nano_2.png", _0x81e9x156, nanoMaxDamage, ArmorType.leggings)
			} else {
				if (_0x81e9x5b == 1) {
					Item.defineArmor(item_nano_suit, "nanosuit", 1, "nano suit", "armor/nano_1.png", _0x81e9x156, nanoMaxDamage, ArmorType.chestplate)
				} else {
					if (_0x81e9x5b == 0) {
						Item.defineArmor(item_nano_helmet, "nanosuit", 0, "nano helmet", "armor/nano_1.png", _0x81e9x156, nanoMaxDamage, ArmorType.helmet)
					}
				}
			}
		}
	} else {
		if (_0x81e9x5b == 3) {
			Item.defineArmor(item_nano_boots_uncharged, "nanosuit", 3, "nano boots (uncharged)", "armor/nano_1.png", _0x81e9x156, nanoMaxDamage, ArmorType.boots)
		} else {
			if (_0x81e9x5b == 2) {
				Item.defineArmor(item_nano_leggings_uncharged, "nanosuit", 2, "nano leggings (uncharged)", "armor/nano_2.png", _0x81e9x156, nanoMaxDamage, ArmorType.leggings)
			} else {
				if (_0x81e9x5b == 1) {
					Item.defineArmor(item_nano_suit_uncharged, "nanosuit", 1, "nano suit (uncharged)", "armor/nano_1.png", _0x81e9x156, nanoMaxDamage, ArmorType.chestplate)
				} else {
					if (_0x81e9x5b == 0) {
						Item.defineArmor(item_nano_helmet_uncharged, "nanosuit", 0, "nano helmet (uncharged)", "armor/nano_1.png", _0x81e9x156, nanoMaxDamage, ArmorType.helmet)
					}
				}
			}
		}
	};
	return true
}

function DefineQuantumArmorUnit(_0x81e9x5b, _0x81e9x484) {
	if (DisableArmorItemsDefine) {
		return
	};
	ArmorDefineState[_0x81e9x5b + ":" + _0x81e9x484] = true;
	var _0x81e9x5b3 = parseInt(QuantumArmorData.state[_0x81e9x484]);
	var _0x81e9x156 = QuantumArmorData[_0x81e9x5b][_0x81e9x5b3];
	if (_0x81e9x5b3 == 1) {
		if (_0x81e9x5b == 3) {
			Item.defineArmor(item_quantum_boots, "quantum", 3, "quantum boots", "armor/quantumsuit_1.png", _0x81e9x156, quantiumMaxDamage, ArmorType.boots)
		} else {
			if (_0x81e9x5b == 2) {
				Item.defineArmor(item_quantum_leggings, "quantum", 2, "quantum leggings", "armor/quantumsuit_2.png", _0x81e9x156, quantiumMaxDamage, ArmorType.leggings)
			} else {
				if (_0x81e9x5b == 1) {
					Item.defineArmor(item_quantum_suit, "quantum", 1, "quantum suit", "armor/quantumsuit_1.png", _0x81e9x156, quantiumMaxDamage, ArmorType.chestplate)
				} else {
					if (_0x81e9x5b == 0) {
						Item.defineArmor(item_quantum_helmet, "quantum", 0, "quantum helmet", "armor/quantumsuit_1.png", _0x81e9x156, quantiumMaxDamage, ArmorType.helmet)
					}
				}
			}
		}
	} else {
		if (_0x81e9x5b == 3) {
			Item.defineArmor(item_quantum_boots_uncharged, "quantum", 3, "quantum boots (uncharged)", "armor/quantumsuit_1.png", _0x81e9x156, quantiumMaxDamage, ArmorType.boots)
		} else {
			if (_0x81e9x5b == 2) {
				Item.defineArmor(item_quantum_leggings_uncharged, "quantum", 2, "quantum leggings (uncharged)", "quantumsuit_2.png", _0x81e9x156, quantiumMaxDamage, ArmorType.leggings)
			} else {
				if (_0x81e9x5b == 1) {
					Item.defineArmor(item_quantum_suit_uncharged, "quantum", 1, "quantum suit (uncharged)", "armor/quantumsuit_1.png", _0x81e9x156, quantiumMaxDamage, ArmorType.chestplate)
				} else {
					if (_0x81e9x5b == 0) {
						Item.defineArmor(item_quantum_helmet_uncharged, "quantum", 0, "quantum helmet (uncharged)", "armor/quantumsuit_1.png", _0x81e9x156, quantiumMaxDamage, ArmorType.helmet)
					}
				}
			}
		}
	};
	return true
}

function DefineFzArmor() {
	DefineJetpackArmor(false);
	Item.defineArmor(item_batpack, "batpack", 0, translate("batpack"), "armor/batpack.png", 1, 6000, ArmorType.chestplate);
	Item.defineArmor(item_latpack, "latpack", 0, translate("lap-pack"), "armor/latpack.png", 1, 30000, ArmorType.chestplate);
	DefineNanoArmorUnit(0, 6);
	DefineNanoArmorUnit(1, 6);
	DefineNanoArmorUnit(2, 6);
	DefineNanoArmorUnit(3, 6);
	DefineNanoArmorUnit(0, 7);
	DefineNanoArmorUnit(1, 7);
	DefineNanoArmorUnit(2, 7);
	DefineNanoArmorUnit(3, 7);
	DefineQuantumArmorUnit(0, 1);
	DefineQuantumArmorUnit(1, 1);
	DefineQuantumArmorUnit(2, 1);
	DefineQuantumArmorUnit(3, 1);
	DefineQuantumArmorUnit(0, 2);
	DefineQuantumArmorUnit(1, 2);
	DefineQuantumArmorUnit(2, 2);
	DefineQuantumArmorUnit(3, 2);
	if (FactAPI) {
		FactAPI.InvokeCallback("DefineArmor")
	};
	DisableArmorItemsDefine = !DefineArmorReplacingItems
}
var CachedPlayerArmor = {};

function CacheArmorAndClear() {
	CachedPlayerArmor = {};
	for (var i = 0; i < 4; i++) {
		if (qArmorGetSlotState(i) > 0) {
			CachedPlayerArmor[i] = [Player.getArmorSlot(i), Player.getArmorSlotDamage(i)];
			Player.setArmorSlot(i, 0, 0)
		} else {
			CachedPlayerArmor[i] = [0, 0]
		}
	}
}

function ReturnCachedArmor() {
	RunOnMainThread(function() {
		for (var i = 0; i < 4; i++) {
			if (CachedPlayerArmor[i] && CachedPlayerArmor[i][0] > 0) {
				Player.setArmorSlot(i, CachedPlayerArmor[i][0], CachedPlayerArmor[i][1])
			}
		}
	})
}
var allRecipesAdded = false;

function AddAllNativeRecipes() {
	if (allRecipesAdded) {
		return
	};
	try {
		FactAPI.InvokeCallback("AddRecipes")
	} catch (e) {
		print("<FactAPI> Addon recipe error!");
		print("<FactAPI> " + e)
	};
	try {
		Item.addShapedRecipe(item_copper_wire, 9, 0, ["aaa", "xxx", "aaa"], ["x", item_copper_ingot, 0, "a", item_rubber, 0]);
		Item.addShapedRecipe(item_battery, 1, 1001, [" x ", "aba", "aba"], ["x", item_copper_wire, 0, "a", item_tin_ingot, 0, "b", 331, 0]);
		Item.addShapedRecipe(item_circuit, 1, 0, ["xxx", "aba", "xxx"], ["x", item_copper_wire, 0, "a", 331, 0, "b", item_steel_ingot, 0]);
		Item.addShapedRecipe(item_advanced_circuit, 1, 0, ["aba", "cxc", "aba"], ["x", item_circuit, 0, "a", 331, 0, "b", 348, 0, "c", 351, 4]);
		Item.addShapedRecipe(block_machine_block, 1, 0, ["xxx", "x x", "xxx"], ["x", item_steel_ingot, 0]);
		Item.addShapedRecipe(item_steel_ingot, 8, 0, ["   ", "   ", "x  "], ["x", block_machine_block, 0]);
		Item.addShapedRecipe(348, 1, 0, ["xax", "axa", "xax"], ["a", item_dust_gold, 0, "x", 331, 0]);
		Item.addShapedRecipe(item_advanced_machine_module, 1, 0, ["bab", "dcd", "bab"], ["a", item_advanced_circuit, 0, "b", item_steel_ingot, 0, "c", item_energy_crystal, 0, "d", 351, 4]);
		Item.addShapedRecipe(item_iridium_composite, 1, 0, ["cac", "aba", "cac"], ["a", item_composite_plate, 0, "c", item_iridium, 0, "b", 264, 0]);
		Item.addShapedRecipe(item_wrench, 1, 0, ["x x", "xxx", " x "], ["x", item_bronze_ingot, 0]);
		Item.addShapedRecipe(item_overclocker_upgrade, 1, 0, ["   ", "xxx", "aba"], ["x", item_cell_water, 0, "a", item_copper_wire, 0, "b", item_circuit, 0]);
		Item.addShapedRecipe(item_uranium_rod_singler, 1, 1, ["cac", "aba", "cac"], ["a", 265, 0, "b", item_uranium, 0]);
		Item.addShapedRecipe(item_uranium_rod_double, 1, 0, ["   ", "aba", "   "], ["a", item_uranium_rod_singler, 1, "b", item_copper_ingot, 0]);
		Item.addShapedRecipe(item_uranium_rod_quad, 1, 0, [" a ", "bbb", " a "], ["a", item_uranium_rod_double, 0, "b", item_copper_ingot, 0]);
		Item.addShapedRecipe(item_reactor_reflector, 1, 0, ["aa ", "aa ", "   "], ["a", item_composite_plate, 0]);
		Item.addShapedRecipe(item_advanced_reactor_reflector, 1, 0, ["   ", "aba", "   "], ["b", item_reactor_reflector, 0, "a", item_carbonium_plate, 0]);
		Item.addShapedRecipe(block_hardened_block, 8, 0, ["aaa", "aba", "aaa"], ["a", 1, 0, "b", item_composite_plate, 0]);
		Item.addShapedRecipe(block_hardened_block, 8, 1, ["aaa", "aba", "aaa"], ["a", 20, 0, "b", item_composite_plate, 0]);
		Item.addShapedRecipe(item_coolant_circuit, 1, 0, ["   ", "aba", "   "], ["a", item_cell_empty, 0, "b", item_tin_ingot, 0]);
		Item.addShapedRecipe(item_coolant_cell_singler, 1, 0, [" a ", "aba", " a "], ["a", item_tin_ingot, 0, "b", item_cell_water, 0]);
		Item.addShapedRecipe(item_coolant_cell_triple, 1, 0, ["aaa", "bbb", "aaa"], ["a", item_tin_ingot, 0, "b", item_coolant_cell_singler, 0]);
		Item.addShapedRecipe(item_coolant_cell_six, 1, 0, ["aaa", "bab", "aaa"], ["a", item_tin_ingot, 0, "b", item_coolant_cell_triple, 0]);
		Item.addShapedRecipe(item_cooling_vent, 1, 0, ["aba", "bcb", "aba"], ["a", item_steel_ingot, 0, "c", item_circuit, 0]);
		Item.addShapedRecipe(item_cooling_vent_redstone, 1, 0, ["aba", "bcb", "aba"], ["a", 331, 0, "b", item_copper_ingot, 0, "c", item_cooling_vent, 0]);
		Item.addShapedRecipe(item_cooling_vent_lapis, 1, 0, ["aba", "bcb", "aba"], ["a", 351, 4, "b", item_tin_ingot, 0, "c", item_cooling_vent_redstone, 0]);
		Item.addShapedRecipe(item_heating_circuit, 1, 0, ["aba", "bcb", "aba"], ["a", item_cell_empty, 0, "b", item_tin_ingot, 0, "c", 331, 0]);
		Item.addShapedRecipe(item_heating_circuit_redstone, 1, 0, ["aba", "bcb", "aba"], ["a", 331, 0, "b", item_copper_ingot, 0, "c", item_heating_circuit, 0]);
		Item.addShapedRecipe(item_heating_circuit_golden, 1, 0, ["aba", "bcb", "aba"], ["a", 266, 0, "b", 331, 0, "c", item_heating_circuit_redstone, 0]);
		Item.addShapedRecipe(block_recycler, 1, 0, [" e ", "aba", "dcd"], ["a", 3, 0, "b", item_circuit, 0, "c", block_compressor, 0, "d", item_steel_ingot, 0, "e", 348, 0]);
		Item.addShapedRecipe(block_crop_harvester, 1, 0, ["   ", " d ", "abc"], ["a", 292, 0, "b", block_machine_block, 0, "c", 258, 0, "d", item_circuit, 0]);
		Item.addShapedRecipe(block_quarry, 1, 0, ["   ", "dbd", "aca"], ["a", block_machine_block, 0, "b", 331, 0, "c", 278, 0, "d", item_advanced_circuit, 0]);
		Item.addShapedRecipe(block_macerator, 1, 0, ["aaa", "bcb", " x "], ["a", 318, 0, "b", 4, 0, "c", block_machine_block, 0, "x", item_circuit, 0]);
		Item.addShapedRecipe(block_drill_station, 1, 0, ["xax", "xbx", "xcx"], ["a", 54, 0, "b", item_circuit, 0, "c", 257, 0]);
		Item.addShapedRecipe(block_electric_furnace, 1, 0, [" a ", "cbc", " d "], ["a", item_circuit, 0, "c", 331, 0, "b", 61, 0, "d", block_machine_block, 0]);
		Item.addShapedRecipe(block_teleporter, 2, 0, ["aba", "ded", "aca"], ["a", item_advanced_circuit, 0, "b", item_teleport_accesser, 0, "c", 264, 0, "d", item_crystal_wire, 0, "e", block_advanced_machine_block, 0]);
		Item.addShapedRecipe(block_extractor, 1, 0, ["   ", "cdc", "aba"], ["d", item_treetap, 0, "a", item_circuit, 0, "c", item_copper_wire, 0, "b", block_machine_block, 0]);
		Item.addShapedRecipe(block_compressor, 1, 0, ["x x", "xax", "xbx"], ["a", block_machine_block, 0, "b", item_circuit, 0, "x", 1, 0]);
		Item.addShapedRecipe(block_solar_pannel, 1, 0, ["xxx", "aaa", "zyz"], ["x", 20, 0, "a", item_coal_dust, 0, "z", item_circuit, 0, "y", block_machine_block, 0]);
		Item.addShapedRecipe(block_fuel_generator, 1, 0, ["a  ", "b  ", "c  "], ["a", item_circuit, 0, "c", 61, 0, "b", block_machine_block, 0]);
		Item.addShapedRecipe(block_nuclear_reactor_controller, 1, 0, ["   ", "dcd", "bab"], ["a", block_advanced_machine_block, 0, "b", item_carbonium_plate, 0, "c", item_advanced_machine_module, 0, "d", item_cell_empty, 0]);
		Item.addShapedRecipe(block_uranium_rod_controller, 1, 0, ["   ", "aba", "cdc"], ["a", item_circuit, 0, "b", block_machine_block, 0, "c", item_steel_ingot, 0, "d", item_carbonium_plate, 0]);
		Item.addShapedRecipe(block_nuclear_reactor_turbine, 1, 0, ["a a", " b ", "aca"], ["a", item_composite_plate, 0, "b", block_advanced_machine_block, 0, "c", item_advanced_circuit, 0]);
		Item.addShapedRecipe(block_mass_fabricator, 1, 0, ["aba", "cdc", "aba"], ["a", 348, 0, "c", item_advanced_machine_module, 0, "b", item_advanced_circuit, 0, "d", block_advanced_machine_block, 0]);
		Item.addShapedRecipe(block_windmill, 1, 0, ["x x", " a ", "x x"], ["x", item_steel_ingot, 0, "a", block_machine_block, 0]);
		Item.addShapedRecipe(block_watermill, 2, 0, ["bxb", "xax", "bxb"], ["x", 5, 0, "a", block_machine_block, 0, "b", 280, 0]);
		Item.addShapedRecipe(block_geotermal_generator, 1, 0, ["xcx", "xcx", "aba"], ["c", 20, 0, "b", block_fuel_generator, 0, "a", 325, 0, "x", item_steel_ingot, 0]);
		Item.addShapedRecipe(block_beacon, 1, 0, ["xbx", "xax", "xcx"], ["a", item_energy_crystal, 0, "x", item_crystal_wire, 0, "b", block_transformator_HV, 0, "c", block_advanced_machine_block, 0]);
		Item.addShapedRecipe(block_MFE, 1, 0, ["aba", "bcb", "aba"], ["c", block_machine_block, 0, "b", 264, 0, "a", item_copper_wire, 0]);
		Item.addShapedRecipe(block_bat_box, 1, 0, ["aba", "dcd", "aaa"], ["a", 5, 0, "b", item_copper_wire, 0, "d", 331, 0, "c", item_battery, 0]);
		Item.addShapedRecipe(block_MFSU, 1, 0, ["xax", "xbx", "xcx"], ["x", item_advanced_machine_module, 0, "a", item_advanced_circuit, 0, "b", block_MFE, 0, "c", block_advanced_machine_block, 0]);
		Item.addShapedRecipe(item_drill_usual, 1, 200, [" x ", "xbx", "xcx"], ["x", item_steel_ingot, 0, "b", item_circuit, 0, "c", item_battery, 0]);
		Item.addShapedRecipe(item_drill, 1, 200, [" x ", "xbx", "   "], ["x", 264, 0, "b", item_drill_usual, 0]);
		Item.addShapedRecipe(item_chainsaw, 1, 200, [" xx", "xbx", "cx "], ["x", item_steel_ingot, 0, "a", 264, 0, "b", item_circuit, 0, "c", item_battery, 0]);
		Item.addShapedRecipe(item_teleport_accesser, 1, 0, ["x  ", " y ", "  z"], ["x", item_advanced_machine_module, 0, "y", 265, 0, "z", 348, 0]);
		Item.addShapedRecipe(item_electric_hoe, 1, 200, [" xx", " a ", " b "], ["x", item_steel_ingot, 0, "a", item_circuit, 0, "b", item_battery, 0]);
		Item.addShapedRecipe(item_electric_treetap, 1, 100, ["  x", " a ", "b  "], ["x", item_treetap, 0, "a", item_circuit, 0, "b", item_battery, 0]);
		Item.addShapedRecipe(item_nano_saber, 1, 1999, ["ab ", "ab ", "cdc"], ["a", 348, 0, "c", item_carbonium_plate, 0, "b", item_iridium, 0, "d", item_advanced_machine_module, 0]);
		Item.addShapedRecipe(block_barrel, 1, 0, ["aaa", "a a", "aaa"], ["a", 20, 0]);
		Item.addShapedRecipe(block_pump, 2, 0, ["bab", "cxc", "bab"], ["a", 325, 0, "b", item_steel_ingot, 0, "c", 20, 0, "x", item_circuit, 0]);
		Item.addShapedRecipe(block_auto_milker, 1, 0, ["   ", "cac", "bdb"], ["a", 325, 0, "b", item_steel_ingot, 0, "c", 20, 0, "d", item_circuit, 0]);
		Item.addShapedRecipe(block_bucket_filler, 1, 0, ["cdc", " b ", " a "], ["a", 325, 0, "b", block_machine_block, 0, "c", item_circuit, 0, "d", 54, 0]);
		Item.addShapedRecipe(block_growth_accelerator, 1, 0, ["   ", "cdc", "aba"], ["a", 325, 8, "d", block_barrel, 0, "b", item_steel_ingot, 0, "c", item_circuit, 0]);
		Item.addShapedRecipe(block_mob_slayer, 1, 0, ["   ", "cdc", "aba"], ["a", item_steel_ingot, 0, "d", 267, 0, "b", block_machine_block, 0, "c", item_circuit, 0]);
		Item.addShapedRecipe(block_defender, 1, 0, [" e ", "cdc", "aba"], ["a", item_steel_ingot, 0, "d", 276, 0, "b", block_machine_block, 0, "c", item_advanced_circuit, 0, "e", 259, 0]);
		Item.addShapedRecipe(block_auto_feeder, 1, 0, [" d ", "bcb", "axa"], ["a", 331, 0, "d", 54, 0, "b", item_steel_ingot, 0, "c", 296, 0, "x", item_circuit, 0]);
		Item.addShapedRecipe(block_assembler, 1, 0, [" a ", "aba", " a "], ["a", item_circuit, 0, "b", 58, 0]);
		Item.addShapedRecipe(block_block_breaker, 1, 0, [" a ", " b ", " c "], ["a", item_circuit, 0, "b", block_machine_block, 0, "c", 257, 0]);
		Item.addShapedRecipe(block_heater, 1, 0, ["aba", "cdc", "aea"], ["a", item_steel_ingot, 0, "b", item_battery, 0, "c", item_circuit, 0, "d", 325, 0, "e", item_battery, 0]);
		Item.addShapedRecipe(block_nuclear_bomb, 1, 0, ["aba", "aca", "aba"], ["a", item_uranium, 0, "b", 46, 0, "c", item_uranium_rod_double, 0]);
		Item.addShapedRecipe(item_treetap, 1, 0, [" a ", "aaa", "a  "], ["a", 5, 0]);
		Item.addShapedRecipe(block_bee_hive, 1, 0, ["aaa", "bcb", "bbb"], ["a", 158, 0, "b", 5, 0, "c", 54, 0]);
		Item.addShapedRecipe(block_centrefuge, 1, 0, [" a ", "bcb", "ded"], ["a", block_barrel, 0, "b", item_circuit, 0, "c", 325, 0, "d", item_steel_ingot, 0, "e", block_transporting_pipe, 0]);
		addMatterRecipes();
		Item.addShapedRecipe(item_quantum_helmet, 1, quantiumMaxDamage, ["aba", "cdc", "   "], ["a", item_iridium_composite, 0, "b", item_nano_helmet, 0, "c", item_advanced_circuit, 0, "d", 20, 0]);
		Item.addShapedRecipe(item_quantum_suit, 1, quantiumMaxDamage, ["aba", "axa", "aca"], ["a", item_iridium_composite, 0, "b", item_jetpack, 0, "c", item_advanced_machine_module, 0, "d", item_advanced_circuit, 0, "x", item_nano_suit, 0]);
		Item.addShapedRecipe(item_quantum_leggings, 1, quantiumMaxDamage, ["xbx", "a a", "c c"], ["a", item_iridium_composite, 0, "b", item_nano_leggings, 0, "c", 348, 0, "x", block_machine_block, 0]);
		Item.addShapedRecipe(item_quantum_boots, 1, quantiumMaxDamage, ["   ", "aca", "aba"], ["a", item_iridium_composite, 0, "b", item_nano_boots, 0, "c", item_advanced_circuit, 0]);
		Item.addShapedRecipe(item_scrab_box, 1, 0, ["xxx", "xxx", "xxx"], ["x", item_scrab, 0]);
		Item.addShapedRecipe(item_empty_frame, 1, 0, ["xxx", "xax", "xxx"], ["x", 280, 0, "a", 287, 0]);
		Item.addShapedRecipe(block_terraformer, 1, 0, ["   ", "aba", "cdc"], ["a", 256, 0, "b", item_advanced_machine_module, 0, "c", item_advanced_circuit, 0, "d", block_advanced_machine_block, 0]);
		Item.addShapedRecipe(item_batpack, 1, 5995, ["cxc", "aba", "c c"], ["a", 152, 0, "b", item_circuit, 0, "x", item_battery, 0, "c", item_steel_ingot, 0]);
		Item.addShapedRecipe(item_latpack, 1, 29995, ["cxc", "aba", "c c"], ["a", 22, 0, "b", item_advanced_circuit, 0, "x", item_energy_crystal, 0, "c", item_steel_ingot, 0]);
		Item.addShapedRecipe(item_jetpack, 1, 1999, ["aba", "aca", "d d"], ["a", item_steel_ingot, 0, "b", item_circuit, 0, "c", item_battery, 0, "d", 348, 0]);
		Item.addShapedRecipe(block_liquid_fuel_engine, 1, 0, [" d ", "aca", "aba"], ["a", item_circuit, 0, "b", block_machine_block, 0, "c", block_barrel, 0, "d", item_battery, 0]);
		Item.addShapedRecipe(block_bioreactor, 1, 0, ["   ", " b ", "aca"], ["a", 20, 0, "b", item_circuit, 0, "c", block_barrel, 0]);
		Item.addShapedRecipe(block_fuel_factory, 1, 0, ["axa", "cbc", "axa"], ["a", item_copper_wire, 0, "b", block_machine_block, 0, "c", block_transporting_pipe, 0, "x", item_circuit, 0]);
		Item.addShapedRecipe(block_replicator, 1, 0, ["aba", "dcd", "oeo"], ["a", 20, 0, "b", 325, 0, "c", item_advanced_machine_module, 0, "d", item_advanced_circuit, 0, "e", block_advanced_machine_block, 0]);
		Item.addShapedRecipe(item_raw_carbon, 1, 0, ["xxx", "x x", "xxx"], ["x", item_coal_dust, 0]);
		Item.addShapedRecipe(item_composite_ingot, 2, 0, ["aaa", "bbb", "ccc"], ["a", item_bronze_ingot, 0, "b", item_tin_ingot, 0, "c", item_steel_ingot, 0]);
		Item.addShapedRecipe(item_nano_boots, 1, nanoMaxDamage, ["   ", "x x", "xax"], ["x", item_carbonium_plate, 0, "a", item_energy_crystal, 0]);
		Item.addShapedRecipe(item_nano_leggings, 1, nanoMaxDamage, ["xax", "x x", "x x"], ["x", item_carbonium_plate, 0, "a", item_energy_crystal, 0]);
		Item.addShapedRecipe(item_nano_suit, 1, nanoMaxDamage, ["x x", "xax", "xxx"], ["x", item_carbonium_plate, 0, "a", item_energy_crystal, 0]);
		Item.addShapedRecipe(item_nano_helmet, 1, nanoMaxDamage, ["xax", "xbx", "   "], ["x", item_carbonium_plate, 0, "a", item_energy_crystal, 0, "b", 20, 0]);
		Item.addShapedRecipe(item_mining_laser, 1, 1000, ["abk", "ccd", "occ"], ["a", 331, 0, "b", item_energy_crystal, 0, "c", item_composite_plate, 0, "d", item_advanced_circuit, 0, "k", item_advanced_machine_module, 0]);
		Item.addShapedRecipe(item_energy_crystal, 1, 10000, ["xxx", "xax", "xxx"], ["x", 331, 0, "a", 264, 0]);
		Item.addShapedRecipe(item_coal_ball, 1, 0, ["aaa", "aba", "aaa"], ["a", item_coal_dust, 0, "b", 318, 0]);
		Item.addShapedRecipe(item_coal_chunk, 1, 0, ["aaa", "aba", "aaa"], ["a", item_coal_ball_compressed, 0, "b", 49, 0]);
		Item.addShapedRecipe(block_advanced_machine_block, 1, 0, [" a ", "bxb", " a "], ["a", item_composite_plate, 0, "b", item_carbonium_plate, 0, "x", block_machine_block, 0]);
		Item.addShapedRecipe(block_transformator_LV, 1, 0, ["xax", "bbb", "xax"], ["x", 5, 0, "a", item_copper_ingot, 0, "b", item_copper_wire, 0]);
		Item.addShapedRecipe(block_transformator_MV, 1, 0, [" a ", " b ", " a "], ["a", item_golden_wire, 0, "b", block_machine_block, 0]);
		Item.addShapedRecipe(block_transformator_HV, 1, 0, [" a ", "cbd", " a "], ["c", item_circuit, 0, "a", item_steel_wire, 0, "b", block_transformator_MV, 0, "d", item_energy_crystal, 0]);
		Item.addShapedRecipe(item_crystal_wire, 12, 0, ["xxx", "aba", "xxx"], ["x", item_rubber, 0, "a", 264, 0, "b", 331, 0]);
		Item.addShapedRecipe(item_golden_wire, 8, 0, ["xxx", "aba", "xxx"], ["x", item_rubber, 0, "a", 266, 0, "b", 266, 0]);
		Item.addShapedRecipe(item_steel_wire, 8, 0, ["xxx", "aba", "xxx"], ["x", item_rubber, 0, "a", item_steel_ingot, 0, "b", item_steel_ingot, 0]);
		Item.addShapedRecipe(item_super_conductor, 12, 0, ["xxx", "aba", "xxx"], ["x", item_rubber, 0, "a", item_iridium, 0, "b", 264, 0]);
		Item.addShapedRecipe(item_ec_meter, 1, 0, ["   ", "aba", "x x"], ["x", item_copper_wire, 0, "a", item_circuit, 0, "b", 20, 0]);
		Item.addShapedRecipe(block_marker, 2, 0, ["   ", "x  ", "a  "], ["x", 351, 4, "a", 280, 0]);
		Item.addShapedRecipe(block_exchange_buffer, 1, 0, ["   ", "   ", "xax"], ["x", 54, 4, "a", item_circuit, 0]);
		Item.addShapedRecipe(325, 1, 0, ["aaa", "bab", "aba"], ["b", item_tin_ingot, 0]);
		Item.addShapedRecipe(289, 3, 0, ["aba", "bab", "aba"], ["a", 331, 0, "b", item_coal_dust, 0]);
		Item.addShapedRecipe(50, 4, 0, ["ccc", "cbс", "caс"], ["a", 280, 0, "b", item_latex, 0]);
		Item.addShapedRecipe(66, 16, 0, ["bob", "bab", "bob"], ["a", 280, 0, "b", item_bronze_ingot, 0]);
		Item.addShapedRecipe(item_leash, 1, 0, ["xx ", "xz ", "  x"], ["z", 280, 0, "x", 287, 0]);
		Item.addShapedRecipe(5, 3, 0, ["   ", "   ", "x  "], ["x", block_rubber_tree_wood, 0]);
		Item.addShapedRecipe(block_fishing_net, 1, 0, ["xax", "a a", "xax"], ["x", 280, 0, "a", 287, 0]);
		Item.addShapedRecipe(item_cell_empty, 16, 0, [" a ", "a a", " a "], ["a", item_tin_ingot, 0]);
		Item.addShapedRecipe(block_wooden_pipe, 8, 0, ["bbb", "xax", "bbb"], ["x", 5, 0, "a", 20, 0, "b", 331, 0]);
		Item.addShapedRecipe(block_wooden_pipe, 8, 0, ["bbb", "xax", "bbb"], ["x", 5, 1, "a", 20, 0, "b", 331, 0]);
		Item.addShapedRecipe(block_wooden_pipe, 8, 0, ["bbb", "xax", "bbb"], ["x", 5, 2, "a", 20, 0, "b", 331, 0]);
		Item.addShapedRecipe(block_wooden_pipe, 8, 0, ["bbb", "xax", "bbb"], ["x", 5, 3, "a", 20, 0, "b", 331, 0]);
		Item.addShapedRecipe(block_valve_pipe, 8, 0, ["   ", "xax", "   "], ["x", 265, 0, "a", 20, 0]);
		Item.addShapedRecipe(block_transporting_pipe, 8, 0, ["   ", "xax", "   "], ["x", 1, 0, "a", 20, 0]);
		Item.addShapedRecipe(block_filter_pipe, 8, 0, [" b ", "xax", "   "], ["x", 331, 0, "a", 20, 0, "b", item_circuit, 0]);
		Item.addShapedRecipe(block_golden_pipe, 8, 0, ["   ", "xax", "   "], ["x", 266, 0, "a", 20, 0]);
		Item.addShapedRecipe(block_obsidian_pipe, 8, 0, ["   ", "xax", "   "], ["x", 49, 0, "a", 20, 0]);
		Item.addShapedRecipe(block_diamond_pipe, 8, 0, ["   ", "xax", "   "], ["x", 264, 0, "a", 20, 0]);
		Item.addShapedRecipe(block_teleport_pipe, 2, 0, ["aya", "bxb", "aza"], ["a", 348, 0, "b", item_carbonium_plate, 0, "x", 20, 0, "y", item_energy_crystal, 0, "z", item_advanced_circuit, 0]);
		Item.addShapedRecipe(item_nano_frame_empty, 1, 0, [" xa", "x x", " x "], ["x", item_carbonium_plate, 0, "a", item_advanced_circuit, 0]);
		Item.addShapedRecipe(item_cell_honey, 1, 0, ["xxx", "xax", "xxx"], ["x", item_honey_drop, 0, "a", item_cell_empty, 0]);
		Item.addShapedRecipe(item_honey_bread, 1, 0, ["xxx", "xax", "xxx"], ["x", item_honey_drop, 0, "a", 297, 0]);
		Item.addShapedRecipe(item_bee_net, 1, 0, ["xax", "xxx", " x "], ["x", 280, 0, "a", 35, 0]);
		Item.addShapedRecipe(264, 1, 0, ["xxx", "x x", "xxx"], ["x", item_diamond_shard, 0]);
		Item.addShapedRecipe(item_uu_matter, 1, 0, ["xxx", "x x", "xxx"], ["x", item_matter_chunk, 0]);
		Item.addShapedRecipe(item_essense_bottle, 2, 0, [" a ", "x x", " x "], ["x", 20, 0, "a", 331, 0]);
		Item.addShapedRecipe(item_condition_controller, 1, 2000, ["xax", "c c", "xbx"], ["x", item_tin_ingot, 0, "c", item_cell_water, 0, "a", item_advanced_circuit, 0, "b", item_copper_wire, 0]);
		Item.addShapedRecipe(item_bronze_dust, 4, 0, ["xx", "ax"], ["a", item_dust_tin, 0, "x", item_dust_copper, 0]);
		ToolAPI.addToolsRecipe({
			axe: item_bronze_axe,
			pickaxe: item_bronze_pickaxe,
			sword: item_bronze_sword,
			shovel: item_bronze_shovel,
			hoe: item_bronze_hoe
		}, item_bronze_ingot, {
			axe: item_bronze_axe_broken,
			pickaxe: item_bronze_pickaxe_broken,
			sword: item_bronze_sword_broken,
			shovel: item_bronze_shovel_broken,
			hoe: item_bronze_hoe_broken
		}, item_bronze_dust);
		Item.addShapedRecipe(item_bronze_boots, 1, 0, ["x x", "x x", "   "], ["x", item_bronze_ingot, 0]);
		Item.addShapedRecipe(item_bronze_leggings, 1, 0, ["xxx", "x x", "x x"], ["x", item_bronze_ingot, 0]);
		Item.addShapedRecipe(item_bronze_chestplate, 1, 0, ["x x", "xxx", "xxx"], ["x", item_bronze_ingot, 0]);
		Item.addShapedRecipe(item_bronze_helmet, 1, 0, ["xxx", "x x", "   "], ["x", item_bronze_ingot, 0]);
		allRecipesAdded = true;
		GuideBookUI.BuildAllRecipesChapter()
	} catch (e) {
		print("Failed to add recipes: " + e)
	}
}

function addMatterRecipes() {
	matRec(1, 16, 0, ["   ", " x ", "   "]);
	matRec(2, 16, 0, ["   ", "xx ", "   "]);
	matRec(8, 1, 0, ["   ", " x ", " x "]);
	matRec(10, 1, 0, [" x ", " x ", " x "]);
	matRec(14, 2, 0, [" x ", "xxx", " x "]);
	matRec(15, 2, 0, ["x x", " x ", "x x"]);
	matRec(17, 8, 0, [" x ", "   ", "   "]);
	matRec(20, 32, 0, [" x ", "x x", " x "]);
	matRec(24, 16, 0, ["   ", "  x", " x "]);
	matRec(35, 12, 0, ["x x", "   ", " x "]);
	matRec(48, 16, 0, ["   ", " x ", "x x"]);
	matRec(49, 12, 0, ["x x", "x x", "   "]);
	matRec(80, 4, 0, ["x x", "   ", "   "]);
	matRec(81, 48, 0, [" x ", "xxx", "x x"]);
	matRec(87, 16, 0, ["  x", " x ", "x  "]);
	matRec(89, 8, 0, [" x ", "x x", "xxx"]);
	matRec(106, 24, 0, ["x  ", "x  ", "x  "]);
	matRec(110, 24, 0, ["   ", "x x", "xxx"]);
	matRec(263, 20, 0, ["  x", "x  ", "  x"]);
	matRec(264, 1, 0, ["xxx", "xxx", "xxx"]);
	matRec(288, 32, 0, [" x ", " x ", "x x"]);
	matRec(289, 15, 0, ["xxx", "x  ", "xxx"]);
	matRec(318, 32, 0, [" x ", "xx ", "xx "]);
	matRec(331, 24, 0, ["   ", " x ", "xxx"]);
	matRec(332, 16, 0, ["   ", "   ", "xxx"]);
	matRec(337, 48, 0, ["xx ", "x  ", "xx "]);
	matRec(338, 48, 0, ["x x", "x x", "x x"]);
	matRec(351, 48, 0, [" xx", " xx", " x "]);
	matRec(351, 32, 3, ["xx ", "  x", "xx "]);
	matRec(351, 9, 4, [" x ", " x ", " xx"]);
	matRec(352, 32, 0, ["xx ", "x  ", "xx "]);
	matRec(block_copper_ore, 5, 0, ["  x", "x x", "   "]);
	matRec(block_tin_ore, 5, 0, ["   ", "x x", "  x"]);
	matRec(item_latex, 21, 0, ["x x", "   ", "x x"]);
	matRec(item_iridium, 1, 0, ["xxx", " x ", "xxx"])
}

function matRec(_0x81e9x10, _0x81e9x13, _0x81e9x16, _0x81e9x159) {
	Item.addShapedRecipe(_0x81e9x10, _0x81e9x13, _0x81e9x16, _0x81e9x159, ["x", item_uu_matter, 0])
}

function addAllFzFurnaceRecipes() {
	Item.addFurnaceRecipe(item_dust_iron, 265);
	Item.addFurnaceRecipe(item_dust_gold, 266);
	Item.addFurnaceRecipe(item_dust_copper, item_copper_ingot);
	Item.addFurnaceRecipe(item_dust_tin, item_tin_ingot);
	Item.addFurnaceRecipe(item_copper_ore, item_copper_ingot);
	Item.addFurnaceRecipe(item_tin_ore, item_tin_ingot);
	Item.addFurnaceRecipe(265, item_steel_ingot);
	Item.addFurnaceRecipe(item_latex, item_rubber);
	Item.addFurnaceRecipe(item_bronze_dust, item_bronze_ingot, 0);
	FactAPI.InvokeCallback("AddFurnaceRecipes")
}
Player.addItemCreativeInv_ = Player.addItemCreativeInv;
Player.addItemCreativeInv = function(_0x81e9x10, _0x81e9x13, _0x81e9x16) {
	if (_0x81e9x10 < 256) {
		Item.setCategory(_0x81e9x10, ItemCategory.TOOL)
	} else {
		Item.setCategory(_0x81e9x10, 2)
	};
	Player.addItemCreativeInv_(_0x81e9x10, _0x81e9x13, _0x81e9x16)
};

function AddAllItemsToCreativeInv() {
	for (var _0x81e9x163 in ItemsToAddInCreative) {
		var _0x81e9x164 = _0x81e9x163.split(":");
		Player.addItemCreativeInv(parseInt(_0x81e9x164[0]), parseInt(_0x81e9x164[1]), 0)
	}
}

function AddAllCreativeItems() {
	AddUIDListToCreative([block_bat_box, block_MFE, block_MFSU, block_transformator_LV, block_transformator_MV, block_transformator_HV, block_crop_harvester, block_quarry, block_marker, block_drill_station, block_block_breaker, block_pump, block_barrel, block_recycler, block_macerator, block_electric_furnace, block_compressor, block_extractor, block_centrefuge, block_mass_fabricator, block_replicator, block_beacon, block_solar_pannel, block_fuel_generator, block_windmill, block_watermill, block_geotermal_generator, block_liquid_fuel_engine, block_teleporter, block_auto_milker, block_bucket_filler, block_growth_accelerator, block_mob_slayer, block_auto_feeder, block_defender, block_assembler, block_block_breaker, block_heater, block_nuclear_bomb, block_wild_hive, block_bee_hive, block_terraformer, block_bioreactor, block_fuel_factory, 302, 303, 304, 305, block_exchange_buffer, block_fishing_net, block_nuclear_reactor_turbine, block_uranium_rod_controller, block_nuclear_reactor_controller, block_transporting_pipe, block_golden_pipe, block_wooden_pipe, block_valve_pipe, block_filter_pipe, block_obsidian_pipe, block_diamond_pipe, block_teleport_pipe]);
	AddAllItemsToCreativeInv();
	Player.addItemCreativeInv(block_rubber_tree_wood, 1, 0);
	Player.addItemCreativeInv(block_rubber_tree_leaves, 1, 0);
	Player.addItemCreativeInv(block_rubber_wood_with_latex, 1, 0);
	Player.addItemCreativeInv(block_hardened_block, 1, 0);
	Player.addItemCreativeInv(block_hardened_block, 1, 1)
}

function addCreativeItems(_0x81e9x1a8) {
	for (var i in _0x81e9x1a8) {
		var _0x81e9x17 = Item.getName(_0x81e9x1a8[i], 0, true) + ".name";
		Player.addItemCreativeInv(_0x81e9x1a8[i], 64, 0)
	};
	FactAPI.InvokeCallback("AddCreativeItems")
}

function batteryItemClick(_0x81e9x2bc) {
	var _0x81e9x16 = Player.getCarriedItemData();
	_0x81e9x16--;
	if (_0x81e9x16 > 1000) {
		_0x81e9x16 = 1000
	};
	if (_0x81e9x16 < 0) {
		_0x81e9x16 = 0
	};
	var _0x81e9x174 = Math.min(10000 - _0x81e9x16 * 10, 1000);
	var _0x81e9x158 = getMachineType(_0x81e9x2bc);
	if (!_0x81e9x158) {
		return
	};
	if (!_0x81e9x158.isUsingEnergy()) {
		return
	};
	if (_0x81e9x158.isGenerator()) {
		return
	};
	var _0x81e9x2f2 = _0x81e9x158.getMaxEnergyStored();
	var _0x81e9x1a2 = _0x81e9x158.getEnergyStored(_0x81e9x2bc);
	_0x81e9x2bc.energyStored = Math.min(_0x81e9x1a2 + _0x81e9x174, _0x81e9x2f2);
	_0x81e9x174 = _0x81e9x2bc.energyStored - _0x81e9x1a2;
	ModPE.showTipMessage("energy transported: " + _0x81e9x174);
	_0x81e9x16 += Math.floor(_0x81e9x174 / 10);
	Entity.setCarriedItem(getPlayerEnt(), item_battery, 1, _0x81e9x16 + 1);
	PlaySoundFile("Tools/BatteryUse.ogg")
}

function EnergyCrystalClick(_0x81e9x2bc) {
	var _0x81e9x16 = Player.getCarriedItemData();
	if (_0x81e9x16 > 10000) {
		_0x81e9x16 = 10000
	};
	if (_0x81e9x16 < 0) {
		_0x81e9x16 = 0
	};
	var _0x81e9x174 = Math.min(100000 - _0x81e9x16 * 10, 10000);
	var _0x81e9x158 = getMachineType(_0x81e9x2bc);
	if (!_0x81e9x158) {
		return
	};
	if (!_0x81e9x158.isUsingEnergy()) {
		return
	};
	if (_0x81e9x158.isGenerator()) {
		return
	};
	var _0x81e9x2f2 = _0x81e9x158.getMaxEnergyStored();
	var _0x81e9x1a2 = _0x81e9x158.getEnergyStored(_0x81e9x2bc);
	_0x81e9x2bc.energyStored = Math.min(_0x81e9x1a2 + _0x81e9x174, _0x81e9x2f2);
	_0x81e9x174 = _0x81e9x2bc.energyStored - _0x81e9x1a2;
	ModPE.showTipMessage(ChatColor.RED + "energy transported: " + _0x81e9x174);
	_0x81e9x16 += Math.floor(_0x81e9x174 / 10);
	Entity.setCarriedItem(getPlayerEnt(), item_energy_crystal, 1, _0x81e9x16);
	PlaySoundFile("Tools/BatteryUse.ogg")
}

function TreetapLatexUse(_0x81e9x26, _0x81e9x27, _0x81e9x28, _0x81e9x191) {
	var _0x81e9x3d4 = 0;
	var _0x81e9x3d6 = 0;
	if (_0x81e9x191 == 0 || _0x81e9x191 == 1 || getTile(_0x81e9x26, _0x81e9x27, _0x81e9x28) != block_rubber_wood_with_latex) {
		return
	};
	if (_0x81e9x191 == 2) {
		_0x81e9x3d6--
	};
	if (_0x81e9x191 == 3) {
		_0x81e9x3d6++
	};
	if (_0x81e9x191 == 4) {
		_0x81e9x3d4--
	};
	if (_0x81e9x191 == 5) {
		_0x81e9x3d4++
	};
	var drop = Level.dropItem(_0x81e9x26 + (_0x81e9x3d4 + 1) / 2, _0x81e9x27 + 0.5, _0x81e9x28 + (_0x81e9x3d6 + 1) / 2, 1, item_latex, parseInt(1 + Math.random() * 3), 0);
	setVelX(drop, _0x81e9x3d4 / 2);
	setVelZ(drop, _0x81e9x3d6 / 2);
	setVelY(drop, 0);
	var _0x81e9x164 = item_treetap;
	var _0x81e9x13 = Player.getCarriedItemCount();
	var _0x81e9x16b = Player.getCarriedItemData();
	_0x81e9x16b += parseInt(Math.random() * 2 + 1);
	if (_0x81e9x16b > 17) {
		_0x81e9x13--
	};
	if (_0x81e9x13 < 1) {
		_0x81e9x164 = 0
	};
	Entity.setCarriedItem(getPlayerEnt(), _0x81e9x164, _0x81e9x13, _0x81e9x16b);
	setTile(_0x81e9x26, _0x81e9x27, _0x81e9x28, block_rubber_tree_wood);
	PlaySoundFile("Tools/Treetap.ogg")
}

function ScrabBoxUse() {
	var _0x81e9x5e2 = Math.PI / 180;
	var _0x81e9x9 = getPlayerEnt();
	var _0x81e9x2ee = Entity.getYaw(_0x81e9x9) * _0x81e9x5e2;
	var _0x81e9x2ef = Entity.getPitch(_0x81e9x9) * _0x81e9x5e2 * -1;
	var _0x81e9x3d4 = -Math.sin(_0x81e9x2ee) * Math.cos(_0x81e9x2ef) * 0.3;
	var _0x81e9x3d6 = Math.cos(_0x81e9x2ee) * Math.cos(_0x81e9x2ef) * 0.3;
	var _0x81e9x3d5 = Math.sin(_0x81e9x2ef) * 0.3;
	var _0x81e9x164 = getRecyclerItem();
	var drop = Level.dropItem(Entity.getX(_0x81e9x9), Entity.getY(_0x81e9x9), Entity.getZ(_0x81e9x9), 0, _0x81e9x164[0], 1, _0x81e9x164[1]);
	setVelX(drop, _0x81e9x3d4);
	setVelY(drop, _0x81e9x3d5);
	setVelZ(drop, _0x81e9x3d6);
	var _0x81e9x10 = item_scrab_box;
	var _0x81e9x13 = Player.getCarriedItemCount() - 1;
	if (_0x81e9x13 < 1) {
		_0x81e9x10 = 0
	};
	Entity.setCarriedItem(getPlayerEnt(), _0x81e9x10, _0x81e9x13, 0)
}

function ConstoneItemUse(_0x81e9x26, _0x81e9x27, _0x81e9x28, _0x81e9x10, _0x81e9x1b) {
	if (_0x81e9x10 == item_constone_spray) {
		clientMessage("§4" + translate("constone spray is not working in this version"))
	};
	if (_0x81e9x10 == 12 && _0x81e9x1b == block_liquid_constone) {
		preventDefault();
		DryConstone(_0x81e9x26, _0x81e9x27, _0x81e9x28);
		var _0x81e9x13 = Player.getCarriedItemCount() - 1;
		var _0x81e9x5e4 = _0x81e9x10;
		if (_0x81e9x13 < 1) {
			_0x81e9x5e4 = 0
		};
		Entity.setCarriedItem(getPlayerEnt(), _0x81e9x10, _0x81e9x13, 0)
	}
}

function getLiquidCell(_0x81e9x26, _0x81e9x27, _0x81e9x28) {
	var _0x81e9x10 = getCarriedItem();
	var _0x81e9x13 = Player.getCarriedItemCount();
	var _0x81e9x16 = Player.getCarriedItemData();
	if (!IsEmptyLiquidItem(_0x81e9x10, _0x81e9x16)) {
		return
	};
	var _0x81e9x193 = getTile(_0x81e9x26, _0x81e9x27, _0x81e9x28);
	var _0x81e9x16 = Level.getData(_0x81e9x26, _0x81e9x27, _0x81e9x28);
	var _0x81e9x204 = getLiquidByTile(_0x81e9x193);
	if (_0x81e9x10 == 325 && (_0x81e9x204 == 8 || _0x81e9x204 == 10)) {
		return
	};
	if (_0x81e9x16 == 0 && _0x81e9x204) {
		var _0x81e9x472 = GetFullItem(_0x81e9x10, _0x81e9x16, _0x81e9x204);
		if (_0x81e9x472) {
			setTile(_0x81e9x26, _0x81e9x27, _0x81e9x28, 0);
			updateNearbyOil(_0x81e9x26, _0x81e9x27, _0x81e9x28);
			if (Level.getGameMode() == 0) {
				if (_0x81e9x13 > 1) {
					setPlayerItem(_0x81e9x10, _0x81e9x13 - 1, _0x81e9x16);
					addItemInventory(_0x81e9x472[0], 1, _0x81e9x472[1])
				} else {
					setPlayerItem(_0x81e9x472[0], 1, _0x81e9x472[1])
				}
			}
		}
	}
}

function oilUseItem(_0x81e9x26, _0x81e9x27, _0x81e9x28, _0x81e9x10, _0x81e9x173, _0x81e9x191, _0x81e9x16) {
	if (_0x81e9x191 == 0) {
		_0x81e9x27--
	};
	if (_0x81e9x191 == 1) {
		_0x81e9x27++
	};
	if (_0x81e9x191 == 2) {
		_0x81e9x28--
	};
	if (_0x81e9x191 == 3) {
		_0x81e9x28++
	};
	if (_0x81e9x191 == 4) {
		_0x81e9x26--
	};
	if (_0x81e9x191 == 5) {
		_0x81e9x26++
	};
	if (IsEmptyLiquidItem(_0x81e9x10, 0)) {
		var _0x81e9x1b3 = getPlayerX();
		var _0x81e9x1b4 = getPlayerY();
		var _0x81e9x1b5 = getPlayerZ();
		var _0x81e9x1b0 = _0x81e9x26 - _0x81e9x1b3;
		var _0x81e9x1b1 = _0x81e9x27 - _0x81e9x1b4;
		var _0x81e9x1b2 = _0x81e9x28 - _0x81e9x1b5;
		var _0x81e9x15b = Math.sqrt(_0x81e9x1b0 * _0x81e9x1b0 + _0x81e9x1b1 * _0x81e9x1b1 + _0x81e9x1b2 * _0x81e9x1b2);
		_0x81e9x1b0 /= _0x81e9x15b;
		_0x81e9x1b1 /= _0x81e9x15b;
		_0x81e9x1b2 /= _0x81e9x15b;
		for (var i = 0; i < _0x81e9x15b; i += 0.1) {
			var _0x81e9x39a = parseIntCoord(_0x81e9x1b3 + _0x81e9x1b0 * i);
			var _0x81e9x449 = parseInt(_0x81e9x1b4 + _0x81e9x1b1 * i);
			var _0x81e9x39b = parseIntCoord(_0x81e9x1b5 + _0x81e9x1b2 * i);
			var _0x81e9x204 = getLiquidByTile(getTile(_0x81e9x39a, _0x81e9x449, _0x81e9x39b));
			if (_0x81e9x204 && Level.getData(_0x81e9x39a, _0x81e9x449, _0x81e9x39b) == 0) {
				getLiquidCell(_0x81e9x39a, _0x81e9x449, _0x81e9x39b);
				return
			}
		};
		getLiquidCell(_0x81e9x26, _0x81e9x27, _0x81e9x28)
	};
	if (_0x81e9x10 == item_oil_bucket) {
		putOilBucket(_0x81e9x26, _0x81e9x27, _0x81e9x28)
	}
}

function putOilBucket(_0x81e9x26, _0x81e9x27, _0x81e9x28) {
	setTile(_0x81e9x26, _0x81e9x27, _0x81e9x28, block_oil);
	addOilUpdate(_0x81e9x26, _0x81e9x27, _0x81e9x28, true);
	if (Level.getGameMode() == 0) {
		Entity.setCarriedItem(getPlayerEnt(), 325, 1, 0)
	}
}

function OilFlowBlockReplacement(_0x81e9x26, _0x81e9x27, _0x81e9x28, _0x81e9x191) {
	var _0x81e9x10 = getCarriedItem();
	var _0x81e9x13 = Player.getCarriedItemCount();
	var _0x81e9x16 = Player.getCarriedItemData();
	var _0x81e9x2c0 = getCoordsForSide(_0x81e9x26, _0x81e9x27, _0x81e9x28, _0x81e9x191);
	if (_0x81e9x10 < 256 && isOilBlock(getTile(_0x81e9x2c0.x, _0x81e9x2c0.y, _0x81e9x2c0.z))) {
		preventDefault();
		if (Level.getGameMode() != 1) {
			setPlayerItem(_0x81e9x10, _0x81e9x13 - 1, _0x81e9x16)
		};
		setTile(_0x81e9x2c0.x, _0x81e9x2c0.y, _0x81e9x2c0.z, _0x81e9x10, _0x81e9x16);
		updateNearbyOil(_0x81e9x2c0.x, _0x81e9x2c0.y, _0x81e9x2c0.z)
	}
}

function MeadEatHook(_0x81e9x5ea, _0x81e9x5eb) {
	if (Player.getCarriedItem() == item_mead_bottle) {
		Entity.addEffect(getPlayerEnt(), MobEffect.regeneration, 400, 2);
		Entity.addEffect(getPlayerEnt(), MobEffect.confusion, 300, 2);
		Entity.addEffect(getPlayerEnt(), MobEffect.blindness, 100, 1);
		addItemInventory(item_empty_bottle, 1, 0)
	}
}

function destroyBlockTool(_0x81e9x26, _0x81e9x27, _0x81e9x28) {
	itemid = Player.getCarriedItem();
	itemData = Player.getCarriedItemData();
	blockid = Level.getTile(_0x81e9x26, _0x81e9x27, _0x81e9x28);
	blockData = Level.getData(_0x81e9x26, _0x81e9x27, _0x81e9x28);
	if (drills[itemid] && itemData < Item.getMaxDamage(itemid)) {
		Entity.setCarriedItem(player, itemid, 1, itemData + 1);
		PlaySoundFile("Tools/Drill/DrillHard.ogg");
		if (blockid == 78) {
			drop(_0x81e9x26, _0x81e9x27, _0x81e9x28, 332, Math.floor(blockData / 4) + 1, 0)
		};
		if (blockid == 80) {
			drop(_0x81e9x26, _0x81e9x27, _0x81e9x28, 332, 4, 0)
		};
		pickaxeDrop(_0x81e9x26, _0x81e9x27, _0x81e9x28, drills[itemid][1] + 1, false, 0, 0);
		return
	};
	if (chainsaws[itemid] && itemData < Item.getMaxDamage(itemid)) {
		Entity.setCarriedItem(player, itemid, 1, itemData + 1);
		PlaySoundFile("Tools/Chainsaw/ChainsawUseOne.ogg");
		if (blockid == 18 || blockid == 161) {
			Level.destroyBlock(_0x81e9x26, _0x81e9x27, _0x81e9x28, true)
		};
		return
	};
	if (swords[itemid]) {
		ToolAPI.destroyItem(2, swords[itemid]);
		if (blockid == 30) {
			drop(_0x81e9x26, _0x81e9x27, _0x81e9x28, 287, 1)
		};
		return
	};
	if (shovels[itemid]) {
		ToolAPI.destroyItem(1, shovels[itemid][1]);
		if (blockid == 78) {
			drop(_0x81e9x26, _0x81e9x27, _0x81e9x28, 332, Math.floor(blockData / 4) + 1, 0)
		};
		if (blockid == 80) {
			drop(_0x81e9x26, _0x81e9x27, _0x81e9x28, 332, 4, 0)
		};
		return
	};
	if (axes[itemid]) {
		ToolAPI.destroyItem(1, axes[itemid][1]);
		return
	};
	if (pickaxes[itemid]) {
		ToolAPI.destroyItem(1, pickaxes[itemid][1]);
		pickaxeDrop(_0x81e9x26, _0x81e9x27, _0x81e9x28, pickaxes[itemid][2], true)
	}
}

function toolTick(_0x81e9x251) {
	var _0x81e9x157 = Player.getCarriedItemData();
	if (_0x81e9x251 == item_nano_saber) {
		if (_0x81e9x157 < 1999) {
			Entity.setCarriedItem(getPlayerEnt(), item_nano_saber, 1, _0x81e9x157 + 1)
		};
		return
	}
}
var ToolMaxDamage = ValidateIDData({
	item_drill: 300,
	item_chainsaw: 300
});
var ToolList = [item_drill, item_chainsaw];
var ToolMap = ValidateIDData({
	item_drill: [
		[1, 1.5, true],
		[4, 2, true],
		[14, 3, true],
		[15, 3, true],
		[16, 3, true],
		[21, 3, true],
		[56, 3, true],
		[2, 0.6, false],
		[3, 0.6, false],
		[60, 0.6],
		[73, 3, true],
		[74, 3, true],
		[129, 3, true],
		[41, 3, true],
		[42, 5, true],
		[57, 5, true],
		[133, 5, true],
		[173, 5, true],
		[61, 3, true],
		[62, 3, true],
		[98, 1.5, true],
		[112, 2, true],
		[87, 1, true],
		[114, 2, true],
		[104, 2, true],
		[45, 2, true],
		[108, 2, true],
		[109, 2, true],
		[48, 2, true],
		[49, 50, true],
		[12, 0.6],
		[13, 0.6],
		[24, 1.5, true],
		[block_uranium_ore, 2],
		[block_iridium_ore, 2],
		[block_blended_dust_ore, 2],
		[block_copper_ore, 2, true],
		[block_tin_ore, 2, true],
		[block_constone, 2],
		[67, 2, true],
		[128, 2, true],
		[139, 2, true],
		[155, 2, true],
		[156, 2, true],
		[block_hardened_block, 3, true],
		[153, 3, true],
		[121, 2, true],
		[75, 2, true],
		[52, 5],
		[101, 5, true],
		[159, 1.5, true],
		[172, 1.5, true],
		[245, 3.15, true],
		[247, 3.15, true],
		[246, 25, true],
		[44, 1.5, true],
		[43, 1.5, true]
	],
	item_chainsaw: [
		[17, 2, false],
		[18, 0.5, true],
		[54, 2.5],
		[58, 2.5],
		[64, 2.5],
		[35, 0.5],
		[5, 2, false],
		[161, 0.5, true],
		[162, 2],
		[163, 2],
		[164, 2],
		[134, 2],
		[135, 2],
		[136, 2],
		[85, 2],
		[53, 2],
		[107, 2],
		[block_rubber_tree_wood_active_block, 2],
		[block_rubber_tree_wood, 2],
		[block_rubber_tree_leaves, 0],
		[block_rubber_wood_with_latex, 2],
		[158, 2],
		[157, 2]
	]
});
var wasToolCarried = true;
var lastItemCarried = -1;
var lastToolCarried = -1;

function isTool(_0x81e9x10) {
	for (var i in ToolList) {
		if (ToolList[i] == _0x81e9x10) {
			return true
		}
	}
}

function setUpHardnessForTool(_0x81e9x10) {
	var blocks = ToolMap[_0x81e9x10];
	if (!blocks) {
		return
	};
	for (var i in blocks) {
		var _0x81e9x173 = blocks[i];
		Block.setDestroyTime(_0x81e9x173[0], _0x81e9x173[1] / 50)
	}
}

function resetHardnessForTool(_0x81e9x10) {
	var blocks = ToolMap[_0x81e9x10];
	if (!blocks) {
		return
	};
	for (var i in blocks) {
		var _0x81e9x173 = blocks[i];
		Block.setDestroyTime(_0x81e9x173[0], _0x81e9x173[1])
	}
}

function isToolUsable(_0x81e9x10, _0x81e9x16b) {
	if (!ToolMaxDamage[_0x81e9x10]) {
		return true
	};
	return _0x81e9x16b < ToolMaxDamage[_0x81e9x10] - 1
}

function damageCarriedTool() {
	var _0x81e9x5f9 = Player.getArmorSlot(1);
	var _0x81e9x5fa = Player.getArmorSlotDamage(1);
	var _0x81e9x10 = getCarriedItem();
	if (!isTool(_0x81e9x10)) {
		return
	};
	var _0x81e9x16 = Player.getCarriedItemData();
	if (!isToolUsable(_0x81e9x10, _0x81e9x16)) {
		return
	};
	_0x81e9x16++;
	Entity.setCarriedItem(getPlayerEnt(), _0x81e9x10, 1, _0x81e9x16)
}

function isGrowingPlantTile(_0x81e9x10) {
	return _0x81e9x10 == 59 || _0x81e9x10 == 105 || _0x81e9x10 == 104 || _0x81e9x10 == 115 || _0x81e9x10 == 141 || _0x81e9x10 == 142 || _0x81e9x10 == 244
}

function isGrassTile(_0x81e9x10) {
	return _0x81e9x10 == 31
}

function isGrassOrAirTile(_0x81e9x10) {
	return _0x81e9x10 == 0 || isGrassTile(_0x81e9x10)
}

function isDirtTile(_0x81e9x10) {
	return _0x81e9x10 == 2 || _0x81e9x10 == 3 || _0x81e9x10 == 60
}

function ElectricHoeItemUse(_0x81e9x26, _0x81e9x27, _0x81e9x28) {
	var _0x81e9x13 = Player.getCarriedItemCount();
	var _0x81e9x16 = Player.getCarriedItemData();
	while (isGrassTile(getTile(_0x81e9x26, _0x81e9x27, _0x81e9x28))) {
		_0x81e9x27--
	};
	if (isDirtTile(getTile(_0x81e9x26, _0x81e9x27, _0x81e9x28)) && _0x81e9x16 < 200) {
		ElectricHoeDirtUse(_0x81e9x26, _0x81e9x27, _0x81e9x28);
		Level.playSoundEnt(getPlayerEnt(), "step.gravel", 0.5, 0.75);
		_0x81e9x16++
	};
	if (isGrowingPlantTile(getTile(_0x81e9x26, _0x81e9x27, _0x81e9x28)) && _0x81e9x16 < 192) {
		if (ElectricHoePlantUse(_0x81e9x26, _0x81e9x27, _0x81e9x28)) {
			_0x81e9x16 += 8
		}
	};
	setPlayerItem(item_electric_hoe, _0x81e9x13, _0x81e9x16)
}

function ElectricHoeDirtUse(_0x81e9x26, _0x81e9x27, _0x81e9x28) {
	for (var _0x81e9x38a = _0x81e9x26 - 1; _0x81e9x38a < _0x81e9x26 + 2; _0x81e9x38a++) {
		for (var _0x81e9x38b = _0x81e9x28 - 1; _0x81e9x38b < _0x81e9x28 + 2; _0x81e9x38b++) {
			var _0x81e9x601 = getTile(_0x81e9x38a, _0x81e9x27, _0x81e9x38b);
			if (isGrassOrAirTile(_0x81e9x601) && isDirtTile(getTile(_0x81e9x38a, _0x81e9x27 - 1, _0x81e9x38b))) {
				setTile(_0x81e9x38a, _0x81e9x27, _0x81e9x38b, 3);
				_0x81e9x601 = 3
			};
			if (isTerrainTile(getTile(_0x81e9x38a, _0x81e9x27 + 1, _0x81e9x38b)) && !isTerrainTile(getTile(_0x81e9x38a, _0x81e9x27 + 2, _0x81e9x38b))) {
				setTile(_0x81e9x38a, _0x81e9x27 + 1, _0x81e9x38b, 0)
			};
			if (isDirtTile(_0x81e9x601)) {
				setTile(_0x81e9x38a, _0x81e9x27, _0x81e9x38b, 60, 1);
				if (isGrassTile(getTile(_0x81e9x38a, _0x81e9x27 + 1, _0x81e9x38b))) {
					setTile(_0x81e9x38a, _0x81e9x27 + 1, _0x81e9x38b, 0)
				}
			}
		}
	}
}

function ElectricHoePlantAcceleratorEntity(_0x81e9x26, _0x81e9x27, _0x81e9x28) {
	this.x = _0x81e9x26;
	this.y = _0x81e9x27;
	this.z = _0x81e9x28;
	this.age = 0;
	this.update = function() {
		Level.addParticle(31, this.x + Math.random() * 3 - 1.5, this.y + Math.random() * 0.7, this.z + Math.random() * 3 - 1.5, 0, 0.1, 0);
		if (this.age % 18 == 0) {
			var _0x81e9x2a0 = (this.age / 18) % 9;
			var _0x81e9x603 = Math.floor(this.x) - 1 + _0x81e9x2a0 % 3;
			var _0x81e9x604 = Math.floor(this.z) - 1 + parseInt(_0x81e9x2a0 / 3);
			var _0x81e9x605 = Math.floor(this.y);
			var _0x81e9x193 = getTile(_0x81e9x603, _0x81e9x605, _0x81e9x604);
			if (isGrowingPlantTile(_0x81e9x193)) {
				var _0x81e9x16 = Level.getData(_0x81e9x603, _0x81e9x605, _0x81e9x604);
				if (_0x81e9x16 < 7) {
					_0x81e9x16++
				};
				setTile(_0x81e9x603, _0x81e9x605, _0x81e9x604, _0x81e9x193, _0x81e9x16)
			}
		};
		this.age++;
		if (this.age > 600) {
			this.remove = true
		}
	}
}

function ElectricHoePlantUse(_0x81e9x26, _0x81e9x27, _0x81e9x28) {
	if (Level.getGameMode() == 1 || getLiquidBucketFromInventory(8)) {
		addEntityForUpdate(new ElectricHoePlantAcceleratorEntity(_0x81e9x26 + 0.5, _0x81e9x27 + 0.5, _0x81e9x28 + 0.5));
		return true
	} else {
		ModPE.showTipMessage("need water bucket or cell in inventory to accelerate plants")
	}
}

function ElectricTreetapLatexUse(_0x81e9x26, _0x81e9x27, _0x81e9x28, _0x81e9x191) {
	var _0x81e9x3d4 = 0;
	var _0x81e9x3d6 = 0;
	var _0x81e9x164 = getCarriedItem();
	var _0x81e9x13 = Player.getCarriedItemCount();
	var _0x81e9x16b = Player.getCarriedItemData();
	if (_0x81e9x191 == 0 || _0x81e9x191 == 1 || getTile(_0x81e9x26, _0x81e9x27, _0x81e9x28) != block_rubber_wood_with_latex) {
		return
	};
	if (_0x81e9x16b >= 100) {
		return
	};
	if (_0x81e9x191 == 2) {
		_0x81e9x3d6--
	};
	if (_0x81e9x191 == 3) {
		_0x81e9x3d6++
	};
	if (_0x81e9x191 == 4) {
		_0x81e9x3d4--
	};
	if (_0x81e9x191 == 5) {
		_0x81e9x3d4++
	};
	var drop = Level.dropItem(_0x81e9x26 + (_0x81e9x3d4 + 1) / 2, _0x81e9x27 + 0.5, _0x81e9x28 + (_0x81e9x3d6 + 1) / 2, 1, item_latex, parseInt(2 + Math.random() * 2), 0);
	setVelX(drop, _0x81e9x3d4 / 2);
	setVelZ(drop, _0x81e9x3d6 / 2);
	setVelY(drop, 0);
	_0x81e9x16b++;
	Entity.setCarriedItem(getPlayerEnt(), _0x81e9x164, _0x81e9x13, _0x81e9x16b);
	setTile(_0x81e9x26, _0x81e9x27, _0x81e9x28, block_rubber_tree_wood);
	PlaySoundFile("Tools/Treetap.ogg")
}

function DefineAllFzBees() {
	DefineBeeTypeItems([item_usual_queen, item_usual_drone], "usual", ["bee_usual_queen", "bee_usual_drone"], 1000);
	DefineBeeTypeItems([item_swamp_queen, item_swamp_drone], "swamp", ["bee_swamp_queen", "bee_swamp_drone"], 1000);
	DefineBeeTypeItems([item_hell_queen, item_hell_drone], "hell", ["bee_hell_queen", "bee_hell_drone"], 1000);
	DefineBeeTypeItems([item_tropical_queen, item_tropical_drone], "tropical", ["bee_tropical_queen", "bee_tropical_drone"], 1000);
	DefineBeeTypeItems([item_meadow_queen, item_meadow_drone], "meadow", ["bee_meadow_queen", "bee_meadow_drone"], 1000);
	DefineBeeTypeItems([item_wise_queen, item_wise_drone], "wise", ["bee_wise_queen", "bee_wise_drone"], 1000);
	DefineBeeTypeItems([item_precious_queen, item_precious_drone], "precious", ["bee_precious_queen", "bee_precious_drone"], 1000);
	DefineBeeTypeItems([item_legendary_queen, item_legendary_drone], "legendary", ["bee_legendary_queen", "bee_legendary_drone"], 5000);
	ModPE.setItem(item_honey_frame, "frame", 1, "honey frame", 1);
	ModPE.setItem(item_empty_frame, "frame", 0, "empty frame", 1);
	ModPE.setItem(item_cocoa_frame, "frame_cocoa", 0, "cocoa frame", 1);
	ModPE.setItem(item_swamp_frame, "frame_swamp", 0, "swamp frame", 1);
	ModPE.setItem(item_hell_frame, "frame_hell", 0, "hell frame", 1);
	ModPE.setItem(item_precious_frame, "frame_precious", 0, "precious frame", 1);
	ModPE.setItem(item_nano_frame_empty, "nano_frame_empty", 0, "empty nano frame", 1);
	ModPE.setItem(item_nano_frame_full, "nano_frame_full", 0, "full nano frame", 1);
	ModPE.setItem(item_diamond_shard, "diamond_shard", 0, "diamond shard");
	ModPE.setItem(item_matter_chunk, "matter_chunk", 0, "matter chunk");
	ModPE.setItem(item_essense_bottle, "essense_bottle", 0, "essense bottle");
	ModPE.setItem(item_honey_drop, "honey_dew", 0, "honey drop");
	ModPE.setFoodItem(item_honey_bread, "bread_honey", 0, 12, "honey bread");
	ModPE.setItem(item_bee_net, "beenet", 0, "bee net", 1);
	ModPE.setItem(item_condition_controller, "condition_controller", 0, "condition controller", 1);
	Item.setMaxDamage(item_condition_controller, 2000)
}

function DefineBeeTypeItems(_0x81e9x1a8, _0x81e9x17, _0x81e9x60a, _0x81e9x3e5, _0x81e9x60b) {
	if (!_0x81e9x60b) {
		_0x81e9x60b = [0, 0]
	};
	ModPE.setItem(_0x81e9x1a8[0], _0x81e9x60a[0], _0x81e9x60b[0], _0x81e9x17 + " queen", 1);
	ModPE.setItem(_0x81e9x1a8[1], _0x81e9x60a[1], _0x81e9x60b[1], _0x81e9x17 + " drone", 0);
	Item.setMaxDamage(_0x81e9x1a8[0], _0x81e9x3e5)
}
var globalWorldTime = 0;
var mainThreadWorldTime = 0;
var currentDimensionId = 0;
var LastSystemTimeEnd = 0;
var isGuiDisabled = false;

function FzModTick() {
	var _0x81e9x612 = java.lang.System.currentTimeMillis();
	FactAPI.InvokeCallback("modTick");
	if (globalWorldTime > 10) {
		if (!wasNewLevelCalled) {
			try {
				newLevel()
			} catch (e) {
				print("Error in mod loading: " + e)
			};
			wasNewLevelCalled = true
		};
		if (!Level.getSrcTime) {
			ModPE.showTipMessage(ChatColor.RED + translate("factorization disabled, reload world to enable"));
			return
		}
	};
	currentDimensionId = Player.getDimension();
	var _0x81e9x251 = getCarriedItem();
	tickAllMech();
	tickEntitiesForUpdate();
	var _0x81e9x613 = java.lang.System.currentTimeMillis();
	if (globalWorldTime % 4 == 1) {
		updateEnergyWebs()
	};
	globalWorldTime++;
	var _0x81e9x1bd = getTime();
	if (_0x81e9x1bd % 10 == 5) {
		toolTick(_0x81e9x251)
	};
	generateNumberOfChunks(1);
	if (globalWorldTime == 10) {
		generateNumberOfChunks(48)
	};
	oilTick();
	tickBindedMob(_0x81e9x251);
	if (_0x81e9x251 == item_wrench) {
		tickWrenchInfo()
	} else {
		setInfoText("")
	};
	if (_0x81e9x1bd % 500 == 0) {
		startAutoSave()
	};
	if (globalWorldTime % 40 == 0) {
		UpdateSoundPlayersVolume();
		if (_0x81e9x251 == item_steel_ingot) {
			TriggerAchievement("First machines")
		};
		if (WireDataByItem[_0x81e9x251] || _0x81e9x251 == item_copper_wire) {
			TriggerAchievement("Wire & energy")
		};
		if (_0x81e9x251 == item_coal_dust) {
			TriggerAchievement("Solars")
		}
	};
	CachedChestInventory = [];
	MultiplayerServer.MainThreadTick();
	var _0x81e9x614 = java.lang.System.currentTimeMillis();
	if (config_debug_enabled) {
		debug_average_tick_time.addTickTime("total", _0x81e9x614 - _0x81e9x612);
		debug_average_tick_time.addTickTime("machine", _0x81e9x613 - _0x81e9x612);
		var _0x81e9x615 = debug_average_tick_time.getTickTime("total");
		var _0x81e9x616 = debug_average_tick_time.getTickTime("machine");
		var _0x81e9x617 = FPSStabilizer.GetAvgTicksPerSec();
		ModPE.showTipMessage("§1[DEBUG]\n§2Full tick (time usage): §e" + _0x81e9x615 + "ms (" + parseInt(100 * _0x81e9x615 / (1000 / _0x81e9x617)) + "%)\n§2Machine tick: §e" + _0x81e9x616 + "ms\n§2One machine tick: §e" + parseInt(100 * _0x81e9x616 / debug_total_machine_count) / 100 + "ms\n§2Total machines: §e" + debug_total_machine_count + "\n§2Updating entities: §e" + EntitiesForUpdate.length + "\n§2Ticks per sec (thread stack): §e" + _0x81e9x617 + " (" + TickingThreadStack.length + ")");
		if (globalWorldTime % 40 == 0) {
			debug_average_tick_time.refresh("total", 40);
			debug_average_tick_time.refresh("machine", 40)
		}
	}
}
var LastTickSystemTime = 0;
var AvgTicksPerSec = 0;

function modTick() {
	var _0x81e9x61b = java.lang.System.currentTimeMillis();
	var _0x81e9x61c = _0x81e9x61b - LastTickSystemTime;
	if (LastTickSystemTime) {
		FPSStabilizer.ReportTickTime(_0x81e9x61c)
	};
	LastTickSystemTime = _0x81e9x61b;
	if (config_run_in_thread) {
		RunInTickingThread(FzModTick, mainThreadWorldTime++)
	} else {
		FzModTick();
		mainThreadWorldTime++
	};
	tickBeeEntities();
	checkAllMech();
	if (mainThreadWorldTime > 65) {
		updateQuantiumArmor()
	};
	TickMainThread();
	SafeLeaveMode.Tick()
}
var TickingThreadStack = [];
var MainThreadStack = [];
var TickingThread = null;
var MOD_THREAD = {
	StopThread: false
};

function RunInTickingThread(_0x81e9xd, _0x81e9x243) {
	TickingThreadStack.push([_0x81e9xd, _0x81e9x243]);
	if (!TickingThread) {
		TickingThread = new java.lang.Thread({
			run: function() {
				android.os.Process.setThreadPriority(parseInt(config_thread_priority));
				while (isInGame && !MOD_THREAD.StopThread) {
					var _0x81e9x1c2 = TickingThreadStack.shift();
					if (_0x81e9x1c2) {
						TickingThread.yield();
						globalWorldTime = _0x81e9x1c2[1];
						try {
							_0x81e9x1c2[0]()
						} catch (e) {
							if (e.message == "thread death") {
								print("thread death request: stopping thread");
								break
							} else {
								print("TICK ERROR: " + e)
							}
						}
					} else {
						TickingThread.yield()
					};
					var _0x81e9x622 = java.lang.System.currentTimeMillis() - LastTickSystemTime;
					if (_0x81e9x622 > 5000) {
						break
					}
				};
				TickingThread = null
			}
		});
		TickingThread.start()
	};
	return true
}

function TickMainThread() {
	while (MainThreadStack.length > 0) {
		var _0x81e9x1c2 = MainThreadStack.shift();
		if (_0x81e9x1c2) {
			_0x81e9x1c2()
		}
	}
}

function RunOnMainThread(_0x81e9xd) {
	MainThreadStack.push(_0x81e9xd)
}

function getTickingStackSize() {
	return TickingThreadStack.length
}

function throwThreadDeath() {
	throw new Error("thread death")
}

function stopThreadIfNotInGame() {
	if (!isInGame) {
		throwThreadDeath()
	}
}
var FPSStabilizer = {
	TickTimeSum: 0,
	TickTimeCurrent: 0,
	TickTimeCounter: 0,
	TickTimeAverage: 0,
	ReportTickTime: function(_0x81e9x1bd) {
		this.TickTimeCurrent = _0x81e9x1bd;
		this.TickTimeSum += _0x81e9x1bd;
		this.TickTimeCounter++;
		if (this.TickTimeCounter >= 20) {
			this.TickTimeAverage = this.TickTimeSum / this.TickTimeCounter;
			this.TickTimeCounter = this.TickTimeSum = 0
		}
	},
	GetAvgTicksPerSec: function() {
		return parseInt(1000 / this.TickTimeAverage)
	}
};

function onMachinePlaced(_0x81e9x26, _0x81e9x27, _0x81e9x28, _0x81e9x191, _0x81e9x10, _0x81e9x13, _0x81e9x16) {
	var _0x81e9x193 = getTile(_0x81e9x26, _0x81e9x27, _0x81e9x28);
	if (!isReplacableTile(_0x81e9x193)) {
		var _0x81e9x2c0 = getCoordsForSide(_0x81e9x26, _0x81e9x27, _0x81e9x28, _0x81e9x191)
	} else {
		var _0x81e9x2c0 = new Coords(_0x81e9x26, _0x81e9x27, _0x81e9x28)
	};
	_0x81e9x193 = getTile(_0x81e9x2c0.x, _0x81e9x2c0.y, _0x81e9x2c0.z);
	if (isReplacableTile(_0x81e9x193)) {
		setTile(_0x81e9x2c0.x, _0x81e9x2c0.y, _0x81e9x2c0.z, _0x81e9x10, _0x81e9x16);
		updateNearbyOil(_0x81e9x2c0.x, _0x81e9x2c0.y, _0x81e9x2c0.z);
		activateMachine(_0x81e9x2c0.x, _0x81e9x2c0.y, _0x81e9x2c0.z);
		if (Level.getGameMode() != 1) {
			_0x81e9x13--
		};
		setPlayerItem(_0x81e9x10, _0x81e9x13, Player.getCarriedItemData());
		Level.playSoundEnt(getPlayerEnt(), "step.stone", 1, 1);
		if (_0x81e9x10 == block_filter_pipe) {
			WireAndPipeData[_0x81e9x2c0.x + "," + _0x81e9x2c0.y + "," + _0x81e9x2c0.z] = block_filter_pipe
		};
		registerPipeChange();
		registerReceiverChange()
	};
	if (_0x81e9x10 == block_macerator) {
		TriggerAchievement("Macerator")
	};
	preventDefault()
}
var itemsToPutOn = {};

function onPipeItemUse(_0x81e9x26, _0x81e9x27, _0x81e9x28, _0x81e9x191, _0x81e9x10, _0x81e9x13, _0x81e9x16) {
	var _0x81e9x193 = getTile(_0x81e9x26, _0x81e9x27, _0x81e9x28);
	if (!isReplacableTile(_0x81e9x193)) {
		var _0x81e9x2c0 = getCoordsForSide(_0x81e9x26, _0x81e9x27, _0x81e9x28, _0x81e9x191)
	} else {
		var _0x81e9x2c0 = new Coords(_0x81e9x26, _0x81e9x27, _0x81e9x28)
	};
	_0x81e9x193 = getTile(_0x81e9x2c0.x, _0x81e9x2c0.y, _0x81e9x2c0.z);
	if (isReplacableTile(_0x81e9x193)) {
		setTile(_0x81e9x2c0.x, _0x81e9x2c0.y, _0x81e9x2c0.z, block_transporting_pipe, _0x81e9x16);
		updateNearbyOil(_0x81e9x2c0.x, _0x81e9x2c0.y, _0x81e9x2c0.z);
		WireAndPipeData[_0x81e9x2c0.x + "," + _0x81e9x2c0.y + "," + _0x81e9x2c0.z] = block_transporting_pipe;
		registerPipeChange();
		registerReceiverChange();
		Level.playSoundEnt(getPlayerEnt(), "step.stone", 1, 1);
		if (Level.getGameMode() != 1) {
			setPlayerItem(_0x81e9x10, _0x81e9x13 - 1, _0x81e9x16)
		}
	};
	preventDefault()
}

function onWireItemUse(_0x81e9x26, _0x81e9x27, _0x81e9x28, _0x81e9x191, _0x81e9x10, _0x81e9x13, _0x81e9x16) {
	var _0x81e9x193 = getTile(_0x81e9x26, _0x81e9x27, _0x81e9x28);
	if (!isReplacableTile(_0x81e9x193)) {
		var _0x81e9x2c0 = getCoordsForSide(_0x81e9x26, _0x81e9x27, _0x81e9x28, _0x81e9x191)
	} else {
		var _0x81e9x2c0 = new Coords(_0x81e9x26, _0x81e9x27, _0x81e9x28)
	};
	_0x81e9x193 = getTile(_0x81e9x2c0.x, _0x81e9x2c0.y, _0x81e9x2c0.z);
	if (isReplacableTile(_0x81e9x193)) {
		setTile(_0x81e9x2c0.x, _0x81e9x2c0.y, _0x81e9x2c0.z, block_wire, _0x81e9x16);
		updateNearbyOil(_0x81e9x2c0.x, _0x81e9x2c0.y, _0x81e9x2c0.z);
		WireAndPipeData[_0x81e9x2c0.x + "," + _0x81e9x2c0.y + "," + _0x81e9x2c0.z] = block_wire;
		registerWireChange();
		Level.playSoundEnt(getPlayerEnt(), "step.stone", 1, 1);
		if (Level.getGameMode() != 1) {
			setPlayerItem(_0x81e9x10, _0x81e9x13 - 1, _0x81e9x16)
		}
	};
	preventDefault()
}

function setPlayerItem(_0x81e9x10, _0x81e9x15a, _0x81e9x15b) {
	if (_0x81e9x10 < 1) {
		_0x81e9x15a = 0;
		_0x81e9x15b = 0
	};
	if (_0x81e9x15a < 1) {
		_0x81e9x10 = 0;
		_0x81e9x15b = 0
	};
	Entity.setCarriedItem(getPlayerEnt(), _0x81e9x10, _0x81e9x15a, _0x81e9x15b)
}

function VoltmeterItemTap(_0x81e9x26, _0x81e9x27, _0x81e9x28) {
	var _0x81e9x2bc = getMachine(_0x81e9x26, _0x81e9x27, _0x81e9x28);
	var _0x81e9x163 = _0x81e9x26 + "," + _0x81e9x27 + "," + _0x81e9x28;
	if (_0x81e9x2bc) {
		if (_0x81e9x2bc.webObj) {
			clientMessage(parseInt(_0x81e9x2bc.webObj.lastVoltage) + "V");
			return true
		}
	} else {
		for (var i in EnergyWebList) {
			var _0x81e9x304 = EnergyWebList[i];
			for (var _0x81e9x19 in _0x81e9x304.WireMap) {
				for (var _0x81e9x1c8 in _0x81e9x304.WireMap[_0x81e9x19]) {
					if (_0x81e9x304.WireMap[_0x81e9x19][_0x81e9x1c8] == _0x81e9x163) {
						clientMessage(parseInt(_0x81e9x304.lastVoltage) + "V");
						return true
					}
				}
			}
		}
	}
}

function getMetadataByPlayerYaw() {
	var _0x81e9x2ee = Math.floor((Entity.getYaw(getPlayerEnt()) - 45) / 90);
	while (_0x81e9x2ee < 0) {
		_0x81e9x2ee += 4
	};
	var _0x81e9x630 = _0x81e9x2ee % 4;
	var _0x81e9x1a = ({
		0: 2,
		1: 0,
		2: 3,
		3: 1
	})[_0x81e9x630];
	return _0x81e9x1a
}
var VanilaGUIBlocks = {
	54: true,
	58: true,
	61: true,
	62: true,
	64: true,
	62: true,
	96: true,
	107: true,
	245: true,
	247: true
};
var WireItemsByData = {
	0: item_copper_wire,
	1: item_crystal_wire,
	2: item_golden_wire,
	3: item_steel_wire,
	4: item_super_conductor
};
var WireDataByItem = ValidateIDData({
	item_copper_wire: 0,
	item_crystal_wire: 1,
	item_golden_wire: 2,
	item_steel_wire: 3,
	item_super_conductor: 4
});

function useItem(_0x81e9x26, _0x81e9x27, _0x81e9x28, _0x81e9x10, _0x81e9x1b, _0x81e9x191) {
	if (_0x81e9x26 != Player.getPointedBlockX() || _0x81e9x27 != Player.getPointedBlockY() || _0x81e9x28 != Player.getPointedBlockZ()) {
		return
	};
	_0x81e9x1b = getTile(_0x81e9x26, _0x81e9x27, _0x81e9x28);
	_0x81e9x10 = getCarriedItem();
	var _0x81e9x13 = Player.getCarriedItemCount();
	var _0x81e9x16 = Player.getCarriedItemData();
	FactAPI.InvokeCallback("useItem", _0x81e9x26, _0x81e9x27, _0x81e9x28, _0x81e9x10, _0x81e9x1b, _0x81e9x191, _0x81e9x16, _0x81e9x13);
	ToolAPI_useItem(_0x81e9x26, _0x81e9x27, _0x81e9x28, _0x81e9x10, _0x81e9x1b, _0x81e9x191, _0x81e9x16, _0x81e9x13);
	if (_0x81e9x10 == 54) {
		registerReceiverChange()
	};
	if (_0x81e9x10 == 278) {
		CreateTextAnimation(_0x81e9x26, _0x81e9x27 + 2, _0x81e9x28, "Hello World!")
	};
	if (_0x81e9x10 == item_guide_book) {
		preventDefault();
		GuideBookUI.OpenBook();
		return
	};
	if ((_0x81e9x1b == 2 || _0x81e9x1b == 3 || _0x81e9x1b == 60) && _0x81e9x10 == item_rubber_tree_sapling && getTile(_0x81e9x26, _0x81e9x27 + 1, _0x81e9x28) == 0) {
		if (Level.getGameMode() != 1) {
			setPlayerItem(_0x81e9x10, Player.getCarriedItemCount() - 1, 0)
		};
		setTile(_0x81e9x26, _0x81e9x27 + 1, _0x81e9x28, block_rubber_tree_sappling);
		activateMachine(_0x81e9x26, _0x81e9x27 + 1, _0x81e9x28)
	};
	if (_0x81e9x10 == item_ec_meter && VoltmeterItemTap(_0x81e9x26, _0x81e9x27, _0x81e9x28)) {
		preventDefault();
		return
	};
	if (_0x81e9x10 != item_wrench && _0x81e9x1b == block_assembler) {
		var _0x81e9x2bc = getMachine(_0x81e9x26, _0x81e9x27, _0x81e9x28);
		if (!_0x81e9x2bc) {
			return
		};
		var _0x81e9x2b3 = getMachineType(_0x81e9x2bc);
		_0x81e9x2b3.itemClick(_0x81e9x2bc, _0x81e9x10, _0x81e9x16, _0x81e9x191);
		_0x81e9x2b3.tryOpenGUI(_0x81e9x2bc);
		return
	};
	if (_0x81e9x1b == block_wild_hive && !getMachine(_0x81e9x26, _0x81e9x27, _0x81e9x28)) {
		preventDefault();
		activateMachine(_0x81e9x26, _0x81e9x27, _0x81e9x28)
	};
	if (_0x81e9x10 == item_battery && isMachine(_0x81e9x1b)) {
		var _0x81e9x2bc = getMachine(_0x81e9x26, _0x81e9x27, _0x81e9x28);
		if (!_0x81e9x2bc) {
			clientMessage("not activated!");
			return
		};
		batteryItemClick(_0x81e9x2bc);
		return
	};
	if (_0x81e9x10 == item_energy_crystal && isMachine(_0x81e9x1b)) {
		var _0x81e9x2bc = getMachine(_0x81e9x26, _0x81e9x27, _0x81e9x28);
		if (!_0x81e9x2bc) {
			clientMessage("not activated!");
			return
		};
		EnergyCrystalClick(_0x81e9x2bc);
		return
	};
	if (isMachine(_0x81e9x1b) && !(_0x81e9x10 == item_wrench || _0x81e9x10 == item_battery || _0x81e9x10 == 503) && !Entity.isSneaking(getPlayerEnt())) {
		var _0x81e9x635 = getMachine(_0x81e9x26, _0x81e9x27, _0x81e9x28);
		if (_0x81e9x635) {
			var _0x81e9x636 = getMachineType(_0x81e9x635);
			if (!(_0x81e9x1b == block_barrel && barrel_itemTap(_0x81e9x635, _0x81e9x10, _0x81e9x16))) {
				if (_0x81e9x636 && _0x81e9x636.tryOpenGUI(_0x81e9x635)) {
					preventDefault();
					return
				}
			}
		}
	};
	if (isMachine(_0x81e9x10) && (!VanilaGUIBlocks[_0x81e9x1b] || Entity.isSneaking(getPlayerEnt()))) {
		var _0x81e9x1a = getMetadataByPlayerYaw();
		if (block6SideMachine[_0x81e9x10]) {
			_0x81e9x1a = _0x81e9x191
		};
		_0x81e9x1a = getMetadataByPlayerYaw();
		onMachinePlaced(_0x81e9x26, _0x81e9x27, _0x81e9x28, _0x81e9x191, _0x81e9x10, _0x81e9x13, _0x81e9x1a)
	};
	if (_0x81e9x10 == 331) {
		activateMachine(_0x81e9x26, _0x81e9x27, _0x81e9x28)
	};
	if (_0x81e9x10 == item_scrab_box) {
		ScrabBoxUse()
	};
	if (_0x81e9x10 == item_wrench && _0x81e9x1b == block_valve_pipe) {
		var _0x81e9x637 = parseInt(Level.getData(_0x81e9x26, _0x81e9x27, _0x81e9x28));
		setTile(_0x81e9x26, _0x81e9x27, _0x81e9x28, _0x81e9x1b, (_0x81e9x637 + 1) % 6)
	};
	if (_0x81e9x10 == item_wrench && isMachine(_0x81e9x1b)) {
		var _0x81e9x197 = getMachine(_0x81e9x26, _0x81e9x27, _0x81e9x28);
		if (!_0x81e9x197) {
			clientMessage("not activated!");
			return
		};
		var _0x81e9x158 = getMachineType(_0x81e9x197);
		if (!_0x81e9x158) {
			clientMessage("§4[Error] no machine type found");
			return
		};
		_0x81e9x158.wrenchClick(_0x81e9x197);
		if (_0x81e9x191 > 1) {
			setTile(_0x81e9x26, _0x81e9x27, _0x81e9x28, _0x81e9x1b, {
				2: 1,
				3: 0,
				4: 3,
				5: 2
			} [_0x81e9x191])
		};
		if (block6SideMachine[_0x81e9x1b]) {
			setTile(_0x81e9x26, _0x81e9x27, _0x81e9x28, _0x81e9x1b, _0x81e9x191)
		};
		if (_0x81e9x158.isUsingEnergy()) {
			clientMessage("stored energy: " + parseInt(_0x81e9x158.getEnergyStored(_0x81e9x197)) + "/" + _0x81e9x158.getMaxEnergyStored())
		};
		if (_0x81e9x197.webObj) {
			clientMessage(ChatColor.GREEN + "web: gens=" + _0x81e9x197.webObj.generators.length + " machines=" + _0x81e9x197.webObj.machines.length)
		}
	};
	if (_0x81e9x10 == item_teleport_accesser && _0x81e9x1b == block_teleporter) {
		var _0x81e9x2bc = getMachine(_0x81e9x26, _0x81e9x27, _0x81e9x28);
		if (!_0x81e9x2bc) {
			clientMessage("not activated!");
			return
		};
		var _0x81e9x158 = getMachineType(_0x81e9x2bc);
		_0x81e9x158.teleportEntity(getPlayerEnt(), _0x81e9x2bc)
	};
	if (_0x81e9x1b == block_rubber_tree_sappling && _0x81e9x10 == 351 && _0x81e9x16 == 15) {
		var _0x81e9x199 = getMachine(_0x81e9x26, _0x81e9x27, _0x81e9x28);
		if (_0x81e9x199) {
			_0x81e9x199.age += Math.random() * 6000;
			animateCoords(ParticleType.cloud, _0x81e9x26, _0x81e9x27, _0x81e9x28);
			if (Level.getGameMode() != 1) {
				setPlayerItem(351, _0x81e9x13 - 1, 15)
			}
		}
	};
	if (_0x81e9x1b == block_rubber_wood_with_latex) {
		if (_0x81e9x10 == item_treetap) {
			TreetapLatexUse(_0x81e9x26, _0x81e9x27, _0x81e9x28, _0x81e9x191)
		};
		if (_0x81e9x10 == item_electric_treetap) {
			ElectricTreetapLatexUse(_0x81e9x26, _0x81e9x27, _0x81e9x28, _0x81e9x191)
		}
	};
	if (_0x81e9x10 == item_electric_hoe) {
		ElectricHoeItemUse(_0x81e9x26, _0x81e9x27, _0x81e9x28)
	};
	if (WireDataByItem[_0x81e9x10] >= 0 && !VanilaGUIBlocks[_0x81e9x1b]) {
		onWireItemUse(_0x81e9x26, _0x81e9x27, _0x81e9x28, _0x81e9x191, _0x81e9x10, _0x81e9x13, WireDataByItem[_0x81e9x10])
	};
	if (_0x81e9x10 == block_transporting_pipe && !VanilaGUIBlocks[_0x81e9x1b]) {
		onPipeItemUse(_0x81e9x26, _0x81e9x27, _0x81e9x28, _0x81e9x191, _0x81e9x10, _0x81e9x13, _0x81e9x16)
	};
	if (_0x81e9x10 == item_mining_laser) {
		var _0x81e9x16 = Player.getCarriedItemData();
		if (_0x81e9x16 < 975) {
			LaserShot();
			_0x81e9x16 = Math.min(1000, _0x81e9x16 + 25);
			Entity.setCarriedItem(getPlayerEnt(), _0x81e9x10, 1, _0x81e9x16)
		}
	};
	if (_0x81e9x10 == block_valve_pipe) {
		ModPE.showTipMessage("§e" + translate("use wrench to rotate"))
	};
	if (_0x81e9x10 == item_bee_spawn_egg) {
		if (Level.getGameMode() != 1) {
			setPlayerItem(_0x81e9x10, _0x81e9x13 - 1, _0x81e9x16)
		};
		addBeeEntity(_0x81e9x26 + 0.5, _0x81e9x27 + 2.5, _0x81e9x28 + 0.5, true)
	};
	oilUseItem(_0x81e9x26, _0x81e9x27, _0x81e9x28, _0x81e9x10, _0x81e9x1b, _0x81e9x191);
	if (_0x81e9x1b == 61 || _0x81e9x1b == 62) {
		TriggerAchievement("Steel ingots")
	};
	if (_0x81e9x10 < 256) {
		OilFlowBlockReplacement(_0x81e9x26, _0x81e9x27, _0x81e9x28, _0x81e9x191);
		TransportingCache.reset()
	}
}
var wasNewLevelCalled = false;

function FullItemAndBlockDefinition(_0x81e9x63a) {
	defineAllFzBlocks();
	defineAllFzMachines();
	defineAllFzItems();
	if (!FactAPI) {
		return
	};
	FactAPI.DefineAddonBlocks();
	FactAPI.DefineAddonItems();
	UnlimitedAPI.ExecuteAllDefines();
	if (!_0x81e9x63a) {
		AddAllCreativeItems();
		AddAllNativeRecipes();
		addAllFzFurnaceRecipes()
	}
}

function TryGiveGuideBook() {
	RunOnMainThread(function() {
		var _0x81e9x63c = "guidegiven_" + Level.getWorldDir();
		if (!FLAG.get(_0x81e9x63c)) {
			addItemInventory(item_guide_book, 1, 0);
			clientMessage(GuideBookUI.FormatText(translate(start_menu_text_data.guide_book_en), 32), "guide book");
			FLAG.set(_0x81e9x63c)
		}
	})
}

function newLevel() {
	ReadMcOptions();
	OptionReader.Init();
	AchievementDataSaver.Read();
	currentDimensionId = Player.getDimension();
	TryGiveGuideBook();
	HideStartMenuOpenButton();
	HideOfficialPageButton();
	resetAllIngameValues();
	isInGame = true;
	TranslateAllNamesToCurLang();
	clientMessage(ChatColor.GREEN + "[BUILD] Factorization 5.2 beta");
	initContainerGUI();
	eh_clear();
	setPlayerCape();
	DataSaver.Reset();
	readAllSaves();
	LaunchServer();
	FactAPI.LoadAddonConfig();
	FactAPI.InvokeCallback("LevelLoaded");
	FactAPI.addonInfo();
	ShowSafeLeaveButton();
	GuideBookGiveGUI.Show();
	GlobalStatsClient.OnStartedPlaying();
	if (config_debug_enabled) {
		ShowIDConflicts()
	};
	TriggerAchievement("Start playing");
	player = getPlayerEnt();
	isInGame = true;
	MOD_THREAD.StopThread = false;
	wasNewLevelCalled = true
}

function attackHook(_0x81e9x1c7, _0x81e9x26a) {
	var _0x81e9x251 = getCarriedItem();
	beeAttackHook(_0x81e9x1c7, _0x81e9x26a);
	if (Entity.getEntityTypeId(_0x81e9x26a) == 64 || Entity.getHealth(_0x81e9x26a) < 1 || Entity.getHealth(_0x81e9x26a) > 1000) {
		preventDefault();
		return
	};
	if (_0x81e9x251 == item_leash) {
		currentMobBind = new MobBindToPlayer(_0x81e9x1c7, _0x81e9x26a);
		preventDefault()
	};
	ToolAPI_attackHook(_0x81e9x1c7, _0x81e9x26a);
	FactAPI.InvokeCallback("OnAttacked", _0x81e9x1c7, _0x81e9x26a)
}

function destroyBlock(_0x81e9x26, _0x81e9x27, _0x81e9x28) {
	oilDestroyBlock(_0x81e9x26, _0x81e9x27, _0x81e9x28);
	destroyBlockTool(_0x81e9x26, _0x81e9x27, _0x81e9x28);
	destroyBlock_ore(_0x81e9x26, _0x81e9x27, _0x81e9x28);
	destroyBlock_rubberTree(_0x81e9x26, _0x81e9x27, _0x81e9x28);
	RunOnMainThread(function() {
		removeMachine(_0x81e9x26, _0x81e9x27, _0x81e9x28)
	});
	var _0x81e9x193 = getTile(_0x81e9x26, _0x81e9x27, _0x81e9x28);
	var _0x81e9x1d = Level.getData(_0x81e9x26, _0x81e9x27, _0x81e9x28);
	var _0x81e9x640 = ToolAPI.getMiningLevel();
	FactAPI.InvokeCallback("BlockDestroy", _0x81e9x26, _0x81e9x27, _0x81e9x28);
	if (_0x81e9x193 == block_wire) {
		var _0x81e9x641 = WireItemsByData[_0x81e9x1d];
		Level.destroyBlock(_0x81e9x26, _0x81e9x27, _0x81e9x28);
		preventDefault();
		if (_0x81e9x641) {
			Level.dropItem(_0x81e9x26 + 0.51, _0x81e9x27 + 0.51, _0x81e9x28 + 0.51, 1, _0x81e9x641, 1, 0)
		};
		wpdOnChange(_0x81e9x26 + "," + _0x81e9x27 + "," + _0x81e9x28);
		return
	};
	if (_0x81e9x193 == block_transporting_pipe) {
		wpdOnChange(_0x81e9x26 + "," + _0x81e9x27 + "," + _0x81e9x28)
	};
	var _0x81e9x642 = UnlimitedAPI.GetCustomDropFunc(_0x81e9x193);
	if (_0x81e9x642) {
		var drop = _0x81e9x642(_0x81e9x26, _0x81e9x27, _0x81e9x28, _0x81e9x193, _0x81e9x1d, _0x81e9x640);
		for (var i in drop) {
			Level.dropItem(_0x81e9x26 + 0.5, _0x81e9x27 + 0.5, _0x81e9x28 + 0.5, 1, drop[i][0] || 0, drop[i][1] || 1, drop[i][2] || 0)
		};
		Level.destroyBlock(_0x81e9x26, _0x81e9x27, _0x81e9x28);
		preventDefault();
		return
	};
	TransportingCache.reset()
}

function destroyBlock_ore(_0x81e9x26, _0x81e9x27, _0x81e9x28) {
	var _0x81e9x251 = getCarriedItem();
	var _0x81e9x10 = getTile(_0x81e9x26, _0x81e9x27, _0x81e9x28);
	if (_0x81e9x10 == block_uranium_ore || _0x81e9x10 == block_iridium_ore || _0x81e9x10 == block_blended_dust_ore) {
		Level.destroyBlock(_0x81e9x26, _0x81e9x27, _0x81e9x28, false);
		preventDefault()
	};
	var drop = [];
	if (_0x81e9x251 == item_drill || _0x81e9x251 == 278 || _0x81e9x251 == 257) {
		if (_0x81e9x10 == block_uranium_ore) {
			drop.push([item_uranium, 0]);
			if (Math.random() < 0.5) {
				drop.push([item_dust_iron, 0])
			}
		};
		if (_0x81e9x10 == block_iridium_ore) {
			drop.push([item_iridium_chunk, 0]);
			if (Math.random() < 0.5) {
				drop.push([item_dust_gold, 0])
			}
		};
		if (_0x81e9x10 == block_blended_dust_ore) {
			for (var i = 0; i < Math.random() * 3; i++) {
				drop.push([item_dust_iron, 0])
			};
			for (var i = 0; i < Math.random() * 2; i++) {
				drop.push([item_dust_gold, 0])
			};
			for (var i = 0; i < Math.random() * 3; i++) {
				drop.push([item_dust_tin, 0])
			};
			for (var i = 0; i < Math.random() * 4; i++) {
				drop.push([item_dust_copper, 0])
			};
			for (var i = 0; i < Math.random() * 6; i++) {
				drop.push([331, 0])
			};
			for (var i = 1; i < Math.random() * Math.random() * 1.5; i++) {
				drop.push([item_uranium, 0])
			};
			for (var i = 1; i < Math.random() * Math.random() * 3.5; i++) {
				drop.push([351, 4])
			}
		}
	};
	for (var i in drop) {
		Level.dropItem(_0x81e9x26 + 0.5, _0x81e9x27 + 0.5, _0x81e9x28 + 0.5, 1, drop[i][0], 1, drop[i][1])
	}
}

function destroyBlock_rubberTree(_0x81e9x26, _0x81e9x27, _0x81e9x28, _0x81e9x379) {
	var _0x81e9x10 = getTile(_0x81e9x26, _0x81e9x27, _0x81e9x28);
	if (_0x81e9x10 == block_rubber_tree_wood || _0x81e9x10 == block_rubber_wood_with_latex || _0x81e9x10 == block_rubber_tree_wood_active_block) {
		TriggerAchievement("Rubber tree");
		preventDefault();
		Level.destroyBlock(_0x81e9x26, _0x81e9x27, _0x81e9x28);
		if (_0x81e9x10 == block_rubber_wood_with_latex) {
			for (var i = 0; i < Math.random() * 2; i++) {
				var _0x81e9x15b = Level.dropItem(_0x81e9x26 + 0.5, _0x81e9x27 + 0.5, _0x81e9x28 + 0.5, 0, item_latex, 1, 0);
				setVelY(_0x81e9x15b, 0)
			}
		};
		Level.dropItem(_0x81e9x26 + 0.5, _0x81e9x27 + 0.5, _0x81e9x28 + 0.5, 0, block_rubber_tree_wood, 1, 0);
		if (!_0x81e9x379) {
			wipeHeveaLeaves(_0x81e9x26, _0x81e9x27, _0x81e9x28)
		}
	};
	if (_0x81e9x10 == block_rubber_tree_leaves) {
		preventDefault();
		Level.destroyBlock(_0x81e9x26, _0x81e9x27, _0x81e9x28);
		if (Math.random() * 24 < 1) {
			var _0x81e9x15b = Level.dropItem(_0x81e9x26 + 0.5, _0x81e9x27 + 0.5, _0x81e9x28 + 0.5, 0, item_rubber_tree_sapling, 1, 0);
			setVelX(_0x81e9x15b, 0);
			setVelY(_0x81e9x15b, 0);
			setVelZ(_0x81e9x15b, 0)
		}
	};
	if (_0x81e9x10 == block_wild_hive) {
		preventDefault();
		Level.destroyBlock(_0x81e9x26, _0x81e9x27, _0x81e9x28)
	};
	if (_0x81e9x10 == block_rubber_tree_sappling) {
		preventDefault();
		Level.destroyBlock(_0x81e9x26, _0x81e9x27, _0x81e9x28)
	}
}

function oilDestroyBlock(_0x81e9x26, _0x81e9x27, _0x81e9x28) {
	updateNearbyOil(_0x81e9x26, _0x81e9x27, _0x81e9x28)
}

function startDestroyBlock(_0x81e9x26, _0x81e9x27, _0x81e9x28, _0x81e9x191) {
	var itemid = Player.getCarriedItem();
	var itemData = Player.getCarriedItemData();
	var blockid = getTile(_0x81e9x26, _0x81e9x27, _0x81e9x28);
	var _0x81e9x647 = getTile_origin(_0x81e9x26, _0x81e9x27, _0x81e9x28);
	var _0x81e9x1bd = blocks[_0x81e9x647];
	FactAPI.InvokeCallback("StartDestroyBlock", _0x81e9x26, _0x81e9x27, _0x81e9x28, _0x81e9x191);
	if (drills[itemid] && itemData < Item.getMaxDamage(itemid)) {
		var _0x81e9x1c8 = drills[itemid][0];
		if (pickBlocks1.indexOf(blockid) !== -1 || pickBlocks2.indexOf(blockid) !== -1) {
			Block.setDestroyTime(_0x81e9x647, _0x81e9x1bd / _0x81e9x1c8);
			if (blockid == 73) {
				Block.setDestroyTime(74, _0x81e9x1bd / _0x81e9x1c8)
			};
			return
		};
		if (blockid == 49 && drills[itemid][1] == 2) {
			Block.setDestroyTime(49, _0x81e9x1bd / _0x81e9x1c8);
			return
		};
		if (shovelBlocks.indexOf(blockid) !== -1) {
			Block.setDestroyTime(_0x81e9x647, _0x81e9x1bd / _0x81e9x1c8 * 2);
			return
		}
	};
	if (chainsaws[itemid] && itemData < Item.getMaxDamage(itemid)) {
		if (axeBlocks.indexOf(blockid) !== -1) {
			Block.setDestroyTime(_0x81e9x647, _0x81e9x1bd / chainsaws[itemid][0]);
			return
		};
		if (blockid == 30) {
			Block.setDestroyTime(30, 0);
			return
		};
		if (swordBlocks.indexOf(blockid) !== -1) {
			Block.setDestroyTime(_0x81e9x647, 0);
			return
		}
	};
	if (swords[itemid]) {
		if (blockid == 30) {
			Block.setDestroyTime(30, 0.08);
			return
		};
		if (swordBlocks.indexOf(blockid) !== -1) {
			Block.setDestroyTime(_0x81e9x647, _0x81e9x1bd / 1.5);
			return
		}
	};
	if (pickaxes[itemid]) {
		var _0x81e9x1c8 = getSpeed(pickaxes[itemid][0]);
		if (pickBlocks1.indexOf(blockid) !== -1) {
			Block.setDestroyTime(_0x81e9x647, _0x81e9x1bd / _0x81e9x1c8);
			return
		};
		if (pickaxes[itemid][2] >= 2 && pickBlocks2.indexOf(blockid) !== -1) {
			Block.setDestroyTime(_0x81e9x647, _0x81e9x1bd / _0x81e9x1c8);
			if (blockid == 73) {
				Block.setDestroyTime(74, _0x81e9x1bd / _0x81e9x1c8)
			};
			return
		};
		if (blockid == 49 && pickaxes[itemid][2] == 3) {
			Block.setDestroyTime(49, _0x81e9x1bd / _0x81e9x1c8);
			return
		}
	};
	if (axes[itemid]) {
		if (axeBlocks.indexOf(blockid) !== -1) {
			Block.setDestroyTime(_0x81e9x647, _0x81e9x1bd / getSpeed(axes[itemid][0]));
			return
		};
		if (blockid == 30) {
			Block.setDestroyTime(30, 0);
			return
		};
		if (swordBlocks.indexOf(blockid) !== -1) {
			Block.setDestroyTime(_0x81e9x647, 0);
			return
		}
	};
	if (shovels[itemid]) {
		if (shovelBlocks.indexOf(blockid) !== -1) {
			Block.setDestroyTime(_0x81e9x647, _0x81e9x1bd / getSpeed(shovels[itemid][0]));
			return
		}
	};
	Block.setDestroyTime(_0x81e9x647, _0x81e9x1bd);
	if (itemid == 257) {
		Block.setDestroyTime(UnlimitedAPI.GetReal(block_copper_ore, 0), 0.15);
		Block.setDestroyTime(UnlimitedAPI.GetReal(block_tin_ore, 0), 0.15);
		Block.setDestroyTime(UnlimitedAPI.GetReal(block_uranium_ore, 0), 0.15);
		Block.setDestroyTime(UnlimitedAPI.GetReal(block_blended_dust_ore, 0), 0.15);
		Block.setDestroyTime(UnlimitedAPI.GetReal(block_iridium_ore, 0), 0.15)
	};
	if (itemid == 278) {
		Block.setDestroyTime(UnlimitedAPI.GetReal(block_copper_ore, 0), 0.12);
		Block.setDestroyTime(UnlimitedAPI.GetReal(block_tin_ore, 0), 0.12);
		Block.setDestroyTime(UnlimitedAPI.GetReal(block_uranium_ore, 0), 0.12);
		Block.setDestroyTime(UnlimitedAPI.GetReal(block_blended_dust_ore, 0), 0.12);
		Block.setDestroyTime(UnlimitedAPI.GetReal(block_iridium_ore, 0), 0.12)
	};
	if (itemid == 274) {
		Block.setDestroyTime(UnlimitedAPI.GetReal(block_copper_ore, 0), 0.22);
		Block.setDestroyTime(UnlimitedAPI.GetReal(block_tin_ore, 0), 0.22)
	}
}

function procCmd(_0x81e9x347) {
	var _0x81e9x2a0 = _0x81e9x347.split(" ");
	if (_0x81e9x347 == "particles all") {
		ParticlesDisabled = false;
		Level.addParticle = Level.addParticleSrc;
		DataSaver.Save("no#particles", false);
		clientMessage("particles enabled")
	};
	if (_0x81e9x347 == "particles none") {
		ParticlesDisabled = true;
		Level.addParticle = function() {};
		DataSaver.Save("no#particles", true);
		clientMessage("particles disabled")
	};
	if (_0x81e9x347 == "dump api") {
		DumpFactAPI()
	};
	if (_0x81e9x2a0[0] == "trigger") {
		TriggerAchievement(_0x81e9x347.substring(8, _0x81e9x347.length), true)
	};
	if (_0x81e9x347 == "all blocks") {
		AddAllBlocksToPlayerInv()
	};
	if (_0x81e9x2a0[0] == "tga") {
		ShowBitmapDialog(TGALoader.decodeAsset(_0x81e9x2a0[1]))
	};
	if (_0x81e9x2a0[0] == "meta") {
		var _0x81e9x1a = TextureMetaDecoder.DecodeMeta(_0x81e9x2a0[1]);
		var _0x81e9x649 = "";
		for (var _0x81e9x9 in _0x81e9x1a) {
			_0x81e9x649 += _0x81e9x9 + " [" + _0x81e9x1a[_0x81e9x9] + "]"
		};
		ShowUserAlertDialog(_0x81e9x649)
	};
	if (_0x81e9x2a0[0] == "gui") {
		runAsGUI(function() {
			GuiAPI.CreateGUILayout(2)
		})
	};
	if (_0x81e9x2a0[0] == "ores") {
		genSurfaceOres(getPlayerX() / 16 - 0.5, getPlayerZ() / 16 - 0.5)
	};
	if (_0x81e9x2a0[0] == "animi") {
		CreateItemAnimation(getPlayerX(), getPlayerY(), getPlayerZ(), 325, 64, 8)
	};
	if (_0x81e9x2a0[0] == "book") {
		addItemInventory(item_guide_book, 1, 0)
	};
	if (_0x81e9x2a0[0] == "stopthread") {
		TickingThread.stop();
		clientMessage("interrupted thread: " + TickingThread.isInterrupted())
	};
	if (_0x81e9x2a0[0] == "safeleave") {
		SafeLeaveMode.Enter()
	};
	if (_0x81e9x2a0[0] == "carried") {
		var _0x81e9x5b = Player.getSelectedSlotId();
		var _0x81e9x10 = Player.getInventorySlot(_0x81e9x5b);
		var _0x81e9x16 = Player.getInventorySlotData(_0x81e9x5b);
		clientMessage("§ecarried: UID = " + [_0x81e9x10, _0x81e9x16])
	};
	if (_0x81e9x347 == "dump uid") {
		clientMessage("UID dump created: " + DumpAllUIDs())
	};
	if (_0x81e9x2a0[0] == "textanim") {
		CreateTextAnimation(getPlayerX(), getPlayerY(), getPlayerZ(), _0x81e9x2a0[1])
	};
	FactAPI.InvokeCallback("procCmd", _0x81e9x347)
}

function ShowBitmapDialog(_0x81e9x1ee) {
	if (!_0x81e9x1ee) {
		return
	};
	runAsGUI(function() {
		var _0x81e9x1d7 = getMcContext();
		var _0x81e9x173 = android.app.AlertDialog.Builder(_0x81e9x1d7);
		var _0x81e9x64b = new android.widget.ImageView(_0x81e9x1d7);
		_0x81e9x64b.setImageBitmap(_0x81e9x1ee);
		_0x81e9x173.setView(_0x81e9x64b);
		_0x81e9x173.setTitle("<header>").show()
	})
}
var isInGame = false;
var preventLeaveGameHook = false;

function leaveGame() {
	isInGame = false;
	if (!FactorizationLoadingComplete || preventLeaveGameHook) {
		return
	};
	leaveGame_gui();
	closeGUI();
	StopServer();
	StopAllSoundPlayers();
	RunInThread(function() {
		saveAllMachines();
		AchievementDataSaver.Save();
		DataSaver.clearBlocklauncherSavedEntities(1000)
	});
	FactAPI.InvokeCallback("LeaveGame");
	ShowStartMenuOpenButton();
	ShowOfficialPageButton();
	HideSafeLeaveButton();
	GlobalStatsClient.OnEndedPlaying();
	SafeLeaveMode.OnLeft()
}

function SafelyLeaveGame() {
	RunOnMainThread(function() {
		isInGame = false;
		leaveGame();
		while (TickingThread != null) {
			java.lang.Thread.sleep(100)
		};
		java.lang.Thread.sleep(200);
		preventLeaveGameHook = true;
		ModPE.leaveGame();
		preventLeaveGameHook = false
	})
}
var SafeLeaveMode = {
	message_en: "Safe leaving mode enabled, now leave the game.\n       Safe mode will be disabled in: ",
	message_ru: "Мод приостановлен. Вы можете спокойно покинуть игру не боясь вылета. \nРабота мода возобновится через ",
	time_left: 0,
	Tick: function() {
		if (this.time_left > 0) {
			ModPE.showTipMessage(translate(this.message_en) + parseInt(this.time_left / 20 + 0.5));
			this.time_left--
		} else {
			if (MOD_THREAD.StopThread) {
				this.Return()
			}
		}
	},
	Enter: function() {
		while (TickingThread != null) {
			this.time_left = 200;
			MOD_THREAD.StopThread = true;
			java.lang.Thread.sleep(20)
		}
	},
	Return: function() {
		this.time_left = 0;
		MOD_THREAD.StopThread = false;
		ModPE.showTipMessage(" ")
	},
	OnLeft: function() {
		MOD_THREAD.StopThread = false;
		this.time_left = 0;
		TickingThreadStack = []
	}
};

function eatHook(_0x81e9x5ea, _0x81e9x5eb) {
	MeadEatHook(_0x81e9x5ea, _0x81e9x5eb);
	FactAPI.InvokeCallback("FoodEaten", _0x81e9x5ea, _0x81e9x5eb)
}

function redstoneUpdateHook(_0x81e9x26, _0x81e9x27, _0x81e9x28, _0x81e9x2c1, _0x81e9x653, _0x81e9x654, blockData) {
	var _0x81e9x2bc = getMachine(_0x81e9x26, _0x81e9x27, _0x81e9x28);
	if (!_0x81e9x2bc) {
		return
	};
	var _0x81e9x35e = getMachineType(_0x81e9x2bc);
	_0x81e9x35e.RedstoneConsumed(_0x81e9x2bc, _0x81e9x2c1)
}
var EntitiesForUpdate = [];

function addEntityForUpdate(_0x81e9x3cc, _0x81e9x174) {
	_0x81e9x3cc.ent = _0x81e9x174;
	_0x81e9x3cc.remove = false;
	EntitiesForUpdate.push(_0x81e9x3cc)
}

function tickEntitiesForUpdate() {
	for (var i in EntitiesForUpdate) {
		var _0x81e9x3cc = EntitiesForUpdate[i];
		if (config_run_in_thread) {
			java.lang.Thread.yield()
		};
		stopThreadIfNotInGame();
		if (_0x81e9x3cc.update) {
			_0x81e9x3cc.update()
		};
		if (_0x81e9x3cc.remove) {
			EntitiesForUpdate.splice(i, 1);
			i--
		}
	};
	if (globalWorldTime < 100 && globalWorldTime % 30 == 0) {
		CleanUpItemEntities()
	}
}

function CustomEntityControl(_0x81e9x38, _0x81e9xd) {
	this.remove = false;
	this.ent = _0x81e9x38;
	this.upd = _0x81e9xd;
	this.stop = function() {
		this.remove = true
	};
	this.kill = function() {
		this.stop();
		this.remove(this.ent)
	};
	this.update = function() {
		this.upd(this)
	}
}

function SuspectEntityWatcher() {
	this.update = function() {
		this.remove = true;
		for (var i in EntitiesForUpdate) {
			if (EntitiesForUpdate[i].ent == this.ent && EntitiesForUpdate[i] != this) {
				return
			}
		};
		Entity.remove(this.ent)
	}
}

function RemoveMachineWithCheck(_0x81e9x197) {
	var _0x81e9x158 = getMachineType(_0x81e9x197);
	addEntityForUpdate(new MachineRemoveHandler(_0x81e9x197, _0x81e9x158))
}

function MachineRemoveHandler(_0x81e9x197, _0x81e9x158) {
	this.age = 0;
	this.update = function() {
		if (++this.age > 10) {
			removeMachine(_0x81e9x197.x, _0x81e9x197.y, _0x81e9x197.z);
			this.remove = true;
			return
		};
		var _0x81e9x193 = getTile(_0x81e9x197.x, _0x81e9x197.y, _0x81e9x197.z);
		if (_0x81e9x193 == _0x81e9x158.id) {
			this.remove = true
		}
	}
}

function deathHook(_0x81e9x1c8, _0x81e9x174) {
	FactAPI.InvokeCallback("EntityDeath", _0x81e9x1c8, _0x81e9x174);
	beeDeathHook(_0x81e9x1c8, _0x81e9x174)
}

function entityAddedHook(_0x81e9x174) {
	FactAPI.InvokeCallback("EntityAdded", _0x81e9x174);
	eh_addedHook(_0x81e9x174)
}

function entityRemovedHook(_0x81e9x174) {
	FactAPI.InvokeCallback("EntityRemoved", _0x81e9x174);
	ToolAPIEntityRemoved(_0x81e9x174);
	eh_removedHook(_0x81e9x174)
}

function isEntityAnimation() {}
var EntityHashData = [];

function eh_clear() {
	EntityHashData = []
}
var PreventSlimeDropTime = -999;

function eh_addedHook(_0x81e9x174) {
	var _0x81e9x158 = Entity.getEntityTypeId(_0x81e9x174);
	if (_0x81e9x158 == 64) {
		if (Entity.getItemEntityCount(_0x81e9x174) < 1) {
			addItemEntityToCleanup(_0x81e9x174);
			return
		};
		if (PreventSlimeDropTime + 5 > globalWorldTime && Entity.getItemEntityId(_0x81e9x174) == 341) {
			Entity.remove(_0x81e9x174);
			return
		}
	};
	if (_0x81e9x158 == 0) {
		return
	};
	if (_0x81e9x158 == 37) {
		if (globalWorldTime < 60 || Entity.getRenderType(_0x81e9x174) == beeRenderer.renderType) {
			Entity.remove(_0x81e9x174)
		} else {
			SendServerPacket("bee-spawned", [parseInt(_0x81e9x174)]);
			beeEntitiesServerPacket.push(_0x81e9x174)
		}
	};
	if (!EntityHashData[_0x81e9x158]) {
		EntityHashData[_0x81e9x158] = []
	};
	EntityHashData[_0x81e9x158].push(_0x81e9x174);
	if (Entity.getHealth(_0x81e9x174) > 1000) {
		Entity.remove(_0x81e9x174)
	};
	if (globalWorldTime < 60) {
		RunOnMainThread(function() {
			if (Entity.getHealth(_0x81e9x174) > 1000 || parseInt(Entity.getRenderType(_0x81e9x174)) >= 1000 || Entity.getEntityTypeId(_0x81e9x174) == EntityType.RABBIT) {
				Entity.remove(_0x81e9x174)
			}
		})
	};
	Entity.setRot(_0x81e9x174, 0, 0)
}

function eh_getRandomByType(_0x81e9x158) {
	if (!EntityHashData[_0x81e9x158]) {
		EntityHashData[_0x81e9x158] = []
	};
	var _0x81e9x1a7 = EntityHashData[_0x81e9x158];
	var _0x81e9x3c0 = parseInt(_0x81e9x1a7.length * Math.random());
	var _0x81e9x38 = _0x81e9x1a7[_0x81e9x3c0];
	if (Entity.getY(_0x81e9x38) <= 0) {
		_0x81e9x1a7.splice(_0x81e9x3c0, 1);
		return
	};
	return _0x81e9x38
}

function eh_removedHook(_0x81e9x174) {
	var _0x81e9x158 = Entity.getEntityTypeId(_0x81e9x174);
	if (_0x81e9x158 == 0) {
		return
	};
	if (_0x81e9x158 == 64 && Entity.getItemEntityCount(_0x81e9x174) < 1) {
		return
	};
	if (!EntityHashData[_0x81e9x158]) {
		EntityHashData[_0x81e9x158] = []
	};
	for (var i in EntityHashData[_0x81e9x158]) {
		if (EntityHashData[_0x81e9x158][i] == _0x81e9x174) {
			EntityHashData[_0x81e9x158].splice(i, 1);
			return
		}
	}
}
var beeEntitiesServerPacket = [];
var bee_skin = "FactorizationGUI/items/470.png";

function SendAllCachedBees(_0x81e9x18c) {
	for (var i in beeEntitiesServerPacket) {
		var _0x81e9x38 = beeEntitiesServerPacket[i];
		if (Entity.getY(_0x81e9x38) > 0) {
			MultiplayerServer.SendPacket("bee-spawned", [parseInt(_0x81e9x38)], _0x81e9x18c)
		} else {
			beeEntitiesServerPacket.splice(i, 1);
			i--
		}
	}
}

function beeDeathHook(_0x81e9x1c8, _0x81e9x174) {
	for (var i in BeeEntityList) {
		var _0x81e9x543 = BeeEntityList[i];
		var _0x81e9x66a = _0x81e9x543.ent;
		if (_0x81e9x66a == _0x81e9x174) {
			if (getCarriedItem() != item_bee_net) {
				preventDefault();
				return
			};
			try {
				if (_0x81e9x1c8 == getPlayerEnt()) {
					Level.dropItem(Entity.getX(_0x81e9x174), Entity.getY(_0x81e9x174), Entity.getZ(_0x81e9x174), 0, _0x81e9x543.getDrop(), 1, 0)
				}
			} catch (_0x81e9x174) {
				Level.dropItem(Entity.getX(_0x81e9x174), Entity.getY(_0x81e9x174), Entity.getZ(_0x81e9x174), 0, _0x81e9x543.getDrop(), 1, 0)
			};
			PreventSlimeDropTime = globalWorldTime;
			Entity.remove(_0x81e9x174)
		}
	}
}

function beeAttackHook(_0x81e9x1c8, _0x81e9x174) {
	beeDeathHook(_0x81e9x1c8, _0x81e9x174)
}
var BeeEntityList = [];

function tickBeeEntities() {
	if (Math.random() < 0.0005 && BeeEntityList.length < 4) {
		var _0x81e9x26 = getPlayerX() - 30 + Math.random() * 60;
		var _0x81e9x28 = getPlayerZ() - 30 + Math.random() * 60;
		var _0x81e9x27 = 64;
		while (getTile(_0x81e9x26, _0x81e9x27, _0x81e9x28) != 0) {
			_0x81e9x27++
		};
		_0x81e9x27 += Math.random() * 3 + 1;
		addBeeEntity(_0x81e9x26, _0x81e9x27, _0x81e9x28)
	};
	for (var i in BeeEntityList) {
		var _0x81e9x543 = BeeEntityList[i];
		if (_0x81e9x543) {
			_0x81e9x543.update();
			if (Entity.getHealth(_0x81e9x543.ent) < 1) {
				BeeEntityList.splice(i, 1);
				i--
			}
		}
	}
}

function addBeeEntity(_0x81e9x26, _0x81e9x27, _0x81e9x28, _0x81e9x2f1) {
	if (BeeEntityList.length > 4 && !_0x81e9x2f1) {
		return false
	};
	var _0x81e9x66f = BeeRegistry.GetRandomByCoords(_0x81e9x26, _0x81e9x28);
	var _0x81e9x212 = _0x81e9x66f.CreateBee(_0x81e9x26, _0x81e9x27, _0x81e9x28, false);
	BeeEntityList.push(new BeeEntity(_0x81e9x212.ent, _0x81e9x66f));
	Entity.setCollisionSize(_0x81e9x212.ent, 0.3, 0.3);
	return true
}

function BeeEntity(_0x81e9x174, _0x81e9x66f) {
	this.ent = _0x81e9x174;
	this.beetype = _0x81e9x66f;
	this.target = null;
	this.tcd = 0;
	this.vx = this.vy = this.vz = 0;
	this.yaw = 0;
	this.runAway = 0;
	this.age = 0;
	this.getDrop = function() {
		if (this.beetype) {
			return this.beetype.drone
		};
		return item_usual_drone
	};
	this.update = function() {
		var _0x81e9x26 = Entity.getX(this.ent);
		var _0x81e9x27 = Entity.getY(this.ent);
		var _0x81e9x28 = Entity.getZ(this.ent);
		Entity.setHealth(this.ent, 1500);
		if (this.tcd < 1) {
			this.findNewTarget()
		} else {
			this.tcd--
		};
		if (this.age++ == 1) {};
		if (this.runAway > 0) {
			this.runAway--;
			this.away(0.3)
		};
		if (getTime() % 50 == 0) {
			this.moveTo(Math.floor(this.target.x) + Math.random(), Math.floor(this.target.y) + Math.random(), Math.floor(this.target.z) + Math.random(), 0.03)
		};
		this.yaw = Math.atan2(-this.vx, this.vz) * 180 / Math.PI;
		setVelX(this.ent, this.vx);
		setVelY(this.ent, this.vy);
		setVelZ(this.ent, this.vz);
		Entity.setRot(this.ent, this.yaw, 0)
	};
	this.findNewTarget = function(_0x81e9x26, _0x81e9x27, _0x81e9x28) {
		var _0x81e9x26 = Math.floor(Entity.getX(this.ent));
		var _0x81e9x27 = Math.floor(Entity.getY(this.ent));
		var _0x81e9x28 = Math.floor(Entity.getZ(this.ent));
		_0x81e9x26 += Math.random() * 8 - 4;
		_0x81e9x28 += Math.random() * 8 - 4;
		_0x81e9x27 -= Math.random() * 2;
		var _0x81e9x671 = false;
		while (getTile(_0x81e9x26, _0x81e9x27, _0x81e9x28) != 0) {
			_0x81e9x27++;
			_0x81e9x671 = true
		};
		if (_0x81e9x671) {
			_0x81e9x27++
		};
		this.target = {
			"x": parseInt(_0x81e9x26),
			"y": parseInt(_0x81e9x27),
			"z": parseInt(_0x81e9x28)
		};
		this.tcd = 100 + Math.random() * 50
	};
	this.moveTo = function(_0x81e9x672, _0x81e9x4b9, _0x81e9x673, _0x81e9x2a0) {
		var _0x81e9x1b0 = _0x81e9x672 - Entity.getX(this.ent);
		var _0x81e9x1b1 = _0x81e9x4b9 - Entity.getY(this.ent);
		var _0x81e9x1b2 = _0x81e9x673 - Entity.getZ(this.ent);
		var _0x81e9x4c4 = Math.sqrt(_0x81e9x1b0 * _0x81e9x1b0 + _0x81e9x1b1 * _0x81e9x1b1 + _0x81e9x1b2 * _0x81e9x1b2);
		_0x81e9x1b0 *= _0x81e9x2a0 / _0x81e9x4c4;
		_0x81e9x1b1 *= _0x81e9x2a0 / _0x81e9x4c4;
		_0x81e9x1b2 *= _0x81e9x2a0 / _0x81e9x4c4;
		this.vx = _0x81e9x1b0;
		this.vy = _0x81e9x1b1;
		this.vz = _0x81e9x1b2
	};
	this.away = function(_0x81e9x2a0) {
		var _0x81e9x1b0 = getPlayerX() - Entity.getX(this.ent);
		var _0x81e9x1b1 = getPlayerY() - Entity.getY(this.ent);
		var _0x81e9x1b2 = getPlayerZ() - Entity.getZ(this.ent);
		var _0x81e9x4c4 = Math.sqrt(_0x81e9x1b0 * _0x81e9x1b0 + _0x81e9x1b1 * _0x81e9x1b1 + _0x81e9x1b2 * _0x81e9x1b2);
		_0x81e9x1b0 *= _0x81e9x2a0 / _0x81e9x4c4;
		_0x81e9x1b1 *= _0x81e9x2a0 / _0x81e9x4c4;
		_0x81e9x1b2 *= _0x81e9x2a0 / _0x81e9x4c4;
		this.vx = -_0x81e9x1b0;
		this.vy = 0.05;
		this.vz = -_0x81e9x1b2
	}
}

function tickBindedMob(_0x81e9x251) {
	if (!currentMobBind) {
		return
	};
	if (_0x81e9x251 == item_leash) {
		currentMobBind.update()
	} else {
		currentMobBind = null
	}
}
var currentMobBind = null;

function MobBindToPlayer(_0x81e9x9, _0x81e9x174) {
	this.master = _0x81e9x9;
	this.victim = _0x81e9x174;
	this.dis = 5;
	this.update = function() {
		var _0x81e9x458 = Entity.getX(this.master);
		var _0x81e9x459 = Entity.getY(this.master) - 1.62;
		var _0x81e9x45a = Entity.getZ(this.master);
		var _0x81e9x3d4 = Entity.getX(this.victim);
		var _0x81e9x3d5 = Entity.getY(this.victim);
		var _0x81e9x3d6 = Entity.getZ(this.victim);
		if (!_0x81e9x3d5) {
			return
		};
		var _0x81e9x1b0 = _0x81e9x458 - _0x81e9x3d4,
			_0x81e9x1b1 = _0x81e9x459 - _0x81e9x3d5,
			_0x81e9x1b2 = _0x81e9x45a - _0x81e9x3d6;
		var _0x81e9x15b = Math.sqrt(_0x81e9x1b0 * _0x81e9x1b0 + _0x81e9x1b1 * _0x81e9x1b1 + _0x81e9x1b2 * _0x81e9x1b2);
		_0x81e9x1b0 /= _0x81e9x15b;
		_0x81e9x1b1 /= _0x81e9x15b;
		_0x81e9x1b2 /= _0x81e9x15b;
		if (_0x81e9x15b > this.dis) {
			setVelX(this.master, Entity.getVelX(this.master) + _0x81e9x1b0 * (_0x81e9x15b - this.dis) * -0.1);
			setVelZ(this.master, Entity.getVelZ(this.master) + _0x81e9x1b2 * (_0x81e9x15b - this.dis) * -0.1);
			setVelX(this.victim, _0x81e9x1b0 * (_0x81e9x15b - this.dis));
			setVelY(this.victim, _0x81e9x1b1 * (_0x81e9x15b - this.dis) + Entity.getVelY(this.victim));
			setVelZ(this.victim, _0x81e9x1b2 * (_0x81e9x15b - this.dis));
			if (Math.random() < 0.3) {
				Entity.setCarriedItem(getPlayerEnt(), item_leash, 1, Player.getCarriedItemData() + 1)
			};
			if (Player.getCarriedItemData() > 3999) {
				Entity.setCarriedItem(getPlayerEnt(), 0, 0, 0)
			}
		};
		this.makeRedstoneRay(_0x81e9x458, _0x81e9x459 + 1, _0x81e9x45a, _0x81e9x3d4, _0x81e9x3d5 + 0.6, _0x81e9x3d6)
	};
	this.makeRedstoneRay = function(_0x81e9x53, _0x81e9x54, _0x81e9x55, _0x81e9x56, _0x81e9x57, _0x81e9x58) {
		var _0x81e9x1b0 = _0x81e9x56 - _0x81e9x53,
			_0x81e9x1b1 = _0x81e9x57 - _0x81e9x54,
			_0x81e9x1b2 = _0x81e9x58 - _0x81e9x55;
		var _0x81e9x15b = Math.sqrt(_0x81e9x1b0 * _0x81e9x1b0 + _0x81e9x1b1 * _0x81e9x1b1 + _0x81e9x1b2 * _0x81e9x1b2);
		_0x81e9x1b0 /= _0x81e9x15b;
		_0x81e9x1b1 /= _0x81e9x15b;
		_0x81e9x1b2 /= _0x81e9x15b;
		for (var _0x81e9x1a7 = 0; _0x81e9x1a7 < _0x81e9x15b; _0x81e9x1a7 += Math.random()) {
			var _0x81e9x1b3 = _0x81e9x53 + _0x81e9x1b0 * _0x81e9x1a7;
			var _0x81e9x1b4 = _0x81e9x54 + _0x81e9x1b1 * _0x81e9x1a7;
			var _0x81e9x1b5 = _0x81e9x55 + _0x81e9x1b2 * _0x81e9x1a7;
			Level.addParticle(ParticleType.crit, _0x81e9x1b3, _0x81e9x1b4, _0x81e9x1b5, 0, 0, 0, 1)
		}
	}
}

function LaserShot(_0x81e9x26, _0x81e9x27, _0x81e9x28) {
	var _0x81e9x678 = Math.PI / 180;
	var _0x81e9x1b3 = getPlayerX();
	var _0x81e9x1b4 = getPlayerY();
	var _0x81e9x1b5 = getPlayerZ();
	var _0x81e9x2ee = Entity.getYaw(getPlayerEnt()) * _0x81e9x678;
	var _0x81e9x2ef = -Entity.getPitch(getPlayerEnt()) * _0x81e9x678;
	var _0x81e9x3d4 = -Math.sin(_0x81e9x2ee) * Math.cos(_0x81e9x2ef);
	var _0x81e9x3d5 = Math.sin(_0x81e9x2ef);
	var _0x81e9x3d6 = Math.cos(_0x81e9x2ee) * Math.cos(_0x81e9x2ef);
	var _0x81e9x679 = new LaserShotArrow(_0x81e9x3d4, _0x81e9x3d5, _0x81e9x3d6);
	var _0x81e9x38 = Level.spawnMob(_0x81e9x1b3 + _0x81e9x3d4 * 2, _0x81e9x1b4 + _0x81e9x3d5 * 2, _0x81e9x1b5 + _0x81e9x3d6 * 2, 80);
	addEntityForUpdate(_0x81e9x679, _0x81e9x38);
	PlaySoundFile("Tools/MiningLaser/MiningLaser.ogg")
}

function genLaserShotEl(_0x81e9x26, _0x81e9x27, _0x81e9x28) {
	for (var _0x81e9x38a = -1; _0x81e9x38a < 2; _0x81e9x38a++) {
		for (var _0x81e9x384 = -1; _0x81e9x384 < 2; _0x81e9x384++) {
			for (var _0x81e9x38b = -1; _0x81e9x38b < 2; _0x81e9x38b++) {
				var _0x81e9x10 = getTile(_0x81e9x26 + _0x81e9x38a, _0x81e9x27 + _0x81e9x384, _0x81e9x28 + _0x81e9x38b);
				var _0x81e9x16 = Level.getData(_0x81e9x26 + _0x81e9x38a, _0x81e9x27 + _0x81e9x384, _0x81e9x28 + _0x81e9x38b);
				if (_0x81e9x10 > 0 && isBlockBreakable(_0x81e9x10, _0x81e9x16)) {
					var drop = getBlockDestroyDrop(_0x81e9x10, _0x81e9x16);
					if (drop[0] > 4) {
						Level.dropItem(_0x81e9x26 + _0x81e9x38a + 0.5, _0x81e9x27 + _0x81e9x384 + 0.5, _0x81e9x28 + _0x81e9x38b + 0.5, 0, drop[0], drop[1], drop[2])
					};
					setTile(_0x81e9x26 + _0x81e9x38a, _0x81e9x27 + _0x81e9x384, _0x81e9x28 + _0x81e9x38b, 0, 0)
				}
			}
		}
	}
}

function LaserShotArrow(_0x81e9x3d4, _0x81e9x3d5, _0x81e9x3d6) {
	this.vx = _0x81e9x3d4;
	this.vy = _0x81e9x3d5;
	this.vz = _0x81e9x3d6;
	this.timer = 20;
	this.update = function() {
		this.remove = this.timer <= 0;
		if (this.remove) {
			Entity.remove(this.ent)
		};
		this.timer--;
		var _0x81e9x26 = Entity.getX(this.ent);
		if (_0x81e9x26 < 0) {
			_0x81e9x26--
		};
		var _0x81e9x27 = Entity.getY(this.ent);
		var _0x81e9x28 = Entity.getZ(this.ent);
		if (_0x81e9x28 < 0) {
			_0x81e9x28--
		};
		genLaserShotEl(_0x81e9x26, _0x81e9x27, _0x81e9x28);
		setVelX(this.ent, this.vx);
		setVelY(this.ent, this.vy);
		setVelZ(this.ent, this.vz);
		Level.addParticle(ParticleType.redstone, _0x81e9x26, _0x81e9x27, _0x81e9x28, 0, 0, 0)
	}
}
var EntityDataSaver = {
	isAnimation: function(_0x81e9x174) {
		return Entity.getExtraData(_0x81e9x174, "zheka.factorization.isAnim") == "true"
	},
	setAnimation: function(_0x81e9x174) {}
};
var qArmorGUIWindow;

function createQArmorButtons() {
	if (qArmorGUIWindow) {
		return
	};
	var _0x81e9x1d7 = com.mojang.minecraftpe.MainActivity.currentMainActivity.get();
	_0x81e9x1d7.runOnUiThread(new java.lang.Runnable({
		run: function() {
			try {
				var _0x81e9x1dc = new android.widget.LinearLayout(_0x81e9x1d7);
				var _0x81e9x67f = new android.widget.PopupWindow(_0x81e9x1d7);
				_0x81e9x67f.setContentView(_0x81e9x1dc);
				_0x81e9x1dc.setOrientation(android.widget.LinearLayout.VERTICAL);
				var _0x81e9x680 = _0x81e9x1d7.getWindowManager().getDefaultDisplay().getWidth() / 10;
				_0x81e9x67f.setWidth(_0x81e9x680);
				_0x81e9x67f.setHeight(_0x81e9x680 * 2);
				_0x81e9x67f.showAtLocation(_0x81e9x1d7.getWindow().getDecorView(), android.view.Gravity.RIGHT | android.view.Gravity.BOTTOM, 0, 0);
				qArmorGUIWindow = _0x81e9x67f;
				var _0x81e9x681 = new android.widget.ImageView(_0x81e9x1d7);
				_0x81e9x681.setImageBitmap(android.graphics.Bitmap.createScaledBitmap(android.graphics.Bitmap.createBitmap(Images.buttons, 20, 0, 20, 20), _0x81e9x680, _0x81e9x680, false));
				setViewSize(_0x81e9x681, _0x81e9x680, _0x81e9x680);
				_0x81e9x681.setOnClickListener(new android.view.View.OnClickListener({
					onClick: function() {
						qArmorRun();
						return true
					}
				}));
				_0x81e9x1dc.addView(_0x81e9x681);
				var _0x81e9x682 = new android.widget.ImageView(_0x81e9x1d7);
				_0x81e9x682.setImageBitmap(android.graphics.Bitmap.createScaledBitmap(android.graphics.Bitmap.createBitmap(Images.buttons, 0, 0, 20, 20), _0x81e9x680, _0x81e9x680, false));
				setViewSize(_0x81e9x682, _0x81e9x680, _0x81e9x680);
				_0x81e9x682.setOnClickListener(new android.view.View.OnClickListener({
					onClick: function() {
						qArmorJump();
						return true
					}
				}));
				_0x81e9x1dc.addView(_0x81e9x682)
			} catch (e) {
				clientMessage(e)
			}
		}
	}))
}

function removeGUI_qArmor() {
	var _0x81e9x1d7 = com.mojang.minecraftpe.MainActivity.currentMainActivity.get();
	_0x81e9x1d7.runOnUiThread(new java.lang.Runnable({
		run: function() {
			if (qArmorGUIWindow != null) {
				qArmorGUIWindow.dismiss();
				qArmorGUIWindow = null
			}
		}
	}))
}

function putItemInSlot() {
	if (!CurrentOpenedContainer) {
		return
	};
	if (GUISlotSelected == -1) {
		return
	};
	var _0x81e9x10 = getCarriedItem();
	var _0x81e9x13 = Player.getCarriedItemCount();
	var _0x81e9x16 = Player.getCarriedItemData();
	_0x81e9x13 = CurrentOpenedContainer.putToSlot(GUISlotSelected, _0x81e9x10, _0x81e9x13, _0x81e9x16);
	if (!_0x81e9x13) {
		_0x81e9x10 = 0;
		_0x81e9x16 = 0
	};
	Entity.setCarriedItem(getPlayerEnt(), _0x81e9x10, _0x81e9x13, _0x81e9x16)
}
var guiItemMaxStack = {
	item_honey_bottle: 1,
	item_mead_bottle: 1,
	item_empty_bottle: 1,
	325: 1,
	item_usual_queen: 1,
	item_honey_frame: 1,
	item_empty_frame: 1,
	item_oil_bucket: 1,
	item_liquid_matter_bucket: 1,
	item_biomass_bucket: 1,
	item_fuel_bucket: 1,
	item_overclocker_upgrade: 4,
	item_cell_empty: 16,
	item_cell_milk: 16,
	item_cell_honey: 16,
	item_cell_mead: 16,
	item_cell_oil: 16,
	item_cell_fuel: 16,
	item_cell_biomass: 16,
	item_cell_liquid_matter: 16,
	item_cell_water: 16,
	item_cell_lava: 16,
	item_uranium_rod_singler: 1,
	item_uranium_rod_double: 1,
	item_uranium_rod_quad: 1,
	item_reactor_reflector: 1,
	item_advanced_reactor_reflector: 1,
	item_coolant_cell_singler: 1,
	item_coolant_cell_triple: 1,
	item_coolant_cell_six: 1,
	item_reactor_plating: 1,
	item_reactor_vent: 1
};

function getItemMaxStackSize(_0x81e9x10) {
	var _0x81e9x152 = guiItemMaxStack[_0x81e9x10];
	if (_0x81e9x152) {
		return _0x81e9x152
	};
	return 64
}
var ExternalGUIUniqueID = 0;
var ExternalGUIDataMap = [];

function getContainerByExternalID(_0x81e9x10) {
	return ExternalGUIDataMap[_0x81e9x10]
}

function Container(_0x81e9x68b) {
	this.slots = [];
	this.id = _0x81e9x68b;
	this.hasGUI = false;
	var _0x81e9x68c = GuiData.GetGUISlotCount(this.id);
	for (var i = 0; i < _0x81e9x68c; i++) {
		this.slots[i] = {
			id: 0,
			count: 0,
			data: 0
		}
	};
	this.putToSlot = function(_0x81e9x5b, _0x81e9x10, _0x81e9x13, _0x81e9x16) {
		var _0x81e9x347 = this.slots[_0x81e9x5b];
		if (!((_0x81e9x347.id == _0x81e9x10 && _0x81e9x347.data == _0x81e9x16) || _0x81e9x347.id == 0)) {
			return _0x81e9x13
		};
		var _0x81e9x19f = 64;
		var _0x81e9x68d = _0x81e9x347.count;
		if (guiItemMaxStack[_0x81e9x10]) {
			_0x81e9x19f = guiItemMaxStack[_0x81e9x10]
		};
		if (_0x81e9x10 >= item_cell_empty && _0x81e9x10 <= item_cell_lava) {
			if (this.id == 3 || this.id == 6) {
				_0x81e9x19f = 1
			} else {
				_0x81e9x19f = 16
			}
		};
		_0x81e9x347.count += _0x81e9x13;
		_0x81e9x347.id = _0x81e9x10;
		_0x81e9x347.data = _0x81e9x16;
		if (_0x81e9x347.count > _0x81e9x19f) {
			_0x81e9x347.count = _0x81e9x19f
		};
		return _0x81e9x13 - (_0x81e9x347.count - _0x81e9x68d)
	};
	this.onDestroy = function() {
		if (this.hasGUI) {
			closeGUI()
		}
	};
	this.hasGUI = false;
	this.open = function() {
		if (guiOpenState == 1) {
			return
		};
		var _0x81e9x2da = getMachineType(this.machine);
		var _0x81e9x17 = "machine";
		if (_0x81e9x2da) {
			_0x81e9x17 = _0x81e9x2da.getMachineName()
		};
		GuiAPI.Open(this, _0x81e9x17);
		this.hasGUI = true;
		CurrentOpenedContainer = this
	};
	this.clients = [];
	this.openExternal = function(_0x81e9x189) {
		var _0x81e9x195 = BuildExternalGUI(this, _0x81e9x189);
		this.clients[_0x81e9x195] = _0x81e9x189
	};
	this.removeClient = function(_0x81e9x10) {
		this.clients[_0x81e9x10] = null
	};
	this.sendToClients = function(_0x81e9x17, _0x81e9x186) {
		for (var i in this.clients) {
			if (this.clients[i]) {
				MultiplayerServer.SendPacket(_0x81e9x17, _0x81e9x186, this.clients[i])
			}
		}
	};
	this.tick = function() {
		if (this.hasGUI) {
			this.updateLiquidBar()
		}
	};
	this.updateGUI = function() {
		if (!this.hasGUI) {
			return
		};
		if (CurrentOpenedContainer != this) {
			this.hasGUI = false;
			return
		};
		if (this.machine) {
			GuiAPI.SetSwitchButton(this.machine)
		}
	};
	this.setProgressBar = function(_0x81e9x9) {
		if (this.hasGUI) {
			this.setCustomBar(0x81, _0x81e9x9)
		}
	};
	this.setEnergyBar = function(_0x81e9x174, _0x81e9x162) {
		if (this.hasGUI) {
			this.setCustomBar(0x80, _0x81e9x174);
			GuiAPI.SetText(0x80, "" + _0x81e9x162, android.graphics.Color.BLACK)
		}
	};
	this.LiquidBarValue = {
		liq: 0,
		lvl: 0
	};
	this.updateLiquidBar = function() {
		var _0x81e9x27b = this.LiquidBarValue.lvl;
		var _0x81e9x158 = this.LiquidBarValue.liq;
		var _0x81e9x68e = GUILiquidAnimator.GetLiquidTextureName(_0x81e9x158);
		if (_0x81e9x158 > 0) {
			GuiAPI.UpdateScaleTexture(0x82, _0x81e9x68e)
		};
		GuiAPI.SetScale(0x82, _0x81e9x27b)
	};
	this.setLiquidBar = function(_0x81e9x27b, _0x81e9x158, _0x81e9x68f) {
		this.LiquidBarValue.lvl = _0x81e9x27b;
		this.LiquidBarValue.liq = _0x81e9x158;
		if (this.hasGUI) {
			var _0x81e9x690 = GetLiquidName(_0x81e9x158);
			this.updateLiquidBar();
			if (!_0x81e9x68f) {
				_0x81e9x68f = 16
			};
			GuiAPI.SetText(0x82, parseInt(_0x81e9x27b * 100 * _0x81e9x68f) / 100 + "/" + _0x81e9x68f + " of " + _0x81e9x690, android.graphics.Color.BLACK)
		}
	};
	this.setCustomBar = function(_0x81e9x10, _0x81e9x184, _0x81e9x691) {
		if (this.hasGUI) {
			GuiAPI.SetScale(_0x81e9x10, _0x81e9x184, _0x81e9x691)
		}
	};
	this.setGuiText = function(_0x81e9x10, _0x81e9x184, _0x81e9x23b, _0x81e9x691) {
		if (this.hasGUI) {
			GuiAPI.SetText(_0x81e9x10, _0x81e9x184, _0x81e9x23b, _0x81e9x691)
		}
	};
	this.setCustomBarPos = function(_0x81e9x10, _0x81e9x26, _0x81e9x27) {
		if (this.hasGUI) {
			GuiAPI.UpdateScalePosition(_0x81e9x10, _0x81e9x26, _0x81e9x27)
		}
	};
	this.setCustomBarTexture = function(_0x81e9x10, _0x81e9x17) {
		if (this.hasGUI) {
			GuiAPI.UpdateScaleTexture(_0x81e9x10, _0x81e9x17)
		}
	};
	this.executeButtonFunction = function(_0x81e9x10) {
		var _0x81e9x1c2 = this.buttonFunctions[_0x81e9x10];
		if (_0x81e9x1c2) {
			try {
				MultiplayerServer.WritingFromThread = true;
				_0x81e9x1c2(this.machine, this, _0x81e9x10);
				MultiplayerServer.WritingFromThread = true
			} catch (e) {
				clientMessage("§4Error in button function: §6" + e)
			}
		} else {
			print("<FactAPI> no function for button " + _0x81e9x10)
		}
	};
	this.executeButtonFunction_old = function(_0x81e9x10) {
		var _0x81e9x692 = FactAPI.GUI.getCustomGuiScreen(this.id);
		if (!_0x81e9x692) {
			print("<FactAPI> Trying to use button in non-custum GUI type " + this.id);
			return
		};
		var _0x81e9x693 = _0x81e9x692.buttons[_0x81e9x10];
		if (!_0x81e9x693) {
			print("<FactAPI> Trying to use wrong button " + _0x81e9x10 + ", GUI type " + this.id);
			return
		};
		try {
			MultiplayerServer.WritingFromThread = true;
			_0x81e9x693.func(this.machine, this, _0x81e9x10);
			MultiplayerServer.WritingFromThread = true
		} catch (e) {
			clientMessage("§Error in button function: §6" + e)
		}
	};
	this.buttonFunctions = [];
	this.registerButtonFunction = function(_0x81e9x10, _0x81e9x1c2) {
		this.buttonFunctions[_0x81e9x10] = _0x81e9x1c2
	};
	this.setFireBar = function(_0x81e9x27b) {
		if (this.hasGUI) {
			this.setCustomBar(0x84, 1);
			this.setCustomBar(0x83, _0x81e9x27b, true)
		}
	};
	this.setItemIcons = function(_0x81e9x4b, _0x81e9x694) {};
	this.transportToInv = function(_0x81e9x5b) {
		var _0x81e9x347 = this.slots[_0x81e9x5b];
		addItemInventory(_0x81e9x347.id, _0x81e9x347.count, _0x81e9x347.data);
		_0x81e9x347.id = _0x81e9x347.count = _0x81e9x347.data = 0
	};
	this.getSlot = function(i) {
		return this.slots[i]
	};
	this.setSlot = function(_0x81e9x347, _0x81e9x10, _0x81e9x13, _0x81e9x16) {
		this.slots[_0x81e9x347].id = _0x81e9x10;
		this.slots[_0x81e9x347].count = _0x81e9x13;
		this.slots[_0x81e9x347].data = _0x81e9x16
	};
	this.save = function(_0x81e9x17) {
		for (var i in this.slots) {
			var _0x81e9x347 = this.slots[i];
			DataSaver.Save(_0x81e9x17 + i + "#id", _0x81e9x347.id);
			DataSaver.Save(_0x81e9x17 + i + "#c", _0x81e9x347.count);
			DataSaver.Save(_0x81e9x17 + i + "#d", _0x81e9x347.data)
		}
	};
	this.read = function(_0x81e9x17) {
		for (var i in this.slots) {
			var _0x81e9x347 = this.slots[i];
			_0x81e9x347.id = DataSaver.ReadNumber(_0x81e9x17 + i + "#id");
			_0x81e9x347.count = DataSaver.ReadNumber(_0x81e9x17 + i + "#c");
			_0x81e9x347.data = DataSaver.ReadNumber(_0x81e9x17 + i + "#d")
		}
	};
	this.dropInv = function(_0x81e9x26, _0x81e9x27, _0x81e9x28) {
		for (var i in this.slots) {
			var _0x81e9x347 = this.slots[i];
			if (_0x81e9x347.id && _0x81e9x347.count && !_0x81e9x347.noDrop) {
				Level.dropItem(_0x81e9x26, _0x81e9x27, _0x81e9x28, 1, _0x81e9x347.id, _0x81e9x347.count, _0x81e9x347.data)
			}
		}
	}
}

function leaveGame_gui() {
	if (stateWindow) {
		removeGUI_info()
	};
	if (qArmorGUIWindow != null) {
		removeGUI_qArmor()
	};
	dismissJetpackGUI()
}

function newLevel_gui() {
	createStateView()
}

function initContainerGUI() {
	LoadGUIItemData()
}

function resetContainerGUI() {
	closeGUI()
}

function getMcContext() {
	return com.mojang.minecraftpe.MainActivity.currentMainActivity.get()
}
var guiOpenState = 0;
var CurrentGUIWin = null;
var CurrentGUILayout = null;
var CurrentGUIView = null;
var CurrentGUIDrawable = null;
var GUIScale = 1;
var CurrentOpenedContainer = null;
var GUIXButton = null;
var GUI_inButton = null;
var GUISlots = [];
var GUIEnergyBar = null;
var GUIProgressBar = null;
var GUILiquidBar = null;
var GUIFireBar = null;
var GUIFireBarBG = null;
var Images = {};
var ImageCache = {};

function openGUI(_0x81e9x10) {
	guiOpenState = 1;
	var _0x81e9x1d7 = getMcContext();
	var _0x81e9x680 = _0x81e9x1d7.getWindowManager().getDefaultDisplay().getWidth();
	var _0x81e9x426 = _0x81e9x1d7.getWindowManager().getDefaultDisplay().getHeight();
	var _0x81e9x6ab = _0x81e9x426 / 1.6;
	var _0x81e9x6ac = _0x81e9x6ab * 2;
	var _0x81e9x6ad = (_0x81e9x680 - _0x81e9x6ac) / 2;
	var _0x81e9x6ae = 0;
	GUIScale = _0x81e9x6ac / 256;
	runAsGUI(function() {
		CurrentGUIWin = new android.widget.PopupWindow(_0x81e9x1d7);
		var _0x81e9x6af = _0x81e9x1d7.getWindow().getDecorView();
		CurrentGUIWin.setWidth(parseInt(_0x81e9x6ac));
		CurrentGUIWin.setHeight(parseInt(_0x81e9x6ab));
		var _0x81e9x1dc = new android.widget.RelativeLayout(_0x81e9x1d7);
		CurrentGUILayout = _0x81e9x1dc;
		var _0x81e9x6b0 = new android.widget.ImageView(_0x81e9x1d7);
		_0x81e9x1dc.addView(_0x81e9x6b0);
		var _0x81e9x6b1 = new android.graphics.drawable.BitmapDrawable(scaleGUIBitmap(guiBackgroundByType(_0x81e9x10)));
		GUIXButton = new android.widget.Button(_0x81e9x1d7);
		GUIXButton.setBackgroundDrawable(android.graphics.drawable.BitmapDrawable(scaleGUIBitmap(Images.xbutton, 1.5)));
		setViewSize(GUIXButton, parseInt(30 * GUIScale), parseInt(30 * GUIScale));
		CurrentGUILayout.addView(GUIXButton);
		setViewPos(GUIXButton, block_mob_slayer * GUIScale, 0);
		GUIXButton.setOnClickListener(new android.view.View.OnClickListener({
			onClick: function() {
				closeGUI()
			}
		}));
		GUI_InButton = new android.widget.Button(_0x81e9x1d7);
		GUI_InButton.setBackgroundDrawable(android.graphics.drawable.BitmapDrawable(scaleGUIBitmap(Images.inbutton, 1.5)));
		setViewSize(GUI_InButton, parseInt(30 * GUIScale), parseInt(30 * GUIScale));
		CurrentGUILayout.addView(GUI_InButton);
		setViewPos(GUI_InButton, getInButtonX(_0x81e9x10) * GUIScale, 88 * GUIScale);
		GUI_InButton.setOnClickListener(new android.view.View.OnClickListener({
			onClick: function() {
				putItemInSlot()
			}
		}));
		CurrentGUIWin.setContentView(_0x81e9x1dc);
		CurrentGUIWin.setBackgroundDrawable(_0x81e9x6b1);
		CurrentGUIWin.showAtLocation(_0x81e9x6af, android.view.Gravity.TOP | android.view.Gravity.LEFT, parseInt(_0x81e9x6ad), parseInt(_0x81e9x6ae));
		FactAPI.InvokeCallback("GUIOpened", _0x81e9x10)
	});
	BuildGUI(_0x81e9x10)
}

function closeGUI() {
	if (!CurrentGUIWin) {
		return
	};
	UpdateAllIconList([], true);
	runAsGUI(function() {
		if (CurrentGUIWin) {
			FactAPI.InvokeCallback("GUIClosed", CurrentOpenedContainer);
			GUISlotSelected = -1;
			CurrentGUIWin.dismiss();
			CurrentGUIWin = null;
			CurrentGUILayout = null;
			CurrentGUIView = null;
			CurrentGUIDrawable = null;
			GUIScale = 1;
			CurrentOpenedContainer = null;
			GUIXButton = null;
			GUISlots = [];
			GUIEnergyBar = null;
			GUIProgressBar = null;
			GUILiquidBar = null;
			GUIFireBar = null;
			GUIFireBarBG = null;
			guiOpenState = 0;
			CustomGUIScales = {};
			GUICustomButtonUniqueID = 0
		}
	})
}

function SetEnergyBarLevel(_0x81e9x27b) {
	runAsGUI(function() {
		if (!CurrentGUILayout) {
			return
		};
		var _0x81e9x1d7 = getMcContext();
		if (_0x81e9x27b < 0) {
			_0x81e9x27b = 0
		};
		if (_0x81e9x27b > 1) {
			_0x81e9x27b = 1
		};
		if (_0x81e9x27b != _0x81e9x27b) {
			_0x81e9x27b = 0
		};
		if (!GUIEnergyBar) {
			GUIEnergyBar = new android.widget.ImageView(_0x81e9x1d7);
			CurrentGUILayout.addView(GUIEnergyBar)
		};
		var _0x81e9x26 = 7 * GUIScale;
		var _0x81e9x27 = parseInt(120 - parseInt(_0x81e9x27b * 112)) * GUIScale;
		setViewPos(GUIEnergyBar, _0x81e9x26, _0x81e9x27);
		if (112 * _0x81e9x27b >= 1) {
			var _0x81e9x1ee = android.graphics.Bitmap.createBitmap(Images.energybar, 0, 112 - parseInt(_0x81e9x27b * 112), 20, parseInt(112 * _0x81e9x27b));
			GUIEnergyBar.setImageBitmap(scaleGUIBitmap(_0x81e9x1ee))
		} else {
			GUIEnergyBar.setImageBitmap(null)
		}
	})
}

function SetProgressBarLevel(_0x81e9x27b) {
	runAsGUI(function() {
		if (!CurrentGUILayout) {
			return
		};
		if (_0x81e9x27b < 0) {
			_0x81e9x27b = 0
		};
		if (_0x81e9x27b > 1) {
			_0x81e9x27b = 1
		};
		if (_0x81e9x27b != _0x81e9x27b) {
			_0x81e9x27b = 0
		};
		var _0x81e9x1d7 = getMcContext();
		if (!GUIProgressBar) {
			GUIProgressBar = new android.widget.ImageView(_0x81e9x1d7);
			CurrentGUILayout.addView(GUIProgressBar)
		};
		var _0x81e9x2c0 = getGUIProgressBarCoords(CurrentOpenedContainer.id);
		var _0x81e9x26 = _0x81e9x2c0.x * GUIScale;
		var _0x81e9x27 = _0x81e9x2c0.y * GUIScale;
		setViewPos(GUIProgressBar, _0x81e9x26, _0x81e9x27);
		if (45 * _0x81e9x27b >= 1) {
			var _0x81e9x1ee = android.graphics.Bitmap.createBitmap(Images.progressbar, 0, 0, 45 * _0x81e9x27b, 26);
			GUIProgressBar.setImageBitmap(scaleGUIBitmap(_0x81e9x1ee))
		} else {
			GUIProgressBar.setImageBitmap(null)
		}
	})
}

function SetLiquidBarLevel(_0x81e9x27b, _0x81e9x158) {
	runAsGUI(function() {
		if (!CurrentGUILayout) {
			return
		};
		var _0x81e9x1d7 = getMcContext();
		if (!GUILiquidBar) {
			GUILiquidBar = new android.widget.ImageView(_0x81e9x1d7);
			CurrentGUILayout.addView(GUILiquidBar)
		};
		if (_0x81e9x27b < 0) {
			_0x81e9x27b = 0
		};
		if (_0x81e9x27b > 1) {
			_0x81e9x27b = 1
		};
		if (_0x81e9x27b != _0x81e9x27b) {
			_0x81e9x27b = 0
		};
		var _0x81e9x26 = getGUILiquidBarX(CurrentOpenedContainer.id) * GUIScale;
		var _0x81e9x27 = parseInt(120 - parseInt(_0x81e9x27b * 112)) * GUIScale;
		var _0x81e9x14 = GUILiquidOffset(_0x81e9x158) * 32;
		var _0x81e9x6b6 = Images.liquids;
		if (_0x81e9x158 >= 20) {
			var _0x81e9x16 = FactAPI.getCustomLiquidData(_0x81e9x158);
			_0x81e9x14 = 0;
			_0x81e9x6b6 = _0x81e9x16.gui
		};
		if (!_0x81e9x6b6) {
			print("<FactAPI> Missing liquid texture, liquid id = " + _0x81e9x158)
		};
		setViewPos(GUILiquidBar, _0x81e9x26, _0x81e9x27);
		if (112 * _0x81e9x27b >= 1) {
			var _0x81e9x1ee = android.graphics.Bitmap.createBitmap(_0x81e9x6b6, _0x81e9x14, Math.max(0, 112 - parseInt(_0x81e9x27b * 112)), 32, parseInt(112 * _0x81e9x27b));
			GUILiquidBar.setImageBitmap(scaleGUIBitmap(_0x81e9x1ee))
		} else {
			GUILiquidBar.setImageBitmap(null)
		}
	})
}

function SetFireBarLevel(_0x81e9x27b, _0x81e9x158) {
	runAsGUI(function() {
		if (!CurrentGUILayout) {
			return
		};
		var _0x81e9x1d7 = getMcContext();
		if (!GUIFireBarBG) {
			GUIFireBarBG = new android.widget.ImageView(_0x81e9x1d7);
			setViewSize(GUIFireBarBG, GUIScale * 32, GUIScale * 32);
			CurrentGUILayout.addView(GUIFireBarBG)
		};
		if (!GUIFireBar) {
			GUIFireBar = new android.widget.ImageView(_0x81e9x1d7);
			CurrentGUILayout.addView(GUIFireBar)
		};
		if (_0x81e9x27b < 0) {
			_0x81e9x27b = 0
		};
		if (_0x81e9x27b > 1) {
			_0x81e9x27b = 1
		};
		if (_0x81e9x27b != _0x81e9x27b) {
			_0x81e9x27b = 0
		};
		var _0x81e9x2c0 = getGUIFireBarCoords(CurrentOpenedContainer.id);
		var _0x81e9x6b8 = android.graphics.Bitmap.createBitmap(Images.fire, 0, 0, 32, 32);
		GUIFireBarBG.setBackgroundDrawable(android.graphics.drawable.BitmapDrawable(scaleGUIBitmap(_0x81e9x6b8)));
		var _0x81e9x26 = _0x81e9x2c0.x * GUIScale;
		var _0x81e9x6b9 = _0x81e9x2c0.y * GUIScale;
		var _0x81e9x27 = Math.floor(_0x81e9x2c0.y + 32 - 32 * _0x81e9x27b) * GUIScale;
		setViewPos(GUIFireBar, _0x81e9x26, _0x81e9x27);
		setViewPos(GUIFireBarBG, _0x81e9x26, _0x81e9x6b9);
		try {
			var _0x81e9x1ee = android.graphics.Bitmap.createBitmap(Images.fire, 32, Math.floor(32 - 32 * _0x81e9x27b), 32, 32 * _0x81e9x27b);
			GUIFireBar.setImageBitmap(scaleGUIBitmap(_0x81e9x1ee))
		} catch (e) {
			GUIFireBar.setImageBitmap(null)
		}
	})
}
var CustomBarDir = {
	TOP: 0,
	RIGHT: 3,
	BOTTOM: 2,
	LEFT: 1
};
var CustomGUIScales = {};

function SetCustomGUIScale(_0x81e9x6bd, _0x81e9x6be, _0x81e9x6bf, _0x81e9x26, _0x81e9x27, _0x81e9x6c0) {
	runAsGUI(function() {
		try {
			if (!CurrentGUILayout) {
				return
			};
			var _0x81e9x1d7 = getMcContext();
			var _0x81e9x2c5 = CustomGUIScales[_0x81e9x6bd];
			var _0x81e9x6c1 = Images[_0x81e9x6bf];
			if (!_0x81e9x6be) {
				_0x81e9x6be = 0
			};
			_0x81e9x6be = Math.max(0, Math.min(1, _0x81e9x6be));
			if (!_0x81e9x2c5) {
				_0x81e9x2c5 = {
					x: _0x81e9x26,
					y: _0x81e9x27,
					tex: _0x81e9x6c1,
					dir: _0x81e9x6c0,
					unique: _0x81e9x6bd,
					bmp_name: _0x81e9x6bf
				};
				_0x81e9x2c5.view = new android.widget.ImageView(_0x81e9x1d7);
				CurrentGUILayout.addView(_0x81e9x2c5.view);
				CustomGUIScales[_0x81e9x6bd] = _0x81e9x2c5
			};
			if (!_0x81e9x6c1) {
				_0x81e9x6c1 = _0x81e9x2c5.tex;
				_0x81e9x26 = _0x81e9x2c5.x;
				_0x81e9x27 = _0x81e9x2c5.y;
				_0x81e9x6c0 = _0x81e9x2c5.dir
			};
			if (!_0x81e9x6c1) {
				clientMessage("§4<FactAPI> Error: no bitmap for scale " + _0x81e9x6bd);
				return
			};
			var _0x81e9x6c2 = 0,
				_0x81e9x6c3 = 0,
				_0x81e9x6c4 = 1,
				_0x81e9x6c5 = 1;
			if (_0x81e9x6c0 == 0) {
				_0x81e9x6c3 = 1 - _0x81e9x6be
			};
			if (_0x81e9x6c0 == 1) {
				_0x81e9x6c2 = 1 - _0x81e9x6be
			};
			if (_0x81e9x6c0 == 2) {
				_0x81e9x6c5 = _0x81e9x6be
			};
			if (_0x81e9x6c0 == 3) {
				_0x81e9x6c4 = _0x81e9x6be
			};
			_0x81e9x6c2 = parseInt(_0x81e9x6c2 * _0x81e9x6c1.width);
			_0x81e9x6c3 = parseInt(_0x81e9x6c3 * _0x81e9x6c1.height);
			_0x81e9x6c4 = parseInt(_0x81e9x6c4 * _0x81e9x6c1.width);
			_0x81e9x6c5 = parseInt(_0x81e9x6c5 * _0x81e9x6c1.height);
			var _0x81e9x6c6 = (_0x81e9x6c2 + _0x81e9x26) * GUIScale;
			var _0x81e9x6c7 = (_0x81e9x6c3 + _0x81e9x27) * GUIScale;
			if (_0x81e9x6c4 > _0x81e9x6c2 && _0x81e9x6c5 > _0x81e9x6c3) {
				var _0x81e9x1ee = android.graphics.Bitmap.createBitmap(_0x81e9x6c1, _0x81e9x6c2, _0x81e9x6c3, _0x81e9x6c4 - _0x81e9x6c2, _0x81e9x6c5 - _0x81e9x6c3);
				_0x81e9x2c5.view.setImageBitmap(scaleGUIBitmap(_0x81e9x1ee))
			} else {
				_0x81e9x2c5.view.setImageBitmap(null)
			};
			setViewPos(_0x81e9x2c5.view, _0x81e9x6c6, _0x81e9x6c7)
		} catch (e) {
			clientMessage("§4" + e)
		}
	})
}
var GUICustomButtonUniqueID = 0;

function AddCustomButtonToGUI(_0x81e9x6ca, _0x81e9x26, _0x81e9x27, _0x81e9xd) {
	runAsGUI(function() {
		var _0x81e9x10 = GUICustomButtonUniqueID++;
		var _0x81e9x6c1 = scaleGUIBitmap(Images[_0x81e9x6ca]);
		if (!_0x81e9x6c1) {
			clientMessage("§4<FactAPI> Error: no bitmap for button at " + [_0x81e9x26, _0x81e9x27])
		};
		var _0x81e9x1d7 = getMcContext();
		var _0x81e9x693 = new android.widget.Button(_0x81e9x1d7);
		var _0x81e9x6b1 = android.graphics.drawable.BitmapDrawable(scaleGUIBitmap(_0x81e9x6c1, 1.5));
		_0x81e9x693.setBackgroundDrawable(_0x81e9x6b1);
		setViewSize(_0x81e9x693, _0x81e9x6c1.width, _0x81e9x6c1.height);
		CurrentGUILayout.addView(_0x81e9x693);
		setViewPos(_0x81e9x693, _0x81e9x26 * GUIScale, _0x81e9x27 * GUIScale);
		CurrentOpenedContainer.registerButtonFunction(_0x81e9x10, _0x81e9xd);
		_0x81e9x693.setOnClickListener(new android.view.View.OnClickListener({
			onClick: function() {
				try {
					CurrentOpenedContainer.executeButtonFunction(_0x81e9x10)
				} catch (e) {
					clientMessage(e)
				}
			}
		}))
	})
}
var guiLiquidTextureOffsetData = {
	8: 0,
	1: 1,
	2: 2,
	3: 3,
	10: 4,
	4: 6,
	5: 8,
	6: 7,
	7: 5
};

function GUILiquidOffset(_0x81e9x158) {
	return guiLiquidTextureOffsetData[_0x81e9x158] || 0
}
var guiInButtonPosData = {
	3: 182,
	5: block_mob_slayer,
	6: block_mob_slayer,
	8: 60,
	9: block_growth_accelerator
};

function getInButtonX(_0x81e9x10) {
	if (_0x81e9x10 >= 32) {
		var _0x81e9x692 = FactAPI.GUI.getCustomGuiScreen(_0x81e9x10);
		if (_0x81e9x692 && _0x81e9x692.in_x >= 0) {
			return _0x81e9x692.in_x
		}
	};
	if (guiInButtonPosData[_0x81e9x10]) {
		return guiInButtonPosData[_0x81e9x10]
	};
	return 108
}

function getGUIProgressBarCoords(_0x81e9x10) {
	if (_0x81e9x10 >= 32) {
		var _0x81e9x692 = FactAPI.GUI.getCustomGuiScreen(_0x81e9x10);
		if (_0x81e9x692 && _0x81e9x692.progress_coords) {
			return _0x81e9x692.progress_coords
		}
	};
	if (_0x81e9x10 == 4) {
		return {
			x: 83,
			y: 51
		}
	};
	return {
		x: 104,
		y: 51
	}
}

function getGUILiquidBarX(_0x81e9x10) {
	if (_0x81e9x10 >= 32) {
		var _0x81e9x692 = FactAPI.GUI.getCustomGuiScreen(_0x81e9x10);
		if (_0x81e9x692 && _0x81e9x692.liquid_x >= 0) {
			return _0x81e9x692.liquid_x
		}
	};
	if (_0x81e9x10 == 9) {
		return 8
	};
	return 105
}

function getGUIFireBarCoords(_0x81e9x10) {
	if (_0x81e9x10 >= 32) {
		var _0x81e9x692 = FactAPI.GUI.getCustomGuiScreen(_0x81e9x10);
		if (_0x81e9x692 && _0x81e9x692.fire_coords) {
			return _0x81e9x692.fire_coords
		}
	};
	return {
		x: 70,
		y: 48
	}
}
var AspectIconsDataList = [];
var GUIAspectIcons = [];

function UpdateAllIconList(_0x81e9x4b, _0x81e9x694) {
	runAsGUI(function() {
		if (!CurrentGUILayout) {
			return
		};
		for (var i in GUIAspectIcons) {
			CurrentGUILayout.removeView(GUIAspectIcons[i])
		};
		var _0x81e9x6d5 = GUIAspectIcons;
		_0x81e9x6d5 = [];
		GUIAspectIcons = [];
		AspectIconsDataList = [];
		var _0x81e9x1d7 = getMcContext();
		for (var i in _0x81e9x4b) {
			var _0x81e9x6b0 = null;
			if (!_0x81e9x6b0) {
				_0x81e9x6b0 = new android.widget.ImageView(_0x81e9x1d7);
				var _0x81e9x6d6 = _0x81e9x4b[i].onclick;
				_0x81e9x6b0.setOnClickListener(getIconClicker(_0x81e9x6d6));
				CurrentGUILayout.addView(_0x81e9x6b0)
			};
			var _0x81e9x2aa = getAspectIcon(_0x81e9x4b[i].id);
			setViewPos(_0x81e9x6b0, (_0x81e9x4b[i].x - 10) * GUIScale, (_0x81e9x4b[i].y - 10) * GUIScale);
			_0x81e9x6b0.setImageBitmap(_0x81e9x2aa);
			GUIAspectIcons[i] = _0x81e9x6b0;
			AspectIconsDataList[i] = _0x81e9x4b[i]
		}
	})
}

function getIconClicker(_0x81e9x6d6) {
	return new android.view.View.OnClickListener({
		onClick: function(_0x81e9x26a) {
			try {
				if (_0x81e9x6d6) {
					_0x81e9x6d6()
				}
			} catch (e) {
				clientMessage(e)
			}
		}
	})
}

function updateAspectIcon(i, _0x81e9x10, _0x81e9x26, _0x81e9x27) {
	var _0x81e9x16 = AspectIconsDataList[i];
	var _0x81e9x6b0 = GUIAspectIcons[i];
	if (!_0x81e9x6b0) {
		return false
	};
	runAsGUI(function() {
		if (_0x81e9x16.id != _0x81e9x10) {
			var _0x81e9x2aa = getAspectIcon(_0x81e9x10);
			_0x81e9x6b0.setImageBitmap(_0x81e9x2aa)
		};
		setViewPos(_0x81e9x6b0, (_0x81e9x26 - 10) * GUIScale, (_0x81e9x27 - 10) * GUIScale);
		_0x81e9x16.id = _0x81e9x10;
		_0x81e9x16.x = _0x81e9x26;
		_0x81e9x16.y = _0x81e9x27
	});
	return true
}

function getAspectIcon(_0x81e9x10) {
	var _0x81e9x1ee = getGUIItemIcon(_0x81e9x10, 0);
	if (!_0x81e9x1ee) {
		return null
	};
	_0x81e9x1ee = android.graphics.Bitmap.createScaledBitmap(_0x81e9x1ee, 24 * GUIScale, 24 * GUIScale, false);
	return _0x81e9x1ee
}

function genGuiBitmapReplacement(_0x81e9x304, _0x81e9x175, _0x81e9x171) {
	var _0x81e9x1ee = android.graphics.Bitmap.createBitmap(_0x81e9x304, _0x81e9x175, android.graphics.Bitmap.Config.ARGB_8888);
	for (var _0x81e9x26 = 0; _0x81e9x26 < _0x81e9x304; _0x81e9x26++) {
		for (var _0x81e9x27 = 0; _0x81e9x27 < _0x81e9x175; _0x81e9x27++) {
			_0x81e9x1ee.setPixel(_0x81e9x26, _0x81e9x27, android.graphics.Color.WHITE)
		}
	};
	return _0x81e9x1ee
}
var guiItemsRawData = "260:0,item_raw_carbon:0,262:-1,271:-1,275:-1,258:-1,286:-1,279:-1,355:0,364:0,363:0,item_wrench:0,item_nano_saber:-1,0:0,352:0,item_composite_ingot:0,340:0,item_constone_spray:0,item_compressed_constone:0,301:-1,item_quantum_boots:-1,309:-1,317:0,313:0,281:0,0:0,0:0,0:0,261:-1,297:0,item_honey_frame:0,336:0,325:0,325:1,325:8,325:10,354:0,391:0,0:0,0:0,457:0,item_coal_ball:0,263:1,299:-1,item_quantum_suit:-1,307:-1,315:-1,311:-1,366:0,365:0,337:0,263:0,item_iridium_chunk:0,357:0,264:0,item_rubber_tree_sapling:0,330:0,324:0,351:0,351:1,351:2,351:3,351:4,351:5,351:6,351:7,351:8,351:9,351:10,351:11,351:12,351:13,351:14,351:15,344:0,388:0,0:0,0:0,0:0,0:0,item_battery:-1,item_teleport_accesser:0,item_composite_plate:0,288:0,item_jetpack:-1,item_carbonium_plate:0,0:0,item_nano_helmet:-1,item_nano_suit:-1,item_nano_leggings:-1,item_nano_boots:-1,349:0,318:0,259:-1,item_usual_drone:0,item_circuit:0,348:0,item_latex:0,266:0,item_empty_frame:0,289;0,298:-1,item_quantum_helmet:-1,306:-1,314:-1,310:-1,290:-1,291:-1,292:-1,294:-1,293:-1,item_iridium_composite:0,0:0,265:0,item_steel_ingot:0,item_leash:-1,334:0,300:-1,item_quantum_leggings:-1,308:-1,316:-1,312:-1,item_oil_bucket:-1,item_liquid_matter_bucket:-1,item_energy_crystal:-1,360:0,0:0,item_copper_ingot:0,item_dust_tin:0,item_dust_copper:0,328:0,item_tin_ingot:0,282:0,459:0,0:0,405:0,item_biomass_bucket:-1,item_fuel_bucket:-1,321:0,339:0,270:-1,274:-1,257:-1,285:-1,278:-1,320:0,319:0,392:0,393:0,0:0,item_mead_bottle:0,item_honey_bottle:0,item_empty_bottle:0,0:0,400:0,406:0,0:0,503:0,504:-1,item_overclocker_upgrade:0,item_dust_iron:0,item_dust_gold:0,505:-1,item_uu_matter:0,item_advanced_machine_module:0,item_drill:-1,item_chainsaw:-1,511:-1,item_iridium:0,331:0,388:0,item_uranium:0,item_coal_dust:0,item_mining_laser:-1,item_coal_chunk:0,362:0,361:0,295:0,458:0,359:-1,269:-1,273:-1,256:-1,284:-1,277:-1,323:0,item_treetap:0,item_rubber:0,item_copper_wire:0,item_usual_queen:-1,item_scrab:0,item_batpack:-1,332:0,383:10,383:11,383:12,383:13,383:14,383:15,383:16,383:32,383:33,383:34,383:35,383:36,383:37,383:38,383:39,item_advanced_circuit:0,item_scrab_box:0,280:0,287:0,353:0,268:-1,272:-1,267:-1,283:-1,276:-1,296:0,347:0,345:0,0:0,0:0,0:0,item_crystal_wire:0,item_golden_wire:0,item_steel_wire:0,item_super_conductor:0,item_ec_meter:-1,item_cell_empty:0,item_cell_milk:0,item_cell_honey:0,item_cell_mead:0,item_cell_oil:0,item_cell_fuel:0,item_cell_biomass:0,item_cell_liquid_matter:0,item_cell_water:0,item_cell_lava:0,item_uranium_rod_singler:-1,item_uranium_rod_double:-1,item_uranium_rod_quad:-1,0:0,item_reactor_reflector:-1,item_advanced_reactor_reflector:-1,item_reactor_vent:-1,0:0,0:0,0:0,0:0,0:0,item_reactor_plating:-1,item_coolant_cell_singler:-1,item_coolant_cell_triple:-1,item_coolant_cell_six:-1,0:0,0:0,460:0,463:0";
var guiItemsData = {};
var guiBlockRawData = "1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,24,26,27,30,31,32,35,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,56,57,58,59,60,61,62,63,64,65,66,67,68,71,73,74,78,79,80,81,82,83,85,86,87,89,91,92,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,114,120,121,126,127,128,129,133,134,135,136,139,141,142,155,156,157,158,159,161,162,163,164,170,171,172,173,174,175,block_copper_ore,block_tin_ore,block_rubber_tree_wood,block_rubber_tree_leaves,block_rubber_wood_with_latex,block_uranium_ore,block_iridium_ore,block_blended_dust_ore,block_machine_block,block_recycler,block_crop_harvester,block_quarry,block_wooden_pipe,block_macerator,block_beacon,block_drill_station,block_barrel,block_solar_pannel,block_bat_box,block_fuel_generator,block_nuclear_reactor_controller,block_electric_furnace,block_mass_fabricator,block_wire,block_transporting_pipe,block_filter_pipe,block_teleporter,block_windmill,block_watermill,block_geotermal_generator,block_pump,block_auto_milker,block_bucket_filler,block_growth_accelerator,block_mob_slayer,block_auto_feeder,block_defender,block_assembler,block_liquid_blender,block_block_breaker,block_heater,block_nuclear_bomb,block_golden_pipe,block_MFE,block_wild_hive,block_bee_hive,block_centrefuge,block_extractor,243,244,245,246,247,248,249,255,block_terraformer";
var guiBlockData = [];
var guiItemDamage = [];

function LoadGUIItemData() {
	guiItemsData = {};
	var _0x81e9x2a0 = guiItemsRawData.split(",");
	for (var i in _0x81e9x2a0) {
		var _0x81e9x162 = _0x81e9x2a0[i].split(":");
		_0x81e9x162 = eval(_0x81e9x162[0]) + ":" + _0x81e9x162[1];
		guiItemsData[_0x81e9x162] = i
	};
	guiItemDamage = [];
	for (var i in guiItemDamageRaw) {
		var _0x81e9x347 = guiItemDamageRaw[i].split(":");
		guiItemDamage[eval(_0x81e9x347[0])] = parseInt(_0x81e9x347[1])
	};
	guiBlockData = [];
	var _0x81e9x331 = guiBlockRawData.split(",");
	for (var i in _0x81e9x331) {
		guiBlockData[eval(_0x81e9x331[i])] = parseInt(i)
	};
	guiBlockData[block_liquid_constone] = guiBlockData[82];
	FactAPI.InvokeCallback("GUILoad")
}

function cloneGuiItemOverrideBitmap(_0x81e9x1ee) {
	if (!_0x81e9x1ee) {
		return null
	};
	var _0x81e9x304 = _0x81e9x1ee.width;
	var _0x81e9x175 = _0x81e9x1ee.height;
	return android.graphics.Bitmap.createScaledBitmap(android.graphics.Bitmap.createScaledBitmap(_0x81e9x1ee, _0x81e9x304 * 2, _0x81e9x175 * 2, false), _0x81e9x304, _0x81e9x175, false)
}

function getGUIItemIcon_old(_0x81e9x10, _0x81e9x16) {
	var _0x81e9x6e3 = _0x81e9x10 + ":" + _0x81e9x16;
	var _0x81e9x6e4 = _0x81e9x10 + ":-1";
	var _0x81e9x6e5 = parseInt(_0x81e9x10);
	var _0x81e9x3c0 = -1;
	var _0x81e9x6e6 = FactAPI.AddonItemTextureList[_0x81e9x6e3];
	var _0x81e9x6e7 = FactAPI.AddonItemTextureList[_0x81e9x6e4];
	var _0x81e9x6e8 = null;
	if (_0x81e9x6e6) {
		_0x81e9x6e8 = cloneGuiItemOverrideBitmap(_0x81e9x6e6)
	} else {
		if (_0x81e9x6e7) {
			_0x81e9x6e8 = cloneGuiItemOverrideBitmap(_0x81e9x6e7)
		} else {
			if (_0x81e9x10 > 255) {
				if (guiItemsData[_0x81e9x6e3] + "" != "undefined") {
					_0x81e9x3c0 = guiItemsData[_0x81e9x6e3]
				};
				if (guiItemsData[_0x81e9x6e4] + "" != "undefined") {
					_0x81e9x3c0 = guiItemsData[_0x81e9x6e4]
				};
				if (_0x81e9x3c0 == -1) {
					_0x81e9x3c0 = 256
				}
			} else {
				_0x81e9x3c0 = guiBlockData[_0x81e9x6e5];
				if (guiBlockData[_0x81e9x6e5] != _0x81e9x3c0) {
					_0x81e9x3c0 = 256
				}
			}
		}
	};
	if (_0x81e9x10 == 0) {
		return null
	};
	var _0x81e9x3d0, _0x81e9x3d1, _0x81e9x1ee;
	if (_0x81e9x10 > 255 || _0x81e9x10 == 0 || _0x81e9x3c0 == 256) {
		if (_0x81e9x6e8) {
			_0x81e9x1ee = _0x81e9x6e8
		} else {
			_0x81e9x3d0 = (_0x81e9x3c0 % 16) * 16;
			_0x81e9x3d1 = parseInt(_0x81e9x3c0 / 16) * 16;
			_0x81e9x1ee = android.graphics.Bitmap.createBitmap(Images.items, _0x81e9x3d0, _0x81e9x3d1, 16, 16)
		};
		if (_0x81e9x16 > 0 && guiItemDamage[_0x81e9x10]) {
			var _0x81e9x6e9 = guiItemDamage[_0x81e9x10];
			var _0x81e9x6ea = parseInt(16 - _0x81e9x16 / _0x81e9x6e9 * 16 + 0.5);
			var _0x81e9x6eb = parseInt(_0x81e9x16 / _0x81e9x6e9 * 255);
			for (var _0x81e9x38a = 0; _0x81e9x38a < 16; _0x81e9x38a++) {
				var _0x81e9x23b = android.graphics.Color.BLACK;
				if (_0x81e9x38a < _0x81e9x6ea) {
					_0x81e9x23b = android.graphics.Color.rgb(_0x81e9x6eb, 255 - _0x81e9x6eb, 0)
				};
				_0x81e9x1ee.setPixel(_0x81e9x38a, 14, _0x81e9x23b)
			}
		}
	} else {
		if (!_0x81e9x6e8) {
			_0x81e9x1ee = GetBitmapAssetAndCache("blocks/" + _0x81e9x10 + "_" + _0x81e9x16 + ".png");
			if (!_0x81e9x1ee) {
				_0x81e9x1ee = GetBitmapAssetAndCache("blocks/" + _0x81e9x10 + ".png")
			};
			return _0x81e9x1ee
		} else {
			_0x81e9x1ee = _0x81e9x6e8
		}
	};
	return _0x81e9x1ee
}

function GUISlot(_0x81e9x26, _0x81e9x27, _0x81e9x6ed) {
	this.x = _0x81e9x26;
	this.y = _0x81e9x27;
	this.id = this.count = this.data = 0;
	this.cachedIcon = null;
	this.imgView = this.selView = this.textView = null;
	this.isSelected = false;
	this.isMini = _0x81e9x6ed;
	if (_0x81e9x6ed) {
		this.selBmp = scaleGUIBitmap(Images.selection, 20 / 32)
	} else {
		this.selBmp = scaleGUIBitmap(Images.selection)
	};
	this.createView = function() {
		var _0x81e9x1d7 = getMcContext();
		var _0x81e9x6ee = 32;
		if (this.isMini) {
			_0x81e9x6ee = 20
		};
		var _0x81e9x2af = new android.widget.FrameLayout.LayoutParams(_0x81e9x6ee * GUIScale, _0x81e9x6ee * GUIScale);
		try {
			this.bgView = new android.widget.ImageView(_0x81e9x1d7);
			this.bgView.setLayoutParams(_0x81e9x2af);
			CurrentGUILayout.addView(this.bgView);
			setViewPos(this.bgView, this.x * GUIScale, this.y * GUIScale);
			if (this.isMini) {
				this.bgView.setImageBitmap(scaleGUIBitmap(Images.slot))
			};
			this.imgView = new android.widget.ImageView(_0x81e9x1d7);
			this.imgView.setLayoutParams(_0x81e9x2af);
			CurrentGUILayout.addView(this.imgView);
			setViewPos(this.imgView, this.x * GUIScale, this.y * GUIScale);
			this.selView = new android.widget.ImageView(_0x81e9x1d7);
			setViewPos(this.selView, (this.x - 2) * GUIScale, (this.y - 2) * GUIScale);
			CurrentGUILayout.addView(this.selView);
			this.tView = new android.widget.TextView(_0x81e9x1d7);
			CurrentGUILayout.addView(this.tView);
			if (!this.isMini) {
				setViewPos(this.tView, (this.x + 20) * GUIScale, (this.y + 20) * GUIScale)
			} else {
				setViewPos(this.tView, (this.x + 10) * GUIScale, (this.y + 10) * GUIScale)
			}
		} catch (e) {
			clientMessage(e)
		}
	};
	this.updateSlot = function(_0x81e9x10, _0x81e9x13, _0x81e9x16) {
		if (!this.cachedIcon || _0x81e9x10 != this.id || _0x81e9x16 != this.data) {
			try {
				this.cachedIcon = getGUIItemIcon(_0x81e9x10, _0x81e9x16)
			} catch (e) {
				clientMessage("§6Slot icon error:§4" + e + "§d item = " + [_0x81e9x10, _0x81e9x16])
			}
		};
		var _0x81e9x5b = this;
		this.id = _0x81e9x10;
		this.count = _0x81e9x13;
		this.data = _0x81e9x16;
		runAsGUI(function() {
			if (!_0x81e9x5b.imgView) {
				_0x81e9x5b.createView()
			};
			_0x81e9x5b.imgView.setImageBitmap(_0x81e9x5b.cachedIcon);
			if (_0x81e9x13 > 0) {
				_0x81e9x5b.tView.setText(_0x81e9x13 + "")
			} else {
				_0x81e9x5b.tView.setText("")
			};
			_0x81e9x5b.tView.setTextColor(android.graphics.Color.WHITE);
			_0x81e9x5b.tView.setTextSize(android.util.TypedValue.COMPLEX_UNIT_PX, GUIScale * 8)
		})
	};
	this.setSelection = function(_0x81e9x173) {
		this.isSelected = _0x81e9x173;
		var _0x81e9x5b = this;
		var _0x81e9x6ef = 1;
		if (this.isMini) {
			_0x81e9x6ef = 24 / 36
		};
		runAsGUI(function() {
			if (!_0x81e9x5b.selView) {
				_0x81e9x5b.createView()
			};
			if (_0x81e9x173) {
				_0x81e9x5b.selView.setImageBitmap(scaleGUIBitmap(Images.selection, _0x81e9x6ef))
			} else {
				_0x81e9x5b.selView.setImageBitmap(null)
			}
		})
	}
}
var GUISlotSelected = -1;

function setSelectedGUISlot(_0x81e9x10) {
	try {
		if (GUISlotSelected != -1) {
			GUISlots[GUISlotSelected].setSelection(false)
		};
		if (GUISlotSelected == _0x81e9x10) {
			if (CurrentOpenedContainer != null) {
				CurrentOpenedContainer.transportToInv(_0x81e9x10)
			}
		};
		GUISlotSelected = _0x81e9x10;
		GUISlots[GUISlotSelected].setSelection(true)
	} catch (e) {
		clientMessage(CharColor.RED + "[GUI Error]" + e)
	}
}

function generateSlotClickListener(_0x81e9x5b, _0x81e9x10) {
	runAsGUI(function() {
		if (!_0x81e9x5b.imgView) {
			_0x81e9x5b.createView()
		};
		_0x81e9x5b.imgView.setOnClickListener(new android.view.View.OnClickListener({
			onClick: function(_0x81e9x6b0) {
				if (CurrentOpenedContainer && CurrentOpenedContainer.lockSlots) {
					return
				};
				setSelectedGUISlot(_0x81e9x10)
			}
		}))
	})
}

function updateGUISlot(_0x81e9x347, _0x81e9x10, _0x81e9x13, _0x81e9x16) {
	try {
		GUISlots[_0x81e9x347].updateSlot(_0x81e9x10, _0x81e9x13, _0x81e9x16)
	} catch (e) {}
}

function BuildExternalGUI(_0x81e9x198, _0x81e9x18c) {
	isBuildingExternalGui = true;
	externalGuiOutput = _0x81e9x18c;
	var _0x81e9x195 = ExternalGUIUniqueID++;
	BuildGUI(_0x81e9x198.id, _0x81e9x195);
	ExternalGUIDataMap[_0x81e9x195] = _0x81e9x198;
	return _0x81e9x195
}
var GUIBuildData = 0;
var isBuildingExternalGui = false;
var externalGuiOutput = null;

function BuildGUI(_0x81e9x10, _0x81e9x6f9) {
	if (isBuildingExternalGui) {
		externalGuiOutput.writeUTF("gui-build");
		externalGuiOutput.writeInt(parseInt(_0x81e9x10));
		externalGuiOutput.writeInt(_0x81e9x6f9)
	};
	if (_0x81e9x10 == 0) {
		addSlotToCurrentGUI(64, 48);
		addSlotToCurrentGUI(164, 48)
	};
	if (_0x81e9x10 == 1) {
		addSlotToCurrentGUI(102, 48)
	};
	if (_0x81e9x10 == 2) {
		addSlotToCurrentGUI(64, 48);
		addSlotToCurrentGUI(164, 48);
		addSlotToCurrentGUI(220, 48)
	};
	if (_0x81e9x10 == 3) {
		addSlotToCurrentGUI(180, 48)
	};
	if (_0x81e9x10 == 4) {
		addSlotToCurrentGUI(29, 28);
		addSlotToCurrentGUI(29, 68);
		addSlotToCurrentGUI(159, 15);
		addSlotToCurrentGUI(192, 15);
		addSlotToCurrentGUI(143, 49);
		addSlotToCurrentGUI(176, 49);
		addSlotToCurrentGUI(211, 49);
		addSlotToCurrentGUI(159, 83);
		addSlotToCurrentGUI(143, 83)
	};
	if (_0x81e9x10 == 5) {
		for (var i = 0; i < 9; i++) {
			addSlotToCurrentGUI(16 + (i % 3) * 34, 16 + parseInt(i / 3) * 34)
		}
	};
	if (_0x81e9x10 == 6) {
		var _0x81e9x1b7 = GUIBuildData + 1;
		var _0x81e9x14 = 116 - GUIBuildData * 12;
		for (var _0x81e9x26 = 0; _0x81e9x26 < _0x81e9x1b7; _0x81e9x26++) {
			for (var _0x81e9x27 = 0; _0x81e9x27 < 4; _0x81e9x27++) {
				addSlotToCurrentGUI(_0x81e9x14 + _0x81e9x26 * 24, _0x81e9x27 * 24 + 4, true)
			}
		}
	};
	if (_0x81e9x10 == 7) {
		for (var _0x81e9x26 = 0; _0x81e9x26 < 7; _0x81e9x26++) {
			for (var _0x81e9x27 = 0; _0x81e9x27 < 3; _0x81e9x27++) {
				if (_0x81e9x26 != 3) {
					addSlotToCurrentGUI(_0x81e9x26 * 24 + 44, 6 + _0x81e9x27 * 24, true)
				}
			}
		}
	};
	if (_0x81e9x10 == 8) {
		addSlotToCurrentGUI(180, 16);
		addSlotToCurrentGUI(180, 80)
	};
	if (_0x81e9x10 == 9) {
		var _0x81e9x16 = GUIBuildData;
		for (var _0x81e9x26 = 0; _0x81e9x26 < 6; _0x81e9x26++) {
			for (var _0x81e9x28 = 0; _0x81e9x28 < 6; _0x81e9x28++) {
				var _0x81e9x6fa = parseInt(_0x81e9x26 / 2) * 3 + parseInt(_0x81e9x28 / 2);
				var _0x81e9x6fb = ((_0x81e9x16 >> _0x81e9x6fa) & 1 == 1);
				if (_0x81e9x6fb) {
					addSlotToCurrentGUI(_0x81e9x26 * 21 + 70, _0x81e9x28 * 21 + 1, true)
				} else {
					addSlotToCurrentGUI(256, 128)
				}
			}
		}
	};
	if (_0x81e9x10 >= 32) {
		FactAPI.GUI.BuildGUI(_0x81e9x10, isBuildingExternalGui)
	};
	GUIBuildData = 0;
	if (isBuildingExternalGui) {
		externalGuiOutput.writeBoolean(false);
		isBuildingExternalGui = false;
		externalGuiOutput = null
	}
}

function setViewSize(_0x81e9x26a, _0x81e9x304, _0x81e9x175) {
	var _0x81e9x2af = new android.widget.FrameLayout.LayoutParams(_0x81e9x304, _0x81e9x175);
	_0x81e9x26a.setLayoutParams(_0x81e9x2af)
}

function setViewPos(_0x81e9x26a, _0x81e9x26, _0x81e9x27) {
	var _0x81e9x2af = _0x81e9x26a.getLayoutParams();
	if (_0x81e9x2af == null) {
		_0x81e9x2af = new android.widget.RelativeLayout.LayoutParams(android.view.ViewGroup.LayoutParams.WRAP_CONTENT, android.view.ViewGroup.LayoutParams.WRAP_CONTENT)
	};
	_0x81e9x2af.topMargin = _0x81e9x27;
	_0x81e9x2af.leftMargin = _0x81e9x26;
	_0x81e9x26a.setLayoutParams(_0x81e9x2af)
}

function scaleGUIBitmap(_0x81e9x1ee, _0x81e9x6ef) {
	if (!_0x81e9x6ef) {
		_0x81e9x6ef = 1
	};
	if (!_0x81e9x1ee) {
		return _0x81e9x1ee
	};
	return android.graphics.Bitmap.createScaledBitmap(_0x81e9x1ee, _0x81e9x1ee.getWidth() * GUIScale * _0x81e9x6ef, _0x81e9x1ee.getHeight() * GUIScale * _0x81e9x6ef, false)
}
ModPE.downloadFile = function(_0x81e9x1e6, _0x81e9x1e7) {
	var _0x81e9x1e8 = android.os.Environment.getExternalStorageDirectory().getAbsolutePath() + "/games/com.mojang/FactorizationGUI";
	var _0x81e9x1e9 = new java.io.File(_0x81e9x1e8 + "/" + _0x81e9x1e6);
	_0x81e9x1e9.createNewFile();
	var _0x81e9x1ea = new java.io.FileOutputStream(_0x81e9x1e9);
	var _0x81e9x1eb = android.net.http.AndroidHttpClient.newInstance("ModPE.downloadFile()").execute(new org.apache.http.client.methods.HttpGet(_0x81e9x1e7)).getEntity().writeTo(_0x81e9x1ea);
	_0x81e9x1ea.close()
};
var jetpackGUIWin = null;
var jetpackButtonPressed = false;

function createJetpackGUI() {
	var _0x81e9x1d7 = com.mojang.minecraftpe.MainActivity.currentMainActivity.get();
	runAsGUI(function() {
		if (jetpackGUIWin != null) {
			return
		};
		var _0x81e9x1dc = new android.widget.LinearLayout(_0x81e9x1d7);
		var _0x81e9x67f = new android.widget.PopupWindow(_0x81e9x1d7);
		jetpackGUIWin = _0x81e9x67f;
		_0x81e9x67f.setContentView(_0x81e9x1dc);
		_0x81e9x1dc.setOrientation(android.widget.LinearLayout.VERTICAL);
		var _0x81e9x680 = _0x81e9x1d7.getWindowManager().getDefaultDisplay().getWidth() / 10;
		_0x81e9x67f.setWidth(_0x81e9x680);
		_0x81e9x67f.setHeight(_0x81e9x680);
		var _0x81e9x681 = new android.widget.ImageView(_0x81e9x1d7);
		_0x81e9x681.setImageBitmap(android.graphics.Bitmap.createScaledBitmap(android.graphics.Bitmap.createBitmap(Images.buttons, 40, 0, 20, 20), _0x81e9x680, _0x81e9x680, false));
		setViewSize(_0x81e9x681, _0x81e9x680, _0x81e9x680);
		_0x81e9x681.setOnTouchListener(new android.view.View.OnTouchListener({
			onTouch: function(_0x81e9x1c7, _0x81e9x174) {
				if (_0x81e9x174.action == 0) {
					jetpackButtonPressed = true
				};
				if (_0x81e9x174.action == 1) {
					jetpackButtonPressed = false
				};
				return true
			}
		}));
		_0x81e9x1dc.addView(_0x81e9x681);
		_0x81e9x67f.showAtLocation(_0x81e9x1d7.getWindow().getDecorView(), android.view.Gravity.RIGHT | android.view.Gravity.BOTTOM, 0, _0x81e9x680 * 2);
		jetpackGUIWin = _0x81e9x67f
	})
}

function dismissJetpackGUI() {
	if (jetpackGUIWin == null) {
		return
	};
	var _0x81e9x1d7 = com.mojang.minecraftpe.MainActivity.currentMainActivity.get();
	runAsGUI(function() {
		if (jetpackGUIWin != null) {
			jetpackGUIWin.dismiss();
			jetpackGUIWin = null
		}
	})
}

function LoadBitmapFromAssets(_0x81e9x17, _0x81e9x704) {
	var _0x81e9x287 = ModPE.getBytesFromTexturePack("assets/FactorizationGUI/" + _0x81e9x17);
	var _0x81e9x1ed = new android.graphics.BitmapFactory.Options();
	_0x81e9x1ed.inScaled = false;
	if (_0x81e9x287) {
		return android.graphics.BitmapFactory.decodeByteArray(_0x81e9x287, 0, _0x81e9x287.length)
	} else {
		if (!_0x81e9x704) {
			print("missing bitmap: " + _0x81e9x17)
		}
	}
}

function UnpackFileFromAssets(_0x81e9x17, _0x81e9x1e8) {
	var _0x81e9x287 = ModPE.getBytesFromTexturePack("assets/FactorizationGUI/" + _0x81e9x17);
	if (!_0x81e9x287) {
		return false
	};
	var _0x81e9x18c = new java.io.FileOutputStream(android.os.Environment.getExternalStorageDirectory().getAbsolutePath() + _0x81e9x1e8);
	_0x81e9x18c.write(_0x81e9x287);
	_0x81e9x18c.close();
	return true
}
var BitmapCache = {};

function GetBitmapAssetAndCache(_0x81e9x17) {
	var _0x81e9x345 = BitmapCache[_0x81e9x17];
	if (_0x81e9x345 == 0) {
		return null
	};
	if (_0x81e9x345) {
		return _0x81e9x345
	};
	var _0x81e9x287 = ModPE.getBytesFromTexturePack(_0x81e9x17);
	var _0x81e9x1ed = new android.graphics.BitmapFactory.Options();
	_0x81e9x1ed.inScaled = false;
	if (_0x81e9x287) {
		var _0x81e9x1ee = android.graphics.BitmapFactory.decodeByteArray(_0x81e9x287, 0, _0x81e9x287.length)
	} else {
		var _0x81e9x1ee = null
	};
	if (_0x81e9x1ee) {
		BitmapCache[_0x81e9x17] = _0x81e9x1ee
	} else {
		BitmapCache[_0x81e9x17] = 0
	};
	return _0x81e9x1ee
}

function LoadBitmap(_0x81e9x17) {
	var _0x81e9x1ed = new android.graphics.BitmapFactory.Options();
	_0x81e9x1ed.inScaled = false;
	var _0x81e9x1ee = android.graphics.BitmapFactory.decodeFile(android.os.Environment.getExternalStorageDirectory().getAbsolutePath() + "/games/com.mojang/FactorizationGUI/" + _0x81e9x17, _0x81e9x1ed);
	return _0x81e9x1ee
}

function LoadBitmapAnyPath(_0x81e9x17) {
	var _0x81e9x1ed = new android.graphics.BitmapFactory.Options();
	_0x81e9x1ed.inScaled = false;
	var _0x81e9x1ee = android.graphics.BitmapFactory.decodeFile(android.os.Environment.getExternalStorageDirectory().getAbsolutePath() + "/" + _0x81e9x17, _0x81e9x1ed);
	return _0x81e9x1ee
}

function LoadImageByFile(_0x81e9x1e9) {
	var _0x81e9x1ed = new android.graphics.BitmapFactory.Options();
	_0x81e9x1ed.inScaled = false;
	var _0x81e9x1ee = android.graphics.BitmapFactory.decodeFile(_0x81e9x1e9, _0x81e9x1ed);
	return _0x81e9x1ee
}
var GUIDownloadError = false;

function tryDownloadGUIFiles() {}
var GuiFilesLoaded = false;

function GUILoadImages(_0x81e9x70f) {
	if (GuiFilesLoaded && !_0x81e9x70f) {
		return
	};
	print("loading gui...");
	var _0x81e9x287 = ModPE.getBytesFromTexturePack("assets/FactorizationGUI/.image_names");
	var _0x81e9x162 = new java.lang.String(_0x81e9x287, "UTF-8");
	var _0x81e9x710 = (_0x81e9x162 + "").split("\n");
	for (var i in _0x81e9x710) {
		var _0x81e9x162 = _0x81e9x710[i].split(":");
		if (_0x81e9x162.length == 2) {
			Images[_0x81e9x162[0]] = LoadBitmapFromAssets(_0x81e9x162[1])
		}
	};
	GuiFilesLoaded = true;
	Images.buttonOff = scaleGUIBitmap(android.graphics.Bitmap.createBitmap(Images.buttons2, 0, 0, 24, 24), 4);
	Images.buttonOn = scaleGUIBitmap(android.graphics.Bitmap.createBitmap(Images.buttons2, 24, 0, 24, 24), 4);
	FactAPI.GUI.LoadBitmaps();
	BuildLiquidAnimations()
}
ExecuteInLoadingThread(GUILoadImages);
var start_menu_icon_url = "";
var start_menu_icon_bitmap = null;
var start_menu_button_win = null;
var start_menu_layout_params = new android.widget.LinearLayout.LayoutParams(android.widget.LinearLayout.LayoutParams.MATCH_PARENT, android.widget.LinearLayout.LayoutParams.WRAP_CONTENT);
start_menu_layout_params.setMargins(10, 20, 10, 0);

function PrepareStartMenu() {
	var _0x81e9x1e8 = android.os.Environment.getExternalStorageDirectory().getAbsolutePath() + "/games/com.mojang/FactorizationGUI";
	var _0x81e9x1c2 = new java.io.File(_0x81e9x1e8);
	_0x81e9x1c2.mkdir();
	start_menu_icon_bitmap = LoadBitmap("start_menu_icon.png");
	if (!start_menu_icon_bitmap) {
		try {
			ModPE.downloadFile("start_menu_icon.png", start_menu_icon_url);
			start_menu_icon_bitmap = LoadBitmap("start_menu_icon.png")
		} catch (e) {}
	};
	if (start_menu_icon_bitmap) {
		start_menu_icon_bitmap = android.graphics.Bitmap.createScaledBitmap(start_menu_icon_bitmap, 96, 96, false)
	};
	ShowStartMenuOpenButton()
}

function ShowStartMenuOpenButton() {
	runAsGUI(function() {
		var _0x81e9x1d7 = getMcContext();
		var _0x81e9x693 = new android.widget.ImageView(_0x81e9x1d7);
		if (start_menu_icon_bitmap) {
			_0x81e9x693.setImageBitmap(start_menu_icon_bitmap)
		} else {
			_0x81e9x693.setImageResource(_0x81e9x1d7.getResources().getIdentifier("ic_menu_settings_holo_light", "drawable", _0x81e9x1d7.getPackageName()))
		};
		start_menu_button_win = new android.widget.PopupWindow(_0x81e9x1d7);
		var _0x81e9x9 = android.widget.LinearLayout.LayoutParams.WRAP_CONTENT;
		start_menu_button_win.setContentView(_0x81e9x693);
		start_menu_button_win.setHeight(96);
		start_menu_button_win.setWidth(96);
		start_menu_button_win.setBackgroundDrawable(null);
		start_menu_button_win.showAtLocation(_0x81e9x1d7.getWindow().getDecorView(), android.view.Gravity.TOP | android.view.Gravity.LEFT, 0, 0);
		_0x81e9x693.setOnClickListener({
			onClick: function() {
				try {
					ReadMcOptions();
					StartMenuButtonClick()
				} catch (e) {
					print(e)
				}
			}
		})
	})
}

function HideStartMenuOpenButton() {
	runAsGUI(function() {
		if (start_menu_button_win) {
			start_menu_button_win.dismiss();
			start_menu_button_win = null
		}
	})
}
PrepareStartMenu();

function InitStartMenuDialog() {}

function StartMenuButtonClick() {
	OptionReader.Init();
	OptionReader.ReadOptions();
	var _0x81e9x1d7 = getMcContext();
	builder = android.app.AlertDialog.Builder(_0x81e9x1d7);
	builder.setIcon(new android.graphics.drawable.BitmapDrawable(start_menu_icon_bitmap));
	builder.setTitle("Factorization");
	var _0x81e9x1dc = new android.widget.LinearLayout(_0x81e9x1d7);
	_0x81e9x1dc.setOrientation(1);
	var _0x81e9x1dd = new android.widget.ScrollView(_0x81e9x1d7);
	_0x81e9x1dd.addView(_0x81e9x1dc);
	var _0x81e9x1de = new android.widget.TextView(_0x81e9x1d7);
	_0x81e9x1de.setText(translate(start_menu_text_data.main_en) + "");
	_0x81e9x1de.setTextSize(20);
	_0x81e9x1dc.addView(_0x81e9x1de, start_menu_layout_params);
	builder.setView(_0x81e9x1dd);
	var _0x81e9x71a = new android.widget.Button(_0x81e9x1d7);
	_0x81e9x71a.setText(translate("ABOUT"));
	_0x81e9x71a.setOnClickListener({
		onClick: function() {
			try {
				OpenMenuDialog_About()
			} catch (e) {
				print(e)
			}
		}
	});
	_0x81e9x1dc.addView(_0x81e9x71a, start_menu_layout_params);
	var _0x81e9x71b = new android.widget.Button(_0x81e9x1d7);
	_0x81e9x71b.setText(translate("CHANGELOG"));
	_0x81e9x71b.setOnClickListener({
		onClick: function() {
			try {
				print("downloading changelog");
				UpdateManager.GetAndShowChangelog()
			} catch (e) {
				print(e)
			}
		}
	});
	_0x81e9x1dc.addView(_0x81e9x71b, start_menu_layout_params);
	var _0x81e9x71c = new android.widget.Button(_0x81e9x1d7);
	_0x81e9x71c.setText(translate("ADDONS"));
	_0x81e9x71c.setOnClickListener({
		onClick: function() {
			try {
				OpenMenuDialog_Addons()
			} catch (e) {
				print(e)
			}
		}
	});
	_0x81e9x1dc.addView(_0x81e9x71c, start_menu_layout_params);
	var _0x81e9x71d = new android.widget.Button(_0x81e9x1d7);
	_0x81e9x71d.setText(translate("CONFIGURATION"));
	_0x81e9x71d.setOnClickListener({
		onClick: function() {
			try {
				OpenMenuDialog_Config()
			} catch (e) {
				print(e)
			}
		}
	});
	_0x81e9x1dc.addView(_0x81e9x71d, start_menu_layout_params);
	var _0x81e9x71e = new android.widget.Button(_0x81e9x1d7);
	_0x81e9x71e.setText(translate("FEEDBACK"));
	_0x81e9x71e.setOnClickListener({
		onClick: function() {
			try {
				OpenMenuDialog_Feedback()
			} catch (e) {
				print(e)
			}
		}
	});
	_0x81e9x1dc.addView(_0x81e9x71e, start_menu_layout_params);
	var _0x81e9x71f = new android.widget.ImageView(_0x81e9x1d7);
	var _0x81e9x720 = AddHandler.GetRandom();
	if (_0x81e9x720 && _0x81e9x720.bmp) {
		_0x81e9x71f.setImageBitmap(_0x81e9x720.bmp);
		_0x81e9x71f.setOnClickListener({
			onClick: function() {
				OpenLinkInBrowser(_0x81e9x720.link);
				return true
			}
		})
	};
	_0x81e9x1dc.addView(_0x81e9x71f, start_menu_layout_params);
	builder.setNeutralButton(translate("CLOSE"), {
		onClick: function() {}
	});
	builder.show()
}

function OpenMenuDialog_Addons() {
	var _0x81e9x1de = translate(start_menu_text_data.addons_en) + "\n";
	for (var i in FactAPI.NewAPIAddonList) {
		_0x81e9x1de += "\n" + FactAPI.NewAPIAddonList[i].GetAddonData()
	};
	showUserAlertDialog(_0x81e9x1de, translate("ADDONS"))
}

function OpenMenuDialog_Crashes() {
	var _0x81e9x1d7 = getMcContext();
	builder = android.app.AlertDialog.Builder(_0x81e9x1d7);
	builder.setIcon(new android.graphics.drawable.BitmapDrawable(start_menu_icon_bitmap));
	builder.setTitle("Crashes?");
	var _0x81e9x1dc = new android.widget.LinearLayout(_0x81e9x1d7);
	_0x81e9x1dc.setOrientation(1);
	var _0x81e9x1dd = new android.widget.ScrollView(_0x81e9x1d7);
	_0x81e9x1dd.addView(_0x81e9x1dc);
	var _0x81e9x1de = new android.widget.TextView(_0x81e9x1d7);
	_0x81e9x1de.setText(translate(start_menu_text_data.crashes_en) + "");
	_0x81e9x1de.setTextSize(20);
	_0x81e9x1dc.addView(_0x81e9x1de, start_menu_layout_params);
	builder.setView(_0x81e9x1dd);
	var _0x81e9x723 = new android.widget.Button(_0x81e9x1d7);
	_0x81e9x723.setText("FIX");
	_0x81e9x723.setOnClickListener({
		onClick: function() {
			try {
				FixArmorMode()
			} catch (e) {
				print(e)
			}
		}
	});
	_0x81e9x1dc.addView(_0x81e9x723, start_menu_layout_params);
	builder.setNeutralButton("BACK", {
		onClick: function() {}
	});
	builder.show()
}

function OpenMenuDialog_Config() {
	var _0x81e9x1d7 = getMcContext();
	builder = android.app.AlertDialog.Builder(_0x81e9x1d7);
	builder.setIcon(new android.graphics.drawable.BitmapDrawable(start_menu_icon_bitmap));
	builder.setTitle(translate("CONFIGURATION"));
	var _0x81e9x1dc = new android.widget.LinearLayout(_0x81e9x1d7);
	_0x81e9x1dc.setOrientation(1);
	var _0x81e9x1dd = new android.widget.ScrollView(_0x81e9x1d7);
	_0x81e9x1dd.addView(_0x81e9x1dc);
	var _0x81e9x1de = new android.widget.TextView(_0x81e9x1d7);
	_0x81e9x1de.setText(translate(start_menu_text_data.config_en) + "");
	_0x81e9x1de.setTextSize(20);
	_0x81e9x1dc.addView(_0x81e9x1de, start_menu_layout_params);
	builder.setView(_0x81e9x1dd);
	var _0x81e9x725 = new android.widget.Button(_0x81e9x1d7);
	_0x81e9x725.setText(translate("OPEN CONFIG FILE"));
	_0x81e9x725.setOnClickListener({
		onClick: function() {
			try {
				OpenTextFileWithIntent(android.os.Environment.getExternalStorageDirectory().getAbsolutePath() + "/games/com.mojang/factorization.options")
			} catch (e) {
				print(e)
			}
		}
	});
	_0x81e9x1dc.addView(_0x81e9x725, start_menu_layout_params);
	builder.setNeutralButton(translate("BACK"), {
		onClick: function() {}
	});
	builder.show()
}

function OpenMenuDialog_Feedback() {
	var _0x81e9x1d7 = getMcContext();
	builder = android.app.AlertDialog.Builder(_0x81e9x1d7);
	builder.setIcon(new android.graphics.drawable.BitmapDrawable(start_menu_icon_bitmap));
	builder.setTitle(translate("FEEDBACK"));
	var _0x81e9x1dc = new android.widget.LinearLayout(_0x81e9x1d7);
	_0x81e9x1dc.setOrientation(1);
	var _0x81e9x1dd = new android.widget.ScrollView(_0x81e9x1d7);
	_0x81e9x1dd.addView(_0x81e9x1dc);
	var _0x81e9x727 = new android.widget.TextView(_0x81e9x1d7);
	_0x81e9x727.setText(translate(start_menu_text_data.feedback_en) + "");
	_0x81e9x727.setTextSize(20);
	_0x81e9x1dc.addView(_0x81e9x727, start_menu_layout_params);
	var _0x81e9x728 = new android.widget.TextView(_0x81e9x1d7);
	_0x81e9x728.setTextSize(20);
	_0x81e9x728.setText(translate("title:"));
	_0x81e9x1dc.addView(_0x81e9x728, start_menu_layout_params);
	var _0x81e9x1d6 = new android.widget.EditText(_0x81e9x1d7);
	_0x81e9x1d6.setMaxLines(1);
	_0x81e9x1d6.setTextSize(20);
	_0x81e9x1dc.addView(_0x81e9x1d6, start_menu_layout_params);
	var _0x81e9x729 = new android.widget.TextView(_0x81e9x1d7);
	_0x81e9x729.setTextSize(20);
	_0x81e9x729.setText(translate("message:"));
	_0x81e9x1dc.addView(_0x81e9x729, start_menu_layout_params);
	var _0x81e9x1de = new android.widget.EditText(_0x81e9x1d7);
	_0x81e9x1de.setMaxLines(50);
	_0x81e9x1de.setTextSize(20);
	_0x81e9x1dc.addView(_0x81e9x1de, start_menu_layout_params);
	builder.setView(_0x81e9x1dd);
	builder.setNeutralButton(translate("BACK"), {
		onClick: function() {}
	});
	builder.setPositiveButton(translate("SUBMIT"), {
		onClick: function() {
			try {
				GlobalFeedbackClient.SendMessage(_0x81e9x1d6.getText() + "", _0x81e9x1de.getText() + "");
				print("your feedback was sent")
			} catch (e) {
				print("could not send feedback, check your connection")
			}
		}
	});
	builder.show()
}

function OpenMenuDialog_About() {
	var _0x81e9x1d7 = getMcContext();
	builder = android.app.AlertDialog.Builder(_0x81e9x1d7);
	builder.setIcon(new android.graphics.drawable.BitmapDrawable(start_menu_icon_bitmap));
	builder.setTitle("About & links");
	var _0x81e9x1dc = new android.widget.LinearLayout(_0x81e9x1d7);
	_0x81e9x1dc.setOrientation(1);
	var _0x81e9x1dd = new android.widget.ScrollView(_0x81e9x1d7);
	_0x81e9x1dd.addView(_0x81e9x1dc);
	var _0x81e9x1de = new android.widget.TextView(_0x81e9x1d7);
	_0x81e9x1de.setText(translate(start_menu_text_data.about_en) + "");
	_0x81e9x1de.setTextSize(20);
	_0x81e9x1dc.addView(_0x81e9x1de, start_menu_layout_params);
	builder.setView(_0x81e9x1dd);
	var _0x81e9x72b = new android.widget.Button(_0x81e9x1d7);
	_0x81e9x72b.setText(translate("CREATOR & MAIN DEVEOLPER"));
	_0x81e9x72b.setOnClickListener({
		onClick: function() {
			try {
				OpenLinkInBrowser("http://googleplus.com/zheka_smirnov")
			} catch (e) {
				print(e)
			}
		}
	});
	_0x81e9x1dc.addView(_0x81e9x72b, start_menu_layout_params);
	var _0x81e9x72c = new android.widget.Button(_0x81e9x1d7);
	_0x81e9x72c.setText(translate("OFFICIAL PAGE (RUS)"));
	_0x81e9x72c.setOnClickListener({
		onClick: function() {
			try {
				OpenLinkInBrowser("http://googleplus.com/FZ")
			} catch (e) {
				print(e)
			}
		}
	});
	_0x81e9x1dc.addView(_0x81e9x72c, start_menu_layout_params);
	builder.setNeutralButton(translate("BACK"), {
		onClick: function() {}
	});
	builder.show()
}

function OpenTextFileWithIntent(_0x81e9x1e8) {
	var _0x81e9x72e = android.webkit.MimeTypeMap.getSingleton();
	var _0x81e9x72f = new android.content.Intent(android.content.Intent.ACTION_VIEW);
	var _0x81e9x730 = _0x81e9x72e.getMimeTypeFromExtension("txt");
	_0x81e9x72f.setDataAndType(android.net.Uri.fromFile(new java.io.File(_0x81e9x1e8)), _0x81e9x730);
	_0x81e9x72f.setFlags(android.content.Intent.FLAG_ACTIVITY_NEW_TASK);
	getMcContext().startActivity(_0x81e9x72f)
}

function FixArmorMode() {
	OptionReader.options.armor_safe_mode = "true";
	OptionReader.WriteCurrent();
	print(translate("successfuly fixed armor mode!"))
}

function DisableSafeArmorMode() {
	OptionReader.options.armor_safe_mode = "false";
	OptionReader.WriteCurrent();
	print(translate("successfuly enabled armor mode!"))
}

function CheckDownloadedGUIFiles(_0x81e9x734) {
	var _0x81e9x735 = [];
	var _0x81e9x736 = 0;
	for (var _0x81e9x17 in GUIDownloads) {
		_0x81e9x736++;
		if (!LoadBitmap(_0x81e9x17)) {
			_0x81e9x735.push(_0x81e9x17)
		}
	};
	if (_0x81e9x734) {
		if (_0x81e9x735.length > 0) {
			var _0x81e9x1de = translate(start_menu_text_data.gui_missing_en) + "\n";
			_0x81e9x1de += translate("Missing: ") + _0x81e9x735.length + "/" + _0x81e9x736 + "\n\n";
			_0x81e9x1de += _0x81e9x735
		} else {
			var _0x81e9x1de = translate(start_menu_text_data.gui_normal_en) + "\n"
		};
		var _0x81e9x1d7 = getMcContext();
		builder = android.app.AlertDialog.Builder(_0x81e9x1d7);
		builder.setIcon(new android.graphics.drawable.BitmapDrawable(start_menu_icon_bitmap));
		builder.setTitle("GUI CHECK");
		var _0x81e9x1dc = new android.widget.LinearLayout(_0x81e9x1d7);
		_0x81e9x1dc.setOrientation(1);
		var _0x81e9x1dd = new android.widget.ScrollView(_0x81e9x1d7);
		_0x81e9x1dd.addView(_0x81e9x1dc);
		var _0x81e9x737 = new android.widget.TextView(_0x81e9x1d7);
		_0x81e9x737.setText(_0x81e9x1de);
		_0x81e9x737.setTextSize(20);
		_0x81e9x1dc.addView(_0x81e9x737, start_menu_layout_params);
		builder.setView(_0x81e9x1dd);
		if (_0x81e9x735.length > 0) {
			var _0x81e9x738 = new android.widget.Button(_0x81e9x1d7);
			_0x81e9x738.setText("DOWNLOAD MISSING");
			_0x81e9x738.setOnClickListener({
				onClick: function() {
					try {
						RunAsNetwork(function() {
							DownloadExactGUIFiles(_0x81e9x735)
						})
					} catch (e) {
						print(e)
					}
				}
			});
			_0x81e9x1dc.addView(_0x81e9x738, start_menu_layout_params)
		};
		builder.setNeutralButton("BACK", {
			onClick: function() {}
		});
		builder.show()
	};
	return _0x81e9x735.length == 0
}

function DownloadExactGUIFiles(_0x81e9x73a) {
	print("downloading " + _0x81e9x73a.length + " files...");
	var _0x81e9x73b = [];
	for (var i in _0x81e9x73a) {
		try {
			ModPE.downloadFile(_0x81e9x73a[i], GUIDownloads[_0x81e9x73a[i]]);
			_0x81e9x73b.push(_0x81e9x73a[i]);
			print("downloaded " + _0x81e9x73b.length + "/" + _0x81e9x73a.length + " files")
		} catch (e) {
			showUserAlertDialog(translate(start_menu_text_data.gui_unsuccessful_download_en) + "\n\n" + translate("Error report: ") + e + "\n" + translate("File name: ") + _0x81e9x73a[i], "GUI download")
		}
	};
	showUserAlertDialog(translate(start_menu_text_data.gui_download_successful_en), "GUI download")
}

function OpenLinkInBrowser(_0x81e9x1e7) {
	var _0x81e9x1d7 = getMcContext();
	var i = new android.content.Intent(android.content.Intent.ACTION_VIEW);
	i.setData(android.net.Uri.parse(_0x81e9x1e7));
	_0x81e9x1d7.startActivity(i)
}

function CheckTexturePackVersion() {
	var _0x81e9x73e = ModPE.getBytesFromTexturePack(".build");
	var _0x81e9x73f = "";
	if (_0x81e9x73e) {
		_0x81e9x73f = new java.lang.String(_0x81e9x73e, "UTF-8") + ""
	};
	if (_0x81e9x73f != TexturePackBuild) {
		NewsShowHandler.CanTrigger = false;
		runAsGUI(function() {
			builder = android.app.AlertDialog.Builder(getMcContext());
			builder.setIcon(new android.graphics.drawable.BitmapDrawable(start_menu_icon_bitmap));
			builder.setTitle("OLD TEXTUREPACK INSTALLED");
			builder.setMessage("Установленный модпак (.modpkg) устарел, работа мода будет некорректной. Установите текстурпак последней версии. Последнюю версию вы сможете скачать на оф. странице мода вконтакте.\n\nInstalled mod package is outdated, factorization will work incorrectly. Install the last version of mod package.\n\nInstalled version: " + _0x81e9x73f + "\nTarget version: " + TexturePackBuild);
			builder.setCancelable(false);
			builder.setNeutralButton(translate("BACK"), {});
			builder.setNegativeButton(translate("OFFICIAL PAGE (RUS)"), {
				onClick: function() {
					OpenLinkInBrowser("http://googleplus.com/FZ")
				}
			});
			builder.show()
		})
	}
}
CheckTexturePackVersion();
var MainMenuVersion = "5.2 beta";
var start_menu_text_data = {
	main_en: "Welcome to Factorization " + MainMenuVersion + "! This is hi-tech MCPE mod, that fully replace PC industrial craft 2 and particly buildcraft, forestry, ect. Alot of new resources and items, more than 45 machines, new tools, armor and more! Make anything in Minecraft working on electricity, and automate resource processing. Enjoy it!",
	main_ru: "Добро пожаловать в Factorization " + MainMenuVersion + "! Это хай-тек мод на MCPE, который полностью заменяет industrial craft 2 на ПК и частично buildcraft и forestry. Множество новых ресурсов и предметов, более 45 механизмов, новые инструменты, броня и это еще не все! Автоматизируй обработку ресурсов и сделай все в Майнкрафте работающим на электричестве. Приятной игры!",
	crashes_en: "If Minecraft crashes at world loading, go to option file and set save_armor_mode option to true, it must help",
	crashes_ru: "Если Майнкрафт вылетает при загрузке мира, откройте файл конфигурации и установите настройку safe_armor_mode на true, это должно помочь.",
	addons_en: "Addons will add into Factorization more items & machines, ect. Addons must be installed into games/com.mojang/FactorizationAddons directory. You can edit addon config file to disable it.",
	addons_ru: "Дополнения добавляют в мод новые механизмы, предметы и т.п. Дополнения устанавливаются в директорию games/com.mojang/FactorizationAddons",
	config_en: "Config file gives you access to advanced options of Factorization. Description of options you will find in it.\nFile path: games/com.mojang/factorization.options",
	config_ru: "Файл конфигурации откроет доступ к дополнительным настройкам Factorization. Описание настроек вы найдете внутри файла.\nПуть к файлу: games/com.mojang/factorization.options",
	gui_en: "GUI files needed for any machine interface in Factorization. If they are missing, they will be downloaded on world loading automaticaly. Here you can check your GUI files, and re-download them, if some files are missing.",
	gui_ru: "GUI файлы нужны для работы интерфейса в Factorization. Если они отсутствуют, то будут загружены при входе в мир автоматически. Здесь можно проверить их загрузку и загрузить, если часть из них отстутсвует",
	gui_normal_en: "You have all Factorization GUI files",
	gui_normal_ru: "Все файлы интерфейса в порядке",
	gui_missing_en: "Some GUI files are missing or damaged, you can download them, if you have internet access.",
	gui_missing_ru: "Часть или все файлы интерфейса отсутствуют или повреждены. Вы можете скачать их, если у вас есть интернет.",
	gui_successful_download_en: "All needed GUI files are downloaded successfuly.",
	gui_successful_download_ru: "Все требуемые файлы интерфейса успешно загружены",
	gui_unsuccessful_download_en: "Some error has occured during GUI download. Check your internet connection",
	gui_unsulccessful_download_ru: "Произошла ошибка во время загрузки файлов интерфейса. Проверьте соединение с интернетом.",
	about_en: "Here you can visit official page of factorization and page of developer.\nAlso you can donate to mod creator:\nQiwi:+79214122606\nWebmoney: R143249446237",
	about_ru: "Здесь Вы можете посетить официальную группу мода и страницу его создателя\nТак же Вы можете пожертвовать разработчику немного денег\nQiwi:+79214122606\nWebmoney: R143249446237",
	addon_ids_changed_en: "Addon block or item ID conflicts were found, folowing ids will be changed: ",
	addon_ids_changed_ru: "Обнаружены конфликты ID блоков или предметов, ниже показаны, какие ID будут изменены: ",
	feedback_en: "Here you can write and send feedback about Factorization directly to its developer. You can write here your impressions or some bugs and wishes about next updates. Please write in English or Russian.",
	feedback_ru: "Здесь вы можете написать отзыв о Factorization и отправить его прямо к разработчику. Вы можете написать ваши впечатления от игры или баги и предложения.",
	guide_book_en: "You have guide book in your inventory. Open it by clicking on any block and you will see table of contents. For now this book is only in Russian, but in future versions it will be translated",
	guide_book_ru: "У вас в инвентаре появилась книга-гайд по Factorization. Откройте ее нажатием на любой блок и перед вами появится оглавление. Если вы играете первый раз, советую вам прочитать гайд по началу развития.",
	addon_crash_en: "One of installed addons crashed while was loaded. Its work can be incorrect.",
	addon_crash_ru: "Одно из установленных дополнений не загрузилось из-за ошибки. Его работа может быть неправильной.",
	main_cn: "欢迎来到 Factorization " + MainMenuVersion + "! 这是一个高科技的MCPE MOD,能够完全取代PC的IC2,BC,林业等MOD。有新的资源和物品，超过45种机器，新的工具，盔甲和更多！在Minecraft从事电力和自动化资源化处理。Enjoy it!本MOD仅在贴吧及vk发布，其他平台[如葫芦侠]均为盗版",
	crashes_cn: "如果Minecraft在加载世界时崩溃，请打开配置文件，并设置save_armor_mode选项设置为true，它一定会有帮助。",
	addons_cn: "扩展MOD将给Factorization带来更多的物品和机械。扩展MOD必须安装到games/com.mojang/FactorizationAddons目录。您可以编辑插件配置文件来禁用它。",
	config_cn: "配置文件，您可以访问Factorization的高级选项。\n文件路径：games/ com.mojang/ factorization.options",
	gui_cn: "GUI是Factorization的任何机器界面的图像。如果缺少它们，您将不能进行游戏。在这里，您可以检查您的GUI文件是否齐全。",
	gui_normal_cn: "恭喜!您拥有所有GUI文件",
	gui_missing_cn: "部分GUI文件丢失或损坏。",
	gui_successful_download_cn: "GUI文件下载成功。",
	gui_unsuccessful_download_cn: "GUI下载失败，请尝试翻墙.",
	about_cn: "制作 by Zheka Smirnov\n汉化 by 10935336\n此菜单可能翻译不佳，抱歉\n欢迎反馈翻译错误或提供翻译建议\n捐赠制作者:\nQiwi:+79214122606\nWebmoney: R143249446237",
	addon_ids_changed_cn: "方块ID或ID物品冲突被发现，以下ID应当被更改: "
};
var SafeLeaveGUIValues = {
	Win: null,
	View: null,
	Thread: null,
	Canvas: null,
	Bitmap: null
};

function ShowSafeLeaveButton() {
	if (!config_safe_leave_button) {
		return
	};
	if (SafeLeaveGUIValues.Win != null) {
		return
	};
	SafeLeaveGUIValues.Bitmap = LoadBitmapFromAssets("buttonexit.png");
	if (!SafeLeaveGUIValues.Bitmap) {
		print("missing some gui files...");
		return
	};
	var _0x81e9x1d7 = getMcContext();
	var _0x81e9x426 = _0x81e9x1d7.getWindowManager().getDefaultDisplay().getHeight();
	var _0x81e9x1a1 = _0x81e9x426 * 0.075;
	SafeLeaveGUIValues.Bitmap = android.graphics.Bitmap.createScaledBitmap(SafeLeaveGUIValues.Bitmap, _0x81e9x1a1, _0x81e9x1a1, false);
	runAsGUI(function() {
		var _0x81e9x1d7 = getMcContext();
		SafeLeaveGUIValues.View = new android.widget.ImageView(_0x81e9x1d7);
		SafeLeaveGUIValues.View.setImageBitmap(SafeLeaveGUIValues.Bitmap);
		SafeLeaveGUIValues.Win = new android.widget.PopupWindow(_0x81e9x1d7);
		var _0x81e9x9 = android.widget.LinearLayout.LayoutParams.WRAP_CONTENT;
		SafeLeaveGUIValues.Win.setContentView(SafeLeaveGUIValues.View);
		SafeLeaveGUIValues.Win.setHeight(_0x81e9x1a1);
		SafeLeaveGUIValues.Win.setWidth(_0x81e9x1a1);
		SafeLeaveGUIValues.Win.setBackgroundDrawable(null);
		SafeLeaveGUIValues.Win.showAtLocation(_0x81e9x1d7.getWindow().getDecorView(), android.view.Gravity.TOP | android.view.Gravity.LEFT, 0, 0);
		SafeLeaveGUIValues.View.setOnClickListener({
			onClick: function() {
				if (SafeLeaveMode.time_left > 0) {
					SafeLeaveMode.Return()
				} else {
					SafeLeaveMode.Enter()
				};
				return true
			}
		})
	})
}

function HideSafeLeaveButton() {
	runAsGUI(function() {
		if (SafeLeaveGUIValues.Win != null) {
			SafeLeaveGUIValues.Win.dismiss();
			SafeLeaveGUIValues.Win = null
		}
	})
}
var NukeEffectOverlayLayout = null;
var NukeEffectOverlayView = null;

function ShowNukeEffectOverlay(_0x81e9x748) {
	if (!NukeEffectOverlayLayout && (_0x81e9x748 <= 0 || !_0x81e9x748)) {
		return
	};
	var _0x81e9x1d7 = getMcContext();
	runAsGUI(function() {
		if (NukeEffectOverlayLayout && (_0x81e9x748 <= 0 || !_0x81e9x748)) {
			NukeEffectOverlayLayout.dismiss();
			NukeEffectOverlayLayout = null;
			return
		};
		if (!NukeEffectOverlayLayout) {
			var _0x81e9x680 = _0x81e9x1d7.getWindowManager().getDefaultDisplay().getWidth();
			var _0x81e9x426 = _0x81e9x1d7.getWindowManager().getDefaultDisplay().getHeight();
			NukeEffectOverlayLayout = new android.widget.PopupWindow(_0x81e9x1d7);
			NukeEffectOverlayLayout.setWidth(_0x81e9x680);
			NukeEffectOverlayLayout.setHeight(_0x81e9x426);
			NukeEffectOverlayView = new android.widget.ImageView(_0x81e9x1d7);
			NukeEffectOverlayLayout.setContentView(NukeEffectOverlayView);
			NukeEffectOverlayLayout.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(0));
			NukeEffectOverlayLayout.showAtLocation(_0x81e9x1d7.getWindow().getDecorView(), android.view.Gravity.LEFT | android.view.Gravity.TOP, 0, 0)
		};
		NukeEffectOverlayView.setImageDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.argb(parseInt(255 * _0x81e9x748), 255, 255, 255)))
	})
}

function tickWrenchInfo() {
	try {
		var _0x81e9x26 = Player.getPointedBlockX();
		var _0x81e9x27 = Player.getPointedBlockY();
		var _0x81e9x28 = Player.getPointedBlockZ();
		var _0x81e9x193 = Player.getPointedBlockId();
		var _0x81e9x2bc = null;
		if (isMachine(_0x81e9x193)) {
			_0x81e9x2bc = getMachine(_0x81e9x26, _0x81e9x27, _0x81e9x28)
		};
		var _0x81e9x2b3;
		if (_0x81e9x2bc) {
			var _0x81e9x2b3 = getMachineType(_0x81e9x2bc)
		} else {
			machineActiveButtonId = -1
		};
		if (_0x81e9x2bc && machineActiveButtonId != _0x81e9x2bc.uniqueID) {
			updateMachineActiveButton(_0x81e9x2bc)
		};
		var _0x81e9x74a = "";
		if (_0x81e9x2b3 && _0x81e9x2b3.isUsingEnergy()) {
			_0x81e9x74a += parseInt(_0x81e9x2b3.getEnergyStored(_0x81e9x2bc)) + "/" + _0x81e9x2b3.getMaxEnergyStored() + "\n"
		};
		if (_0x81e9x2b3) {
			_0x81e9x74a += _0x81e9x2b3.getMachineName() + "\n" + _0x81e9x2b3.getInfo(_0x81e9x2bc) + "\nDimension: " + _0x81e9x2bc.dimension
		};
		setInfoText(_0x81e9x74a)
	} catch (e) {
		ModPE.showTipMessage(ChatColor.RED + "wrench gui error" + e)
	}
}
var stateWindow;
var stateText;
var machineActiveButton;
var machineActiveButtonId = -1;

function createStateView() {
	while (stateWindow) {
		java.lang.Thread.yield()
	};
	var _0x81e9x1d7 = com.mojang.minecraftpe.MainActivity.currentMainActivity.get();
	runAsGUI(function() {
		machineActiveButtonId = -1;
		var _0x81e9x680 = _0x81e9x1d7.getWindowManager().getDefaultDisplay().getWidth() / 4;
		stateWindow = new android.widget.PopupWindow();
		var _0x81e9x1dc = new android.widget.LinearLayout(_0x81e9x1d7);
		stateText = new android.widget.TextView(_0x81e9x1d7);
		stateText.setTextSize(14);
		stateText.setText("");
		stateText.setTextColor(android.graphics.Color.WHITE);
		setViewSize(stateText, _0x81e9x680 / 3 * 2, _0x81e9x680 / 3);
		_0x81e9x1dc.addView(stateText);
		var _0x81e9x693 = new android.widget.ImageView(_0x81e9x1d7);
		_0x81e9x693.setImageBitmap(Images.buttonOff);
		setViewSize(_0x81e9x693, _0x81e9x680 / 3, _0x81e9x680 / 3);
		_0x81e9x693.setOnClickListener(new android.view.View.OnClickListener({
			onClick: function() {
				MachineActivationButtonTap()
			}
		}));
		_0x81e9x1dc.addView(_0x81e9x693);
		machineActiveButton = _0x81e9x693;
		stateWindow.setContentView(_0x81e9x1dc);
		stateWindow.setWidth(_0x81e9x680);
		stateWindow.setHeight(_0x81e9x680 / 3);
		stateWindow.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(0));
		stateWindow.showAtLocation(_0x81e9x1d7.getWindow().getDecorView(), android.view.Gravity.RIGHT | android.view.Gravity.TOP, 0, 0)
	})
}

function dip2px(_0x81e9x1d7, _0x81e9x751) {
	return Math.ceil(_0x81e9x751 * _0x81e9x1d7.getResources().getDisplayMetrics().density)
}

function MachineActivationButtonTap() {
	var _0x81e9x26 = Player.getPointedBlockX();
	var _0x81e9x27 = Player.getPointedBlockY();
	var _0x81e9x28 = Player.getPointedBlockZ();
	var _0x81e9x2bc = getMachine(_0x81e9x26, _0x81e9x27, _0x81e9x28);
	if (!_0x81e9x2bc) {
		return
	};
	var _0x81e9x2b3 = getMachineType(_0x81e9x2bc);
	if (!_0x81e9x2b3.canDeactivate()) {
		_0x81e9x2bc.isActivated = false
	};
	if (!_0x81e9x2bc.isActivated) {
		_0x81e9x2bc.isActivated = false
	};
	if (_0x81e9x2bc.isActivated) {
		_0x81e9x2bc.isActivated = false
	} else {
		_0x81e9x2bc.isActivated = true
	};
	updateMachineActiveButton(_0x81e9x2bc)
}

function updateMachineActiveButton(_0x81e9x2bc) {
	machineActiveButtonId = _0x81e9x2bc.uniqueID;
	runAsGUI(function() {
		if (!machineActiveButton) {
			java.lang.Thread.yield();
			return
		};
		if (_0x81e9x2bc.isActivated) {
			machineActiveButton.setImageBitmap(Images.buttonOn)
		} else {
			machineActiveButton.setImageBitmap(Images.buttonOff)
		}
	})
}

function removeGUI_info() {
	var _0x81e9x1d7 = com.mojang.minecraftpe.MainActivity.currentMainActivity.get();
	_0x81e9x1d7.runOnUiThread(new java.lang.Runnable({
		run: function() {
			if (stateWindow) {
				stateWindow.dismiss();
				stateWindow = stateText = null
			}
		}
	}))
}

function setInfoText(_0x81e9x2b3) {
	var _0x81e9x756 = _0x81e9x2b3 + "";
	if (isGuiDisabled) {
		return
	};
	if (_0x81e9x756.length == 0 && stateWindow != null) {
		removeGUI_info()
	} else {
		if (_0x81e9x756 && !stateWindow) {
			createStateView()
		}
	};
	var _0x81e9x1d7 = com.mojang.minecraftpe.MainActivity.currentMainActivity.get();
	_0x81e9x1d7.runOnUiThread(new java.lang.Runnable({
		run: function() {
			if (stateText != null) {
				stateText.setText(_0x81e9x756);
				if (stateText.length > 0) {
					stateWindow.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(android.graphics.Color.GRAY))
				} else {
					stateWindow.setBackgroundDrawable(new android.graphics.drawable.ColorDrawable(0))
				}
			}
		}
	}))
}
var LoadingBarHandler = {
	Thread: null,
	Window: null,
	Bar: null,
	StopThread: false,
	Create: function() {
		runAsGUI(function() {
			LoadingBarHandler.SetupBar()
		});
		this.Thread = new java.lang.Thread({
			run: function() {
				try {
					while (!LoadingBarHandler.StopThread) {
						var _0x81e9x510 = DataSaver.getProgress();
						_0x81e9x510 = Math.max(0, Math.min(1, _0x81e9x510));
						if (LoadingBarHandler.Bar) {
							runAsGUI(function() {
								LoadingBarHandler.Bar.setProgress(parseInt(_0x81e9x510 * LoadingBarHandler.Bar.getMax()))
							})
						};
						java.lang.Thread.yield()
					};
					LoadingBarHandler.Thread = null;
					LoadingBarHandler.StopThread = false
				} catch (e) {
					print("progress bar error: " + e)
				}
			}
		});
		this.Thread.start()
	},
	Stop: function() {
		if (this.Thread) {
			this.StopThread = true
		}
	},
	Finish: function() {
		this.Stop();
		runAsGUI(function() {
			LoadingBarHandler.DismissBar()
		})
	},
	SetupBar: function() {
		var _0x81e9x1d7 = getMcContext();
		var _0x81e9x680 = _0x81e9x1d7.getWindowManager().getDefaultDisplay().getWidth();
		var _0x81e9x426 = _0x81e9x1d7.getWindowManager().getDefaultDisplay().getHeight();
		var _0x81e9x6af = _0x81e9x1d7.getWindow().getDecorView();
		this.Window = new android.widget.PopupWindow(_0x81e9x1d7);
		this.Window.setWidth(_0x81e9x680);
		this.Window.setHeight(50);
		this.Bar = new android.widget.ProgressBar(_0x81e9x1d7, null, android.R.attr.progressBarStyleHorizontal);
		this.Window.setContentView(this.Bar);
		this.Window.showAtLocation(_0x81e9x6af, android.view.Gravity.TOP | android.view.Gravity.LEFT, 0, _0x81e9x426 - 50)
	},
	DismissBar: function() {
		if (this.Window != null) {
			this.Window.dismiss()
		};
		this.Window = null;
		this.ProgressBar = null
	}
};
var GUILiquidAnimator = {
	Cached: {},
	isAnimated: function(_0x81e9x204) {
		if (this.Cached[_0x81e9x204]) {
			return true
		};
		return false
	},
	GetLiquidTextureName: function(_0x81e9x204) {
		var _0x81e9x759 = this.GetAnimationTexture(_0x81e9x204);
		if (_0x81e9x759) {
			var _0x81e9x17 = "_liquid_animation_" + _0x81e9x204;
			Images[_0x81e9x17] = _0x81e9x759;
			return _0x81e9x17
		} else {
			if (_0x81e9x204 >= 20) {
				var _0x81e9x75a = FactAPI.getCustomLiquidData(_0x81e9x204);
				if (!_0x81e9x75a) {
					print("<FactAPI> no such liquid: " + _0x81e9x204);
					return
				};
				return _0x81e9x75a.gui
			};
			return "liquid_" + _0x81e9x204
		}
	},
	GetAnimationTexture: function(_0x81e9x204) {
		var _0x81e9x212 = this.Cached[_0x81e9x204];
		if (!_0x81e9x212) {
			return null
		};
		var _0x81e9x42b = parseInt(globalWorldTime / 2) % _0x81e9x212.len;
		return _0x81e9x212["stage_" + _0x81e9x42b]
	},
	CreateAnimation: function(_0x81e9x204, _0x81e9x75b, _0x81e9x75c, _0x81e9x75d, _0x81e9x211, _0x81e9x75e) {
		var _0x81e9x75f = {};
		_0x81e9x75f.mask = Images[_0x81e9x75b];
		_0x81e9x75f.bgColor = _0x81e9x75c;
		_0x81e9x75f.fgColor = _0x81e9x75d;
		_0x81e9x75f.intense = _0x81e9x211;
		_0x81e9x75f.len = 24;
		for (var i = 0; i < _0x81e9x75f.len; i++) {
			var _0x81e9x1ee = this.LoadCachedAnim(_0x81e9x204, i);
			if (!_0x81e9x1ee) {
				_0x81e9x1ee = this.CreateAnimationUnit(_0x81e9x75f.mask, _0x81e9x75f.bgColor, _0x81e9x75f.fgColor, _0x81e9x75f.intense, 32, 112, i / _0x81e9x75f.len);
				this.SaveBitmapToCache(_0x81e9x1ee, _0x81e9x204, i)
			};
			_0x81e9x75f["stage_" + i] = _0x81e9x1ee
		};
		this.Cached[_0x81e9x204] = _0x81e9x75f
	},
	CreateAnimationUnit: function(_0x81e9x20e, _0x81e9x6b8, _0x81e9x760, _0x81e9x211, _0x81e9x761, _0x81e9x762, _0x81e9x42b) {
		var _0x81e9x18 = android.graphics.Bitmap.createBitmap(_0x81e9x20e.width, _0x81e9x20e.height, android.graphics.Bitmap.Config.ARGB_8888);
		for (var _0x81e9x26 = 0; _0x81e9x26 < _0x81e9x20e.width; _0x81e9x26++) {
			for (var _0x81e9x27 = 0; _0x81e9x27 < _0x81e9x20e.height; _0x81e9x27++) {
				var _0x81e9x763 = NativeColor(_0x81e9x20e.getPixel(_0x81e9x26, _0x81e9x27));
				var _0x81e9x764 = _0x81e9x763.r;
				var _0x81e9x765 = _0x81e9x763.g / 256.0;
				var _0x81e9x6be = Math.sin((_0x81e9x764 / 256.0 + _0x81e9x42b) * Math.PI * 2) * 0.5 + 0.5;
				_0x81e9x6be = Math.pow(_0x81e9x6be, 2);
				var _0x81e9x15a = _0x81e9x6be * _0x81e9x211 * 256 * _0x81e9x765;
				var _0x81e9x23b = RGBColor(_0x81e9x6b8.r, _0x81e9x6b8.g, _0x81e9x6b8.b).add(RGBColor(_0x81e9x15a * _0x81e9x760.r, _0x81e9x15a * _0x81e9x760.g, _0x81e9x15a * _0x81e9x760.b));
				_0x81e9x18.setPixel(_0x81e9x26, _0x81e9x27, _0x81e9x23b.get())
			}
		};
		var _0x81e9x766 = android.graphics.Bitmap.createBitmap(_0x81e9x761, _0x81e9x762, android.graphics.Bitmap.Config.ARGB_8888);
		var _0x81e9x767 = new android.graphics.Canvas(_0x81e9x766);
		var _0x81e9x768 = Images.liquid_overlay;
		for (var _0x81e9x26 = 0; _0x81e9x26 < _0x81e9x761; _0x81e9x26 += _0x81e9x18.width) {
			for (var _0x81e9x27 = 0; _0x81e9x27 < _0x81e9x762; _0x81e9x27 += _0x81e9x18.height) {
				_0x81e9x767.drawBitmap(_0x81e9x18, _0x81e9x26, _0x81e9x27, null)
			}
		};
		for (var _0x81e9x27 = 0; _0x81e9x27 < _0x81e9x762; _0x81e9x27 += _0x81e9x768.height) {
			_0x81e9x767.drawBitmap(_0x81e9x768, 0, _0x81e9x27, null)
		};
		return _0x81e9x766
	},
	GetCacheName: function(_0x81e9x212, _0x81e9x42b) {
		return "_anim_L" + _0x81e9x212 + "_" + _0x81e9x42b + ".png"
	},
	SaveBitmapToCache: function(_0x81e9x1ee, _0x81e9x212, _0x81e9x42b) {
		var _0x81e9x769 = new java.io.File(android.os.Environment.getExternalStorageDirectory().getAbsolutePath() + "/games/com.mojang/Factorization/cache");
		if (!_0x81e9x769.exists()) {
			_0x81e9x769.mkdirs()
		};
		var _0x81e9x1e6 = _0x81e9x769.getAbsolutePath() + "/" + this.GetCacheName(_0x81e9x212, _0x81e9x42b);
		var _0x81e9x18c = new java.io.FileOutputStream(_0x81e9x1e6);
		_0x81e9x1ee.compress(android.graphics.Bitmap.CompressFormat.PNG, 100, _0x81e9x18c)
	},
	LoadCachedAnim: function(_0x81e9x212, _0x81e9x42b) {
		var _0x81e9x76a = LoadBitmapFromAssets(this.GetCacheName(_0x81e9x212, _0x81e9x42b), true);
		if (_0x81e9x76a) {
			return _0x81e9x76a
		};
		var _0x81e9x1e6 = "games/com.mojang/Factorization/cache/" + this.GetCacheName(_0x81e9x212, _0x81e9x42b);
		return LoadBitmapAnyPath(_0x81e9x1e6)
	}
};

function BuildLiquidAnimations() {
	LiquidRegistry.CreateAllAnimations()
}
var typeface_file_dir = android.os.Environment.getExternalStorageDirectory().getAbsolutePath() + "/games/com.mojang/FactorizationGUI/typeface.ttf";
var typeface_output_stream = new java.io.BufferedOutputStream(new java.io.FileOutputStream(typeface_file_dir));
typeface_output_stream.write(ModPE.getBytesFromTexturePack("minecraft.ttf"));
typeface_output_stream.flush();
typeface_output_stream.close();
var mc_typeface = android.graphics.Typeface.createFromFile(typeface_file_dir);
var TGALoader = {
	offset: 0,
	btoi: function(_0x81e9x173) {
		var _0x81e9x1c7 = _0x81e9x173;
		return (_0x81e9x1c7 < 0 ? 256 + _0x81e9x1c7 : _0x81e9x1c7)
	},
	read_: function(_0x81e9x770) {
		return this.btoi(_0x81e9x770[this.offset++])
	},
	decode: function(_0x81e9x770) {
		var _0x81e9x771 = 0;
		var _0x81e9x772 = 0;
		this.offset = 0;
		for (var i = 0; i < 12; i++) {
			this.read_(_0x81e9x770)
		};
		var _0x81e9x680 = this.read_(_0x81e9x770) + (this.read_(_0x81e9x770) << 8);
		var _0x81e9x426 = this.read_(_0x81e9x770) + (this.read_(_0x81e9x770) << 8);
		this.read_(_0x81e9x770);
		this.read_(_0x81e9x770);
		var _0x81e9x259 = _0x81e9x680 * _0x81e9x426;
		var _0x81e9x773 = new Array(_0x81e9x259);
		var _0x81e9x774 = 0;
		while (_0x81e9x259 > 0) {
			var _0x81e9x775 = this.read_(_0x81e9x770);
			if ((_0x81e9x775 & 0x80) == 0) {
				for (var i = 0; i <= _0x81e9x775; i++) {
					var _0x81e9x173 = this.read_(_0x81e9x770);
					var _0x81e9x23c = this.read_(_0x81e9x770);
					var _0x81e9x159 = this.read_(_0x81e9x770);
					var _0x81e9x1c7 = this.read_(_0x81e9x770);
					_0x81e9x773[_0x81e9x774++] = (_0x81e9x1c7 << 24) | (_0x81e9x159 << 16) | (_0x81e9x23c << 8) | _0x81e9x173
				}
			} else {
				_0x81e9x775 &= 0x7f;
				var _0x81e9x173 = this.read_(_0x81e9x770);
				var _0x81e9x23c = this.read_(_0x81e9x770);
				var _0x81e9x159 = this.read_(_0x81e9x770);
				var _0x81e9x1c7 = this.read_(_0x81e9x770);
				var _0x81e9x26a = (_0x81e9x1c7 << 24) | (_0x81e9x159 << 16) | (_0x81e9x23c << 8) | _0x81e9x173;
				for (var i = 0; i <= _0x81e9x775; i++) {
					_0x81e9x773[_0x81e9x774++] = _0x81e9x26a
				}
			};
			_0x81e9x259 -= _0x81e9x775 + 1
		};
		var _0x81e9x776 = new Array(_0x81e9x259);
		for (var _0x81e9x26 = 0; _0x81e9x26 < _0x81e9x680; _0x81e9x26++) {
			for (var _0x81e9x27 = _0x81e9x426 - 1; _0x81e9x27 >= 0; _0x81e9x27--) {
				_0x81e9x776[_0x81e9x26 + (_0x81e9x426 - _0x81e9x27 - 1) * _0x81e9x680] = _0x81e9x773[_0x81e9x26 + _0x81e9x27 * _0x81e9x680]
			}
		};
		var _0x81e9x777 = android.graphics.Bitmap.createBitmap(_0x81e9x776, _0x81e9x680, _0x81e9x426, android.graphics.Bitmap.Config.ARGB_8888);
		return _0x81e9x777
	},
	decodeAsset: function(_0x81e9x17) {
		var _0x81e9x287 = ModPE.getBytesFromTexturePack(_0x81e9x17);
		var _0x81e9x64b = this.decode(_0x81e9x287);
		return _0x81e9x64b
	}
};
var TextureMetaDecoder = {
	DecodeMeta: function(_0x81e9x17) {
		clientMessage(_0x81e9x17);
		var _0x81e9x287 = ModPE.getBytesFromTexturePack(_0x81e9x17);
		var _0x81e9x162 = new java.lang.String(_0x81e9x287, "UTF-8");
		clientMessage(_0x81e9x162);
		var _0x81e9x779 = eval(_0x81e9x162);
		var _0x81e9x1a = {};
		for (var i in _0x81e9x779) {
			var _0x81e9x77a = _0x81e9x779[i];
			var _0x81e9x17 = _0x81e9x77a.name;
			var _0x81e9x77b = _0x81e9x77a.uvs;
			for (var i in _0x81e9x77b) {
				_0x81e9x1a[_0x81e9x17 + ":" + i] = _0x81e9x77b[i]
			}
		};
		return _0x81e9x1a
	}
};
var GuiScreenBackgroundData = {
	0: "gui1",
	1: "gui2",
	2: "gui3",
	3: "gui4",
	4: "gui5",
	5: "gui6",
	6: "gui7",
	7: "gui7",
	8: "gui8",
	9: "gui9",
	10: "gui6",
	11: "gui6",
	12: "gui2",
	13: "gui10",
	14: "gui11",
	15: "gui7",
	18: "gui12"
};
var GuiScreenSlotCountData = {
	0: 2,
	1: 1,
	2: 3,
	3: 1,
	4: 10,
	5: 9,
	6: 32,
	7: 18,
	8: 2,
	9: 37,
	10: 19,
	11: 9,
	12: 1,
	13: 6,
	14: 56,
	15: 1,
	18: 2
};

function GUIBuildAddEnergyBar() {
	GuiAPI.SetupNewScale(0x80, 7, 8, "energybar", 0);
	GuiAPI.SetupTextField(0x80, 17, 32, 12, 100, 16)
}
var GuiScreenData = {
	0: function() {
		addSlotToCurrentGUI(64, 48);
		addSlotToCurrentGUI(164, 48);
		GUIBuildAddEnergyBar();
		GuiAPI.SetupNewScale(0x81, 104, 51, "progressbar", 3)
	},
	1: function() {
		addSlotToCurrentGUI(102, 48);
		GUIBuildAddEnergyBar()
	},
	2: function() {
		addSlotToCurrentGUI(64, 48);
		addSlotToCurrentGUI(164, 48);
		addSlotToCurrentGUI(220, 48);
		GUIBuildAddEnergyBar();
		GuiAPI.SetupNewScale(0x81, 104, 51, "progressbar", 3)
	},
	3: function() {
		addSlotToCurrentGUI(180, 48);
		GuiAPI.SetupNewScale(0x82, 105, 8, "liquid_1", 0);
		GuiAPI.SetupTextField(0x82, 18, 20, 8, 80, 8);
		GuiAPI.SetupNewScale(0x83, 70, 48, "fire", 0);
		GuiAPI.SetupNewScale(0x84, 70, 48, "firebg", 0)
	},
	4: function() {
		addSlotToCurrentGUI(30, 28);
		addSlotToCurrentGUI(30, 68);
		addSlotToCurrentGUI(159, 15);
		addSlotToCurrentGUI(194, 15);
		addSlotToCurrentGUI(143, 49);
		addSlotToCurrentGUI(177, 49);
		addSlotToCurrentGUI(211, 49);
		addSlotToCurrentGUI(159, 83);
		addSlotToCurrentGUI(194, 83);
		addSlotToCurrentGUI(30, 128);
		GuiAPI.SetupNewScale(0x81, 83, 51, "progressbar", 3);
		GuiAPI.SetupTextField(0x00, 20, 83, 8, 60, 16)
	},
	5: function() {
		for (var i = 0; i < 9; i++) {
			addSlotToCurrentGUI(16 + (i % 3) * 34, 16 + parseInt(i / 3) * 34)
		}
	},
	6: function() {
		var _0x81e9x1b7 = GUIBuildData + 1;
		var _0x81e9x14 = 116 - GUIBuildData * 12;
		for (var _0x81e9x26 = 0; _0x81e9x26 < _0x81e9x1b7; _0x81e9x26++) {
			for (var _0x81e9x27 = 0; _0x81e9x27 < 4; _0x81e9x27++) {
				addSlotToCurrentGUI(_0x81e9x14 + _0x81e9x26 * 24, _0x81e9x27 * 24 + 4, true)
			}
		}
	},
	7: function() {
		for (var _0x81e9x26 = 0; _0x81e9x26 < 7; _0x81e9x26++) {
			for (var _0x81e9x27 = 0; _0x81e9x27 < 3; _0x81e9x27++) {
				if (_0x81e9x26 != 3) {
					addSlotToCurrentGUI(_0x81e9x26 * 24 + 56, 28 + _0x81e9x27 * 24, true)
				}
			}
		}
	},
	8: function() {
		addSlotToCurrentGUI(180, 16);
		addSlotToCurrentGUI(180, 80);
		GuiAPI.SetupNewScale(0x82, 105, 8, "liquid_1", 0);
		GuiAPI.SetupTextField(0x82, 18, 20, 8, 80, 8)
	},
	9: function() {
		GuiAPI.SetupNewScale(0x82, 8, 24, "liquid_1", 0);
		GuiAPI.SetupNewScale(0x00, 204, 20, "barReactor1", 2);
		GuiAPI.SetupNewScale(0x01, 217, 17, "barReactor3", 0);
		GuiAPI.SetupNewScale(0x02, 52, 20, "barReactor2", 0);
		GuiAPI.SetupTextField(0x03, 22, 69, 2, 60, 12);
		GuiAPI.SetupTextField(0x04, 18, 139, 2, 80, 12);
		GuiAPI.SetupTextField(0x05, 14, 16, 146, 128, 48);
		GuiAPI.SetupNewButton(0x00, 226, 32, "buttonUp", 1, function(_0x81e9x2bc) {
			_0x81e9x2bc.coal_rod_target = Math.max(0, _0x81e9x2bc.coal_rod_target - 0.02)
		});
		GuiAPI.SetupNewButton(0x01, 226, 57, "buttonDown", 1, function(_0x81e9x2bc) {
			_0x81e9x2bc.coal_rod_target = Math.min(1, _0x81e9x2bc.coal_rod_target + 0.02)
		});
		GuiAPI.SetupNewButton(0x02, 226, 82, "buttonRodThrow", 1, function(_0x81e9x2bc) {
			_0x81e9x2bc.coal_rod_target = 1;
			_0x81e9x2bc.throwing_rods = true
		});
		var _0x81e9x16 = GUIBuildData;
		for (var _0x81e9x26 = 0; _0x81e9x26 < 6; _0x81e9x26++) {
			for (var _0x81e9x28 = 0; _0x81e9x28 < 6; _0x81e9x28++) {
				var _0x81e9x6fa = parseInt(_0x81e9x26 / 2) * 3 + parseInt(_0x81e9x28 / 2);
				var _0x81e9x6fb = ((_0x81e9x16 >> _0x81e9x6fa) & 1 == 1);
				if (_0x81e9x6fb) {
					addSlotToCurrentGUI(_0x81e9x26 * 21 + 70, _0x81e9x28 * 21 + 16, true)
				} else {
					addSlotToCurrentGUI(256, 0)
				}
			}
		};
		addSlotToCurrentGUI(228, 114, true)
	},
	10: function() {
		for (var i = 0; i < 9; i++) {
			addSlotToCurrentGUI(16 + (i % 3) * 34, 16 + parseInt(i / 3) * 34)
		};
		for (var i = 0; i < 9; i++) {
			addSlotToCurrentGUI(136 + (i % 3) * 24, 32 + parseInt(i / 3) * 24, true, true)
		};
		addSlotToCurrentGUI(136 + 3.25 * 24, 32 + 24, true, true);
		GuiAPI.SetupTextField(0x00, 18, 136, 8, 80, 8)
	},
	11: function() {
		for (var i = 0; i < 9; i++) {
			addSlotToCurrentGUI(16 + (i % 3) * 34, 16 + parseInt(i / 3) * 34)
		};
		GuiAPI.SetupNewButton(0x00, 160, 16, "buttonPlus", 1, function(_0x81e9x2bc) {
			_0x81e9x2bc.stacksize = Math.min(64, _0x81e9x2bc.stacksize + 1)
		});
		GuiAPI.SetupNewButton(0x01, 160, 84, "buttonMinus", 1, function(_0x81e9x2bc) {
			_0x81e9x2bc.stacksize = Math.max(1, _0x81e9x2bc.stacksize - 1)
		});
		GuiAPI.SetupTextField(0x00, 24, 144, 48, 100, 24)
	},
	12: function() {
		addSlotToCurrentGUI(102, 48);
		GUIBuildAddEnergyBar();
		GuiAPI.SetupNewScale(0x83, 60, 48, "fire", 0);
		GuiAPI.SetupNewScale(0x84, 60, 48, "firebg", 0)
	},
	13: function() {
		addSlotToCurrentGUI(118, 54, true);
		addSlotToCurrentGUI(118 + 44, 54, true);
		addSlotToCurrentGUI(118, 54 + 44, true);
		addSlotToCurrentGUI(118 - 44, 54, true);
		addSlotToCurrentGUI(118, 54 - 44, true);
		addSlotToCurrentGUI(118 + 44, 54 + 44, true);
		GuiAPI.SetupNewScale(0x0, 118 + 20, 54, "progress_right", 3);
		GuiAPI.SetupNewScale(0x1, 118, 54 + 20, "progress_down", 2);
		GuiAPI.SetupNewScale(0x2, 118 - 24, 54, "progress_left", 1);
		GuiAPI.SetupNewScale(0x3, 118, 54 - 24, "progress_up", 0);
		GUIBuildAddEnergyBar()
	},
	14: function() {
		for (var _0x81e9x27 = 0; _0x81e9x27 < 6; _0x81e9x27++) {
			for (var _0x81e9x26 = 0; _0x81e9x26 < 9; _0x81e9x26++) {
				addSlotToCurrentGUI(30 + _0x81e9x26 * 22, 7 + _0x81e9x27 * 30, true)
			}
		}
	},
	15: function() {
		addSlotToCurrentGUI(64, 54);
		GuiAPI.SetupNewButton(0x00, 160, 4, "buttonPlus", 1, function(_0x81e9x2bc) {
			_0x81e9x2bc.frequency++;
			_0x81e9x2bc.cache_updated = false
		});
		GuiAPI.SetupNewButton(0x01, 160, 96, "buttonMinus", 1, function(_0x81e9x2bc) {
			_0x81e9x2bc.frequency--;
			_0x81e9x2bc.frequency = Math.max(0, _0x81e9x2bc.frequency);
			_0x81e9x2bc.cache_updated = false
		});
		GuiAPI.SetupTextField(0x00, 22, 144, 36, 100, 24);
		GuiAPI.SetupTextField(0x01, 18, 144, 66, 110, 14)
	},
	16: function() {
		GuiAPI.SetupTextField(0x00, 22, 4, 4, 192, 16);
		GuiAPI.SetupTextField(0x01, 10, 4, 20, 192, 116);
		addSlotToCurrentGUI(164, 8, true, true, 56)
	},
	17: function() {
		GuiAPI.SetupTextField(0x00, 22, 4, 4, 192, 12)
	},
	18: function() {
		addSlotToCurrentGUI(64, 48);
		addSlotToCurrentGUI(212, 48);
		GUIBuildAddEnergyBar();
		GuiAPI.SetupNewScale(0x81, 104, 51, "progressbar", 3);
		GuiAPI.SetupNewScale(0x82, 162, 8, "liquid_1", 0);
		GuiAPI.SetupNewScale(0x01, 155, 7, "heatbar_small", 0);
		GuiAPI.SetupNewScale(0x02, 154, 7, "levelbar_small", 0)
	}
};

function guiBackgroundByType(_0x81e9x10) {
	var _0x81e9x781 = GuiScreenBackgroundData[_0x81e9x10];
	if (_0x81e9x781) {
		return Images[_0x81e9x781]
	};
	if (_0x81e9x10 >= 32) {
		return FactAPI.GUI.getGuiBackground(_0x81e9x10)
	};
	return null
}

function addSlotToCurrentGUI(_0x81e9x26, _0x81e9x27, _0x81e9x783, _0x81e9x784, _0x81e9x785) {
	if (isBuildingExternalGui) {
		externalGuiOutput.writeBoolean(true);
		externalGuiOutput.writeInt(parseInt(_0x81e9x26));
		externalGuiOutput.writeInt(parseInt(_0x81e9x27));
		externalGuiOutput.writeBoolean(Boolean(_0x81e9x783))
	} else {
		var _0x81e9x1c0 = 1000 - ConstGUIScale * 256;
		var _0x81e9x786 = ConstGUIScale;
		var _0x81e9x2c5 = 32 / 60 * _0x81e9x786;
		if (_0x81e9x783) {
			_0x81e9x2c5 = _0x81e9x786 / 3
		};
		if (_0x81e9x785) {
			_0x81e9x2c5 = _0x81e9x785 / 60 * _0x81e9x786
		};
		if (_0x81e9x784) {
			var _0x81e9x5b = new GUIIconSlot(_0x81e9x1c0 + _0x81e9x26 * _0x81e9x786, 85 + _0x81e9x27 * _0x81e9x786, _0x81e9x2c5)
		} else {
			var _0x81e9x5b = new GUIContainerSlot(_0x81e9x1c0 + _0x81e9x26 * _0x81e9x786, 85 + _0x81e9x27 * _0x81e9x786, _0x81e9x2c5)
		};
		GuiAPI.Slots.push(_0x81e9x5b)
	}
}

function addCustomSlotToCurrentGUI(_0x81e9x16) {
	if (_0x81e9x16.isIcon) {
		var _0x81e9x5b = new GUIIconSlot(_0x81e9x16.x, _0x81e9x16.y, _0x81e9x16.scale)
	} else {
		var _0x81e9x5b = new GUIContainerSlot(_0x81e9x16.x, _0x81e9x16.y, _0x81e9x16.scale)
	};
	for (var _0x81e9x9 in _0x81e9x16) {
		_0x81e9x5b[_0x81e9x9] = _0x81e9x16[_0x81e9x9]
	};
	var _0x81e9x1c0 = 1000 - ConstGUIScale * 256;
	_0x81e9x5b.x = (_0x81e9x5b.x || 0) * ConstGUIScale + _0x81e9x1c0;
	_0x81e9x5b.y = (_0x81e9x5b.y || 0) * ConstGUIScale + 85;
	if (typeof(_0x81e9x5b.scale) == "number") {
		_0x81e9x5b.scale = _0x81e9x5b.scale * ConstGUIScale / 60
	} else {
		_0x81e9x5b.scale = 32 / 60 * ConstGUIScale
	};
	GuiAPI.Slots.push(_0x81e9x5b)
}
var GuiData = {
	BuildGUI: function(_0x81e9x789, isBuildingExternalGui) {
		if (isBuildingExternalGui) {
			externalGuiOutput.writeUTF("gui-build");
			externalGuiOutput.writeInt(parseInt(_0x81e9x789));
			externalGuiOutput.writeInt(externalGuiID)
		};
		if (_0x81e9x789 >= 32) {
			FactAPI.GUI.BuildGUI(_0x81e9x789, isBuildingExternalGui)
		} else {
			var _0x81e9x692 = GuiScreenData[_0x81e9x789];
			if (_0x81e9x692) {
				_0x81e9x692(GUIBuildData)
			}
		};
		GUIBuildData = 0;
		if (isBuildingExternalGui) {
			externalGuiOutput.writeBoolean(false);
			isBuildingExternalGui = false;
			externalGuiOutput = null
		}
	},
	GetGUISlotCount: function(_0x81e9x10) {
		var _0x81e9x68c = GuiScreenSlotCountData[_0x81e9x10];
		if (_0x81e9x10 >= 32) {
			_0x81e9x68c = FactAPI.GUI.getGuiSlotNum(_0x81e9x10)
		};
		if (!_0x81e9x68c) {
			_0x81e9x68c = 0
		};
		return _0x81e9x68c
	}
};
var PaintList = {
	std: new android.graphics.Paint(),
	text: new android.graphics.Paint(android.graphics.Paint.ANTI_ALIAS_FLAG),
	textshadow: new android.graphics.Paint(android.graphics.Paint.ANTI_ALIAS_FLAG),
	outline: new android.graphics.Paint()
};
PaintList.outline.setColor(android.graphics.Color.pack(android.graphics.Color.rgb(70, 70, 70)));
PaintList.outline.setStrokeWidth(10);
PaintList.text.setTypeface(mc_typeface);
PaintList.text.setColor(android.graphics.Color.pack(android.graphics.Color.WHITE));
PaintList.textshadow.setTypeface(mc_typeface);
PaintList.textshadow.setColor(android.graphics.Color.pack(android.graphics.Color.rgb(20, 20, 20)));
var ConstGUIScale = 695 / 256;
var GuiAPI = {
	Window: null,
	MainView: null,
	Canvas: null,
	CanvasBitmap: null,
	Scale: 1,
	yRatio: 1,
	Slots: [],
	Scales: [],
	Buttons: [],
	TextFields: [],
	MakeInThread: [],
	Selection: -1,
	GUIThread: null,
	Title: ".",
	Container: null,
	CurrentOpenedGuiID: -1,
	isGuiOpened: false,
	PauseThread: false,
	isThreadPaused: false,
	PauseThreadAndWait: function() {
		GuiAPI.isThreadPaused = false;
		GuiAPI.PauseThread = true;
		while (!GuiAPI.isThreadPaused) {
			java.lang.Thread.yield()
		}
	},
	Open: function(_0x81e9x198, _0x81e9x1d6) {
		runAsGUI(function() {
			try {
				GuiAPI.CloseGUI();
				GuiAPI.Title = _0x81e9x1d6;
				GuiAPI.Container = _0x81e9x198;
				GuiAPI.CreateGUILayout(_0x81e9x198.id);
				if (_0x81e9x198.machine) {
					GuiAPI.SetSwitchButton(_0x81e9x198.machine);
					GuiAPI.SetHelpButton(_0x81e9x198.machine)
				}
			} catch (e) {
				print(e)
			}
		})
	},
	ImgCache: {
		cache: {},
		getImage: function(_0x81e9x17, _0x81e9x2c5) {
			_0x81e9x2c5 *= GuiAPI.Scale;
			var _0x81e9x163 = _0x81e9x17 + _0x81e9x2c5;
			var _0x81e9x64b = this.cache[_0x81e9x163];
			if (!_0x81e9x64b) {
				_0x81e9x64b = Images[_0x81e9x17];
				if (_0x81e9x64b) {
					_0x81e9x64b = android.graphics.Bitmap.createScaledBitmap(_0x81e9x64b, _0x81e9x64b.getWidth() * _0x81e9x2c5, _0x81e9x64b.getHeight() * _0x81e9x2c5, false)
				};
				this.cache[_0x81e9x163] = _0x81e9x64b
			};
			return _0x81e9x64b
		},
		set: function(_0x81e9x163, _0x81e9x78d) {
			Images[_0x81e9x163] = _0x81e9x78d
		}
	},
	TouchEvent: {
		x: 0,
		y: 0,
		isTouched: false,
		downTime: 0
	},
	RebuildGUI: function(_0x81e9x78e, _0x81e9x78f) {
		if (!GuiAPI.isGuiOpened) {
			print("WARNING: cannot rebuild UI if it is not opened")
		};
		GuiAPI.Slots = [];
		GuiAPI.Scales = [];
		GuiAPI.Buttons = [];
		GuiAPI.TextFields = [];
		GuiAPI.Selected = -1;
		GuiAPI.Container = null;
		GuiAPI.isGuiOpened = true;
		GuiAPI.CurrentOpenedGuiID = _0x81e9x78e;
		this.MakeInThread = [];
		CurrentOpenedContainer = null;
		GuiAPI.DrawStandartGUI(_0x81e9x78e, _0x81e9x78f);
		GuiData.BuildGUI(_0x81e9x78e)
	},
	SetSwitchButton: function(_0x81e9x197) {
		var _0x81e9x18 = "button_on";
		if (!_0x81e9x197.isActivated) {
			_0x81e9x18 = "button_off"
		};
		this.MakeInThread.push(function() {
			GuiAPI.SetupNewButton(0x7f, 850 * GuiAPI.Scale, 4 * GuiAPI.Scale, _0x81e9x18, 3 * GuiAPI.Scale, function() {
				var _0x81e9x158 = getMachineType(_0x81e9x197);
				if (_0x81e9x158 && _0x81e9x158.canDeactivate()) {
					_0x81e9x197.isActivated = !_0x81e9x197.isActivated;
					GuiAPI.SetSwitchButton(_0x81e9x197)
				}
			}, true, true)
		})
	},
	SetHelpButton: function(_0x81e9x197) {
		var _0x81e9x158 = getMachineType(_0x81e9x197);
		if (!_0x81e9x158) {
			return
		};
		var _0x81e9x2a2 = _0x81e9x158.getHelpGuideLink(_0x81e9x197);
		if (!_0x81e9x2a2) {
			return
		};
		this.MakeInThread.push(function() {
			GuiAPI.SetupNewButton(0x7e, 776 * GuiAPI.Scale, 4 * GuiAPI.Scale, "button_help", 3 * GuiAPI.Scale, function() {
				GuideBookUI.GoToLink(_0x81e9x2a2);
				GuideBookUI.History.push({
					chapter: "__close"
				})
			}, true, true)
		})
	},
	GetRealDisplaySize: function() {
		var _0x81e9x1d7 = getMcContext();
		if (android.os.Build.VERSION.SDK_INT > 16) {
			var _0x81e9x790 = _0x81e9x1d7.getWindow().getDecorView().getSystemUiVisibility();
			var _0x81e9x791 = android.view.View.SYSTEM_UI_FLAG_HIDE_NAVIGATION;
			if (_0x81e9x790 && _0x81e9x791 != 0) {
				var _0x81e9x792 = new android.util.DisplayMetrics();
				_0x81e9x1d7.getWindowManager().getDefaultDisplay().getRealMetrics(_0x81e9x792);
				var _0x81e9x680 = _0x81e9x792.widthPixels;
				var _0x81e9x426 = _0x81e9x792.heightPixels;
				return [_0x81e9x680, _0x81e9x426]
			}
		} else {
			print("Old SDK detected")
		};
		var _0x81e9x680 = _0x81e9x1d7.getWindowManager().getDefaultDisplay().getWidth();
		var _0x81e9x426 = _0x81e9x1d7.getWindowManager().getDefaultDisplay().getHeight();
		return [_0x81e9x680, _0x81e9x426]
	},
	CreateGUILayout: function(_0x81e9x78e, _0x81e9x78f, _0x81e9x793) {
		try {
			this.MakeInThread = [];
			var _0x81e9x1d7 = getMcContext();
			var _0x81e9x794 = this.GetRealDisplaySize();
			var _0x81e9x680 = _0x81e9x794[0] / 1;
			var _0x81e9x426 = _0x81e9x794[1] / 1;
			this.Scale = _0x81e9x680 / 1000;
			this.yRatio = _0x81e9x426 / _0x81e9x680;
			this.Window = new android.widget.PopupWindow(_0x81e9x1d7);
			var _0x81e9x6af = _0x81e9x1d7.getWindow().getDecorView();
			this.Window.setWidth(_0x81e9x680);
			this.Window.setHeight(_0x81e9x426);
			this.MainView = new android.widget.ImageView(_0x81e9x1d7);
			this.Window.setContentView(this.MainView);
			this.Window.showAtLocation(_0x81e9x6af, android.view.Gravity.TOP | android.view.Gravity.LEFT, 0, 0);
			this.CanvasBitmap = android.graphics.Bitmap.createBitmap(_0x81e9x680, _0x81e9x426, android.graphics.Bitmap.Config.ARGB_8888);
			this.Canvas = new android.graphics.Canvas(this.CanvasBitmap);
			this.LaunchThread();
			var _0x81e9x795 = this;
			this.MainView.setOnTouchListener({
				onTouch: function(_0x81e9x6b0, _0x81e9x796) {
					try {
						var _0x81e9x797 = _0x81e9x796.getAction();
						if (_0x81e9x797 == 0) {
							_0x81e9x795.TouchEvent.x = _0x81e9x796.getX();
							_0x81e9x795.TouchEvent.y = _0x81e9x796.getY();
							_0x81e9x795.TouchEvent.isTouched = true;
							_0x81e9x795.TouchEvent.downTime = java.lang.System.currentTimeMillis();
							_0x81e9x795.onShortClick()
						};
						if (_0x81e9x797 == 1) {
							_0x81e9x795.TouchEvent.isTouched = false
						}
					} catch (e) {
						print(e)
					};
					return true
				}
			});
			this.DrawStandartGUI(_0x81e9x78e, _0x81e9x78f);
			GuiData.BuildGUI(_0x81e9x78e);
			this.SyncContainer();
			this.isGuiOpened = true;
			this.CurrentOpenedGuiID = _0x81e9x78e;
			this.MainView.setImageBitmap(this.CanvasBitmap);
			this.GUIThread.start();
			if (_0x81e9x793) {
				_0x81e9x793()
			}
		} catch (e) {
			print(e)
		}
	},
	LaunchThread: function() {
		var _0x81e9x795 = this;
		this.StopThread = false;
		this.GUIThread = new java.lang.Thread({
			run: function() {
				try {
					android.os.Process.setThreadPriority(-10);
					while (!_0x81e9x795.StopThread) {
						for (var i in _0x81e9x795.Slots) {
							var _0x81e9x5b = _0x81e9x795.Slots[i];
							if (_0x81e9x5b) {
								_0x81e9x5b.index = i;
								_0x81e9x5b.tick()
							}
						};
						while (_0x81e9x795.MakeInThread.length > 0) {
							try {
								_0x81e9x795.MakeInThread.pop()()
							} catch (e) {
								print("gui func error " + e)
							}
						};
						_0x81e9x795.MakeInThread = [];
						runAsGUI(function() {
							_0x81e9x795.MainView.setImageBitmap(_0x81e9x795.CanvasBitmap)
						});
						var _0x81e9x798 = java.lang.System.currentTimeMillis() - _0x81e9x795.TouchEvent.downTime;
						if (_0x81e9x795.TouchEvent.isTouched && _0x81e9x798 > 800) {
							_0x81e9x795.onLongClick()
						};
						java.lang.Thread.sleep(70);
						if (_0x81e9x795.PauseThread) {
							_0x81e9x795.isThreadPaused = true;
							while (_0x81e9x795.PauseThread) {
								java.lang.Thread.yield()
							};
							_0x81e9x795.isThreadPaused = false
						}
					}
				} catch (e) {
					print(e)
				};
				_0x81e9x795.GUIThread = null
			}
		})
	},
	DrawStandartGUI: function(_0x81e9x78e, _0x81e9x78f) {
		this.Canvas.drawRGB(100, 100, 100);
		PaintList.std.setColor(android.graphics.Color.pack(android.graphics.Color.rgb(90, 90, 90)));
		this.Canvas.drawRect(0, 0, 1000 * this.Scale, 80 * this.Scale, PaintList.std);
		var _0x81e9x799 = this.GenFrameBmp(1000, 80, android.graphics.Color.rgb(0x80, 0x80, 0x80));
		this.Canvas.drawBitmap(_0x81e9x799, 0, 0, null);
		PaintList.std.setColor(android.graphics.Color.pack(android.graphics.Color.rgb(0xb3, 0xb3, 0xb3)));
		var _0x81e9x79a = 300;
		if (this.yRatio < 0.66) {
			_0x81e9x79a = 428
		};
		if (_0x81e9x78f) {
			_0x81e9x79a = 0
		};
		this.LeftBorder = _0x81e9x79a + 5;
		ConstGUIScale = (995 - _0x81e9x79a) / 256;
		this.Canvas.drawRect(_0x81e9x79a * this.Scale, 80 * this.Scale, 1000 * this.Scale, 1000 * this.yRatio * this.Scale, PaintList.std);
		this.Canvas.drawLine(0, 80 * this.Scale, 1000 * this.Scale, 80 * this.Scale, PaintList.outline);
		this.Canvas.drawLine(_0x81e9x79a * this.Scale, 80 * this.Scale, _0x81e9x79a * this.Scale, 1000 * this.yRatio * this.Scale, PaintList.outline);
		PaintList.text.setColor(android.graphics.Color.pack(android.graphics.Color.WHITE));
		PaintList.text.setTextSize(40 * this.Scale);
		this.DrawTextWithShadow(this.Title, 25 * this.Scale, 56 * this.Scale, 0.7, 7.5);
		var _0x81e9x79b = this.ImgCache.getImage("xbutton", 3);
		this.Canvas.drawBitmap(_0x81e9x79b, 924 * this.Scale, 4 * this.Scale, null);
		if (_0x81e9x79a > 0) {
			var _0x81e9x79c = this.GenFrameBmp(_0x81e9x79a, 1000 * this.yRatio - 78, android.graphics.Color.rgb(0x88, 0x88, 0x88));
			this.Canvas.drawBitmap(_0x81e9x79c, 0, 80 * this.Scale, null)
		};
		var _0x81e9x79d = guiBackgroundByType(_0x81e9x78e);
		if (_0x81e9x79d) {
			_0x81e9x79d = android.graphics.Bitmap.createScaledBitmap(_0x81e9x79d, (995 - _0x81e9x79a) * this.Scale, (995 - _0x81e9x79a) / _0x81e9x79d.getWidth() * _0x81e9x79d.getHeight() * this.Scale, false);
			this.Canvas.drawBitmap(_0x81e9x79d, (_0x81e9x79a + 5) * this.Scale, 85 * this.Scale, null)
		};
		var _0x81e9x40e = 4;
		if (this.yRatio < 0.66) {
			_0x81e9x40e = 6
		};
		if (_0x81e9x78f) {
			this._CustomBuildFunc = _0x81e9x78f;
			this._CustomBuildFunc(this.Canvas)
		} else {
			for (var _0x81e9x79e = 0; _0x81e9x79e < 36 / _0x81e9x40e; _0x81e9x79e++) {
				for (var _0x81e9x79f = 0; _0x81e9x79f < _0x81e9x40e; _0x81e9x79f++) {
					this.Slots.push(new GUIInventorySlot(24 + _0x81e9x79f * 64, 108 + _0x81e9x79e * 64, _0x81e9x79f + _0x81e9x79e * _0x81e9x40e + 9))
				}
			}
		}
	},
	GenFrameBmp: function(_0x81e9x304, _0x81e9x175, _0x81e9x6b8, _0x81e9x7a0) {
		var _0x81e9x7a0 = GUIDecoration.GenFrame(parseInt(_0x81e9x304 / 4), parseInt(_0x81e9x175 / 4), _0x81e9x6b8, this.Scale * 4, _0x81e9x7a0);
		return _0x81e9x7a0
	},
	DrawBitmapIntoCanvas: function(_0x81e9x1ee, _0x81e9x26, _0x81e9x27, _0x81e9x2c5) {
		if (!_0x81e9x1ee) {
			return
		};
		if (!_0x81e9x2c5) {
			_0x81e9x2c5 = 1
		};
		var _0x81e9x7a1 = android.graphics.Bitmap.createScaledBitmap(_0x81e9x1ee, _0x81e9x1ee.width * GuiAPI.Scale * _0x81e9x2c5, _0x81e9x1ee.height * GuiAPI.Scale * _0x81e9x2c5, false);
		GuiAPI.Canvas.drawBitmap(_0x81e9x7a1, _0x81e9x26 * GuiAPI.Scale, _0x81e9x27 * GuiAPI.Scale, null)
	},
	DrawSlot: function(_0x81e9x26, _0x81e9x27, _0x81e9x2c5, _0x81e9x10, _0x81e9x13, _0x81e9x16, _0x81e9x7a2, _0x81e9x7a3) {
		if (!this.Canvas) {
			return
		};
		var _0x81e9x7a4 = parseInt(_0x81e9x16);
		if (guiItemDamage[_0x81e9x10]) {
			_0x81e9x7a4 = parseInt(14 * (1 - _0x81e9x16 / guiItemDamage[_0x81e9x10]) + 0.5)
		};
		var _0x81e9x7a5 = "item_" + _0x81e9x10 + ":" + _0x81e9x7a4;
		var _0x81e9x2aa = this.ImgCache.getImage(_0x81e9x7a5, _0x81e9x2c5 / 4);
		if (!_0x81e9x2aa) {
			_0x81e9x2aa = getGUIItemIcon(_0x81e9x10, _0x81e9x16);
			_0x81e9x2aa = android.graphics.Bitmap.createScaledBitmap(_0x81e9x2aa, 52 * 4, 52 * 4, false);
			Images[_0x81e9x7a5] = _0x81e9x2aa;
			_0x81e9x2aa = this.ImgCache.getImage(_0x81e9x7a5, _0x81e9x2c5 / 4)
		};
		if (!Images[_0x81e9x7a3]) {
			_0x81e9x7a3 = "slot"
		};
		if (!Images["slotbg_" + _0x81e9x7a3]) {
			Images["slotbg_" + _0x81e9x7a3] = android.graphics.Bitmap.createScaledBitmap(Images[_0x81e9x7a3], 60, 60, false)
		};
		var _0x81e9x7a6 = this.ImgCache.getImage("slotbg_" + _0x81e9x7a3, _0x81e9x2c5);
		this.Canvas.drawBitmap(_0x81e9x7a6, _0x81e9x26 * this.Scale, _0x81e9x27 * this.Scale, null);
		PaintList.text.setTextSize(16 * this.Scale);
		PaintList.text.setColor(android.graphics.Color.pack(android.graphics.Color.WHITE));
		if (_0x81e9x2aa && _0x81e9x10 > 0) {
			this.Canvas.drawBitmap(_0x81e9x2aa, (_0x81e9x26 + 4 * _0x81e9x2c5) * this.Scale, (_0x81e9x27 + 4 * _0x81e9x2c5) * this.Scale, null)
		};
		if (_0x81e9x13 > 1 || typeof(_0x81e9x13) == "string") {
			this.Canvas.drawText(_0x81e9x13 + "", (_0x81e9x26 + 25 * _0x81e9x2c5) * this.Scale, (_0x81e9x27 + 50 * _0x81e9x2c5) * this.Scale, PaintList.text)
		};
		if (_0x81e9x7a2) {
			var _0x81e9x7a7 = this.ImgCache.getImage("selection", _0x81e9x2c5);
			this.Canvas.drawBitmap(_0x81e9x7a7, _0x81e9x26 * this.Scale, _0x81e9x27 * this.Scale, null)
		};
		if (config_debug_enabled) {
			PaintList.text.setTextSize(7 * this.Scale);
			PaintList.text.setColor(android.graphics.Color.pack(android.graphics.Color.BLACK));
			this.Canvas.drawText(_0x81e9x7a5, (_0x81e9x26 + 1 * _0x81e9x2c5) * this.Scale, (_0x81e9x27 + 8 * _0x81e9x2c5) * this.Scale, PaintList.text);
			this.Canvas.drawText("bg: " + _0x81e9x7a3, (_0x81e9x26 + 1 * _0x81e9x2c5) * this.Scale, (_0x81e9x27 + 18 * _0x81e9x2c5) * this.Scale, PaintList.text)
		}
	},
	GetSlot: function(i) {
		return this.Slots[i]
	},
	onShortClick: function() {
		var _0x81e9x7a8 = this.TouchEvent.x;
		var _0x81e9x26 = _0x81e9x7a8 / this.Scale;
		var _0x81e9x7a9 = this.TouchEvent.y;
		var _0x81e9x27 = _0x81e9x7a9 / this.Scale;
		if (_0x81e9x26 > 920 && _0x81e9x27 < 80) {
			this.CloseGUI()
		};
		for (var i in this.Buttons) {
			var _0x81e9x173 = this.Buttons[i];
			try {
				if (_0x81e9x173 && _0x81e9x173.x <= _0x81e9x7a8 && _0x81e9x173.x + _0x81e9x173.w >= _0x81e9x7a8 && _0x81e9x173.y <= _0x81e9x7a9 && _0x81e9x173.y + _0x81e9x173.h >= _0x81e9x7a9 && _0x81e9x173.onClick) {
					_0x81e9x173.onClick()
				}
			} catch (e) {
				print(e)
			}
		};
		if (CurrentOpenedContainer && CurrentOpenedContainer.lockSlots) {
			return
		};
		for (var i in this.Slots) {
			var _0x81e9x5b = this.Slots[i];
			try {
				if (_0x81e9x5b && _0x81e9x5b.checkCoordsInSlot(_0x81e9x26, _0x81e9x27)) {
					_0x81e9x5b.onClick()
				}
			} catch (e) {
				print(e)
			}
		}
	},
	onLongClick: function() {
		var _0x81e9x26 = this.TouchEvent.x / this.Scale;
		var _0x81e9x27 = this.TouchEvent.y / this.Scale;
		if (CurrentOpenedContainer && CurrentOpenedContainer.lockSlots) {
			return
		};
		for (var i in this.Slots) {
			var _0x81e9x5b = this.Slots[i];
			try {
				if (_0x81e9x5b && _0x81e9x5b.checkCoordsInSlot(_0x81e9x26, _0x81e9x27)) {
					_0x81e9x5b.onLongClick()
				}
			} catch (e) {
				print(e)
			}
		}
	},
	CloseGUI: function() {
		if (this.Window) {
			this.Window.dismiss();
			this.Window = null;
			this.StopThread = true;
			this.Slots = [];
			this.Scales = [];
			this.Buttons = [];
			this.TextFields = [];
			this.Selected = -1;
			this.Container = null;
			this.isGuiOpened = false;
			this.CurrentOpenedGuiID = -1;
			this.PauseThread = false;
			this.MakeInThread = [];
			CurrentOpenedContainer = null
		}
	},
	DrawTextWithShadow: function(_0x81e9x1de, _0x81e9x26, _0x81e9x27, _0x81e9x7aa, _0x81e9x31f) {
		PaintList.textshadow.setTextSize(PaintList.text.getTextSize());
		this.Canvas.drawText(_0x81e9x1de, _0x81e9x26 + Math.sin(_0x81e9x7aa) * _0x81e9x31f * this.Scale, _0x81e9x27 + Math.cos(_0x81e9x7aa) * _0x81e9x31f * this.Scale, PaintList.textshadow);
		this.Canvas.drawText(_0x81e9x1de, _0x81e9x26, _0x81e9x27, PaintList.text)
	},
	SyncContainer: function() {
		if (!this.Container) {
			return
		};
		var _0x81e9x194 = this.Container;
		for (var i in this.Slots) {
			if (i < 36) {
				continue
			};
			var _0x81e9x3c0 = i - 36;
			var _0x81e9x16 = _0x81e9x194.slots[_0x81e9x3c0];
			var _0x81e9x5b = this.Slots[i];
			_0x81e9x5b.id = _0x81e9x16.id;
			_0x81e9x5b.count = _0x81e9x16.count;
			_0x81e9x5b.data = _0x81e9x16.data;
			_0x81e9x194.slots[_0x81e9x3c0] = _0x81e9x5b
		}
	},
	SetupNewScale: function(_0x81e9x10, _0x81e9x26, _0x81e9x27, _0x81e9x7ab, _0x81e9x6c0, _0x81e9x7ac) {
		if (!_0x81e9x7ac) {
			_0x81e9x26 = (_0x81e9x26 * ConstGUIScale + this.LeftBorder) * this.Scale;
			_0x81e9x27 = (_0x81e9x27 * ConstGUIScale + 85) * this.Scale
		};
		var _0x81e9x3e = Images[_0x81e9x7ab];
		if (!_0x81e9x3e) {
			print("<GuiAPI> no texture " + _0x81e9x7ab + " for bar " + _0x81e9x10);
			return
		};
		var _0x81e9x304 = _0x81e9x3e.getWidth() * ConstGUIScale * this.Scale;
		var _0x81e9x175 = _0x81e9x3e.getHeight() * ConstGUIScale * this.Scale;
		_0x81e9x304 = Math.min(this.CanvasBitmap.width - _0x81e9x26, _0x81e9x304);
		_0x81e9x175 = Math.min(this.CanvasBitmap.height - _0x81e9x175, _0x81e9x175);
		var _0x81e9x79d = android.graphics.Bitmap.createBitmap(this.CanvasBitmap, parseInt(_0x81e9x26), parseInt(_0x81e9x27), parseInt(_0x81e9x304), parseInt(_0x81e9x175));
		_0x81e9x3e = android.graphics.Bitmap.createScaledBitmap(_0x81e9x3e, parseInt(_0x81e9x304), parseInt(_0x81e9x175), false);
		this.Scales[_0x81e9x10] = {
			x: _0x81e9x26,
			y: _0x81e9x27,
			tex: _0x81e9x3e,
			width: _0x81e9x304,
			height: _0x81e9x175,
			background: _0x81e9x79d,
			dir: _0x81e9x6c0,
			texname: _0x81e9x7ab
		}
	},
	UpdateScalePosition: function(_0x81e9x10, _0x81e9x26, _0x81e9x27, _0x81e9x7ac) {
		var _0x81e9x795 = this;
		this.MakeInThread.push(function() {
			if (!_0x81e9x7ac) {
				_0x81e9x26 = (_0x81e9x26 * ConstGUIScale + GuiAPI.LeftBorder) * _0x81e9x795.Scale;
				_0x81e9x27 = (_0x81e9x27 * ConstGUIScale + 85) * _0x81e9x795.Scale
			};
			var _0x81e9x2c5 = _0x81e9x795.Scales[_0x81e9x10];
			if (!_0x81e9x2c5) {
				return
			};
			var _0x81e9x184 = _0x81e9x2c5.val;
			_0x81e9x795.SetScaleInThread(_0x81e9x10, 0);
			_0x81e9x2c5.x = _0x81e9x26;
			_0x81e9x2c5.y = _0x81e9x27;
			if (_0x81e9x2c5.background) {
				_0x81e9x2c5.background.recycle()
			};
			_0x81e9x2c5.background = android.graphics.Bitmap.createBitmap(_0x81e9x795.CanvasBitmap, _0x81e9x2c5.x, _0x81e9x2c5.y + 1, _0x81e9x2c5.width, _0x81e9x2c5.height);
			_0x81e9x795.SetScaleInThread(_0x81e9x10, _0x81e9x184)
		})
	},
	UpdateScaleTexture: function(_0x81e9x10, _0x81e9x7ab) {
		var _0x81e9x2c5 = this.Scales[_0x81e9x10];
		if (!_0x81e9x2c5) {
			return
		};
		var _0x81e9x3e = Images[_0x81e9x7ab];
		if (!_0x81e9x3e) {
			print("<GuiAPI> no texture " + _0x81e9x7ab + " for bar " + _0x81e9x10);
			return
		};
		var _0x81e9x304 = _0x81e9x3e.getWidth() * ConstGUIScale * this.Scale;
		var _0x81e9x175 = _0x81e9x3e.getHeight() * ConstGUIScale * this.Scale;
		_0x81e9x3e = android.graphics.Bitmap.createScaledBitmap(_0x81e9x3e, _0x81e9x304, _0x81e9x175, false);
		_0x81e9x2c5.width = _0x81e9x304;
		_0x81e9x2c5.height = _0x81e9x175;
		_0x81e9x2c5.tex = _0x81e9x3e;
		_0x81e9x2c5.texname = _0x81e9x7ab
	},
	SetScale: function(_0x81e9x10, _0x81e9x184, _0x81e9x691) {
		this.MakeInThread.push(function() {
			GuiAPI.SetScaleInThread(_0x81e9x10, _0x81e9x184, _0x81e9x691)
		})
	},
	SetScaleInThread: function(_0x81e9x10, _0x81e9x6be, _0x81e9x691) {
		if (!_0x81e9x6be) {
			_0x81e9x6be = 0
		};
		if (_0x81e9x6be > 0.999) {
			_0x81e9x6be = 0.999
		};
		if (_0x81e9x6be < 0) {
			_0x81e9x6be = 0
		};
		var _0x81e9x7ad = this.Scales[_0x81e9x10];
		if (!_0x81e9x7ad) {
			return
		};
		var _0x81e9x6c0 = _0x81e9x7ad.dir;
		var _0x81e9x6c2 = 0,
			_0x81e9x6c3 = 0,
			_0x81e9x6c4 = 1,
			_0x81e9x6c5 = 1;
		if (_0x81e9x6c0 == 0) {
			_0x81e9x6c3 = 1 - _0x81e9x6be
		};
		if (_0x81e9x6c0 == 1) {
			_0x81e9x6c2 = 1 - _0x81e9x6be
		};
		if (_0x81e9x6c0 == 2) {
			_0x81e9x6c5 = _0x81e9x6be
		};
		if (_0x81e9x6c0 == 3) {
			_0x81e9x6c4 = _0x81e9x6be
		};
		var _0x81e9x304 = _0x81e9x7ad.width;
		var _0x81e9x175 = _0x81e9x7ad.height;
		this.SleepThread = true;
		if (!_0x81e9x691) {
			this.Canvas.drawBitmap(_0x81e9x7ad.background, _0x81e9x7ad.x, _0x81e9x7ad.y, null)
		};
		try {
			var _0x81e9x18 = android.graphics.Bitmap.createBitmap(_0x81e9x7ad.tex, parseInt(_0x81e9x304 * _0x81e9x6c2), parseInt(_0x81e9x175 * _0x81e9x6c3), parseInt(_0x81e9x304 * (_0x81e9x6c4 - _0x81e9x6c2)), parseInt(_0x81e9x175 * (_0x81e9x6c5 - _0x81e9x6c3)));
			this.Canvas.drawBitmap(_0x81e9x18, _0x81e9x7ad.tex.width * _0x81e9x6c2 + _0x81e9x7ad.x, _0x81e9x7ad.tex.height * _0x81e9x6c3 + _0x81e9x7ad.y, null);
			_0x81e9x18.recycle()
		} catch (e) {};
		_0x81e9x7ad.val = _0x81e9x6be;
		this.SleepThread = false
	},
	SetupTextField: function(_0x81e9x10, _0x81e9x1a1, _0x81e9x26, _0x81e9x27, _0x81e9x304, _0x81e9x175, _0x81e9x7ac) {
		if (!_0x81e9x7ac) {
			_0x81e9x26 = (_0x81e9x26 * ConstGUIScale + this.LeftBorder) * this.Scale;
			_0x81e9x27 = (_0x81e9x27 * ConstGUIScale + 85) * this.Scale
		};
		_0x81e9x304 += 3;
		_0x81e9x304 *= ConstGUIScale * this.Scale;
		_0x81e9x175 *= ConstGUIScale * this.Scale;
		_0x81e9x304 = Math.min(this.CanvasBitmap.width - _0x81e9x26, _0x81e9x304);
		_0x81e9x175 = Math.min(this.CanvasBitmap.height - _0x81e9x175, _0x81e9x175);
		_0x81e9x1a1 *= this.Scale * ConstGUIScale / (695 / 256);
		var _0x81e9x79d = android.graphics.Bitmap.createBitmap(this.CanvasBitmap, parseInt(_0x81e9x26), parseInt(_0x81e9x27), parseInt(_0x81e9x304), parseInt(_0x81e9x175));
		this.TextFields[_0x81e9x10] = {
			x: _0x81e9x26,
			y: _0x81e9x27,
			w: _0x81e9x304,
			h: _0x81e9x175,
			size: _0x81e9x1a1,
			background: _0x81e9x79d
		}
	},
	DrawMultiLinedText: function(_0x81e9x162, _0x81e9x26, _0x81e9x27, _0x81e9x1a1, _0x81e9x7ae, _0x81e9x7af) {
		var _0x81e9x7b0 = _0x81e9x162.split("\n");
		for (var i in _0x81e9x7b0) {
			GuiAPI.Canvas.drawText(_0x81e9x7b0[i], _0x81e9x26, _0x81e9x27 + i * (_0x81e9x1a1 + _0x81e9x7ae), _0x81e9x7af)
		}
	},
	SetText: function(_0x81e9x10, _0x81e9x162, _0x81e9x23b, _0x81e9x691) {
		var _0x81e9x1de = this.TextFields[_0x81e9x10];
		if (!_0x81e9x1de) {
			return
		};
		this.MakeInThread.push(function() {
			PaintList.text.setTextSize(_0x81e9x1de.size);
			if (_0x81e9x23b == _0x81e9x23b) {
				PaintList.text.setColor(android.graphics.Color.pack(_0x81e9x23b))
			};
			if (!_0x81e9x691 && _0x81e9x1de.background) {
				GuiAPI.Canvas.drawBitmap(_0x81e9x1de.background, _0x81e9x1de.x, _0x81e9x1de.y, null)
			};
			GuiAPI.DrawMultiLinedText(_0x81e9x162, _0x81e9x1de.x, _0x81e9x1de.y + (_0x81e9x1de.size + GuiAPI.Scale * 3), _0x81e9x1de.size, parseInt(_0x81e9x1de.size * 0.2), PaintList.text)
		})
	},
	SetupNewButton: function(_0x81e9x10, _0x81e9x26, _0x81e9x27, _0x81e9x7ab, _0x81e9x2c5, _0x81e9xd, _0x81e9x7b1, _0x81e9x7ac) {
		if (!_0x81e9x7ac) {
			_0x81e9x26 = (_0x81e9x26 * ConstGUIScale + this.LeftBorder) * this.Scale;
			_0x81e9x27 = (_0x81e9x27 * ConstGUIScale + 85) * this.Scale
		};
		var _0x81e9x3e = Images[_0x81e9x7ab];
		if (_0x81e9x7b1) {
			w = _0x81e9x2c5 * _0x81e9x3e.getWidth();
			h = _0x81e9x2c5 * _0x81e9x3e.getHeight()
		} else {
			w = ConstGUIScale * this.Scale * _0x81e9x2c5 * _0x81e9x3e.getWidth();
			h = ConstGUIScale * this.Scale * _0x81e9x2c5 * _0x81e9x3e.getHeight()
		};
		_0x81e9x3e = android.graphics.Bitmap.createScaledBitmap(_0x81e9x3e, w, h, false);
		var _0x81e9x194 = CurrentOpenedContainer;
		var _0x81e9x7b2 = function(_0x81e9x26a) {
			if (!_0x81e9x194) {
				_0x81e9xd(null, null)
			} else {
				_0x81e9xd(_0x81e9x194.machine, _0x81e9x194)
			};
			return true
		};
		this.Buttons[_0x81e9x10] = {
			x: _0x81e9x26,
			y: _0x81e9x27,
			w: w,
			h: h,
			tex: _0x81e9x3e,
			onClick: _0x81e9x7b2,
			scale: _0x81e9x2c5,
			texname: _0x81e9x7ab
		};
		var _0x81e9x693 = this.Buttons[_0x81e9x10];
		this.MakeInThread.push(function() {
			GuiAPI.Canvas.drawBitmap(_0x81e9x693.tex, _0x81e9x693.x, _0x81e9x693.y, null)
		})
	},
	SetupTextButton: function(_0x81e9x10, _0x81e9x26, _0x81e9x27, _0x81e9x1de, _0x81e9x1a1, _0x81e9x23b, _0x81e9xd, _0x81e9x7ac) {
		this.MakeInThread.push(function() {
			PaintList.text.setTextSize(_0x81e9x1a1 * GuiAPI.Scale);
			var _0x81e9x7b3 = new android.graphics.Rect();
			PaintList.text.getTextBounds(_0x81e9x1de, 0, _0x81e9x1de.length, _0x81e9x7b3);
			var _0x81e9x426 = 24 * GuiAPI.Scale + _0x81e9x7b3.height();
			var _0x81e9x680 = 36 * GuiAPI.Scale + _0x81e9x7b3.width();
			var _0x81e9x7a0 = GuiAPI.GenFrameBmp(_0x81e9x680 / GuiAPI.Scale, _0x81e9x426 / GuiAPI.Scale, android.graphics.Color.rgb(0xb3, 0xb3, 0xb3), "frame_tin");
			var _0x81e9x767 = new android.graphics.Canvas(_0x81e9x7a0);
			PaintList.text.setTextSize(_0x81e9x1a1 * GuiAPI.Scale);
			PaintList.text.setColor(android.graphics.Color.pack(android.graphics.Color.rgb(0x50, 0x50, 0x50)));
			_0x81e9x767.drawText(_0x81e9x1de, 19 * GuiAPI.Scale, _0x81e9x7b3.height() + 12 * GuiAPI.Scale, PaintList.text);
			PaintList.text.setColor(android.graphics.Color.pack(_0x81e9x23b));
			_0x81e9x767.drawText(_0x81e9x1de, 16 * GuiAPI.Scale, _0x81e9x7b3.height() + 9 * GuiAPI.Scale, PaintList.text);
			var _0x81e9x7b4 = "_textbuttontex" + _0x81e9x10;
			Images[_0x81e9x7b4] = _0x81e9x7a0;
			GuiAPI.SetupNewButton(_0x81e9x10, _0x81e9x26, _0x81e9x27, _0x81e9x7b4, 1, _0x81e9xd, true, _0x81e9x7ac)
		})
	}
};

function GUISlotBase(_0x81e9x26, _0x81e9x27) {
	this.x = _0x81e9x26;
	this.y = _0x81e9x27;
	this.id = this.count = this.data = 0;
	this.lastId = this.lastCount = this.lastData = -1;
	this.scale = 1;
	this.bgtexture = "slot";
	this.tick = function() {
		this.onTick();
		if (!GuiAPI.Canvas) {
			return
		};
		this.draw();
		if (this.lastId != this.id || this.lastCount != this.count || this.lastData != this.data) {
			this.lastId = this.id;
			this.lastCount = this.count;
			this.lastData = this.data
		}
	};
	this.draw = function() {
		GuiAPI.DrawSlot(this.x, this.y, this.scale, this.id, this.count, this.data, GuiAPI.Selection == this.index, this.bgtexture)
	};
	this.checkCoordsInSlot = function(_0x81e9x26, _0x81e9x27) {
		return _0x81e9x26 > this.x && _0x81e9x26 < this.x + 60 * this.scale && _0x81e9x27 > this.y && _0x81e9x27 < this.y + 60 * this.scale
	};
	this.onTick = function() {};
	this.onClick = function() {};
	this.onLongClick = function() {}
}

function GUIInventorySlot(_0x81e9x26, _0x81e9x27, _0x81e9x7b7) {
	this.parent = GUISlotBase;
	this.parent(_0x81e9x26, _0x81e9x27);
	this.invindex = _0x81e9x7b7;
	this.onTick = function() {
		this.id = Player.getInventorySlot(this.invindex);
		this.count = Player.getInventorySlotCount(this.invindex);
		this.data = Player.getInventorySlotData(this.invindex)
	};
	this.tranfItemToSelected = function(_0x81e9x7b8) {
		var _0x81e9x7b9 = GuiAPI.Slots[GuiAPI.Selection];
		if (!_0x81e9x7b9) {
			return
		};
		if (_0x81e9x7b9.id == this.id && _0x81e9x7b9.data == this.data || _0x81e9x7b9.id == 0) {
			var _0x81e9x7ba = getItemMaxStackSize(this.id) - _0x81e9x7b9.count;
			var _0x81e9x1a3 = Math.min(this.count, Math.min(_0x81e9x7b8, _0x81e9x7ba));
			if (_0x81e9x1a3 > 0) {
				_0x81e9x7b9.id = this.id;
				_0x81e9x7b9.data = this.data;
				_0x81e9x7b9.count += _0x81e9x1a3;
				this.count -= _0x81e9x1a3;
				if (this.count < 1) {
					this.id = this.data = 0
				};
				Player.setInventorySlot(this.invindex, this.id, this.count, this.data)
			}
		}
	};
	this.onClick = function() {
		this.tranfItemToSelected(1)
	};
	this.onLongClick = function() {
		this.tranfItemToSelected(this.count)
	}
}

function GUIContainerSlot(_0x81e9x26, _0x81e9x27, _0x81e9x2c5) {
	this.parent = GUISlotBase;
	this.parent(_0x81e9x26, _0x81e9x27);
	this.scale = _0x81e9x2c5;
	this.onClick = function() {
		if (GuiAPI.Selection == this.index && this.count >= 1) {
			this.count--;
			addItemInventory(this.id, 1, this.data);
			if (this.count < 1) {
				this.id = this.data = 0
			}
		};
		GuiAPI.Selection = this.index
	};
	this.onLongClick = function() {
		if (GuiAPI.Selection == this.index && this.count >= 1) {
			addItemInventory(this.id, this.count, this.data);
			this.id = this.count = this.data = 0
		};
		GuiAPI.Selection = this.index
	}
}

function GUIIconSlot(_0x81e9x26, _0x81e9x27, _0x81e9x2c5) {
	this.parent = GUISlotBase;
	this.parent(_0x81e9x26, _0x81e9x27);
	this.scale = _0x81e9x2c5;
	this.isIcon = true
}

function getGUIItemIcon(_0x81e9x10, _0x81e9x16) {
	var _0x81e9x6e3 = _0x81e9x10 + ":" + _0x81e9x16;
	var _0x81e9x6e4 = _0x81e9x10 + ":-1";
	var _0x81e9x6e5 = parseInt(_0x81e9x10);
	if (_0x81e9x10 == 0) {
		return cloneGuiItemOverrideBitmap(GetBitmapAssetAndCache("empty.png"))
	};
	var _0x81e9x6e6 = FactAPI.AddonItemTextureList[_0x81e9x6e3];
	var _0x81e9x6e7 = FactAPI.AddonItemTextureList[_0x81e9x6e4];
	var _0x81e9x6e8 = null;
	var _0x81e9x2aa = null;
	if (_0x81e9x6e6) {
		_0x81e9x2aa = _0x81e9x6e6
	} else {
		if (_0x81e9x6e7) {
			_0x81e9x2aa = _0x81e9x6e7
		} else {
			_0x81e9x2aa = GetBitmapAssetAndCache(_0x81e9x10 + "_" + _0x81e9x16 + ".png");
			if (!_0x81e9x2aa) {
				_0x81e9x2aa = GetBitmapAssetAndCache(_0x81e9x10 + ".png")
			}
		}
	};
	if (!_0x81e9x2aa) {
		if (NativeTexturepackIcons[_0x81e9x10]) {
			_0x81e9x2aa = GetBitmapAssetAndCache("images/items-opaque/" + NativeTexturepackIcons[_0x81e9x10])
		} else {
			_0x81e9x2aa = GetBitmapAssetAndCache("missing_icon.png")
		}
	};
	_0x81e9x2aa = cloneGuiItemOverrideBitmap(_0x81e9x2aa);
	if (_0x81e9x16 > 0 && guiItemDamage[_0x81e9x10] && _0x81e9x2aa) {
		var _0x81e9x6e9 = guiItemDamage[_0x81e9x10];
		var _0x81e9x6ea = parseInt(14 * (1 - _0x81e9x16 / _0x81e9x6e9) + 0.5);
		var _0x81e9x6eb = parseInt(_0x81e9x16 / _0x81e9x6e9 * 255);
		for (var _0x81e9x38a = 0; _0x81e9x38a < 14; _0x81e9x38a++) {
			var _0x81e9x23b = android.graphics.Color.BLACK;
			if (_0x81e9x38a < _0x81e9x6ea) {
				_0x81e9x23b = android.graphics.Color.rgb(_0x81e9x6eb, 255 - _0x81e9x6eb, 0)
			};
			_0x81e9x2aa.setPixel(1 + _0x81e9x38a, 14, _0x81e9x23b)
		}
	};
	return _0x81e9x2aa
}
var GUIDecoration = {
	GuiFrameCache: [],
	GenFrame: function(_0x81e9x680, _0x81e9x426, _0x81e9x6b8, _0x81e9x2c5, _0x81e9x7bf) {
		var _0x81e9x172 = android.graphics.Bitmap.createBitmap(_0x81e9x680, _0x81e9x426, android.graphics.Bitmap.Config.ARGB_8888);
		var _0x81e9x767 = new android.graphics.Canvas(_0x81e9x172);
		_0x81e9x767.drawColor(_0x81e9x6b8);
		if (!_0x81e9x7bf || !Images[_0x81e9x7bf]) {
			_0x81e9x7bf = "frame"
		};
		var _0x81e9x7a0 = Images[_0x81e9x7bf];
		var _0x81e9x46b = android.graphics.Bitmap.createBitmap(_0x81e9x7a0, 3, 0, 10, 4);
		var _0x81e9x7c0 = android.graphics.Bitmap.createBitmap(_0x81e9x7a0, 3, 12, 10, 4);
		var _0x81e9x1a5 = android.graphics.Bitmap.createBitmap(_0x81e9x7a0, 0, 3, 4, 10);
		var _0x81e9x7c1 = android.graphics.Bitmap.createBitmap(_0x81e9x7a0, 12, 3, 4, 10);
		for (var _0x81e9x26 = 0; _0x81e9x26 < _0x81e9x680; _0x81e9x26 += 10) {
			_0x81e9x767.drawBitmap(_0x81e9x46b, _0x81e9x26, 0, null);
			_0x81e9x767.drawBitmap(_0x81e9x7c0, _0x81e9x26, _0x81e9x426 - 4, null)
		};
		for (var _0x81e9x27 = 0; _0x81e9x27 < _0x81e9x426; _0x81e9x27 += 10) {
			_0x81e9x767.drawBitmap(_0x81e9x1a5, 0, _0x81e9x27, null);
			_0x81e9x767.drawBitmap(_0x81e9x7c1, _0x81e9x680 - 4, _0x81e9x27, null)
		};
		for (var _0x81e9x26 = 0; _0x81e9x26 < 2; _0x81e9x26++) {
			for (var _0x81e9x27 = 0; _0x81e9x27 < 2; _0x81e9x27++) {
				_0x81e9x172.setPixel(_0x81e9x26, _0x81e9x27, 0);
				_0x81e9x172.setPixel(_0x81e9x680 - _0x81e9x26 - 1, _0x81e9x27, 0);
				_0x81e9x172.setPixel(_0x81e9x26, _0x81e9x426 - _0x81e9x27 - 1, 0);
				_0x81e9x172.setPixel(_0x81e9x680 - _0x81e9x26 - 1, _0x81e9x426 - _0x81e9x27 - 1, 0)
			}
		};
		_0x81e9x767.drawBitmap(android.graphics.Bitmap.createBitmap(_0x81e9x7a0, 0, 0, 4, 4), 0, 0, null);
		_0x81e9x767.drawBitmap(android.graphics.Bitmap.createBitmap(_0x81e9x7a0, 12, 0, 4, 4), _0x81e9x680 - 4, 0, null);
		_0x81e9x767.drawBitmap(android.graphics.Bitmap.createBitmap(_0x81e9x7a0, 0, 12, 4, 4), 0, _0x81e9x426 - 4, null);
		_0x81e9x767.drawBitmap(android.graphics.Bitmap.createBitmap(_0x81e9x7a0, 12, 12, 4, 4), _0x81e9x680 - 4, _0x81e9x426 - 4, null);
		return android.graphics.Bitmap.createScaledBitmap(_0x81e9x172, _0x81e9x680 * _0x81e9x2c5, _0x81e9x426 * _0x81e9x2c5, false)
	}
};
var AchievementDataSaver = {
	Data: {},
	Reset: function() {
		this.Data = {};
		this.Path = android.os.Environment.getExternalStorageDirectory().getAbsolutePath() + "/games/com.mojang/minecraftWorlds/" + Level.getWorldDir() + "/factorization.achievements"
	},
	Read: function() {
		this.Reset();
		try {
			var _0x81e9x288 = java.io.BufferedReader(new java.io.FileReader(this.Path));
			var _0x81e9x37e = _0x81e9x288.readLine();
			while (_0x81e9x37e) {
				var _0x81e9x2a0 = _0x81e9x37e.split(":");
				if (_0x81e9x2a0.length == 2) {
					this.Data[_0x81e9x2a0[0]] = (_0x81e9x2a0[1] == "true")
				};
				_0x81e9x37e = _0x81e9x288.readLine()
			}
		} catch (e) {}
	},
	Save: function() {
		try {
			var _0x81e9x225 = new java.io.PrintWriter(new java.io.BufferedWriter(new java.io.FileWriter(this.Path, false)));
			for (var _0x81e9x163 in this.Data) {
				_0x81e9x225.write(_0x81e9x163 + ":" + this.Data[_0x81e9x163] + "\n")
			};
			_0x81e9x225.close()
		} catch (e) {
			print("Failed to save achievement data, error: " + e)
		}
	},
	Set: function(_0x81e9x163, _0x81e9x16) {
		this.Data[_0x81e9x163] = _0x81e9x16
	},
	Get: function(_0x81e9x163) {
		return this.Data[_0x81e9x163]
	}
};
var AchievementData = {
	"Start playing": {
		en: "So started with your survival with Factorization mod. I'll give you some advice on the development in the beginning, be sure to read the tips to the end, if you play for the first time. To begin with you should gain a bit of initial resources. Some - ore other - oil, and others - Hevea. Hevea - something without which you will not develop the mod, so they should find - often grow in the marshes and woods, but you can look for them in other biomes. First of all it is necessary to look for them. \n In addition, 5 new ores. Basic - copper and tin are fairly common and mined rock with a pick, the other three - iron and start dropping over scarce resources. Just need a lot of iron and Redstone.\n All English tips are google-translated, sorry for this.",
		ru: "Вот и началось твое выживание с Factorization. Я дам тебе несколько советов по развитию в начале, обязательно читай подсказки до конца, если играешь в первый раз. Для начала тебе следует набрать немного начальных ресурсов. Одни - руды, другие - нефть, третьи - гевеи. Гевеи - то, без чего тебе не развиться с модом, так что их следует найти - чаще всего растут в болотах и лесах, но ты сможешь поискать их и в других биомах. Первым делом стоит поискать именно их.\n Кроме этого появилось 5 новых руд. Основные - медь и олово встречаются достаточно часто и добываются каменной киркой, другие три - железной и дропают более редкие ресурсы. Так же потребуется немало железа и редстоуна.\n P.S. Подсказки останавливают игру, не бойтесь, что во время чтения произойдет что-то плохое;).",
		icons: "#items$block_copper_ore:0,block_tin_ore:0,block_uranium_ore:0,block_iridium_ore:0,block_blended_dust_ore:0#image$progressbar#items$item_copper_ingot:0,item_tin_ingot:0,item_dust_iron:0,item_dust_gold:0,331:0,item_uranium:0,item_iridium_chunk:0"
	},
	"Steel ingots": {
		ru: "В печи можно создать один из основных ресурсов мода - закаленное железо. Из него создаются почти все механизмы и многие компоненты. Для его получения переплавьте железный слиток в печи.",
		en: "In the oven, you can create one of the main resources - steel. From it are almost all mechanisms and many components. To obtain smelt iron ingot furnace.",
		icons: "#items$265:0#image$fire#image$progressbar#items$item_steel_ingot:0"
	},
	"Rubber tree": {
		ru: "Используйте краник для получения латекса с гевеи, чтобы сделать это, тапните им по подтеку на ее стволе. Краник создается из 5 дубовых досок на верстаке. Для получения резины переплавьте латекс в печке. Позже для этого можно будет использвать экстрактор, с помощью которого вы получите в 3 раза больше резины. Так же я советую собрать саженцы гевеи, чтобы в будущем вырастить несколько деревьев и собирать с них латекс.",
		en: "Use treetap, to get latex from rubber tree's trunk. You can craft it from 5 oak planks.",
		icons: "#items$item_treetap:0,item_latex:0#image$fireIcon#image$progressbar#items$item_rubber:0"
	},
	"First machines": {
		ru: " Из стали вы сможете скрафтить машинный блок, из которого можно создать ваши первые механизмы: дробитель, генератор и электрическую печь. Генератор обеспечит нас энергией на первое время, дробитель поможет получать вдвое больше слитков с руды, электрическая печь позволит переплавлять ресурсы намного эффективнее.\n Для начала переплавьте медную и оловянную руды, латекс, а так же слитки железа в печи, создайте провода из меди и резины, батарейку из красной пыли, олова и проводов, микросхему из стали, проводов и красной пыли и машинный блок из стали. После чего вы сможете создать нужные вам механизмы.\n Поставьте генератор, откройте его интерфейс и положите туда топливо. После этого соедините его проводами с печью/дробителем и используйте их!",
		en: "From steel you can craft machine block, from which you can create your first mechanisms: macerator, a generator and an electric oven. The generator will provide us with energy for the first time, the crusher will receive twice ingots ore, electric furnace allows a refiner resources more efficiently. \n To start smelt copper and tin ore, latex, as well as bars of iron in the oven, make a wire made of copper and rubber battery red dust, tin and wiring chip of steel wires and red dust and engine block of steel. Then you can create the necessary mechanisms to you. \n Set the generator, open interface, and put the fuel. Then connect its wires to the furnace / crusher and use them!",
		icons: "#items$item_copper_ingot:0,item_tin_ingot:0,item_steel_ingot:0,item_latex:0,331:0#image$progressbar#items$item_copper_wire:0,block_machine_block:0,item_circuit:0,item_battery:0#image$progressbar#items$block_fuel_generator:0,block_macerator:0,block_electric_furnace:0"
	},
	"Macerator": {
		en: "Macerator allows to process ores with twice effective. 2 dust is obtained from the ore, ingot - 1 dust, out of the coal - coal dust, which is useful in the creation of solar panels and composite. From 1 metal powder you can smelt 1 ingot.",
		ru: "Дробитель позволяет переробатывать руды вдвое эффективнее. Из руды получается 2 металлические пыли, из слитка - 1, из угля - угольная пыль, которая пригодится в создании солнечных панелей и композита. Из 1 металлической пыли можно выплавить 1 слиток.",
		icons: "#items$15:0,14:0,block_copper_ore:0,block_tin_ore:0,263:0#image$progressbar#items$item_dust_iron:0,item_dust_gold:0,item_dust_copper:0,item_dust_tin:0,item_coal_dust:0"
	},
	"Wire & energy": {
		en: " The energy produced by the mechanisms-generators and transmitted through the wires attached to the mechanisms. Multiple connections provodamii mechanisms form a network. All energy produced is evenly distributed on all the mechanisms in the network that are not generators based resistance. \n Many people using energy mechanisms have internal storage, which will be reserved not used energy. The amount of stored energy in the mechanism can be found by clicking on it with the key or by looking at the scale in GUI, if it has one mechanism. \n More information can be found in the file with the instructions.",
		ru: " Энергия вырабатывается механизмами-генераторами и передается по проводам в присоединенные механизмы. Несколько соединенных проводамии механизмов образуют сеть. Вся произведенная энергия равномерно распределяется по всем механизмам в сети, которые не являются генераторами с учетом сопротивления.\n У многих использующих энергию механизмов есть внутреннее хранилище, в которое будет запасаться неиспользованая энергия и в последствии использовться механизмом. Количество запасенной энергии в механизме можно узнать, нажав по нему ключом или посмотрев на шкалу в графическом интерфейсе, если он есть у этого механизма.\nПодробнее об этом можно прочитать в файле с инструкцией.",
		icons: "#items$item_copper_wire:0,item_crystal_wire:0,item_golden_wire:0,item_steel_wire:0,item_super_conductor:0"
	},
	"Solars": {
		en: "From coal dust, you can create a solar panel. Solar panels convert solar energy into electricity, their advantage is that they do not require fuel to operate. One panel on the sun will produce 10 times less energy than the generator when the fuel is burnt therein.",
		ru: "Из угольной пыли вы можете создать солнечную панель. Солнечные панели преобразуют солнечную энергию в электричество, их преимущество в том, что они не требуют топлива для работы. Одна панель на солнце будет вырабатывать в 10 раз меньше энергии, чем генератор, когда в нем сгорает топливо.",
		icons: "#items$20:0,item_coal_dust:0,block_fuel_generator:0,item_circuit:0#image$progressbar#items$block_solar_pannel:0"
	}
};
var AchivementDebugEnabled = false;

function CreateAchievementIconsByData(_0x81e9x162) {
	var _0x81e9x1d7 = getMcContext();
	GUIScale = _0x81e9x1d7.getWindowManager().getDefaultDisplay().getWidth() / item_cell_empty;
	var _0x81e9x2b5 = _0x81e9x162.split("#");
	var _0x81e9x7c6 = [];
	for (var i in _0x81e9x2b5) {
		if (i == 0) {
			continue
		};
		var _0x81e9x7c7 = _0x81e9x2b5[i].split("$");
		if (_0x81e9x7c7[0] == "items") {
			var _0x81e9x51 = _0x81e9x7c7[1].split(",");
			for (var _0x81e9x19 in _0x81e9x51) {
				var _0x81e9x16 = _0x81e9x51[_0x81e9x19].split(":");
				var _0x81e9x2aa = getGUIItemIcon(parseInt(eval(_0x81e9x16[0])), parseInt(eval(_0x81e9x16[1])));
				if (_0x81e9x2aa) {
					_0x81e9x7c6.push(_0x81e9x2aa)
				} else {
					print("missing gui icon: " + _0x81e9x16)
				}
			}
		};
		if (_0x81e9x7c7[0] == "image") {
			var _0x81e9x2aa = Images[_0x81e9x7c7[1]];
			if (_0x81e9x2aa) {
				_0x81e9x7c6.push(scaleGUIBitmap(_0x81e9x2aa))
			} else {
				print("missing gui icon: " + _0x81e9x7c7[1])
			}
		}
	};
	var _0x81e9x263 = 0;
	for (var i in _0x81e9x7c6) {
		var _0x81e9x1ee = _0x81e9x7c6[i];
		if (_0x81e9x1ee.height > _0x81e9x263) {
			_0x81e9x263 = _0x81e9x1ee.height
		}
	};
	if (_0x81e9x263 > 64 * GUIScale) {
		_0x81e9x263 = 64 * GUIScale
	};
	for (var i in _0x81e9x7c6) {
		var _0x81e9x1ee = _0x81e9x7c6[i];
		_0x81e9x7c6[i] = android.graphics.Bitmap.createScaledBitmap(_0x81e9x1ee, _0x81e9x1ee.width / _0x81e9x1ee.height * _0x81e9x263, _0x81e9x263, false)
	};
	GUIScale = 1;
	return _0x81e9x7c6
}

function BuildAchivementDialogRaw(_0x81e9x1d6, _0x81e9x1de, _0x81e9x7c9) {
	ModPE.setGameSpeed(0);
	var _0x81e9x1d7 = getMcContext();
	builder = android.app.AlertDialog.Builder(_0x81e9x1d7);
	builder.setIcon(new android.graphics.drawable.BitmapDrawable(start_menu_icon_bitmap));
	builder.setTitle(_0x81e9x1d6);
	var _0x81e9x1dc = new android.widget.LinearLayout(_0x81e9x1d7);
	_0x81e9x1dc.setOrientation(1);
	var _0x81e9x1dd = new android.widget.ScrollView(_0x81e9x1d7);
	_0x81e9x1dd.addView(_0x81e9x1dc);
	var _0x81e9x7ca = new android.widget.TextView(_0x81e9x1d7);
	_0x81e9x7ca.setText(_0x81e9x1de + "");
	_0x81e9x7ca.setTextSize(20);
	_0x81e9x1dc.addView(_0x81e9x7ca, start_menu_layout_params);
	var _0x81e9x7cb = new android.widget.LinearLayout(_0x81e9x1d7);
	for (var i in _0x81e9x7c9) {
		var _0x81e9x6b0 = new android.widget.ImageView(_0x81e9x1d7);
		_0x81e9x6b0.setImageBitmap(_0x81e9x7c9[i]);
		_0x81e9x7cb.addView(_0x81e9x6b0)
	};
	_0x81e9x1dc.addView(_0x81e9x7cb, start_menu_layout_params);
	builder.setView(_0x81e9x1dd);
	builder.setNeutralButton("CLOSE", {
		onClick: function() {
			ModPE.setGameSpeed(20)
		}
	});
	builder.setCancelable(false);
	builder.show()
}

function TriggerAchievement(_0x81e9x17, _0x81e9x2f1) {
	if (!OptionReader.getKey("tips")) {
		return
	};
	runAsGUI(function() {
		try {
			var _0x81e9x7cd = AchievementDataSaver.Get(_0x81e9x17);
			if (!_0x81e9x7cd || _0x81e9x2f1 || AchivementDebugEnabled) {
				var _0x81e9x7ce = "en";
				if (langLocalisationID == 1) {
					_0x81e9x7ce = "ru"
				};
				BuildAchivementDialogRaw(_0x81e9x17, AchievementData[_0x81e9x17][_0x81e9x7ce] + "", CreateAchievementIconsByData(AchievementData[_0x81e9x17].icons));
				AchievementDataSaver.Set(_0x81e9x17, true)
			}
		} catch (e) {
			print(e)
		}
	})
}
var GUIDE_BOOK_PAGE_NORMAL = 0;
var GUIDE_BOOK_PAGE_RECIPES = 1;
var GUIDE_BOOK_PAGE_HEADINGS = 2;
var GUIDE_BOOK_RECIPE_DIRECT = 3;
var GUIDE_BOOK_RECIPE_WORKBENCH = 4;
var GUIDE_BOOK_RECIPE_DIRECT_PAIR = 5;
var GUIDE_BOOK_RECIPE_DISASSEMBLE = 6;
var GUIDE_BOOK_RECIPE_AUTO = 7;
var GuideBookPages = {
	"ru": {
		"content table": [{
			title: "Оглавление (1/2)",
			type: GUIDE_BOOK_PAGE_HEADINGS,
			links: [{
				text: "Гайд по началу развития",
				chapter: "beginner's guide",
				color: android.graphics.Color.RED
			}, {
				text: "Генераторы и энергия",
				chapter: "generators"
			}, {
				text: "Механизмы-обработчики",
				chapter: "processing machines"
			}, {
				text: "Трубы и жидкости",
				chapter: "pipes & liquids"
			}, {
				text: "Пчеловодство",
				chapter: "beekeeping"
			}, {
				text: "Новые ресурсы",
				chapter: "resourses"
			}]
		}, {
			title: "Оглавление (2/2)",
			type: GUIDE_BOOK_PAGE_HEADINGS,
			links: [{
				text: "Инструменты и броня",
				chapter: "tools"
			}, {
				text: "Механизмы-добытчики",
				chapter: "mining mech"
			}, {
				text: "Крафты и компоненты",
				chapter: "components & crafting"
			}, {
				text: "Ядерная энергия",
				chapter: "nuclear powerplant"
			}, {
				text: "Материя и ее создание",
				chapter: "uu-matter"
			}, {
				text: "Другие механизмы",
				chapter: "other machines"
			}]
		}],
		"processing machines": [{
			title: "Механизмы-обработчики",
			type: GUIDE_BOOK_PAGE_HEADINGS,
			links: [{
				text: "Об обработчиках",
				chapter: "about processing mech"
			}, {
				text: "Дробитель",
				chapter: "macerator"
			}, {
				text: "Электрическая печь",
				chapter: "electric furnace"
			}, {
				text: "Комрессор",
				chapter: "compressor"
			}, {
				text: "Экстрактор",
				chapter: "extractor"
			}, {
				text: "Утилизатор",
				chapter: "recycler"
			}]
		}],
		"generators": [{
			title: "Генераторы",
			type: GUIDE_BOOK_PAGE_HEADINGS,
			links: [{
				text: "Энергия и энергохранилища",
				chapter: "energy & storage"
			}, {
				text: "Солнечная панель",
				chapter: "solar pannels"
			}, {
				text: "Топливный и жидкотопливный генераторы",
				chapter: "fuel & liquid fuel gens"
			}, {
				text: "Геотермальный генератор",
				chapter: "geotermal gen"
			}, {
				text: "Ветряная и водяная мельницы",
				chapter: "wind & water mills"
			}, {
				text: "Ядерный реактор",
				chapter: "nuclear powerplant"
			}]
		}],
		"mining mech": [{
			title: "Добывающие механизмы",
			type: GUIDE_BOOK_PAGE_HEADINGS,
			links: [{
				text: "Буровая установка",
				chapter: "mining well"
			}, {
				text: "Карьер",
				chapter: "quarry"
			}, {
				text: "Помпа",
				chapter: "pump"
			}, {
				text: "Авто-фермер",
				chapter: "crop-harvester"
			}, {
				text: "Разрушитель блоков",
				chapter: "block breaker"
			}]
		}],
		"pipes & liquids": [{
			title: "Трубы и жидкости",
			type: GUIDE_BOOK_PAGE_HEADINGS,
			links: [{
				text: "Трубы - транспортировка предметов",
				chapter: "transporting pipes"
			}, {
				text: "Жидкости и их хранение",
				chapter: "storing liquids"
			}, {
				text: "Помпа и транспортировка жидкостей",
				chapter: "pump"
			}, {
				text: "Капсулы",
				chapter: "liquid cells"
			}, {
				text: "Механизмы для работы с жидкостями",
				chapter: "liquid-working mech"
			}]
		}],
		"other machines": [{
			title: "Другие механизмы (1/2)",
			type: GUIDE_BOOK_PAGE_HEADINGS,
			links: [{
				text: "Буфер обмена",
				chapter: "exchange buffer"
			}, {
				text: "Ядерный заряд",
				chapter: "nuke"
			}, {
				text: "Рыболовная сеть",
				chapter: "fishing net"
			}, {
				text: "Механизмы для работы с мобами",
				chapter: "mob-working mech"
			}, {
				text: "Громоотвод",
				chapter: "lightning gen"
			}, {
				text: "Терраформер",
				chapter: "terraformer"
			}]
		}, {
			title: "Другие механизмы (2/2)",
			type: GUIDE_BOOK_PAGE_HEADINGS,
			links: [{
				text: "Телепорт",
				chapter: "teleporter"
			}, {
				text: "Авто-верстак",
				chapter: "assembler"
			}]
		}],
		"resourses": [{
			title: "Новые ресурсы",
			type: GUIDE_BOOK_PAGE_HEADINGS,
			links: [{
				text: "Новые руды",
				chapter: "ores"
			}, {
				text: "Гевеи",
				chapter: "rubber tree"
			}, {
				text: "Дикие ульи и пчелы",
				chapter: "beekeeping"
			}]
		}],
		"tools": [{
			title: "Инструменты и броня",
			type: GUIDE_BOOK_PAGE_HEADINGS,
			links: [{
				text: "Краник",
				chapter: "treetap"
			}, {
				text: "Электрические инструменты",
				chapter: "electric tools"
			}, {
				text: "Бронза и бронзовые инструменты",
				chapter: "bronze"
			}, {
				text: "Нано-сабля",
				chapter: "nano-saber"
			}, {
				text: "Шахтерский лазер",
				chapter: "laser"
			}, {
				text: "Силовая броня",
				chapter: "power armor"
			}]
		}],
		"components & crafting": [{
			title: "Крафты и компоненты",
			type: GUIDE_BOOK_PAGE_HEADINGS,
			links: [{
				text: "Все крафты",
				chapter: "all crafts"
			}, {
				text: "Гаечный ключ",
				chapter: "wrench"
			}, {
				text: "Сталь и бронза",
				chapter: "alloy ingots"
			}, {
				text: "Крафты механизмов",
				chapter: "machine crafting"
			}, {
				text: "Переносные энергохранилища",
				chapter: "transportable storages"
			}]
		}],
		"energy & storage": [{
			title: "Энергия ",
			type: GUIDE_BOOK_PAGE_NORMAL,
			item: [item_copper_wire, 0],
			text: " На энергии в Factorization  работает абсолютное большинство механизмов, инструментов и брони. Весь игровой процесс зависит от нее, только она позволит работать огромному заводу, ради нее вы будете строить даже ядерный реактор.\n Энергия создается в механизмах-генераторах и передается по проводам к подключенным механизмам. Несколько соединенных механизмов и генераторов образуют сеть. В такой сети энергия равномерно распределяется между всеми потребляющими механизмами.\n Энергия измеряется в Еэ - единицах энергии, выработка генераторов будет дана в Еэ/тик - тик = 1/20 секунды.\n У многих механизмов, потребляющих энергию есть внутреннее хранилище, в котором будет запасаться выработанная энергия, а потом, в ее отсутствии, использоваться. Запасенную энергию обычно можно посмотреть по красной шкале в левой части интерфейса."
		}, {
			title: "Хранилища энергии",
			type: GUIDE_BOOK_PAGE_NORMAL,
			item: [item_battery, 0],
			text: " Энергохранилища - механизмы, которые запасают большое количество энергии и отдают ее потребителям в сети, которым эта энергия нужна. Кроме этого энергохранилища имеют интерфейс с 1 слотом - в этот слот можно класть предметы для зарядки. Далее о 3 существующих энергохранилищах."
		}, {
			title: "Бат-бокс",
			type: GUIDE_BOOK_PAGE_NORMAL,
			item: [block_bat_box, 0],
			text: "Бат-бокс - самое простое в создании энергохранилище, идеально подойдет на начальных стадиях игры. Может накапливать 40 000 Еэ и отдавать до 32 Еэ/тик. Заряжает большинство электрических инструментов и аккумулятор."
		}, {
			title: "MFE",
			type: GUIDE_BOOK_PAGE_NORMAL,
			item: [block_MFE, 0],
			text: "MFE - энергохранилище на 600 000 Еэ, имеет умеренно сложный крафт, подойдет для накопления энергии в большой системе, отдает до 128 Еэ/тик. Заряжает всё, кроме квантовой брони."
		}, {
			title: "MFSU",
			type: GUIDE_BOOK_PAGE_NORMAL,
			item: [block_MFSU, 0],
			text: "MFSU - самое большое энергохранилище на 10 000 000 Еэ, сложен в создании, подойдет для системы накопления энергии с ядерного реактора или как буфер энергии вместе с генератором материи, отдает до 512 Еэ/тик. Заряжает абсолютно все предметы, которые можно зарядить"
		}, {
			title: "Крафты энергохранилищ",
			type: GUIDE_BOOK_PAGE_RECIPES,
			recipes: [{
				type: GUIDE_BOOK_RECIPE_AUTO,
				content: [
					[block_bat_box, -1]
				]
			}, {
				type: GUIDE_BOOK_RECIPE_AUTO,
				content: [
					[block_MFE, -1]
				]
			}, {
				type: GUIDE_BOOK_RECIPE_AUTO,
				content: [
					[block_MFSU, -1]
				]
			}]
		}],
		"solar pannels": [{
			title: "Солнечная панель",
			type: GUIDE_BOOK_PAGE_NORMAL,
			item: [block_solar_pannel, 0],
			text: " Солнечная панель - один из самых простых генераторов для начала игры, работает от прямого попадания солнечных лучей (не будет работать от факелов и прочих искусственных источников света), вырабатывает 1 Еэ/тик. Один из лучших вариантов для начала игры, 3-4 солнечные панели могут питать несколько обработчиков, подключенный к ним бат-бокс позволит запасать энергию на ночь."
		}],
		"fuel & liquid fuel gens": [{
			title: "Топливный генератор",
			type: GUIDE_BOOK_PAGE_NORMAL,
			item: [block_fuel_generator, 0],
			text: " Топливный генератор - необходимая часть начала выживания с Factorization'ом, он использует древесину и уголь для получения энергии, сжигая их. Нужен для получения энергии на начальных стадиях, когда у вас нет ресурсов для создания других генераторов.\n При горении вырабатывает 10 Еэ/тик. Имеет встроенное хранилище энергии объемом в 10 000 Еэ, что позволит запасать достаточно большие количества неиспользованной энергии.\n Энергия, которая получается при сжигании топлива:\n  1.Древесина или доски - 750 Еэ\n  2. Уголь - 4000 Еэ \n  3.Ведро лавы - 10 000 Еэ."
		}, {
			title: "Жидкотопливный генератор",
			type: GUIDE_BOOK_PAGE_NORMAL,
			item: [block_liquid_fuel_engine, 0],
			text: " Жидкотопливный генератор - мощный и эффективный генератор, который работает на различных жидкостях. Имеет хранилище на 16 ведер жидкости и интерфейс для того, чтобы эту жидкость в него наливать. Так же жидкость может поступать по трубам.\nВыработка энергии за ведро жидкости:\n 1. Лава и нефть - 10 000 Еэ\n 2.Биомасса - 20 000 Еэ\n 3. Топливо (обработанная нефть) - 32 000 Еэ"
		}],
		"geotermal gen": [{
			title: "Геотермальный генератор",
			type: GUIDE_BOOK_PAGE_NORMAL,
			item: [block_geotermal_generator, 0],
			text: " Геотермальный генератор позволяет очень эффективно перерабатывать лаву в энергию. Имеет внутреннее хранилище на 16 ведер лавы и слоты, чтобы эту лаву заливать, так же лава может поступать по трубам или из бочки сверху.\n Одно ведро лавы перерабатывается 50 секунд, отдача энергии при работе - 20 Еэ/тик, т.е за 1 ведро лавы вы получаете 20 000 Еэ. Если энергию будет передавать некуда, то выработка приостановится."
		}],
		"water & wind mills": [{
			title: "Ветряная мельница",
			type: GUIDE_BOOK_PAGE_NORMAL,
			item: [block_windmill, 0],
			text: " Ветряная мельница вырабатывает энергию, находясь на большой высоте. Так же на количество вырабатываемой энергии влияет количество блоков воздуха в области 7х7х7 вокруг ветряка. Максимальная выработка в 5 Еэ/сек достигается на высоте 60 блоков над уровнем моря с полностью свободной от блоков областью.\n Генератор достаточно прост в создании и, если у вас есть много проводов, очень неплох в начале игры."
		}, {
			title: "Водяная мельница",
			type: GUIDE_BOOK_PAGE_NORMAL,
			item: [block_watermill, 0],
			text: " Водяная мельница может работать в 2х режимах. В первом она вырабатывает энергию из блоков воды рядом с ней в области 3х3х3. Максимальная выработка -  0.8 Еэ/тик. Второй режим активируется, когда во внутреннем хранилище водяной мельницы есть вода, которую туда можно залить через интерфейс, по трубам и из бочки над ней. Во втором режиме мельница тратит 1 ведро воды за 10 секунд и генерирует 2.4 Еэ/тик.\n В совокупности с простым крафтом, в котором получается сразу 2 водяные мельницы, она является универсальным генератором в начале и середине игры. В начале можно использовать ее в первом режиме и иногда заливать воду руками, а в середине вы можете установить помпу, которая будет питать до 10 мельниц сразу, а это целых 24 Еэ/тик."
		}],
		"nuclear powerplant": [{
			title: "Ядерный реактор: введение",
			type: GUIDE_BOOK_PAGE_NORMAL,
			item: [block_nuclear_reactor_controller, 0],
			text: " Ядерный реактор является самым эффективным и вместе с тем сложным в создании и обращении генератором в Factorization. Реактор строится как многоблочная структура из контроллера реактора, держателей стержней, турбины и корпуса рабочей области. \n Он использует урановые стержни для нагревания воды, которая тратится на то, чтобы турбина вырабатывала энергию. Вода подается по трубам к контроллеру реактора, из него же можно контролировать весь реактор через интерфейс.\n В процессе нагрева вода испаряется и генерирует энергию, на каждое ведро приходится 200 Единиц тепла (Ет) и 1000 Еэ. Значит за каждую Ет реактор получает 5 Еэ. Если воды нету, то нагрев идет на корпус."
		}, {
			title: "Ядерный реактор: постройка",
			type: GUIDE_BOOK_PAGE_NORMAL,
			item: [block_hardened_block, 0],
			text: " Основная часть реактора строится из контроллеров стержней. Они должны быть расположены в форме прямоугольника размеров от 1х1 до 3х3 (например: 2х3, 1х2, 2х2), над ними по середине должен стоять контроллер реактора. Далее под ними строится камера реактора из укрепленных блоков в форме коробки, так, чтобы контроллеры были внутренней частью верхней грани, высота камеры внутри - 3 блока.\n Если камера построена неверно, то из реактора будет с огромной скоростью вытекать вода.\n В стене камеры в любом месте должна быть турбина, которая будет генерировать энергию."
		}, {
			title: "Ядерный реактор: нагрев и стержни",
			type: GUIDE_BOOK_PAGE_NORMAL,
			item: [item_uranium_rod_singler, 0],
			text: " При работе реактора урановые стержни выделают тепло. Часть этого тепла идет на корпус, а часть - на воду во внутреннем хранилище. 10% тепла всегда идет на корпус, кроме того, если стержень производит больше 3 Ет/такт (Единиц тепла в 0.1 секунды), то излишки идут на корпус, корпус остывает на 4 Ет/сек сам по себе. Если корпус нагреется больше, чем на 10000 Ет, то реактор взорвется.\n Графитовые стержни регулируют мощность реактора, при полностью опущенных она 0%, поднятых - 100%. Кроме этого чем выше стержни, тем ниже порог цепной реакции. Как только нагрев корпуса будет выше этого порога, мощность реактора будет расти, пока он не взорвется или стержни не будут полностью опущены.\nСтержень получает дополнительную мощность, равную текущей за каждый стержень в соседнем слоте, т.е если рядом со стержнем 2 других, то его мощность будет в 3 раза больше обычной. Обычный стержень вырабатывает 1 Ет/такт, сдвоенный - 2 Ет/такт, счетверенный - 4 Ет/такт. "
		}, {
			title: "Ядерный реактор: истощенные стержни",
			type: GUIDE_BOOK_PAGE_NORMAL,
			item: [item_uranium_rod_singler_depleted, 0],
			text: " Урановый стержень при работе теряет свою прочность, чем мощнее он работает, тем быстрее он ее теряет. Каждый урановый стержень может выработать за свою жизнь строго определенное количество тепла, после чего он становится истощенным. Истощенные стержни могут быть восстановлены.\n Обычный стержень при работе выделяет вдвое больше Единиц радиации (Ер), чем тепла, радиация равномерно распределяется по всем слотам, т.е. в каждый слот рядом попадает вдвое меньше Ер, чем стержень генерирует тепла. Для восстановления стержня нужно столько Ер, сколько он генерирует Ет за свою жизнь. Значит для полного восстановления стержня нужна полная работа 2х таких же стержней в соседних слотах. После восстановления истощенный стержень требует 1 угольной пыли из слота под кнопкой управления, чтобы снова стать рабочим."
		}, {
			title: "Ядерный реактор: охлаждение корпуса",
			type: GUIDE_BOOK_PAGE_NORMAL,
			item: [item_coolant_circuit, 0],
			text: " Как только реактор начинает вырабатывать достаточно много энергии, то встает проблема охлаждения корпуса. Для этого вам понадобятся охладительные контуры, которые переносят тепло из корпуса и распределяют на соседние элементы, все тепло, которое не удалось поглотить, возвращается. Максимальная скорость переноса тепла - 10 Ет/такт = 2.5 Ет/такт на каждый соседний слот. Это нужно для связи корпуса реактора с охлаждающими элементами."
		}, {
			title: "Охлаждающие стержни",
			type: GUIDE_BOOK_PAGE_NORMAL,
			item: [item_coolant_cell_singler, 0],
			text: " Охлаждающие стержни поглощают все полученное тепло. Могут впитать 10 000, 30 000 и 60 000 Ет в зависимости от стержня."
		}, {
			title: "Теплоотводы",
			type: GUIDE_BOOK_PAGE_NORMAL,
			item: [item_reactor_vent, 0],
			text: " Теплоотводы поглощают часть тепла, не имеют прочности. Поглощение 1, 3, 5 Ет/такт в зависимости от теплоотвода."
		}, {
			title: "Нагревательные контуры",
			type: GUIDE_BOOK_PAGE_NORMAL,
			item: [item_heating_circuit, 0],
			text: " Нагревательные контуры передают часть тепла на хранилище жидкости и, таким образом, пускают его на выработку энергии. Передача 1, 3, 5 Ет/такт в зависимости от нагревательного контура."
		}, {
			title: "Отражатели нейтронов",
			type: GUIDE_BOOK_PAGE_NORMAL,
			item: [item_reactor_reflector, 0],
			text: " Отражательные контуры увеличивают мощность соседних урановых стержней, обычный на 1.5 мощности стержня, другой на 2 мощности стержня."
		}],
		"mining well": [{
			title: "Буровая установка",
			type: GUIDE_BOOK_PAGE_NORMAL,
			item: [block_drill_station, 0],
			text: " Буровая установка позволяет достаточно быстро проковать отверстие в один блок вниз, до коренной породы. При этом встречая месторождения руд у себя на пути, она выкапывает их полностью. Все добытые предметы будут перемещены в сундук рядом или в трубу, или, в их отсутствие, просто выкинуты.\n Может работать как от энергии, так и от угля, для последнего у нее имеется интерфейс. Идеально подойдет для начала игры, чтобы добыть немного ресурсов, после чего переместиться на другое место."
		}],
		"quarry": [{
			title: "Карьер",
			type: GUIDE_BOOK_PAGE_NORMAL,
			item: [block_quarry, 0],
			text: " Карьер - это лучший механизм для автоматической добычи руды из-за того, что он может раскопать область абсолютно любых размеров и выкопать все, что там есть, включая руды, остальное с помощью сортировки можно отправить на утилизацию, что так же позволяет получить очень много утиль-сырья. \n Карьер копает на выбранной территории (о ее разметке далее), начиная с верхнего слоя и уходя все глубже и глубже, добытые предметы отправляет в трубы/сундук рядом с собой или выкидывает, при отсутствии оных. \n Карьер использует 80 Еэ на блок, копает со скоростью 2 блока в секунду, но его можно ускорить, положив в его интерфейс ускорители. Каждый увеличит скорость и потребление энергии на блок в 2 раза."
		}, {
			title: "Карьер: разметка",
			type: GUIDE_BOOK_PAGE_NORMAL,
			item: [block_marker, 0],
			text: " Для разметки области под карьер используются маркеры. При тапе маркером он соединиться с маркерами, которые лежат на одной прямой (если смотреть по блокам) с ним. После того, как вы выделили так прямоугольную область, поставьте рядом с одним из маркеров карьер и тапните по нему гаечным ключом, после чего маркеры выпадут, а карьер запомнит область работы. \n Перед началом работы карьер будет выделять область, чистить ее и ставить забор вокруг, для этого тоже нужна энергия. Зачищенные блоки просто выпадут."
		}],
		"pump": [{
			title: "Помпа",
			type: GUIDE_BOOK_PAGE_NORMAL,
			item: [block_pump, 0],
			text: " Помпа - незаменимый механизм при работе с жидкостями, она выкачивает жидкость из бочек или же просто из мира. При установке помпы над жидкостью в мире (помпа может стоять на любой высоте над жидкостью), помпа будет выкачивать всю жидкость из озера под собой (например, помпа над озером нефти выкачает всю нефть из озера). Если прямо под помпой находится бочка, то помпа будет выкачивать жидкость из этой бочки.\n Выкачанная жидкость передается по трубам в подключенные механизмы, для этого используются обычные (синие) трубы. Если над помпой будет стоять бочка, то жидкость будет передаваться в нее. Помпа имеет внутреннее хранилище в 200 Еэ и на 1 выкачивание тратит 50 Еэ."
		}],
		"crop-harvester": [{
			title: "Авто-фермер",
			type: GUIDE_BOOK_PAGE_NORMAL,
			item: [block_crop_harvester, 0],
			text: " Авто-фермер предназначен для того, чтобы автоматически выращивать различные растения, включая деревья, а потом, когда они вырастут, собирать их. Все семена/саженцы кладутся в сундук над авто-фермером, туда же он будет складывать все, что он собрал. Для работы он не требует энергии.\n В начале авто-фермер вспахивает область земли 9х9 с собой в центре (для этого она должна быть ровной), а под себя ставит воду, таким образом земля всегда будет влажной. После чего он начинает высаживать то, что есть в сундуке. Когда что-то вырастает, он собирает это и кладет в сундук, на его место сажая новые семена (деревья вырубаются полностью). Так же авто-фермер может использовать костную муку, если положить ее в сундук."
		}, {
			title: "Ускоритель роста",
			type: GUIDE_BOOK_PAGE_NORMAL,
			item: [block_growth_accelerator, 0],
			text: " Ускоритель роста использует воду из бочки над ним и ускоряет рост растений в области 11х11 вокруг него. Очень полезен в связке с авто-фермером, т.к. он просто ставится рядом с ним и к нему подается вода, после чего ферма начинает давать намного больше ресурсов."
		}],
		"block breaker": [{
			title: "Разрушитель блоков",
			type: GUIDE_BOOK_PAGE_NORMAL,
			item: [block_block_breaker, 0],
			text: " Разрушитель блоков раз в секунду ломает блок под собой, тратя 20 Еэ, и отправляет полученный дроп в подключенную трубу или сундук рядом. Имеет внутреннее хранилище в 100 Еэ."
		}],
		"transporting pipes": [{
			title: "Зачем нужны трубы",
			type: GUIDE_BOOK_PAGE_NORMAL,
			item: [item_wrench, 0],
			text: " С помощью труб можно автоматически перемещать предметы между механизмами и сундуками, а так же сортировать их, это позволяет автоматизировать почти все, что угодно (сортировка предметов, добытых карьером, автоматическая переработка руды). \n Предметы в трубах движутся по очень простым правилам: пока путь у предмета один, он идет по нему, если на пути попалась развилка, то предмет пойдет в случайном направлении, но не назад.\n Так же есть много специальных труб, которые регулируют движение предметов. О них далее.\n Если предмет приходит в механизм или сундук, он будет положен туда, если там есть место. При этом в механизмы предмет будет класться только в слоты для сырья, если в данном механизме есть разделение слотов на сырье и результат (пример - дробитель), это сделано, чтобы было очень просто автоматизировать переработку предметов в обработчиках.\n Если предмет дошел до конца трубы, к которому ничего не подключено, оп просто выпадет."
		}, {
			title: "Обычная (транспортная) труба",
			type: GUIDE_BOOK_PAGE_NORMAL,
			item: [block_transporting_pipe, 0],
			text: " Самая обычная труба, предметы по ней движутся с нормальной скоростью, подчиняясь стандартным правилам движения."
		}, {
			title: "Деревянная (достающая) труба",
			type: GUIDE_BOOK_PAGE_NORMAL,
			item: [block_wooden_pipe, 0],
			text: " Деревянная труба будет раз в 0.8 секунды доставать предметы из сундука или механизма, к которому она подключена. При этом из механизмов она будет доставать только предметы из слотов результата, если они явно выделены у данного механизма (электрическая печь, пасека).\n По-умолчанию труба достает абсолютно все предметы по 1 штуке и не использует энергию. Но у трубы есть интерфейс, в котором настраивается, сколько она будет доставать за раз, при этом на любое количество больше 1 труба будет тратить энергию (на 64 предмета за раз - 32 Еэ).\n Так же в интерфейсе можно настроить фильтрацию, положив туда какие-то предметы, тогда труба будет доставать только эти предметы из сундука/механизма."
		}, {
			title: "Железная (направляющая) труба",
			type: GUIDE_BOOK_PAGE_NORMAL,
			item: [block_valve_pipe, 0],
			text: " Направляющая труба будет направлять приходящие в нее предметы в определенном направлении, которое настраивается тапом гаечного ключа (текстура части трубы, в направлении которой будут идти предметы - прозрачная, в остальных - серая). Направляющая труба может использоваться на стыке нескольких труб, содержимое которых надо направить в еще одну трубу."
		}, {
			title: "Золотая (ускоряющая) труба",
			type: GUIDE_BOOK_PAGE_NORMAL,
			item: [block_golden_pipe, 0],
			text: " Ускоряющая труба ничем не отличается по правилам движения от обычной, она просто разгоняет предметы до большой скорости, скорость в золотой набирается за некоторое время, а в остальных за какое то то же время снижается до обычной, т.е. если вы поставите одну золотую трубу среди обычных, то предмет ускорится не сильно, как и если вы поставите обычную на пути из золотых, то скорость почти не упадет."
		}, {
			title: "Редстоун (фильтрующая) труба",
			type: GUIDE_BOOK_PAGE_NORMAL,
			item: [block_filter_pipe, 0],
			text: " Фильтрующая труба имеет интерфейс, в который можно положить предметы, которые она будет пропускать сквозь себя, остальные предметы она развернет в обратном направлении. Если предметов в интерфейсе нет, то труба будет пропускать все."
		}, {
			title: "Обсидиановая (вакуумная) труба",
			type: GUIDE_BOOK_PAGE_NORMAL,
			item: [block_obsidian_pipe, 0],
			text: " Вакуумная труба засасывает находящиеся рядом выкинутые предметы в радиусе 1.5 блоков в себя и передает их дальше по трубам. Если на нее подать энергию, то радиус увеличится в 3 раза. Может быть использована для многих целей, например в ферме мобов."
		}, {
			title: "Алмазная (сортирующая) труба",
			type: GUIDE_BOOK_PAGE_NORMAL,
			item: [block_diamond_pipe, 0],
			text: " Алмазная труба - самая сложна по принципу работы. Каждое направление в ней помечено определенным цветом (белый, черный, красный, синий, зеленый, желтый), такими же цветами помечены группы по 9 слотов в интерфейсе. Если в какую то группу слотов положить некоторые предметы, то эти предметы, попав в трубу, пойдут в том направлении, которое было помечено цветом этой группы. Таким образом производится сортировка.\n Если предмет не указан ни в какой из групп слотов, то он пойдет в случайном свободном направлении или, если таких нет, назад.\n Пример: мы положили в зеленую группу слотов алмаз, а в желтую - слитки железа и золота, так же у нас есть красный выход (от него тоже идет труба, как от зеленого и желтого). Все слитки железа и золота, попавшие в трубу пойдут в желтый выход, алмазы - в зеленый, все остальное - в красный (он единственный свободный)."
		}, {
			title: "Тессеракт",
			type: GUIDE_BOOK_PAGE_NORMAL,
			item: [block_teleport_pipe, 0],
			text: " Тессеракт позволяет телепортировать предметы, которые идут по трубам. У тессеракта есть частота, которая настраивается в интерфейсе. Предмет, попавший в тессеракт будет немедленно телепортирован в случайный тессеракт с той же частотой, что и отправитель, и продолжит движение по трубам от принявшего его тессеракта, если таких нет, то предмет отправится обратно."
		}],
		"storing liquids": [{
			title: "Жидкости",
			type: GUIDE_BOOK_PAGE_NORMAL,
			item: [item_oil_bucket, 0],
			text: " Factorization добавляет 6 новых жидкостей, а так же возможность оперировать с 3 жидкостями из майнкрафта (водой, лавой и молоком). Жидкости нужны для различных целей, от ускорения роста растений и употребления в пищу до выработки огромного количества энергии и охлаждения реактора. Жидкости могут храниться в различных емкостях (капсулах, бутылках, ведрах), а так же залиты во внутренние хранилища некоторых механизмов. Конкретнее о видах жидкости далее."
		}, {
			title: "Бочка",
			type: GUIDE_BOOK_PAGE_NORMAL,
			item: [block_barrel, 0],
			text: " Бочка - универсальный механизм для хранения любой жидкости, внутреннее хранилище бочки составляет 16 ведер, интерфейс позволяет заливать в нее жидкость (заполненную емкость нужно положить в верхний слот, после чего жидкость выльется в бочку и в нижнем слоте будет пустая емкость, по такому же принципу работают многие механизмы). Если тапнуть на бочку пустой емкостью для жидкости, то емкость наполнится жидкостью из бочки.\n Если несколько бочек стоят одна над другой, то жидкость из верхних будет стекать в нижние."
		}, {
			title: "Новые жидкости",
			type: GUIDE_BOOK_PAGE_NORMAL,
			item: [item_mead_bottle, 8],
			text: "1. Мёд - получается в центрифуге из сот пчел, мед из бутылки можно выпить, если мед долго будет находиться в бочке, он превратится в медовуху.\n2. Медовуха - можно выпить из бутылки, что восстановит более половины здоровья и даст регенерацию и вместе с тем слепоту.\n 3. Нефть - единственная новая жидкость, которую можно вылить, генерируется в мире озерами с фонтанами, может быть неэффективно использована в жидкотопливном генераторе или переработана в топливо.\n4. Топливо - эффективно сжигается в жидкотопливном генераторе, одно ведро дает 32 000 Еэ.\n5. Биомасса - получается в биореакторе из биологических веществ (листва, пшеница), используется в жидкотопливном генераторе (20 000 Еэ на ведро).\n6. Жидкая материя - получается в генераторе материи, используется в репликаторе для получения материи-предмета."
		}],
		"liquid cells": [{
			title: "Капсулы",
			type: GUIDE_BOOK_PAGE_NORMAL,
			item: [item_cell_lava, 0],
			text: " Капсулы - универсальный предмет для хранения жидкостей. Если ведра не могут содержать мед и медовуху, а бутылки все, кроме них, то капсулы могут содержать абсолютно любую жидкость, имеют дешевый крафт, а так же стакаются по 16 штук даже наполненные. Капсулами можно набирать жидкость из бочек и из мира, как ведрами, единственный недостаток в том, что жидкость из них вылить нельзя. Идеально подходят например для того, чтобы перетаскивать жидкость из одной бочки в другую, или же, найдя где-то озеро нефти, собрать из него почти все, унести это с собой."
		}, {
			title: "Крафт капсул",
			type: GUIDE_BOOK_PAGE_RECIPES,
			recipes: [{
				type: GUIDE_BOOK_RECIPE_WORKBENCH,
				content: [
					[item_cell_empty, 0, 16],
					[0, 0],
					[item_tin_ingot, 0],
					[0, 0],
					[item_tin_ingot, 0],
					[0, 0],
					[item_tin_ingot, 0],
					[0, 0],
					[item_tin_ingot, 0],
					[0, 0]
				]
			}]
		}],
		"liquid-working mech": [{
			title: "Обработчики жидкостей",
			type: GUIDE_BOOK_PAGE_NORMAL,
			item: [item_cell_lava, 0],
			text: " Некоторые механизмы в Factorization созданы для работы с жидкостями и их получения. Эти механизмы позволяют автоматизировать производство таких жидкостей как топливо, лава, биомасса и других."
		}, {
			title: "Плавитель",
			type: GUIDE_BOOK_PAGE_NORMAL,
			item: [block_heater, 0],
			text: " Плавитель плавит предметы и получает из них жидкости. Для работы он должен достичь определенной температуры, нужной для переплавки данного предмета, максимальный нагрев - 1000 градусов. После начала переплавки плавитель забирает предмет из слота и начинает его переплавлять, тратя 20 Ет (Единиц тепла) в секунду, параллельно заливая жидкость-расплав во внутренне хранилище на 16 ведер. Жидкость можно выкачать помпой или поставить бочку над плавителем. Кроме жидкости при переплавке можно получить предмет.\nРецепты:\n1.Камень и булыжник: результат - 1 ведро лавы, теплоемкость - 400 Ет, температура плавления - 300\n2.Адский камень: результат - 1.25 ведра лавы и редстоун, теплоемкость - 600 Ет, температура плавления - 600.\n3.Материя: результат - 1.01 ведра жидкой материи и утильсырье, теплоемкость - 1000 Ет, температура плавления - 950."
		}, {
			title: "Биореактор",
			type: GUIDE_BOOK_PAGE_NORMAL,
			item: [block_bioreactor, 0],
			text: " Биореактор нужен для получения биомассы (которая является хорошим топливом) из многих предметов живого и растительного происхождения. Может работать без энергии, но с ее подачей процесс идет в 8 раз быстрее. Имеет внутренне хранилище на 16 ведер биомассы, полученную биомассу можно достать с помощью ведра, помпы или из бочки над биореактором. Рецепты биореактора:\n1.Семена - 1/24 ведра\n2.Листва 1/32 ведра\n3.Сырое мясо 1/12 ведра\n4.Пшеница 1/27 ведра\n5.Сноп пшеницы 1/3 ведра"
		}, {
			title: "Топливный завод",
			type: GUIDE_BOOK_PAGE_NORMAL,
			item: [block_fuel_factory, 0],
			text: " Топливный завод нужен для переработки нефти в топливо. Для этого рядом с ним ставится 2 бочки - одна с нефтью, другая для топлива. После этого на завод подается энергия и он начинает медленно перерабатывать нефть в топливо."
		}, {
			title: "Наполнитель ведер",
			type: GUIDE_BOOK_PAGE_NORMAL,
			item: [block_bucket_filler, 0],
			text: " Наполнитель ведер ставится над бочкой с жидкостью, а над ним ставится сундук с емкостями для этой жидкости, после чего он раз в секунду наполняет емкости из сундука жидкостью из бочки. Не требует энергии."
		}],
		"about processing mech": [{
			title: "Механизмы-обработчики",
			type: GUIDE_BOOK_PAGE_NORMAL,
			text: " Обработчики - это механизмы, которые перерабатывают одни ресурсы в другие, обычно имеют слот для сырья, слот для результата и шкалу прогресса, которая будет заполняться по мере обработки единицы сырья. Пример обработчика из обычного майнкрафта - печь, но вместо энергии она использует топливо. Так же, если энергия в обработчике закончится, то процесс остановится, а не начнется с самого начала.",
			item: [block_macerator, 0]
		}],
		"macerator": [{
			title: "Дробитель",
			type: GUIDE_BOOK_PAGE_NORMAL,
			text: " Дробитель позволяет перерабатывать руды, слитки и уголь в пыль из этих материалов. Пыль используется в крафтах а так же нужна для более эффективного получения слитков из руд.\n Все металлические руды дают при переработке 2 пыли данного металла, все слитки - 1 пыль, каменный уголь - 1 пыль.\nИмеет 3 слота в интерфейсе: левый - для сырья, средний - для результата, правый - для ускорителей. Имеет хранилище в 2000 Еэ, потребляет 60 Еэ/сек при работе, на одну операцию тратит 20 сек.",
			item: [block_macerator, 0]
		}, {
			title: "Рецепты дробителя: руды",
			type: GUIDE_BOOK_PAGE_RECIPES,
			recipes: [{
				type: GUIDE_BOOK_RECIPE_DIRECT,
				content: [
					[15, 0],
					[item_dust_iron, 0, 2]
				]
			}, {
				type: GUIDE_BOOK_RECIPE_DIRECT,
				content: [
					[14, 0],
					[item_dust_gold, 0, 2]
				]
			}, {
				type: GUIDE_BOOK_RECIPE_DIRECT,
				content: [
					[block_copper_ore, 0],
					[item_dust_copper, 0, 2]
				]
			}, {
				type: GUIDE_BOOK_RECIPE_DIRECT,
				content: [
					[block_tin_ore, 0],
					[item_dust_tin, 0, 2]
				]
			}]
		}, {
			title: "Рецепты дробителя: слитки",
			type: GUIDE_BOOK_PAGE_RECIPES,
			recipes: [{
				type: GUIDE_BOOK_RECIPE_DIRECT,
				content: [
					[265, 0],
					[item_dust_iron, 0]
				]
			}, {
				type: GUIDE_BOOK_RECIPE_DIRECT,
				content: [
					[266, 0],
					[item_dust_gold, 0]
				]
			}, {
				type: GUIDE_BOOK_RECIPE_DIRECT,
				content: [
					[item_copper_ingot, 0],
					[item_dust_copper, 0]
				]
			}, {
				type: GUIDE_BOOK_RECIPE_DIRECT,
				content: [
					[item_tin_ingot, 0],
					[item_dust_tin, 0]
				]
			}]
		}, {
			title: "Рецепты дробителя: другое",
			type: GUIDE_BOOK_PAGE_RECIPES,
			recipes: [{
				type: GUIDE_BOOK_RECIPE_DIRECT,
				content: [
					[item_steel_ingot, 0],
					[item_dust_iron, 0]
				]
			}, {
				type: GUIDE_BOOK_RECIPE_DIRECT,
				content: [
					[263, 0],
					[item_coal_dust, 0]
				]
			}, {
				type: GUIDE_BOOK_RECIPE_DIRECT,
				content: [
					[4, 0],
					[12, 0]
				]
			}, {
				type: GUIDE_BOOK_RECIPE_DIRECT,
				content: [
					[13, 0],
					[318, 0]
				]
			}]
		}],
		"electric furnace": [{
			title: "Электрическая печь",
			type: GUIDE_BOOK_PAGE_NORMAL,
			item: [block_electric_furnace, 0],
			text: " Электрическая печь переплавляет/жарит ресурсы точно так же как обычная, каменная. Но электрическая печь, как не трудно догадаться, использует не топливо, а электричество для работы и работает вдвое быстрее. \nИмеет 3 слота в интерфейсе: левый - для сырья, средний - для результата, правый - для ускорителей. Имеет хранилище в 2000 Еэ, потребляет 60 Еэ/сек при работе, на одну операцию тратит 5 сек."
		}],
		"compressor": [{
			title: "Компрессор",
			type: GUIDE_BOOK_PAGE_NORMAL,
			item: [block_compressor, 0],
			text: "Компрессор нужен для сжатия некоторых материалов в пластины и для создания искуственных алмазов.\n Имеет 3 слота в интерфейсе: левый - для сырья, средний - для результата, правый - для ускорителей. Имеет хранилище в 2000 Еэ, потребляет 60 Еэ/сек при работе, на одну операцию тратит 20 сек."
		}, {
			title: "Рецепты компрессора",
			type: GUIDE_BOOK_PAGE_RECIPES,
			recipes: [{
				type: GUIDE_BOOK_RECIPE_DIRECT,
				content: [
					[item_raw_carbon, 0],
					[item_carbonium_plate, 0]
				]
			}, {
				type: GUIDE_BOOK_RECIPE_DIRECT,
				content: [
					[item_composite_ingot, 0],
					[item_composite_plate, 0]
				]
			}, {
				type: GUIDE_BOOK_RECIPE_DIRECT,
				content: [
					[item_coal_ball, 0],
					[item_coal_ball_compressed, 0]
				]
			}, {
				type: GUIDE_BOOK_RECIPE_DIRECT,
				content: [
					[item_coal_chunk, 0],
					[264, 0]
				]
			}]
		}],
		"extractor": [{
			title: "Экстрактор",
			type: GUIDE_BOOK_PAGE_NORMAL,
			item: [block_extractor, 0],
			text: " Экстрактор нужен для эффективного получения резины из латекса, если в печи из одного латекса получается 1 резина, то в экстракторе - целых 3.\n Имеет 3 слота в интерфейсе: левый - для сырья, средний - для результата, правый - для ускорителей. Имеет хранилище в 2000 Еэ, потребляет 20 Еэ/сек при работе, на одну операцию тратит 20 сек."
		}, {
			title: "Рецепты экстрактора",
			type: GUIDE_BOOK_PAGE_RECIPES,
			recipes: [{
				type: GUIDE_BOOK_RECIPE_DIRECT,
				content: [
					[item_latex, 0],
					[item_rubber, 0, 3]
				]
			}]
		}],
		"recycler": [{
			title: "Утилизатор",
			type: GUIDE_BOOK_PAGE_NORMAL,
			item: [block_recycler, 0],
			text: " Утилизатор уничтожает любые вещи, которые вы в него положите, с шансом 12.5% получая утиль-сырье.\n Имеет 2 слота в интерфейсе: левый - для сырья, правый - для результата. Имеет хранилище в 300 Еэ, потребляет 15 Еэ на одну операцию."
		}, {
			title: "Рецепты с утиль-сырьем",
			type: GUIDE_BOOK_PAGE_RECIPES,
			recipes: [{
				type: GUIDE_BOOK_RECIPE_DIRECT,
				content: [
					[4096, 0],
					[item_scrab, 0, "12.5%"]
				]
			}, {
				type: GUIDE_BOOK_RECIPE_WORKBENCH,
				content: [
					[item_scrab_box, 0],
					[item_scrab],
					[item_scrab],
					[item_scrab],
					[item_scrab],
					[item_scrab],
					[item_scrab],
					[item_scrab],
					[item_scrab],
					[item_scrab],
					[item_scrab]
				]
			}]
		}],
		"beekeeping": [{
			title: "Пчелы - введение в пчеловодство",
			type: GUIDE_BOOK_PAGE_NORMAL,
			item: [item_usual_queen, 0],
			text: " Пчелы и пчеловодство - достаточно объемная часть Factorization, пчелы позволяют создавать многие уникальные ресурсы, пчел можно разводить в пасеках и скрещивать, большое количество некоторых пчел способно обеспечить игрока пищей и ресурсами.\n Существует 8 видов пчел, их можно найти в диких ульях или просто свободно летающими по миру, чтобы поймать свободных пчел нужен сачок. На картинке изображена обычная пчела (королева) - самый распространенный вид, про другие виды вы сможете прочитать далее.\n Пчелы делятся на королев и дронов, для разведения любого вида пчел нужна хотя бы одна королева и хотя бы один дрон. Из диких ульев выпадает и королева и дрон, из свободно летающих пчел - только дроны."
		}, {
			title: "Дикие ульи",
			type: GUIDE_BOOK_PAGE_NORMAL,
			item: [block_wild_hive, 0],
			text: " Дикие ульи нужны для получения королев пчел, они изредка встречаются во всех биомах. При тапе по ним из них вылетит 2 пчелы: дрон и королева, после чего улей можно сломать и получить обеих пчел."
		}, {
			title: "Пасека и разведение пчел",
			type: GUIDE_BOOK_PAGE_NORMAL,
			item: [block_bee_hive, 0],
			text: " Пасека - это основа пчеловодства, в ней работают пчелы. В интерфейсе пасеки 10 слотов - 2 слота для пчел в левой части, 7 слотов для результата работы в правой и 1 слот снизу - для устройства климат-контроля. Для работы в пасеку нужно положить королеву (в нижний слот для пчел) и одного или несколько дронов (в верхний слот). Рядом с пасекой нужно разместить цветы или какие то другие растения, нужные для работы данного вида пчел. Большинство видов пчел требуют солнечный свет для работы, по этому разместите пасеку так, чтобы она была освещена.\n При работе пасеки пчела рядом с ней будет летать к цветам, а в интерфейсе пасеки будет показан прогресс создания ресурсов. Чем больше дронов в пасеке, тем быстрее идет процесс. Королева будет при этом терять запас жизни, когда он подойдет к концу, королева переродится, породив нового дрона. Чтобы собирать результат работы пчел в правой части интерфейса нужно разместить рамки или какой-то другой предмет, нужный данному виду для получения результата."
		}, {
			title: "Крафты",
			type: GUIDE_BOOK_PAGE_RECIPES,
			recipes: [{
				type: GUIDE_BOOK_RECIPE_AUTO,
				content: [
					[block_bee_hive, 0]
				]
			}, {
				type: GUIDE_BOOK_RECIPE_AUTO,
				content: [
					[item_bee_net, 0]
				]
			}]
		}, {
			title: "Центрифуга",
			type: GUIDE_BOOK_PAGE_NORMAL,
			item: [block_centrefuge, 0],
			text: " Центрифуга - основной механизм-обработчик в пчеловодстве. Имеет 6 слотов: центральный для сырья, правый для результата, верхний и левый для дополнительного дропа, нижний - для пустых емкостей для жидкостей, слот рядом с нижним - для заполненных емкостей. Центрифуга позволяет перерабатывать все рамки с медом, оставляя пустую рамку и какую-то жидкость, обычно мед + со многих сот есть еще и дополнительный дроп. Кроме сот у центрифуги есть другие рецепты:\n1. 8 листвы - биомасса, саженец, 50% яблоко, 1% золотое яблоко. \n2. 3 любые пыли металлов - удаление примесей - 1 пыль данного металла + еще пыли других металлов в виде доп.дропа."
		}, {
			title: "Скрещивание",
			type: GUIDE_BOOK_PAGE_NORMAL,
			item: [item_legendary_queen, 0],
			text: " Скрещивание - второй способ получения новых пчел, кроме нахождения их в мире. При скрещивании в слотах пасеки размещаются королева и дрон РАЗНЫХ видов пчел, при этом начнется процесс мутации, который будет длиться около 1.5 минуты. По окончанию вы получите новый вид (королеву и дрона), если скрещивание вам удалось, если же скрестить пчел не получилось, то с вероятностью 80% получится вид, к которому принадлежала королева и 20% - вид, к которому принадлежал дрон (таким образом можно размножать королев редких видов).\n У каждого вида есть набор шансов при скрещивании с другими видами получить новый, о них вы можете прочитать в описании видов."
		}, {
			title: "Устройство климат-контроля",
			type: GUIDE_BOOK_PAGE_NORMAL,
			item: [item_condition_controller, 0],
			text: " По скольку многие виды пчел могут работать только в биоме, откуда они родом, есть возможность сделать устройство климат-контроля, которое, если его положить в самый нижний левый слот пасеки, позволит пчелам работать без солнечного света и в любом биоме.\n При работе устройство потребляет 4 Ее/10 сек и имеет хранилище на 10000 Еэ."
		}, {
			type: GUIDE_BOOK_PAGE_NORMAL,
			title: "Обычные пчелы",
			item: [item_usual_drone, 0],
			text: "Обычные пчелы встречаются повсеместно и очень часто.\n Производят: медовые соты\n Основа: обычная рамка, \n Дополнительный дроп: нет \n Условия работы: любой биом, солнечный свет \n Скорость: нормально \n Переработка сот в центрифуге: жидкость - мед, пустая рамка + 50% капля меда"
		}, {
			type: GUIDE_BOOK_PAGE_NORMAL,
			title: "Луговые пчелы",
			item: [item_meadow_drone, 0],
			text: "Луговые пчелы встречаются на равнинах с умеренной частотой.\n Производят: медовые соты\n Основа: обычная рамка, \n Дополнительный дроп: капля меда \n Условия работы: равнина, солнечный свет \n Скорость: быстро \n Переработка сот в центрифуге: жидкость - мед, пустая рамка + 50% капля меда"
		}, {
			type: GUIDE_BOOK_PAGE_NORMAL,
			title: "Тропические пчелы",
			item: [item_tropical_drone, 0],
			text: "Тропические пчелы встречаются в джунглях с умеренной частотой.\n Производят: какао-соты\n Основа: обычная рамка, \n Дополнительный дроп: нет \n Условия работы: джунгли, солнечный свет \n Скорость: нормально \n Переработка сот в центрифуге: жидкость - мед, пустая рамка, какао + капля меда"
		}, {
			type: GUIDE_BOOK_PAGE_NORMAL,
			title: "Болотные пчелы",
			item: [item_swamp_drone, 0],
			text: "Болотные очень часто встречаются на болотах.\n Производят: болотные соты\n Основа: обычная рамка, \n Дополнительный дроп: нет \n Условия работы: любой биом, кроме пустыни, солнечный свет \n Скорость: медленно \n Переработка сот в центрифуге: жидкость - биомасса, пустая рамка"
		}, {
			type: GUIDE_BOOK_PAGE_NORMAL,
			title: "Адские пчелы",
			item: [item_hell_drone, 0],
			text: "Адские пчелы встречаются в аду с умеренной частотой.\n Производят: адские соты\n Основа: обычная рамка, \n Дополнительный дроп: нет \n Условия работы: ад \n Скорость: медленно \n Переработка сот в центрифуге: пустая рамка, уголь, порох, порошок ифрита, светопыль, все с шансом 25%"
		}, {
			type: GUIDE_BOOK_PAGE_NORMAL,
			title: "Драгоценные пчелы",
			item: [item_precious_drone, 0],
			text: "Драгоценные пчелы редко встречаются в горах.\n Производят: драгоценные соты\n Основа: обычная рамка, \n Дополнительный дроп: нет \n Условия работы: горы, солнечный свет \n Скорость: медленно \n Переработка сот в центрифуге: любая пыль металлов, редстоун, осколок алмаза"
		}, {
			type: GUIDE_BOOK_PAGE_NORMAL,
			title: "Мудрые пчелы",
			item: [item_wise_drone, 0],
			text: "Мудрые пчелы очень редко встречаются во всех биомах.\n Производят: пузырьки опыта\n Основа: пустой пузырек опыта, \n Дополнительный дроп: нет \n Условия работы: любой биом, солнечный свет \n Скорость: очень медленно \n Переработка сот в центрифуге: -"
		}, {
			type: GUIDE_BOOK_PAGE_NORMAL,
			title: "Легендарные пчелы",
			item: [item_legendary_drone, 0],
			text: "Легендарные пчелы чрезвычайно редко встречаются во всех биомах.\n Производят: нано-соты\n Основа: нано-рамка, \n Дополнительный дроп: нет \n Условия работы: любой, солнечный свет \n Скорость: очень медленно \n Переработка сот в центрифуге: жидкость - нет, пустая нано-рамка, кусочек материи"
		}, {
			type: GUIDE_BOOK_PAGE_NORMAL,
			title: "Мутации",
			item: [item_bee_net, 0],
			text: "Обычная + тропическая = 100% болотная\nОбычная + болотная = 50% луговая\nОбычная + болотная = 35% тропическая\nОбычная + луговая = 50% тропическая\nОбычная + адская = 15% драгоценная\nБолотная + луговая = 70% тропическая\nЛуговая + адская = 7.5% мудрая\nМудрая + драгоценная = 10% легендарная"
		}],
		"uu-matter": [{
			title: "Материя",
			type: GUIDE_BOOK_PAGE_NORMAL,
			item: [item_uu_matter, 0],
			text: " Материя - это ресурс, получаемый из энергии, из которого можно создавать некоторые другие ресурсы, такие как железо, алмазы и т.п. Но основное предназначение - создание иридия, получить который другим путем в нужном количестве невозможно."
		}, {
			title: "Генератор материи",
			type: GUIDE_BOOK_PAGE_NORMAL,
			item: [block_mass_fabricator, 0],
			text: " Генератор материи потребляет всю энергию, которую на него подают, и генерирует жидкую материю, которая появляется во внутреннем хранилище, объемом в 1 ведро, на производство 1 ведра тратится 1 000 000 Еэ. Жидкую материю из генератора можно получить, положив в слот емкость, из бочки над ним или выкачать помпой.\n Так же в генераторе материи есть слот для катализатора, которым является утильсырье. При использовании утильсырья генератор материи тратит следующую 1000 Еэ, создавая 3% материи, а не 0.1%, как было бы без катализатора. Коробка утильсырья имеет в 9 раз более мощный эффект: тратя 9000 Еэ создает 27% материи."
		}, {
			title: "Репликатор",
			type: GUIDE_BOOK_PAGE_NORMAL,
			item: [block_replicator, 0],
			text: " Репликатор позволяет перерабатывать жидкую материю в материю-предмет, для этого под репликатором должна быть бочка с жидкой материей, а в слоте для сырья лежать утильсырье. После того, как у него будет материя и сырье, он начнет переработку. Одна операция длится 50 секунд и тратит 1000 Еэ."
		}, {
			title: "Создание иридия",
			type: GUIDE_BOOK_PAGE_RECIPES,
			recipes: [{
				type: GUIDE_BOOK_RECIPE_WORKBENCH,
				content: [
					[item_iridium, 0],
					[item_uu_matter],
					[item_uu_matter],
					[item_uu_matter],
					[0],
					[item_uu_matter],
					[0],
					[item_uu_matter],
					[item_uu_matter],
					[item_uu_matter]
				]
			}]
		}],
		"ores": [{
			title: "Новые руды",
			type: GUIDE_BOOK_PAGE_NORMAL,
			item: [257, 0],
			text: "Для того что начать развиваться с модом Factorization, вам нужно будет добыть много ресурсов. Данный мод не ограничивается стандартными рудами из обычного Minecraft-а, так как добавляет свои: Медь, Олово, Уран, Смешанная Руда и Иридий. Руды могут находиться как под землей, так и на поверхности. Подробнее о новых рудах читайте дальше."
		}, {
			title: "Медь",
			type: GUIDE_BOOK_PAGE_NORMAL,
			item: [block_copper_ore, 0],
			text: "Медь является одним из основных ресурсов в Factorization. Медная руда часто встречается под землей и иногда на поверхности. Добывается каменной киркой и выше и дропается в виде руды. Медную руду можно переплавить в слиток меди в любой печи, а так же переработать в 2 медные пыли в дробителе. Из одной пыли металла в любой печи можно переплавить один слиток данного металла. Медный слиток используется во многих крафтах, а медная пыль, вместе с оловянной в соотношении 3:1, используется для создания бронзовой пыли."
		}, {
			title: "Олово",
			type: GUIDE_BOOK_PAGE_NORMAL,
			item: [block_tin_ore, 0],
			text: "Оловянная руда часто встречается под землей и иногда на поверхности. Добывается каменной киркой и выше и дропается в виде блока руды. Оловянную руду можно переплавить в слиток олова в любой печи, а так же переработать в 2 оловянные пыли в дробителе. Из одной пыли металла в любой печи можно переплавить один слиток данного металла. Оловянный слиток используется в крафтах, а медная пыль, вместе с оловянной в соотношении 3:1, используется для создания бронзовой пыли."
		}, {
			title: "Уран",
			type: GUIDE_BOOK_PAGE_NORMAL,
			item: [block_uranium_ore, 0],
			text: "Уран - это основной ресурс, который требуется для создания и запуска ядерного реактора. Урановая руда встречается редко под уровнем 48 на низкой высоте и очень редко на поверхности. Добывается железной киркой и выше и дропает 1 кусок урана и с шансом 50% железную пыль. Используется для создания ядерного реактора и в качестве топлива для реактора."
		}, {
			title: "Смешанная руда",
			type: GUIDE_BOOK_PAGE_NORMAL,
			item: [block_blended_dust_ore, 0],
			text: "Смешанная руда представляет собой особую руду, которая может при добыче дропнуть много разных ресурсов. Встречается редко под землей под уровнем 24 и чрезвычайно редко на поверхности. Добывается железной киркой и выше и может дропнуть:\nЖелезную пыль\nЗолотую пыль\nМедную пыль\nОловянную пыль\nРедстоун\nРедко Лазурит\nОчень редко уран"
		}, {
			title: "Иридий",
			type: GUIDE_BOOK_PAGE_NORMAL,
			item: [block_iridium_ore],
			text: "Иридий является самым дорогим материалом в данном моде и самой редкой рудой. На 3-4 чанка генерируется всего лишь одно маленькое месторождение иридиевой руды. На поверхности она не встречается. Иридиевая руда добывается железной киркой и выше и дропает 1 кусок иридия и с шансом 50% Золотую пыль. Из двух кусков иридия крафтится один слиток иридия. Иридиевый слиток используется для создания самых продвинутых механизмов и инструментов. Например: Квантовая броня и Нано-сабля. Но основной источник иридия не руда, а создание из материи."
		}],
		"rubber tree": [{
			title: "Гевея",
			type: GUIDE_BOOK_PAGE_NORMAL,
			item: [item_rubber_tree_sapling, 0],
			text: "Помимо новых руд, мод Factorization добавляет в игру новое растение - Дерево Гевеи. Дерево Гевеи (Резиновое дерево) встречается в мире реже, чем обычные деревья, но чаще всего их можно встретить в болотах, лесах и джунглях. Узнать дерево можно не только по отличающейся текстуре, но и по верхушке в 3-4 блока в высоту. Гевея нужна для получения одного из основных ресурсов мода - резины, потому если вы найдете это дерево, то обязательно соберите его саженцы."
		}, {
			title: "Латекс",
			type: GUIDE_BOOK_PAGE_NORMAL,
			item: [item_latex, 0],
			text: "Подтеки появляется на стволах гевей со временем. Собирается он специальным инструментом - краником, который создается из 5 дубовых досок. Для того, чтобы собрать подтек латекса просто тапните по нему краником. Латекс можно переплавить в печи в резину, которая нужна для создания проводов, которые используются в большинстве крафтов."
		}],
		"electric tools": [{
			title: "Электрические инструменты",
			type: GUIDE_BOOK_PAGE_NORMAL,
			item: [item_battery, 0],
			text: "Для упрощения вашего развития, мод Factorization добавляет Электрические инструменты. Они намного эффективнее и никогда не сломаются, потому что работают от энергии, когда запас энергии подойдет к концу, они просто не будут работать, после чего их нужно просто зарядить в любом энергохранилище."
		}, {
			title: "Бур",
			type: GUIDE_BOOK_PAGE_NORMAL,
			item: [item_drill_usual, 0],
			text: "Бур это аналог кирки и лопаты, тратит 50 Еэ на блок. Имеет хранилище в 10 000 Еэ. Копает все что может выкопать железная кирка, но быстрее. Можно улучшить до Алмазного бура."
		}, {
			title: "Алмазный бур",
			type: GUIDE_BOOK_PAGE_NORMAL,
			item: [item_drill, 0],
			text: "Улучшенная версия обычного бура, копает все, что может выкопать алмазная кирка, но быстрее. Тратит 80 Еэ на блок, имеет хранилище в 16 000 Еэ"
		}, {
			title: "Электропила",
			type: GUIDE_BOOK_PAGE_NORMAL,
			item: [item_chainsaw, 0],
			text: "Электропила это аналог топора и ножниц. Тратит 60 Еэ на блок, может срезать листву и паутину. Имеет хранилище в 10 000 еЭ."
		}, {
			title: "Электромотыга",
			type: GUIDE_BOOK_PAGE_NORMAL,
			item: [item_electric_hoe, 0],
			text: "Электромотыга вспахивает область 3х3, выравнивая поверхность и чистя ее от травы, тратя 50 Еэ. Так же может значительно ускорять рост растений в области 3х3 на 30 секунд, тратя на это 400 Еэ и 1 ведро воды из ёмкости, содержащей воду, в инвентаре, если такой ёмкости нет, то ускорения не будет!."
		}, {
			title: "Электрокраник",
			type: GUIDE_BOOK_PAGE_NORMAL,
			item: [item_electric_treetap, 0],
			text: "Электрокраник это улучшенная версия обычного краника, которая работает на энергии. Тратит 50 Еэ на операцию и имеет хранилище в 5 000 Еэ. Кроме этого электрокраник дропает 2-3 латекса, а не 1-3, как обычный."
		}],
		"bronze": [{
			title: "Бронза",
			type: GUIDE_BOOK_PAGE_NORMAL,
			item: [item_bronze_ingot, 0],
			text: "Бронзовые слитки можно получить путем переплавки бронзовой пыли в любой печи. Бронзовая пыль крафтится из медной и оловянной пыли в соотношении 3:1. Из бронзы можно создать инструменты, броню, кроме этого она используется в некоторых рецептах, включая гаечный ключ."
		}, {
			title: "Бронзовые инструменты и броня",
			type: GUIDE_BOOK_PAGE_NORMAL,
			item: [item_bronze_pickaxe, 0],
			text: "Бронзовые инструменты имеют прочность 225, что меньше железных, но копают с такой же скоростью как и железные. Бронзовая броня так же имеет меньше прочности, чем железная.\nПосле того, как инструмент сломается, у вас в руке окажется сломанный вариант данного инструмента, который можно переплавить в печи в бронзовый слиток, а в случае лопаты получить 1 бронзовую пыль в верстаке."
		}],
		"nano-saber": [{
			title: "Нано-сабля",
			type: GUIDE_BOOK_PAGE_NORMAL,
			item: [item_nano_saber, 0],
			text: "Нано-сабля наносит 20 единиц урона за удар. Разряжается, пока находится в руке. Потребляет 80 еЭ/сек и имеет хранилище в 8 000 еЭ, может заряжаться только в МФЕ и МФСУ"
		}],
		"laser": [{
			title: "Шахтерский лазер",
			type: GUIDE_BOOK_PAGE_NORMAL,
			item: [item_mining_laser, 0],
			text: "Шахтерский лазер выстреливает вперед снарядом, который пролетает 20 блоков, разрушая все в радиусе 1.5 блока от снаряда. Все разрушенные блоки кроме камня и земли выпадают. Наносит небольшой урон мобам. Потребляет 500 еЭ за выстрел и имеет хранилище в 100 000 еЭ, может заряжаться только в МФЕ и МФСУ. Используется для быстрого создания проходов."
		}],
		"power armor": [{
			title: "Силовая броня",
			type: GUIDE_BOOK_PAGE_NORMAL,
			item: [item_quantum_helmet, 0],
			text: "Силовая броня защищает гораздо лучше обычной брони и работает от энергии. Тратит энергию при получении урона, когда у элемента брони закончится энергия, он будет давать примерно в 2 раза меньше брони."
		}, {
			title: "Нано-броня",
			type: GUIDE_BOOK_PAGE_NORMAL,
			item: [item_nano_suit, 0],
			text: "Каждый предмет сета заряжается и хранит 100 000 Еэ, может заряжаться только в МФЕ и МФСУ. Полный сет дает 22 защиты, поглощая большую часть урона. Тратит 40 Еэ на единицу урона. Нано-ботинки блокируют большую часть урона от падения. Создается нано-броня из углепластика."
		}, {
			title: "Квантовая броня",
			type: GUIDE_BOOK_PAGE_NORMAL,
			item: [item_quantum_suit, 0],
			text: "Каждый элемент сета заряжается и хранит 1 000 000 Еэ, может заряжаться только в МФСУ. Полный сет дает неуязвимость (25 защиты). Тратит 30 Еэ на единицу урона. Квантовый шлем позволяет дышать под водой, нагрудник позволяет летать и дает неуязвимость к огню и лаве, штаны позволяют очень быстро бегать, а ботинки - высоко прыгать с помощью кнопок интерфейса брони. Создается из иридиевого композита."
		}],
		"treetap": [{
			title: "Краник",
			type: GUIDE_BOOK_PAGE_NORMAL,
			item: [item_treetap, 0],
			text: "Краник нужен для получения латекса с гевей. Для этого просто тапните по подтеку латекса на стволе гевей. С 1 использования краника на подтеке вы получите 1-3 латекса, который в печи можно переплавить в резину. Краник рассчитан на 16 использований. Создается краник из 5 дубовых досок."
		}],
		"wrench": [{
			type: GUIDE_BOOK_PAGE_NORMAL,
			title: "Гаечный ключ",
			item: [item_wrench, 0],
			text: " Гаечный ключ нужен для того, чтобы просматривать информацию о механизмах, поворачивать и настраивать их. Для просмотра информации или включения/выключения наведите ключ на механизм и в правом верхнем углу появится информация и о механизме и кнопка включения/выключения. Для поворота просто тапните на механизм с нужной стороны. Настройка некоторых механизмов так же производится с помощью тапов по ним, подробнее об этом будет в описании некоторых механизмов."
		}],
		"alloy ingots": [{
			type: GUIDE_BOOK_PAGE_NORMAL,
			title: "Закаленное железо (сталь)",
			item: [item_steel_ingot, 0],
			text: " Закаленное железо создается из обычных железных слитков с помощью переплавки их в печи. Закаленное железо используется в крафтах абсолютного большинства механизмов и многих предметов. Из него так же создается машинный корпуса, который является основой многих механизмов."
		}, {
			type: GUIDE_BOOK_PAGE_NORMAL,
			title: "Бронза",
			item: [item_bronze_ingot, 0],
			text: "Бронзовые слитки можно получить путем переплавки бронзовой пыли в любой печи. Бронзовая пыль крафтится из медной и оловянной пыли в соотношении 3:1. Из бронзы можно создать инструменты, броню, кроме этого она используется в некоторых рецептах, включая гаечный ключ."
		}],
		"machine crafting": [{
			type: GUIDE_BOOK_PAGE_NORMAL,
			title: "Создание механизмов",
			item: [block_machine_block, 0],
			text: " Многие механизмы создаются по одинаковой схеме: основной элемент это машинный корпус, а вокруг него дополнительные компоненты крафта вроде микросхем, аккумуляторов, проводов и т.п. Машинный корпус создается из 8 слитков закаленного железа. Так же в продвинутых механизмах используется продвинутый машинный корпус, который создается из обычного машинного корпуса, 2 пластин углепластика и 2 пластин композита."
		}, {
			type: GUIDE_BOOK_PAGE_NORMAL,
			title: "Провода",
			item: [item_copper_wire, 0],
			text: " Провода создаются из меди, стали, золота или алмаза и резины, используются в крафтах микросхем, многих механизмов, а так же необходимы для передачи энергии между механизмами. Более дорогие провода используются в более продвинутых механизмах."
		}, {
			type: GUIDE_BOOK_PAGE_NORMAL,
			title: "Микросхемы",
			item: [item_circuit, 0],
			text: " Микросхемы используются в крафте многих обработчиков и добытчиков, а так же в некоторых других механизмах, а так же в электрических инструментах. Создаются обычные микросхемы из 6 проводов, 2 красной пыли 1 слитка закаленного железа. Из обычных микросхем, 4 красной пыли, 2 светящейся пыли и 2 лазурита создаются улучшенные микросхемы, которые используются в крафтах продвинутых механизмов и инструментов. Кроме этого из продвинутой микросхемы создается продвинутый машинный модуль, нужный в крафте некоторых очень сложных машин и предметов."
		}],
		"transportable storages": [{
			type: GUIDE_BOOK_PAGE_NORMAL,
			title: "Аккумулятор",
			item: [item_battery, 0],
			text: " Аккумулятор это заряжаемый предмет, может хранить до 10 000 Еэ, заряжается в любом энергохранилище. При тапе по механизму переносит в него до 1000 Еэ (сколько позволяет внутреннее хранилище энергии). Так же аккумулятор является компонентом крафта некоторых механизмов и предметов."
		}, {
			type: GUIDE_BOOK_PAGE_NORMAL,
			title: "Энергетический кристалл",
			item: [item_energy_crystal, 0],
			text: " Энергетический кристалл работает так же как аккумулятор, но может содержать до 100 000 Еэ и переносить в механизмы до 10 000 Еэ, заряжается в МФЕ и МФСУ. Используется в крафтах некоторых продвинутых механизмов."
		}, {
			type: GUIDE_BOOK_PAGE_NORMAL,
			title: "Бат-пак",
			item: [item_batpack, 0],
			text: " Бат-пак надевается на спину и заряжает предметы в руке, если их можно зарядить. Хранит до 60 000 Еэ, заряжается в любом энергохранилище. Очень эффективен в сочетании с буром, позволяя ему работать очень долго и на долгое время уходить в шахту."
		}, {
			type: GUIDE_BOOK_PAGE_NORMAL,
			title: "Лап-пак",
			item: [item_latpack, 0],
			text: " Лап-пак это улучшенная версия бат-пака, заряжается в МФЕ и МФСУ. Хранит до 300 000 Еэ."
		}],
		"exchange buffer": [{
			title: "Буфер обмена",
			type: GUIDE_BOOK_PAGE_NORMAL,
			item: [block_exchange_buffer, 0],
			text: "Буфер обмена позволяет расширить инвентарь механизмов обработчиков. Его интерфейс имеет 18 слотов, 9 для сырья и 9 для результата. Буфер ставится над механизмом и по возможности закладывает сырье в него из слотов для сырья и достает результат из слотов для результата. Таким образом можно поставить его над, к примеру, дробителем и загрузить в него сразу несколько стаков разной руды, после чего будет переработано все и не придется каждые пол стака доставать пыль самому или строить систему труб и сундуков."
		}],
		"nuke": [{
			title: "Ядерный заряд",
			type: GUIDE_BOOK_PAGE_NORMAL,
			item: [block_nuclear_bomb, 0],
			text: "Ядерный заряд активируется при получении 100 еЭ (используйте Батарейку), после чего начнется обратный отсчет до взрыва в 30 секунд. По истечении этого времени произойдет взрыв колоссальной силы, который оставит огромную воронку в земле и ядерный гриб в воздухе. Взрыв ядерной бомбы игнорирует любую взрывоустойчивость. Мобы на поверхности в области поражения будут откинуты на большую высоту и им будет нанесен урон огнем."
		}],
		"fishing net": [{
			title: "Рыболовная сеть",
			type: GUIDE_BOOK_PAGE_NORMAL,
			item: [block_fishing_net, 0],
			text: "Рыболовная сеть предназначена для того, чтобы автоматизировать процесс ловли рыбы. Ставится прямо на воду, чтобы почти соприкасалась с ней. Над сетью лучше всего поставить одну вакуумную трубу и далее транспортными провести к сундуку. Рыболовная сеть не тратит энергии, но при этом шанс добычи 1 рыбы очень маленький, поэтому лучше всего использовать сразу несколько сетей!"
		}],
		"mob-working mech": [{
			title: "Уничтожитель животных",
			type: GUIDE_BOOK_PAGE_NORMAL,
			item: [block_mob_slayer, 0],
			text: "Уничтожитель животных работает только если над ним есть сундук, а также есть энергия. Если в радиусе 6 блоков есть животные, а также их количество превосходит заданное число (от 1 до 8, настраивается гаечным ключом), уничтожает 1 из них, получая жаренный дроп и кладет его в сундук. Использует 500 энергии на убийство, внутреннее хранилище - 500 энергии. Порог количества мобов для уничтожения обычно используется чтобы оставлять 2 мобов для восполнения их численности."
		}, {
			title: "Авто-кормушка",
			type: GUIDE_BOOK_PAGE_NORMAL,
			item: [block_auto_feeder, 0],
			text: "Авто-кормушка работает если в радиусе 2 блоков есть 2 или более мобов одного типа. Использует 2 пшеницы из сундука над ней и создает третьего моба этого же типа, после этого не работает в течении минуты. С помощью Авто-кормушки и Уничтожителя животных вы сможете создавать Авто-фермы."
		}, {
			title: "Уничтожитель монстров",
			type: GUIDE_BOOK_PAGE_NORMAL,
			item: [block_defender, 0],
			text: "Уничтожитель монстров уничтожает враждебных мобов в большом радиусе (32 блока), использует 20 энергии на 1 здоровье моба. Не оставляет дропа."
		}, {
			title: "Авто-доитель",
			type: GUIDE_BOOK_PAGE_NORMAL,
			item: [block_auto_milker, 0],
			text: "Авто-доитель доит коров в небольшом радиусе раз в 10 секунд. Молоко поступает в бочку над ним."
		}],
		"lightning gen": [{
			title: "Громоотвод",
			type: GUIDE_BOOK_PAGE_NORMAL,
			item: [block_beacon, 0],
			text: "В громоотвод в грозу изредка ударяет молния, после чего он отдает от 50 000 до 150 000 еЭ в течении 0.5 секунды на напряжении 512В. Чем выше он стоит, тем выше шанс удара. Трансформаторы сильно снизят объем импульса энергии, потому лучше использовать МФСУ для накопления энергии."
		}],
		"terraformer": [{
			title: "Терраформер",
			type: GUIDE_BOOK_PAGE_NORMAL,
			item: [block_terraformer, 0],
			text: "Терраформер тратит энергию и изменяет ландшафт вокруг него. Изменение местности идет по спирали вокруг терраформера. Имеет разные режимы, которые переключаются гаечным ключом. Изменение режима сбрасывает прогресс. Исходно не имеет режима."
		}, {
			title: "Режимы терраформера",
			type: GUIDE_BOOK_PAGE_NORMAL,
			item: [37, 0],
			text: "1.Выравнивание (Flatification) - поднимает/опускает местность вокруг терраформера до его уровня. Поверхность при этом сохраняется, а при поднятии пустое пространство заполняется камнем. Использует 300 энергии на операцию.\n2.Замораживание (Freezing) - покрывает поверхность снегом, замораживает воду, изменяет цвет травы на серо-зеленый. Использует 50 энергии на операцию.\n3.Опустынивание (Desertation) - заменяет верхний слой местности на песок. Изменяет цвет травы на желто-зеленый. Использует 50 энергии на операцию.\n4.Озеленение (Greening) - заменяет верхний слой на землю и траву. Над ней устанавливается высокая трава или цветок. Изменяет цвет травы на зеленый. Использует 50 энергии на операцию."
		}],
		"teleporter": [{
			title: "Телепорт",
			type: GUIDE_BOOK_PAGE_NORMAL,
			item: [block_teleporter, 0],
			text: " Телепорт имеет 16 возможных частот для подключения к другим телепортерам. При нажатии на телепорт устройством телепортации, он использует 1000 Еэ и телепортирует игрока к случайному телепорту с такой же частотой, если таковой имеется. Внутреннее хранилище - 20 000 Еэ."
		}],
		"assembler": [{
			title: "Авто-верстак",
			type: GUIDE_BOOK_PAGE_NORMAL,
			item: [block_assembler, 0],
			text: " Автоверстак имеет внутренний инвентарь в 9 слотов одновременно для сырья и результата. Для установки рецепта нажмите сначала гаечным ключом, а потом желаемым предметом, после чего установится рецепт. Раз в секунду автоверстак создает заданный предмет из компонентов и кладет во внутреннее хранилище. Для того, чтобы автоматически доставать результат используйте деревянные трубы с фильтром."
		}],
		"water energy system": [{
			type: GUIDE_BOOK_PAGE_NORMAL,
			title: "ГЭС",
			item: [block_watermill, 0],
			text: "В этом гайде я расскажу вам как сделать генерацию энергии на основе водяных мельниц. Схема очень простая и почти не требует ресурсов."
		}, {
			type: GUIDE_BOOK_PAGE_NORMAL,
			title: "Ресурсы",
			item: [block_watermill, 0],
			text: "Для этой схемы нам понадобятся: бесконечный источник воды, желательно не меньше 4х4 по площади, 1-2 помпы, 10-20 водяных мельниц, провода, трубы, не лишним будет бат-бокс."
		}, {
			title: "Крафты компонентов",
			type: GUIDE_BOOK_PAGE_RECIPES,
			recipes: [{
				type: GUIDE_BOOK_RECIPE_AUTO,
				content: [
					[block_watermill, -1]
				]
			}, {
				type: GUIDE_BOOK_RECIPE_AUTO,
				content: [
					[block_pump, -1]
				]
			}]
		}, {
			type: GUIDE_BOOK_PAGE_NORMAL,
			title: "Постройка",
			item: [block_watermill, 0],
			text: "Выкапываем яму 4х4 и в 1 блок вглубь. С помошью ведер делаем бесконечный источник воды. Ставим над водой помпу и рядом в ряд водяные мельницы. От помпы ко всем мельницам проводим транспортные трубы."
		}, {
			type: GUIDE_BOOK_PAGE_NORMAL,
			title: "Завершение",
			item: [block_watermill, 0],
			text: "Теперь осталось соединить помпу и все водяные мельницы проводами и поставить бат-бокс. Чтобы запустить систему наберите несколько ведер воды и наполните хранище нескольких водяных мельниц водой. Теперь можете оставить эту систему в покое и она будет вырабатывать много энергии. Для поднятия эффективности используйте больше водяных мельниц и помп, на каждые 10 мельниц 1 помпу."
		}],
		"liquid-fuel system": [{
			type: GUIDE_BOOK_PAGE_NORMAL,
			title: "Генератор на жидком топливе",
			item: [block_liquid_fuel_engine, 0],
			text: "В этом гайде я подробно расскажу вам про очень эффективный бесконечный источник энергии на основе биомассы и жидкотопливного генератора."
		}, {
			type: GUIDE_BOOK_PAGE_NORMAL,
			title: "Ресурсы",
			item: [block_liquid_fuel_engine, 0],
			text: "В ее создании нам понадобятся: авто-фермер, биореактор, 1-3 жидкотопливных генератора, помпа, провода, деревянные и транспортные трубы, не лишним будет бат-бокс."
		}, {
			title: "Крафты компонентов",
			type: GUIDE_BOOK_PAGE_RECIPES,
			recipes: [{
				type: GUIDE_BOOK_RECIPE_AUTO,
				content: [
					[block_liquid_fuel_engine, -1]
				]
			}, {
				type: GUIDE_BOOK_RECIPE_AUTO,
				content: [
					[block_pump, -1]
				]
			}, {
				type: GUIDE_BOOK_RECIPE_AUTO,
				content: [
					[block_bioreactor, -1]
				]
			}, {
				type: GUIDE_BOOK_RECIPE_AUTO,
				content: [
					[block_crop_harvester, -1]
				]
			}]
		}, {
			type: GUIDE_BOOK_PAGE_NORMAL,
			title: "Постройка",
			item: [block_liquid_fuel_engine, 0],
			text: "Теперь, когда у нас все нужное есть в инвентаре, можно приступить к постройке. Для начала найдите или выровняйте местность 9х10 блоков. Поставьте посередине Авто-фермер и он вспахает землю в области 9х9 блоков. Над ним поставьте Сундук и положите туда саженцы. Подождите пока авто-фермер высадит саженцы. Далее с любой стороны поставьте деревянную трубу и в ее фильтр положите саженец. Потом в ту же сторону проведите транспортрые трубы и к биозаводу. Над биозаводом поставьте помпу. К от помпы несколько транспортных труб к жидкотопливному двигателю."
		}, {
			type: GUIDE_BOOK_PAGE_NORMAL,
			title: "Завершение",
			item: [block_liquid_fuel_engine, 0],
			text: "Последний шаг, это соединить биозавод, помпу, жидкотопливный двигатель и ваше хранилище энергии (если оно есть) проводами. Теперь можете оставить эту систему в покое и она будет вырабатывать много энергии. Для повышения эффективности ставьте больше биозаводов и жидкотопливных двигателей."
		}],
		"solid-fuel system": [{
			type: GUIDE_BOOK_PAGE_NORMAL,
			title: "Угольная система энергии",
			item: [block_fuel_generator, 0],
			text: "В этом гайде я расскажу вам как сделать генерацию энергии из авто-фермера, электропечи и топливного генератора. Схема очень простая и не требует много ресурсов."
		}, {
			type: GUIDE_BOOK_PAGE_NORMAL,
			title: "Ресурсы",
			item: [block_fuel_generator, 0],
			text: "Для создания этой схемы нам потребуется: авто-фермер, электрическая печь, несколько топливных генераторов, провода, пара деревянных труб, несколько десятков транспортных труб и не лишним будет бат-бокс."
		}, {
			title: "Крафты компонентов",
			type: GUIDE_BOOK_PAGE_RECIPES,
			recipes: [{
				type: GUIDE_BOOK_RECIPE_AUTO,
				content: [
					[block_fuel_generator, -1]
				]
			}, {
				type: GUIDE_BOOK_RECIPE_AUTO,
				content: [
					[block_electric_furnace, -1]
				]
			}, {
				type: GUIDE_BOOK_RECIPE_AUTO,
				content: [
					[block_crop_harvester, -1]
				]
			}, {
				type: GUIDE_BOOK_RECIPE_AUTO,
				content: [
					[block_bat_box, -1]
				]
			}]
		}, {
			type: GUIDE_BOOK_PAGE_NORMAL,
			title: "Постройка",
			item: [block_fuel_generator, 0],
			text: "Теперь, когда у нас все нужное есть в инвентаре, можно приступить к постройке. Для начала найдите или выровните местность 9х10 блоков. Поставьте посередине Авто-фермер и он вспахает землю в области 9х9 блоков. Над ним поставьте сундук и положите туда саженцы. Далее с любой стороны сундука поставьте деревянную трубу и в ее фильтр положите бревно того дерева, которое вы будете выращивать. Потом в ту же сторону присоедините транспортные трубы подведите их к электропечи. От печи, вдоль фермы, поставьте деревянную трубу, и транспортные трубы. К транспортным трубам подключите топливный генератор и положите туда 1-3 угля."
		}, {
			type: GUIDE_BOOK_PAGE_NORMAL,
			title: "Завершение",
			item: [block_fuel_generator, 0],
			text: "Последний шагом будет соединить топливный генератор, электропечь и ваше хранилище энергии проводами в единую сеть. Теперь можете оставить эту систему в покое и она будет вырабатывать много энергии из вырастающих деревьев. Для повышения эффективности ставьте больше топливных генераторов."
		}],
		"geotermal system": [{
			type: GUIDE_BOOK_PAGE_NORMAL,
			title: "Геотермальная система энергии",
			item: [block_geotermal_generator, 0],
			text: "В этом гайде я расскажу вам как сделать генерацию энергии на основе геотремальных генераторов, из лавы."
		}, {
			type: GUIDE_BOOK_PAGE_NORMAL,
			title: "Ресурсы",
			item: [block_geotermal_generator, 0],
			text: "Для создания схемы нам понадобится: 1-2 геотермальных генератора, разрушитель блоков, плавитель, помпа, ведра с лавой водой, провода и трубы, не лишними будут цистерна и МФЕ."
		}, {
			title: "Крафты компонентов",
			type: GUIDE_BOOK_PAGE_RECIPES,
			recipes: [{
				type: GUIDE_BOOK_RECIPE_AUTO,
				content: [
					[block_geotermal_generator, -1]
				]
			}, {
				type: GUIDE_BOOK_RECIPE_AUTO,
				content: [
					[block_heater, -1]
				]
			}, {
				type: GUIDE_BOOK_RECIPE_AUTO,
				content: [
					[block_pump, -1]
				]
			}, {
				type: GUIDE_BOOK_RECIPE_AUTO,
				content: [
					[block_block_breaker, -1]
				]
			}]
		}, {
			type: GUIDE_BOOK_PAGE_NORMAL,
			title: "Постройка",
			item: [block_geotermal_generator, 0],
			text: "Для начала из ведра с лавой и водой делаем бесконечный источник булыжника. Над булыжником ставим разрушитель блоков, от него проводим транспортную трубу к плавителю, рядом ставим геотермальный генератор. Над нагревателем ставим помпу и проводим транспортрые трубы, над генератором - цистерну, если она есть, проводим трубы от помпы к цистерне или напрямую к генератору."
		}, {
			type: GUIDE_BOOK_PAGE_NORMAL,
			title: "Завершение",
			item: [block_geotermal_generator, 0],
			text: "Последним шагом будет соединить помпу, нагреватель, разрушитель блоков и энергохранилище в одну сеть. Теперь можете оставить эту систему в покое и она будет вырабатывать очень много энергии бесконечно. Для повышения эффективности ставьте больше плавителей, и геотермальных генераторов."
		}],
		"beginner's guide": [{
			type: GUIDE_BOOK_PAGE_NORMAL,
			title: "Введение",
			item: [item_wrench, 0],
			text: " В этом гайде будут подробно описаны пути развития с модом Factorization, если вы играете первый раз, то советую вам читать этот гайд и следовать советам, данным в нем."
		}, {
			type: GUIDE_BOOK_PAGE_NORMAL,
			title: "Ресурсы",
			item: [block_copper_ore, 0],
			text: " Для того, чтобы начать развитие вам понадобится несколько различных ресурсов. В первую очередь это достаточно большое количество железной руды, редстоуна и какого ни будь топлива, лучше всего угля.\n Кроме ванильных руд майнкрафта вам понадобится так же руды из мода: в основном это медь и олово, которые встречаются чуть чаще железа, добываются каменной киркой, они вам понадобятся в большинстве крафтов. Так же собирайте другие руды мода, такие как уран и иридий, встречаются они редко, но пригодятся в будущем, добывается железной киркой. Кроме того на уровне лавы вы можете встретить смешанную руду, из которой выпает много различной пыли металлов, добывается она железной киркой."
		}, {
			type: GUIDE_BOOK_PAGE_NORMAL,
			title: "Гевеи",
			item: [item_rubber_tree_sapling, 0],
			text: " Одним из самых важных ресурсов в моде является резина, из которой создаются провода, а они участвуют в крафтах почти всех механизмов. Получается резина при переплавке латекса в любой печи.\n Для получения латекса вам нужно вырастить гевею (резиновое дерево), найти такие деревья можно по всему миру, но чаще всего они встречаются на болотах, в лесах и джунглях. Из их листвы выпадают саженцы гевей, которые можно посадить и вырастить.\n На стволах гевей, которые выросли из саженцев, появляются подтеки латекса, которые можно собрать, тапнув по ним краником. Так что перед началом строительства дома, посадите рядом с ним штук 5 саженцев гевей."
		}, {
			title: "Крафт краника",
			type: GUIDE_BOOK_PAGE_RECIPES,
			recipes: [{
				type: GUIDE_BOOK_RECIPE_AUTO,
				content: [
					[item_treetap, -1]
				]
			}]
		}, {
			type: GUIDE_BOOK_PAGE_NORMAL,
			title: "Подготовка к началу развития",
			item: [item_steel_ingot, 0],
			text: " После того, как собраны основные ресурсы и желательно построен дом, вы можете подготовить ресурсы для создания простейших механизмов.\n Сначала переплавьте все железо в слитки и где то 16-20 слитков железа в слитки стали в печи. Так же переплавьте всю медь, олово и пыль металлов (если она есть) в слитки. После создания слитков соберите немного латекса и переплавьте его в резину.\n После создания простейших ресурсов сделайте несколько медных проводов, а из них, стали и редстоуна - микросхемы. Так же из оловянных слитков, провода и редстоуна создайте аккумулятор и из 8 слитков стали машинный корпус."
		}, {
			title: "Крафты компонентов",
			type: GUIDE_BOOK_PAGE_RECIPES,
			recipes: [{
				type: GUIDE_BOOK_RECIPE_AUTO,
				content: [
					[item_copper_wire, -1]
				]
			}, {
				type: GUIDE_BOOK_RECIPE_AUTO,
				content: [
					[item_circuit, -1]
				]
			}, {
				type: GUIDE_BOOK_RECIPE_AUTO,
				content: [
					[item_battery, -1]
				]
			}, {
				type: GUIDE_BOOK_RECIPE_AUTO,
				content: [
					[block_machine_block, -1]
				]
			}]
		}, {
			type: GUIDE_BOOK_PAGE_NORMAL,
			title: "Первые механизмы",
			item: [block_fuel_generator, 0],
			text: " Для работы простейших обработчиков, а именно с них лучше всего начать, нужна энергия. Для этого нам понадобится генератор, который работает на таком же топливе, что и обычная печь. Создается топливный генератор из печи, машинного блока и аккумулятора.\n  Кроме генератора создайте еще дробитель, который позволит дробить металлическую руду в 2 пыли металла, которые потом можно переплавить в слитки, таким образом можно получать вдвое больше слитков с руды. Кроме этого дробитель позволяет дробить уголь в пыль, а это нам скоро понадобится. Создается он из машинного корпуса, микросхемы, булыжника и кремния. \n После создания генератора и дробителя установите генератор недалеко от дробителя и соедините их медными проводами. Загрузите топливо (уголь, доски) в генератор и он начнет вырабатывать энергию, которая сначала заполнит внутреннее хранилище дробителя, а потом свое, когда места под энергию не останется, он остановится. Положите в дробитель какую ни будь руду и начните ее переработку. \n Кроме дробителя можно так же создать электрическую печь и так же подсоединить ее к генератору, она намного эффективнее обычной (каменной) печи и работает от энергии, ее крафт можно посмотреть далее."
		}, {
			title: "Крафты простейших механизмов",
			type: GUIDE_BOOK_PAGE_RECIPES,
			recipes: [{
				type: GUIDE_BOOK_RECIPE_AUTO,
				content: [
					[block_fuel_generator, -1]
				]
			}, {
				type: GUIDE_BOOK_RECIPE_AUTO,
				content: [
					[block_macerator, -1]
				]
			}, {
				type: GUIDE_BOOK_RECIPE_AUTO,
				content: [
					[block_electric_furnace, -1]
				]
			}]
		}, {
			type: GUIDE_BOOK_PAGE_NORMAL,
			title: "Энергитические сети",
			item: [item_copper_wire, 0],
			text: " Несколько механизмов, соединенные проводами, образуют энергитическую сеть. Вся энергия, которая вырабатывается генераторами такой сети, передается остальным механизмам в ней, распределяясь равномерно. \n Для того, чтобы объединить несколько механизмов в сеть, не обязательно ставить их на один провод, достаточно, чтобы каждый механизм в сети был подключен проводом хотя бы к одному другому механизму в этой сети."
		}, {
			type: GUIDE_BOOK_PAGE_NORMAL,
			title: "Энергитическая система",
			item: [block_solar_pannel, 0],
			text: " Для постоянной выработки энергии вам понадобится генератор, который будет работать без топлива и выдавать достаточно энергии.\n Одним из таких генераторов является солнечная панель. Днем при свете солнца она отдает 1 Еэ/тик (Единицу энергии за 1/20 секунды, т.е. 20 Еэ/сек), 3 панели днем могут поддерживать работающий дробитель. \n Кроме солнечных панелей так же можно использовать водяные мельницы. Они вырабатывают 16 Еэ/сек, когда погружены в воду так, чтобы мельница была на уровне воды. Так же у мельницы есть интерфейс, в который можно заливать воду, с одного ведра воды мельница генерирует 2.4 Еэ/тик в течении 10 секунд, кроме этого мельницы имеют очень простой крафт и их можно создать 5-6 штук без особых затрат. \n Но по скольку энергия, которую генерируют панели или мельницы, используется не всегда, рационально ее запасать. Для этого нам понадобится бат-бокс, это механизм, который хранит до 40 000 Еэ и отдает ее механизмам в сети, которые в ней нуждаются. Создается бат-бокс из досок, аккумулятора и проводов.\n"
		}, {
			title: "Крафты",
			type: GUIDE_BOOK_PAGE_RECIPES,
			recipes: [{
				type: GUIDE_BOOK_RECIPE_AUTO,
				content: [
					[block_solar_pannel, -1]
				]
			}, {
				type: GUIDE_BOOK_RECIPE_AUTO,
				content: [
					[block_watermill, -1]
				]
			}, {
				type: GUIDE_BOOK_RECIPE_AUTO,
				content: [
					[block_bat_box, -1]
				]
			}]
		}, {
			type: GUIDE_BOOK_PAGE_NORMAL,
			title: "Полезные обработчики",
			item: [block_extractor, 0],
			text: " После построения простейшей энергетической сети, вы можете создать экстрактор, если считаете это нужным. Он позволит вам получать в 3 раза больше резины из латекса.\n Кроме экстрактора так же можно создать утилизатор, если у вас накопилось много ненужных предметов. Утилизатор потребляет мало энергии и быстро уничтожает предметы с шансом получить утиль-сырье. Утиль-сырье можно оставить на будущее или создать коробки с утиль-сырьем и испытать свою удачу. Кроме того, утилизатор очень пригодится вам при создании карьера.\n Для крафта утилизатора вам понадобится компрессор, который тоже является отдельным обработчиком. Вы можете оставить его как отдельный механизм, который пригодится вам потом для создания продвинутых материалов, таких как композит и углепластик, а так же для создания искусственных алмазов."
		}, {
			title: "Крафты",
			type: GUIDE_BOOK_PAGE_RECIPES,
			recipes: [{
				type: GUIDE_BOOK_RECIPE_AUTO,
				content: [
					[block_extractor, -1]
				]
			}, {
				type: GUIDE_BOOK_RECIPE_AUTO,
				content: [
					[block_compressor, -1]
				]
			}, {
				type: GUIDE_BOOK_RECIPE_AUTO,
				content: [
					[block_recycler, -1]
				]
			}]
		}, {
			type: GUIDE_BOOK_PAGE_NORMAL,
			title: "Бур",
			item: [item_drill_usual, 0],
			text: " После появления бат-бокса очень полезными будут электрические инструменты, которые работают от энергии и не ломаются, а так же могут заменить сразу несколько обычных. Самый необходимый из них - бур. Создается он из стали, микросхемы и батареи, может вмещать 10 00 Еэ. Заменяет одновременно лопату и кирку, ломает быстрее железных инструментов и тратит 50 Еэ на блок (т.е. полного заряда хватит на 200 блоков). Для того, чтобы зарядить бур откройте интерфейс бат-бокса и положите его в единственный слот, если в нем есть энергия он начнет заряжать бур (полоска прочности будет заполняться).\n Так же из обычного бура можно создать алмазный, который ломает быстрее алмазной кирки и может ломать обсидиан."
		}, {
			type: GUIDE_BOOK_PAGE_NORMAL,
			title: "Бат-пак",
			item: [item_batpack, 0],
			text: " Вместе с буром очень полезно создать бат-пак. Это ранец, который может содержать 60 000 Еэ и заряжать предмет, который вы держите в руке. Поскольку бур имеет маленькое хранилище энергии, его не хватит на долгий поход в шахту, а бат-пак решит эту проблему. \n Кроме бат-пака можно создать еще и лап-пак, который является улучшенным бат-паком, содержит 300 000 Еэ и но заряжается в МФЕ и выше (не в бат-боксе)."
		}, {
			title: "Крафты",
			type: GUIDE_BOOK_PAGE_RECIPES,
			recipes: [{
				type: GUIDE_BOOK_RECIPE_AUTO,
				content: [
					[item_drill_usual, -1]
				]
			}, {
				type: GUIDE_BOOK_RECIPE_AUTO,
				content: [
					[item_drill, -1]
				]
			}, {
				type: GUIDE_BOOK_RECIPE_AUTO,
				content: [
					[item_batpack, -1]
				]
			}, {
				type: GUIDE_BOOK_RECIPE_AUTO,
				content: [
					[item_latpack, -1]
				]
			}]
		}, {
			type: GUIDE_BOOK_PAGE_NORMAL,
			title: "Авто-фермер",
			item: [block_crop_harvester, 0],
			text: " Когда у нас уже есть нужные обработчики и достаточно энергии, мы можем приступить к созданию механизмов, которые будут снабжать нас ресурсами. Один из таких механизмов, это авто-фермер. Это автономный механизм, который следит за вспаханной грядкой 9х9, высаживает семена, саженцы, собирает выросшие растения и срубает деревья. Все собранное он складывает в сундук над ним, оттуда же он и берет то, что нужно посадить. Этот механизм будет снабжать вас растительной пищей или деревом, в зависимости от того, что вы посадите.\n И сундука авто-фермера можно с помощью деревянной трубы передавать урожай по трубам в другие сундуки, которые находятся там, где вам удобно. Для этого подключите деревянную трубу к сундуку, настройте ее так, чтобы она доставала только урожай, а не семена, и проведите транспортную трубу к сундуку, куда нужно складывать предметы. Подробнее читайте в главе Трубы - транспортировка предметов."
		}, {
			type: GUIDE_BOOK_PAGE_NORMAL,
			title: "Буровая установка",
			item: [block_drill_station, 0],
			text: " Буровая установка позволяет быстро прокопать породу вниз до бедрока и полностью собрать все месторождения руды, которые она найдет на своем пути. Работать она может как от энергии, так и от угля, потому ее можно поставить в отдалении от источника энергии. Все добытые ресурсы передаются в сундук рядом или в трубы.\n Буровая установка полезна на начальных стадиях, но далеко не обязательно создавать ее для дальнейшего развития."
		}, {
			title: "Крафты",
			type: GUIDE_BOOK_PAGE_RECIPES,
			recipes: [{
				type: GUIDE_BOOK_RECIPE_AUTO,
				content: [
					[block_crop_harvester, -1]
				]
			}, {
				type: GUIDE_BOOK_RECIPE_AUTO,
				content: [
					[block_drill_station, -1]
				]
			}]
		}, {
			type: GUIDE_BOOK_PAGE_NORMAL,
			title: "Карьер",
			item: [block_quarry, 0],
			text: " Как только у нас появляется достаточно энергии, мы можем создать карьер, который будет являться основным источником ресурсов из шахты. Для создания карьера потребуется алмазная кирка, микросхемы и машинный корпус, кроме карьера создайте из палок и лазурита 4 маркера и, если его нет, гаечный ключ из бронзы.\n Создав, разметьте маркерами прямоугольный участок примерно 32х32 блока (размер может быть любым, это оптимальный), маркеры должны быть все на одной высоте, по маркерам тапните ключом, чтобы они присоединились друг к другу. После этого рядом с маркером поставьте карьер и тапните ключом по нему. Если все сделано правильно, маркеры выпадут и карьер выделит область раскопок. От карьера проведите трубу к нескольким сундукам и подключите его к энергии проводами, после чего он начнет работу."
		}, {
			title: "Крафты",
			type: GUIDE_BOOK_PAGE_RECIPES,
			recipes: [{
				type: GUIDE_BOOK_RECIPE_AUTO,
				content: [
					[block_quarry, -1]
				]
			}, {
				type: GUIDE_BOOK_RECIPE_AUTO,
				content: [
					[block_marker, -1]
				]
			}, {
				type: GUIDE_BOOK_RECIPE_AUTO,
				content: [
					[item_advanced_circuit, -1]
				]
			}, {
				type: GUIDE_BOOK_RECIPE_AUTO,
				content: [
					[348, -1]
				]
			}]
		}, {
			type: GUIDE_BOOK_PAGE_NORMAL,
			title: "Система сортировки",
			item: [block_diamond_pipe, 0],
			text: " По скольку карьер выкапывает очень много ненужных ресурсов (земля, гравий, булыжник), нам потребуется утилизатор, который вы могли создать ранее, а лучше сразу 2. Кроме того нам понадобится алмазная труба, которая позволит отделить ненужные предметы от нужных, а так же несколько деревянных и транспортных труб.\n После создания нужных предметов, приступим к созданию системы сортировки: подключите алмазную трубу к трубе, которая идет от карьера и проведите от нее 2 трубы: одну к сундукам, а другую к будущим утилизаторам, запомните цвет направления алмазной трубы, которая идет к утилизаторам и откройте ее интерфейс. В интерфейсе положите предметы, которые должны идти на утилизацию в слоты того же цвета, это заставит данные предметы идти только в этом направлении, а остальные - в другом. \n Поставьте утилизаторы и подключите их к нужной трубе и к энергии, к утилизаторам подключите деревянные трубы, которые должны идти в сундук для утиль-сырья."
		}, {
			type: GUIDE_BOOK_PAGE_NORMAL,
			title: "Продвинутые системы энергии",
			item: [block_MFE, 0],
			text: " После того, как вы создали карьер и систему сортировки, несколько простых генераторов скорее всего перестали справляться с нагрузкой и энергии стало катастрофически не хватать. По этому настало время для создания более совершенной системы генерации энергии. 4 самые эффективные системы будут описаны далее, вы сможете прочитать и выбрать ту, которая вам подойдет больше всего.\n Так же, если у вас хватает ресурсов, то перед созданием системы энергии стоит создать более продвинутое хранилище энергии - МФЕ, оно вмещает 600 000 Еэ и позволяет заряжать мощное оружие и силовую броню, о которых будет рассказано далее."
		}, {
			title: "Крафты",
			type: GUIDE_BOOK_PAGE_RECIPES,
			recipes: [{
				type: GUIDE_BOOK_RECIPE_AUTO,
				content: [
					[block_MFE, -1]
				]
			}]
		}, {
			title: "Энергитические системы",
			type: GUIDE_BOOK_PAGE_HEADINGS,
			links: [{
				chapter: "geotermal system",
				text: "Геотермальная энергия"
			}, {
				chapter: "solid-fuel system",
				text: "Угольная электростанция"
			}, {
				chapter: "liquid-fuel system",
				text: "Генератор на жидком топливе"
			}, {
				chapter: "water energy system",
				text: "Водяные мельницы"
			}]
		}, {
			type: GUIDE_BOOK_PAGE_NORMAL,
			title: "Нано броня",
			item: [item_nano_helmet, 0],
			text: " С появлением МФЕ и достаточного количества энергии мы можем создать нано-броню. Ее основное отличие от обычной в том, что она использует энергию для поглощения урона и не ломается. Кроме этого она дает больше защиты, чем алмазная, поглощает большую часть урона и снижает урон от падения.\n Каждый элемент нано-брони может заряжаться в МФЕ и хранит до 100 000 Еэ. Создается нано-броня из энергетических кристаллов и углепластика, который создается в компрессоре из сырого углепластика, который создается из 8 угольной пыли."
		}, {
			title: "Крафты компонентов",
			type: GUIDE_BOOK_PAGE_RECIPES,
			recipes: [{
				type: GUIDE_BOOK_RECIPE_AUTO,
				content: [
					[item_raw_carbon, -1]
				]
			}, {
				type: GUIDE_BOOK_RECIPE_AUTO,
				content: [
					[item_energy_crystal, -1]
				]
			}]
		}, {
			title: "Крафты нано-брони",
			type: GUIDE_BOOK_PAGE_RECIPES,
			recipes: [{
				type: GUIDE_BOOK_RECIPE_AUTO,
				content: [
					[item_nano_helmet, -1]
				]
			}, {
				type: GUIDE_BOOK_RECIPE_AUTO,
				content: [
					[item_nano_suit, -1]
				]
			}, {
				type: GUIDE_BOOK_RECIPE_AUTO,
				content: [
					[item_nano_leggings, -1]
				]
			}, {
				type: GUIDE_BOOK_RECIPE_AUTO,
				content: [
					[item_nano_boots, -1]
				]
			}]
		}, {
			type: GUIDE_BOOK_PAGE_NORMAL,
			title: "Нано сабля",
			item: [item_nano_saber, 0],
			text: " Нано-сабля - это самое мощное оружие в игре, наносит 20 урона за удар, убивает с 1 удара почти всех мобов. Имеет заряд, разряжается, пока вы держите ее в руке. Заряжается в МФЕ и выше."
		}, {
			title: "Крафт нано-сабли",
			type: GUIDE_BOOK_PAGE_RECIPES,
			recipes: [{
				type: GUIDE_BOOK_RECIPE_AUTO,
				content: [
					[item_nano_saber, -1]
				]
			}]
		}, {
			type: GUIDE_BOOK_PAGE_NORMAL,
			title: "Поздняя игра",
			item: [block_mass_fabricator, 0],
			text: " После получения хороших инструментов, продвинутой системы энергии и достаточного количества ресурсов можно начинать путь к созданию материи, из нее иридия, а из него квантовой брони (она поглощает весь урон, имеет огромную вместимость энергии, позволяет быстро бегать, прыгать и летать). Для снабжения генератора материи энергии, вам скорее всего придется построить ядерный реактор, потому что только он может вырабатывать энергию в таких объемах.\n Об постройке реактора, создании материи, брони и вообще обо всем в моде Factorization вы сможете прочитать в остальных разделах этой книги.\n Приятной игры!"
		}],
		"no help in addon": [{
			title: "Нет информации",
			type: GUIDE_BOOK_PAGE_NORMAL,
			item: [item_guide_book, 0],
			text: " Похоже, что автор этого дополнения забыл написать описание этого механизма, обратитесь к нему за тем, чтобы он это сделал."
		}],
		"all crafts": [{
			title: "Крафты Factorization",
			type: GUIDE_BOOK_PAGE_NORMAL,
			item: [58, 0],
			text: " Далее описаны все крафты мода и дополнений, страницы созданы автоматически."
		}],
		"addon contents": [{
			title: "Дополнения: ",
			type: GUIDE_BOOK_PAGE_HEADINGS,
			links: []
		}]
	}
};
var GuideBookUI = {
	Language: "ru",
	Chapter: "",
	Page: 0,
	Recipes: [],
	History: [],
	OpenBookUI_noThread: function() {
		GuiAPI.Title = "guide book";
		GuiAPI.CreateGUILayout(16, null, GuideBookUI.BuildPage)
	},
	isFirstPage: function() {
		return GuideBookUI.Page == 0
	},
	isLastPage: function() {
		try {
			var _0x81e9x7d9 = GuideBookPages[GuideBookUI.Language];
			var _0x81e9x7da = _0x81e9x7d9[GuideBookUI.Chapter]
		} catch (e) {
			return false
		};
		return _0x81e9x7da.length - 1 == GuideBookUI.Page
	},
	InitTitle: function() {
		GuiAPI.Title = GuideBookUI.Chapter + " #" + (GuideBookUI.Page + 1)
	},
	StdBuildFunc: function() {
		var _0x81e9x79c = GuiAPI.GenFrameBmp(1000, 1000 * GuiAPI.yRatio - 78, android.graphics.Color.rgb(0xb3, 0xb3, 0xb3));
		GuiAPI.Canvas.drawBitmap(_0x81e9x79c, 0, 80 * GuiAPI.Scale, null);
		GuiAPI.SetupNewButton(0xA2, 850 * GuiAPI.Scale, 4 * GuiAPI.Scale, "button_content", 3 * GuiAPI.Scale, function(_0x81e9x2bc) {
			GuideBookUI.GoToLink({
				chapter: "content table"
			})
		}, true, true);
		GuiAPI.SetupNewButton(0xA3, 706 * GuiAPI.Scale, 4 * GuiAPI.Scale, "button_back", 3 * GuiAPI.Scale, function(_0x81e9x2bc) {
			GuideBookUI.GoBack()
		}, true, true);
		GuiAPI.SetupNewButton(0xA4, 778 * GuiAPI.Scale, 4 * GuiAPI.Scale, "button_addon_contents", 3 * GuiAPI.Scale, function(_0x81e9x2bc) {
			GuideBookUI.GoToLink({
				chapter: "addon contents"
			})
		}, true, true)
	},
	StdBuildFuncEnd: function() {
		var _0x81e9x7db = 904 * GuiAPI.yRatio * GuiAPI.Scale;
		if (!GuideBookUI.isFirstPage()) {
			GuiAPI.SetupNewButton(0xA0, 0, _0x81e9x7db, "page_back", 3 * GuiAPI.Scale, function(_0x81e9x2bc) {
				GuideBookUI.ShiftBack()
			}, true, true)
		};
		if (!GuideBookUI.isLastPage()) {
			GuiAPI.SetupNewButton(0xA1, 928 * GuiAPI.Scale, _0x81e9x7db, "page_next", 3 * GuiAPI.Scale, function(_0x81e9x2bc) {
				GuideBookUI.ShiftNext()
			}, true, true)
		}
	},
	BuildPage: function() {
		GuideBookUI.InitTitle();
		var _0x81e9x7dc = GuideBookUI.GetCurrentPage();
		if (!_0x81e9x7dc) {
			return
		};
		if (_0x81e9x7dc.type == GUIDE_BOOK_PAGE_NORMAL) {
			GuideBookUI.BuildPage_Text()
		};
		if (_0x81e9x7dc.type == GUIDE_BOOK_PAGE_HEADINGS) {
			GuideBookUI.BuildPage_Header()
		};
		if (_0x81e9x7dc.type == GUIDE_BOOK_PAGE_RECIPES) {
			GuideBookUI.BuildPage_Recipes()
		};
		GuideBookUI.RefreshPage()
	},
	BuildPage_Text: function() {
		GuiAPI.RebuildGUI(16, function() {
			GuideBookUI.StdBuildFunc();
			var _0x81e9x7dd = this.GenFrameBmp(254, 420, android.graphics.Color.rgb(0xAA, 0xAA, 0xAA));
			this.Canvas.drawBitmap(_0x81e9x7dd, 625 * this.Scale, 100 * this.Scale, null)
		})
	},
	BuildPage_Header: function() {
		GuiAPI.RebuildGUI(17, function() {
			GuideBookUI.StdBuildFunc()
		})
	},
	BuildPage_Recipes: function() {
		GuideBookUI.InitTitle();
		GuiAPI.RebuildGUI(17, function() {
			GuideBookUI.StdBuildFunc()
		});
		GuideBookUI.RefreshPage()
	},
	BuildElement_RecipeField: function(_0x81e9x26, _0x81e9x27, _0x81e9x465) {
		var _0x81e9x7de = ConstGUIScale / 60;
		var _0x81e9x7df = [116, 416];
		if (_0x81e9x465.type == GUIDE_BOOK_RECIPE_AUTO) {
			_0x81e9x465.content = this.Recipes[_0x81e9x465.content[0][0] + ":" + _0x81e9x465.content[0][1]];
			_0x81e9x465.type = GUIDE_BOOK_RECIPE_WORKBENCH;
			if (!_0x81e9x465.content) {
				_0x81e9x465.content = [
					[0]
				]
			}
		};
		if (_0x81e9x465.type == GUIDE_BOOK_RECIPE_DIRECT) {
			var _0x81e9x481 = new GUIIconSlot(_0x81e9x26 + 8, _0x81e9x27 + 18, 16 * _0x81e9x7de);
			var _0x81e9x467 = new GUIIconSlot(_0x81e9x26 + 288, _0x81e9x27 + 18, 16 * _0x81e9x7de);
			_0x81e9x481.id = _0x81e9x465.content[0][0];
			_0x81e9x481.count = _0x81e9x465.content[0][2] || 1;
			_0x81e9x481.data = _0x81e9x465.content[0][1] || 0;
			_0x81e9x467.id = _0x81e9x465.content[1][0];
			_0x81e9x467.count = _0x81e9x465.content[1][2] || 1;
			_0x81e9x467.data = _0x81e9x465.content[1][1] || 0;
			GuiAPI.Slots.push(_0x81e9x481);
			GuiAPI.Slots.push(_0x81e9x467);
			GuiAPI.DrawBitmapIntoCanvas(Images.progressbar, _0x81e9x26 + 124, _0x81e9x27 + 22, 2);
			GuiAPI.SetupTextField(0xA0, 18, 32, 8, 200, 8)
		};
		if (_0x81e9x465.type == GUIDE_BOOK_RECIPE_DIRECT_PAIR) {
			var _0x81e9x7e0 = new GUIIconSlot(_0x81e9x26 + 8, _0x81e9x27 + 2, 12 * _0x81e9x7de);
			var _0x81e9x7e1 = new GUIIconSlot(_0x81e9x26 + 8, _0x81e9x27 + 48, 12 * _0x81e9x7de);
			var _0x81e9x467 = new GUIIconSlot(_0x81e9x26 + 282, _0x81e9x27 + 18, 16 * _0x81e9x7de);
			_0x81e9x7e0.id = _0x81e9x465.content[0][0];
			_0x81e9x7e0.count = _0x81e9x465.content[0][2] || 1;
			_0x81e9x7e0.data = _0x81e9x465.content[0][1] || 0;
			_0x81e9x7e1.id = _0x81e9x465.content[1][0];
			_0x81e9x7e1.count = _0x81e9x465.content[1][2] || 1;
			_0x81e9x7e1.data = _0x81e9x465.content[1][1] || 0;
			_0x81e9x467.id = _0x81e9x465.content[2][0];
			_0x81e9x467.count = _0x81e9x465.content[2][2] || 1;
			_0x81e9x467.data = _0x81e9x465.content[2][1] || 0;
			GuiAPI.Slots.push(_0x81e9x7e0);
			GuiAPI.Slots.push(_0x81e9x7e1);
			GuiAPI.Slots.push(_0x81e9x467);
			GuiAPI.DrawBitmapIntoCanvas(Images.progressbar, _0x81e9x26 + 128, _0x81e9x27 + 22, 2)
		};
		if (_0x81e9x465.type == GUIDE_BOOK_RECIPE_WORKBENCH) {
			for (var i = 0; i < 9; i++) {
				var _0x81e9x5b = new GUIIconSlot(16 + _0x81e9x26 + (i % 3) * 32, _0x81e9x27 + parseInt(i / 3) * 32, 8 * _0x81e9x7de);
				if (_0x81e9x465.content[i + 1]) {
					_0x81e9x5b.id = _0x81e9x465.content[i + 1][0];
					_0x81e9x5b.count = _0x81e9x465.content[i + 1][2] || 1;
					_0x81e9x5b.data = _0x81e9x465.content[i + 1][1] || 0
				};
				GuiAPI.Slots.push(_0x81e9x5b)
			};
			var _0x81e9x7e2 = new GUIIconSlot(_0x81e9x26 + 288, _0x81e9x27 + 18, 16 * _0x81e9x7de);
			_0x81e9x7e2.id = _0x81e9x465.content[0][0];
			_0x81e9x7e2.count = _0x81e9x465.content[0][2] || 1;
			_0x81e9x7e2.data = _0x81e9x465.content[0][1] || 0;
			GuiAPI.Slots.push(_0x81e9x7e2);
			GuiAPI.DrawBitmapIntoCanvas(Images.progressbar, _0x81e9x26 + 156, _0x81e9x27 + 22, 2)
		};
		if (_0x81e9x465.type == GUIDE_BOOK_RECIPE_DISASSEMBLE) {
			for (var i = 0; i < 9; i++) {
				var _0x81e9x5b = new GUIIconSlot(_0x81e9x26 + (i % 3) * 32 + 256, _0x81e9x27 + parseInt(i / 3) * 32, 8 * _0x81e9x7de);
				if (_0x81e9x465.content[i + 1]) {
					_0x81e9x5b.id = _0x81e9x465.content[i + 1][0];
					_0x81e9x5b.count = _0x81e9x465.content[i + 1][2] || 1;
					_0x81e9x5b.data = _0x81e9x465.content[i + 1][1] || 0
				};
				GuiAPI.Slots.push(_0x81e9x5b)
			};
			var _0x81e9x7e2 = new GUIIconSlot(_0x81e9x26 + 8, _0x81e9x27 + 18, 16 * _0x81e9x7de);
			_0x81e9x7e2.id = _0x81e9x465.content[0][0];
			_0x81e9x7e2.count = _0x81e9x465.content[0][2] || 1;
			_0x81e9x7e2.data = _0x81e9x465.content[0][1] || 0;
			GuiAPI.Slots.push(_0x81e9x7e2);
			GuiAPI.DrawBitmapIntoCanvas(Images.progressbar, _0x81e9x26 + 120, _0x81e9x27 + 22, 2)
		};
		GuiAPI.Canvas.drawLine((_0x81e9x26 - 10) * GuiAPI.Scale, (_0x81e9x27 - 10) * GuiAPI.Scale, (_0x81e9x26 - 10 + _0x81e9x7df[1]) * GuiAPI.Scale, (_0x81e9x27 - 10) * GuiAPI.Scale, PaintList.outline);
		GuiAPI.Canvas.drawLine((_0x81e9x26 - 10) * GuiAPI.Scale, (_0x81e9x27 - 10) * GuiAPI.Scale, (_0x81e9x26 - 10) * GuiAPI.Scale, (_0x81e9x27 - 10 + _0x81e9x7df[0]) * GuiAPI.Scale, PaintList.outline);
		GuiAPI.Canvas.drawLine((_0x81e9x26 + _0x81e9x7df[1] - 10) * GuiAPI.Scale, (_0x81e9x27 + _0x81e9x7df[0] - 10) * GuiAPI.Scale, (_0x81e9x26 - 10) * GuiAPI.Scale, (_0x81e9x27 - 10 + _0x81e9x7df[0]) * GuiAPI.Scale, PaintList.outline);
		GuiAPI.Canvas.drawLine((_0x81e9x26 + _0x81e9x7df[1] - 10) * GuiAPI.Scale, (_0x81e9x27 + _0x81e9x7df[0] - 10) * GuiAPI.Scale, (_0x81e9x26 - 10 + _0x81e9x7df[1]) * GuiAPI.Scale, (_0x81e9x27 - 10) * GuiAPI.Scale, PaintList.outline)
	},
	BuildElement_Link: function(_0x81e9x10, _0x81e9x26, _0x81e9x27, _0x81e9x2a2) {
		GuiAPI.SetupTextButton(_0x81e9x10, _0x81e9x26 * GuiAPI.Scale, _0x81e9x27 * GuiAPI.Scale, _0x81e9x2a2.text, 32, _0x81e9x2a2.color || android.graphics.Color.WHITE, function() {
			GuideBookUI.GoToLink(_0x81e9x2a2)
		}, true)
	},
	OpenBookUI: function() {
		runAsGUI(this.OpenBookUI_noThread)
	},
	ShiftNext: function() {
		var _0x81e9x7dc = GuideBookUI.GetCurrentPage();
		if (_0x81e9x7dc) {
			GuideBookUI.Page++;
			_0x81e9x7dc = GuideBookUI.GetCurrentPage();
			if (!_0x81e9x7dc) {
				GuideBookUI.Page--
			}
		};
		GuideBookUI.BuildPage()
	},
	ShiftBack: function() {
		var _0x81e9x7dc = GuideBookUI.GetCurrentPage();
		if (_0x81e9x7dc) {
			GuideBookUI.Page--;
			_0x81e9x7dc = GuideBookUI.GetCurrentPage();
			if (!_0x81e9x7dc) {
				GuideBookUI.Page++
			}
		};
		GuideBookUI.BuildPage()
	},
	isBookOpened: function() {
		return GuiAPI.isGuiOpened && (GuiAPI.CurrentOpenedGuiID == 16 || GuiAPI.CurrentOpenedGuiID == 17)
	},
	GetCurrentPage: function() {
		try {
			var _0x81e9x7d9 = GuideBookPages[GuideBookUI.Language];
			var _0x81e9x7da = _0x81e9x7d9[GuideBookUI.Chapter];
			var _0x81e9x7dc = _0x81e9x7da[GuideBookUI.Page]
		} catch (e) {
			print("WARNING: Cannot access page: " + GuideBookUI.Language + "-" + GuideBookUI.Chapter + "-" + GuideBookUI.Page);
			return null
		};
		return _0x81e9x7dc
	},
	RefreshPage: function() {
		if (!GuideBookUI.isBookOpened()) {
			return
		};
		var _0x81e9x7dc = GuideBookUI.GetCurrentPage();
		if (!_0x81e9x7dc) {
			return
		};
		GuiAPI.SetText(0x00, _0x81e9x7dc.title, android.graphics.Color.BLACK);
		var _0x81e9x158 = _0x81e9x7dc.type;
		if (_0x81e9x158 == GUIDE_BOOK_PAGE_NORMAL) {
			GuiAPI.SetText(0x01, GuideBookUI.FormatText(_0x81e9x7dc.text, 48), android.graphics.Color.BLACK);
			var _0x81e9x5b = GuiAPI.GetSlot(0);
			_0x81e9x5b.id = _0x81e9x7dc.item[0];
			_0x81e9x5b.data = _0x81e9x7dc.item[1]
		};
		if (_0x81e9x158 == GUIDE_BOOK_PAGE_RECIPES) {
			for (var i in _0x81e9x7dc.recipes) {
				GuideBookUI.BuildElement_RecipeField(64 + parseInt(i / 2) * 460, 180 + (i % 2) * 160, _0x81e9x7dc.recipes[i])
			}
		};
		if (_0x81e9x158 == GUIDE_BOOK_PAGE_HEADINGS) {
			for (var i in _0x81e9x7dc.links) {
				var _0x81e9x2a2 = _0x81e9x7dc.links[i];
				GuideBookUI.BuildElement_Link(16 + parseInt(i), 24, 150 + 64 * i, _0x81e9x2a2)
			}
		};
		GuideBookUI.StdBuildFuncEnd()
	},
	FormatText: function(_0x81e9x162, _0x81e9x7e3) {
		var _0x81e9x7b0 = _0x81e9x162.split(" ");
		var _0x81e9x7e4 = "";
		var _0x81e9x7e5 = 0;
		for (var i in _0x81e9x7b0) {
			var _0x81e9x347 = _0x81e9x7b0[i];
			var _0x81e9x7e6 = _0x81e9x347.split("\n");
			if (_0x81e9x7e6.length == 2) {
				if (_0x81e9x7e5 + _0x81e9x7e6[0].length > _0x81e9x7e3) {
					_0x81e9x7e4 += "\n"
				};
				_0x81e9x7e4 += " " + _0x81e9x7e6[0] + "\n" + _0x81e9x7e6[1];
				_0x81e9x7e5 = _0x81e9x7e6[1].length;
				continue
			};
			var _0x81e9x31f = _0x81e9x347.length;
			_0x81e9x7e5 += _0x81e9x31f;
			if (_0x81e9x7e5 > _0x81e9x7e3) {
				_0x81e9x7e5 = _0x81e9x31f;
				_0x81e9x7e4 += " \n"
			} else {
				_0x81e9x7e4 += " "
			};
			_0x81e9x7e4 += _0x81e9x347
		};
		return _0x81e9x7e4
	},
	SetChapter: function(_0x81e9x15a) {
		this.Chapter = _0x81e9x15a
	},
	SetLanguage: function(_0x81e9x1a7) {
		this.Language = _0x81e9x1a7
	},
	SetPage: function(_0x81e9x9) {
		this.Page = _0x81e9x9
	},
	GoToLink: function(_0x81e9x2a2) {
		if (_0x81e9x2a2.chapter == "__close") {
			GuiAPI.CloseGUI();
			return
		};
		this.History.push({
			chapter: this.Chapter,
			page: this.Page
		});
		this.SetChapter(_0x81e9x2a2.chapter);
		this.SetPage(_0x81e9x2a2.page || 0);
		this.BuildPage()
	},
	GoBack: function() {
		var _0x81e9x2a2 = this.History.pop();
		this.GoToLink(_0x81e9x2a2);
		this.History.pop()
	},
	OpenTestChapter: function() {
		this.SetChapter("content table");
		this.SetPage(0);
		this.OpenBookUI()
	},
	OpenContentTable: function() {
		this.SetChapter("content table");
		this.SetPage(0);
		this.History.push({
			chapter: "__close"
		});
		this.OpenBookUI()
	},
	LastOpened: -1,
	OpenBook: function() {
		if (this.LastOpened > globalWorldTime) {
			this.LastOpened = -1
		};
		if (this.LastOpened + 20 < globalWorldTime) {
			this.LastOpened = globalWorldTime;
			this.OpenContentTable()
		}
	},
	BuildAllRecipesChapter: function() {
		try {
			var _0x81e9x7d9 = GuideBookPages[GuideBookUI.Language];
			var _0x81e9x7da = _0x81e9x7d9["all crafts"];
			var _0x81e9x7e7 = _0x81e9x7da[0]
		} catch (e) {
			print("guide book cannot find all crafts page, language:" + GuideBookUI.Language);
			return
		};
		var _0x81e9x13 = 0;
		for (var _0x81e9x163 in this.Recipes) {
			if (_0x81e9x163.split(":")[1] == "-1") {
				continue
			};
			_0x81e9x13++
		};
		var _0x81e9x7e8 = parseInt((_0x81e9x13 + 3) / 4);
		var _0x81e9x7e9 = 0;
		var _0x81e9x7ea = 0;
		var _0x81e9x7eb = null;
		for (var _0x81e9x163 in this.Recipes) {
			if (_0x81e9x163.split(":")[1] == "-1") {
				continue
			};
			if (!_0x81e9x7eb) {
				_0x81e9x7eb = {
					type: GUIDE_BOOK_PAGE_RECIPES,
					title: "Крафты Factorization (" + (++_0x81e9x7ea) + "/" + _0x81e9x7e8 + ")",
					recipes: []
				}
			};
			_0x81e9x7eb.recipes.push({
				type: GUIDE_BOOK_RECIPE_WORKBENCH,
				content: this.Recipes[_0x81e9x163]
			});
			_0x81e9x7e9++;
			if (_0x81e9x7e9 >= 4) {
				_0x81e9x7da.push(_0x81e9x7eb);
				_0x81e9x7e9 = 0;
				_0x81e9x7eb = null
			}
		}
	}
};
var GuideBookGiveGUI = {
	Win: null,
	Bitmap: null,
	View: null,
	Show: function() {
		if (!config_safe_leave_button) {
			return
		};
		if (GuideBookGiveGUI.Win != null) {
			return
		};
		GuideBookGiveGUI.Bitmap = LoadBitmapFromAssets("button_give_book.png");
		if (!GuideBookGiveGUI.Bitmap) {
			print("missing some gui files...");
			return
		};
		var _0x81e9x1d7 = getMcContext();
		var _0x81e9x426 = _0x81e9x1d7.getWindowManager().getDefaultDisplay().getHeight();
		var _0x81e9x1a1 = _0x81e9x426 * 0.075;
		GuideBookGiveGUI.Bitmap = android.graphics.Bitmap.createScaledBitmap(GuideBookGiveGUI.Bitmap, _0x81e9x1a1, _0x81e9x1a1, false);
		runAsGUI(function() {
			var _0x81e9x1d7 = getMcContext();
			GuideBookGiveGUI.View = new android.widget.ImageView(_0x81e9x1d7);
			GuideBookGiveGUI.View.setImageBitmap(GuideBookGiveGUI.Bitmap);
			GuideBookGiveGUI.Win = new android.widget.PopupWindow(_0x81e9x1d7);
			var _0x81e9x9 = android.widget.LinearLayout.LayoutParams.WRAP_CONTENT;
			GuideBookGiveGUI.Win.setContentView(GuideBookGiveGUI.View);
			GuideBookGiveGUI.Win.setHeight(_0x81e9x1a1);
			GuideBookGiveGUI.Win.setWidth(_0x81e9x1a1);
			GuideBookGiveGUI.Win.setBackgroundDrawable(null);
			GuideBookGiveGUI.Win.showAtLocation(_0x81e9x1d7.getWindow().getDecorView(), android.view.Gravity.TOP | android.view.Gravity.LEFT, _0x81e9x1a1, 0);
			GuideBookGiveGUI.View.setOnClickListener({
				onClick: function() {
					if (isInGame) {
						addItemInventory(item_guide_book, 1, 0)
					};
					GuideBookGiveGUI.Destroy();
					return true
				}
			})
		});
		RunInThread(function(_0x81e9x17d) {
			YieldForATime(7000);
			for (var i = 0; i < 20; i++) {
				if (!GuideBookGiveGUI.Win) {
					return
				};
				runAsGUI(function() {
					GuideBookGiveGUI.View.setAlpha(1 - i / 20)
				});
				_0x81e9x17d.sleep(50)
			};
			GuideBookGiveGUI.Destroy()
		})
	},
	Destroy: function() {
		runAsGUI(function() {
			if (GuideBookGiveGUI.Win) {
				GuideBookGiveGUI.Win.dismiss();
				GuideBookGiveGUI.Win = null
			}
		})
	}
};
var languageIDs = {
	"en": 0,
	"rus": 1
};

function DetectLanguageID(_0x81e9x7ef) {
	if (_0x81e9x7ef == "ru_RU") {
		return 1
	};
	if (_0x81e9x7ef == "zh_CN" || _0x81e9x7ef == "zh_TW") {
		return 2
	};
	return 0
}

function TranslateAllNamesToCurLang() {
	var _0x81e9x275 = "";
	for (var _0x81e9x10 in NamesToTranslate) {
		var _0x81e9x7f1 = "";
		if (config_debug_enabled) {
			_0x81e9x7f1 += "(id " + _0x81e9x10 + ")"
		};
		ModPE.langEdit(Item.getName(_0x81e9x10, 0, true), translate(NamesToTranslate[_0x81e9x10]) + " " + _0x81e9x7f1);
		_0x81e9x275 += ">> " + Item.getName(_0x81e9x10, 0, true) + " -> " + translate(NamesToTranslate[_0x81e9x10]) + "\n"
	}
}

function putFirstCharToUpperCase(_0x81e9x162) {
	var _0x81e9x7f3 = _0x81e9x162.substring(0, 1);
	var _0x81e9x7f4 = _0x81e9x162.substring(1, _0x81e9x162.length);
	return _0x81e9x7f3.toUpperCase() + _0x81e9x7f4
}

function translate(_0x81e9x162) {
	_0x81e9x162 = _0x81e9x162 + "";
	if (_0x81e9x162.substr(0, 1) == "@") {
		_0x81e9x162 = _0x81e9x162.substr(1, _0x81e9x162.length - 1);
		var _0x81e9x7f6 = _0x81e9x162.split("|");
		var _0x81e9x7f7 = [];
		for (var i in _0x81e9x7f6) {
			_0x81e9x7f7[i] = translate(_0x81e9x7f6[i])
		};
		return "@" + _0x81e9x7f7.join("|")
	};
	var _0x81e9x7f8 = langLocalisationID;
	if (!_0x81e9x7f8) {
		return putFirstCharToUpperCase(_0x81e9x162)
	};
	var _0x81e9x16;
	for (var i in LocalisationData) {
		if (LocalisationData[i][0] == _0x81e9x162) {
			_0x81e9x16 = LocalisationData[i]
		}
	};
	if (!_0x81e9x16) {
		return putFirstCharToUpperCase(_0x81e9x162)
	};
	var _0x81e9x7f9 = _0x81e9x16[_0x81e9x7f8];
	if (!_0x81e9x7f9) {
		return putFirstCharToUpperCase(_0x81e9x162)
	};
	return putFirstCharToUpperCase(_0x81e9x7f9)
}

function getItemNameWithTranslation(_0x81e9x10, _0x81e9x16) {
	return translate(Item.getName(_0x81e9x10, _0x81e9x16, true).split(".")[1])
};
LocalisationData = [
	["macerator", "Дробитель", "[FZ]磨粉机"],
	["recycler", "Утилизатор", "[FZ]回收机"],
	["crop harvester", "Авто-фермер", "[FZ]自动农场"],
	["quarry", "Карьер", "[FZ]采石场"],
	["electric furnace", "Электропечь", "[FZ]电炉"],
	["beacon", "Маяк", "[FZ]信标(避雷针)"],
	["drill", "Бур", "[FZ]电钻"],
	["drill station", "Буровая установка", "[FZ]矿井"],
	["solar pannel", "Солнечная панель", "[FZ]太阳能发电机"],
	["fuel generator", "Топливный генератор", "[FZ]固体燃料发电机"],
	["nuclear reactor", "Ядерный реактор", "核反应仓(老)"],
	["windmill", "ветряк", "[FZ]风力发电机"],
	["watermill", "Водяная мельница", "[FZ]水力发电机"],
	["geotermal generator", "Геотермальный генератор", "[FZ]地热发电机"],
	["chest transporter", "Транспортер предметов", "[FZ]箱子转运器"],
	["bat-box", "Бат-бокс", "[FZ]电池盒"],
	["MFE", "МФЕ", "[FZ]MFE"],
	["MFSU", "МФСУ", "[FZ]MFSU"],
	["teleporter", "Телепортер", "[FZ]传送器"],
	["pump", "Помпа", "[FZ]水泵"],
	["barrel", "Цистерна", "[FZ]储罐"],
	["bucket filler", "Наполнитель вёдер", "[FZ]灌装机"],
	["receiver", "Приёмник", "[FZ]接收器"],
	["auto-milker", "Авто-доилка", "[FZ]自动挤奶器"],
	["mob slayer", "Уничтожитель животных", "[FZ]屠宰机"],
	["defender", "Уничтожитель монстров", "[FZ]防卫者"],
	["auto feeder", "Авто-кормушка", "[FZ]自动喂养机"],
	["block breaker", "Разрушитель блоков", "[FZ]方块破坏器"],
	["liquid blender", "Смешиватель жидкостей", "[FZ]液体混合搅拌机"],
	["heater", "Нагреватель", "[FZ]加热器"],
	["nuclear bomb", "Ядерная бомба", "[FZ]核弹"],
	["rubber tree harvester", "Выращиватель гевеи", "[FZ]橡胶树培养皿"],
	["copper wire", "Медный провод", "[FZ]铜质导线"],
	["pipe", "Труба", "[FZ]管道"],
	["assembler", "Авто-верстак", "[FZ]自动合成台"],
	["mass fabricator", "Генератор материи", "[FZ]量子对撞机"],
	["growth accelerator", "Ускоритель роста", "[FZ]生长加速器"],
	["wrench", "Гаечный ключ", "[FZ]扳手"],
	["dust iron", "Железная пыль", "[FZ]铁粉"],
	["dust gold", "Золотая пыль", "[FZ]金粉"],
	["ec-meter", "Вольтметр", "[FZ]EC电表"],
	["nano saber", "Нано-сабля", "[FZ]纳米剑"],
	["coal chunk", "Угольная глыба", "[FZ]煤块"],
	["coal ball", "Угольный шарик", "[FZ]煤球"],
	["compressed coal ball", "Сжатый угольный шарик", "[FZ]压缩煤球"],
	["coal dust", "Угольная пыль", "[FZ]煤粉"],
	["honey bottle", "Бутыль с мёдом", "[FZ]蜂蜜瓶"],
	["honey comb", "Рамка с сотами", "[FZ]蜂蜜框架"],
	["honey frame", "Пустая рамка", "[FZ]空框架"],
	["empty bottle", "Пустая бутыль", "[FZ]空瓶"],
	["mead bottle", "Бутыль с медовухой", "[FZ]蜂蜜酒瓶"],
	["honey bottle", "Бутыль с мёдом", "[FZ]蜂蜜瓶"],
	["scrab", "Утильсырье", "[FZ]废料"],
	["crystal wire", "Оптоволокно", "[FZ]钻石导线"],
	["golden wire", "Золотой провод", "[FZ]金质导线"],
	["super conductor", "Сверхпроводник", "[FZ]超导体"],
	["steel wire", "Стальной провод", "[FZ]钢质导线"],
	["circuit", "Микросхема", "[FZ]电路板"],
	["compressor", "Компрессор", "[FZ]压缩机"],
	["replicator", "Репликатор", "[FZ]复制机"],
	["liquid fuel engine", "Жидкотопливный двигатель", "[FZ]液体燃料发电机"],
	["fuel factory", "Завод топлива", "[FZ]精炼厂"],
	["bioreactor", "Биозавод", "[FZ]生物燃料反应器"],
	["terraformer", "Терраформер", "[FZ]环境改造机"],
	["extractor", "Экстрактор", "[FZ]提取机"],
	["centrefuge", "Центрифуга", "[FZ]离心机"],
	["bee hive", "Пасека", "[FZ]蜂箱"],
	["wild hive", "Дикий улей", "[FZ]野生蜂巢"],
	["transformator LV", "Трансформатор НН", "[FZ]LV-变压器"],
	["transformator MV", "Трансформатор СН", "[FZ]MV-变压器"],
	["transformator HV", "Трансформатор ВН", "[FZ]HV-变压器"],
	["machine block", "Машинный блок", "[FZ]基础机械外壳"],
	["advanced machine block", "Улучшенный машинный блок", "[FZ]高级机械外壳"],
	["liquid constone", "Жидкий бетон", "[FZ]未干的混凝土"],
	["constone", "Застывшая пена", "[FZ]干燥的混凝土"],
	["rubber tree wood (active block)", "Древесина гевеи (технический блок)", "[FZ]橡胶木(动态方块)"],
	["rubber tree wood", "Древесина гевеи", "[FZ]橡胶木"],
	["rubber tree leaves", "Листва гевеи", "[FZ]橡胶树叶"],
	["uranium ore", "Урановая руда", "[FZ]铀矿石"],
	["blended dust ore", "Смешанная руда", "[FZ]混合粉尘矿石"],
	["reactor cell", "Камера реактора", "[FZ]反应仓(老)(暂译)"],
	["oil", "нефть (технический блок)", "[FZ]石油"],
	["oil#", "нефть (технический блок)", "[FZ]石油#"],
	["arboretum", "Арборетум", "[FZ]植物园(暂译)"],
	["apiarist`s centrefuge", "[FZ]养蜂人离心机(暂译)"],
	["clock engine", "Часовой двигатель", "[FZ]时钟引擎(暂译)"],
	["booze barrel", "Пивной бочонок", "[FZ]啤酒桶(暂译)"],
	["multihive", "Мультипасека", "[FZ]蜂箱组(暂译)"],
	["farm block", "Фермовый блок", "[FZ]农场方块(暂译)"],
	["swarmer", "Роевня", "[FZ]蜂群(暂译)"],
	["mining laser", "Шахтёрский лазер", "[FZ]采矿激光枪"],
	["energy crystal", "Энергетический кристалл", "[FZ]能量水晶"],
	["compressed constone", "Сжатый бетон", "[FZ]压缩混凝土"],
	["composite ingot", "Композитный слиток", "[FZ]合金锭"],
	["carbonium plate", "Углепластиковая пластина", "[FZ]碳板"],
	["raw carbon", "Углепластик", "[FZ]生碳板"],
	["alveary", "пасека"],
	["magma crucible", "плавитель", "[FZ]熔岩炉"],
	["guide book", "гайд по Factorization", "[FZ]分解者手册"],
	["machine casing", "корпус механизма", "[FZ]标准机械外壳"],
	["advanced machine casing", "продвинутый корпус механизма", "[FZ]高级机械外壳"],
	["bottle with mead", "бутыль с медовухой", "[FZ]蜂蜜酒瓶"],
	["bottle with honey", "бутыль с медом", "[FZ]蜂蜜瓶"],
	["nano helmet", "Нано-шлем", "[FZ]纳米头盔"],
	["nano suit", "Нано-нагрудник", "[FZ]纳米胸甲"],
	["nano leggings", "Нано-штаны", "[FZ]纳米护腿"],
	["nano boots", "Нано-боты", "[FZ]纳米靴子"],
	["quantum helmet", "Квантовый шлем", "[FZ]量子头盔"],
	["quantum suit", "Квантовый нагрудник", "[FZ]量子胸甲"],
	["quantum leggings", "Квантовые штаны", "[FZ]量子护腿"],
	["quantum boots", "Квантовые боты", "[FZ]量子靴子"],
	["nano helmet (uncharged)", "Нано-шлем (разряжено)", "[FZ]纳米头盔 (uncharged)"],
	["nano suit (uncharged)", "Нано-нагрудник (разряжено)", "[FZ]纳米胸甲 (uncharged)"],
	["nano leggings (uncharged)", "Нано-штаны (разряжено)", "[FZ]纳米护腿 (uncharged)"],
	["nano boots (uncharged)", "Нано-боты (разряжено)", "[FZ]纳米靴子 (uncharged)"],
	["quantum helmet (uncharged)", "Квантовый шлем (разряжено)", "[FZ]量子头盔 (uncharged)"],
	["quantum suit (uncharged)", "Квантовый нагрудник (разряжено)", "[FZ]量子胸甲 (uncharged)"],
	["quantum leggings (uncharged)", "Квантовые штаны (разряжено)", "[FZ]量子护腿 (uncharged)"],
	["quantum boots (uncharged)", "Квантовые боты (разряжено)", "[FZ]量子靴子 (uncharged)"],
	["composite plate", "Композитная пластина", "[FZ]合金板"],
	["constone spray", "Распылитель бетона", "[FZ]混凝土喷枪"],
	["scrab box", "Коробочка с утильсырьём", "[FZ]废料盒"],
	["jetpack", "Джет-пак"],
	["batpack", "Бат-пак", "[FZ]电池背包"],
	["oil bucket", "Ведро с нефтью", "[FZ]石油桶"],
	["liquid matter bucket", "Ведро с материей", "[FZ]液态UU物质桶"],
	["biomass bucket", "Ведро с биомассой", "[FZ]生物质桶"],
	["fuel bucket", "Ведро с бензином", "[FZ]燃油桶"],
	["usual drone", "Простой дрон", "[FZ]普通的雄蜂"],
	["usual queen", "Простая принцесса", "[FZ]普通的蜂后"],
	["advanced circuit", "Улучшенная микросхема", "[FZ]高级电路板"],
	["iridium composite", "Иридиевый композит", "[FZ]铱板"],
	["tin ingot", "Оловянный слиток", "[FZ]锡锭"],
	["copper ingot", "Медный слиток", "[FZ]铜锭"],
	["dust copper", "Медная пыль", "[FZ]铜粉"],
	["dust tin", "Оловянная пыль", "[FZ]锡粉"],
	["steel ingot", "Слиток закаленного железа", "[FZ]钢锭"],
	["latex", "Латекс", "[FZ]粘性树脂"],
	["rubber tree sapling", "Саженец гевеи", "[FZ]橡胶树苗"],
	["treetap", "Краник", "[FZ]橡胶木龙头"],
	["rubber", "Резина", "[FZ]橡胶"],
	["iridium chunk", "Кусок иридия", "[FZ]铱块"],
	["battery", "Аккумулятор", "[FZ]电池"],
	["uranium", "Кусок урана", "[FZ]铀"],
	["iridium", "Иридиевый слиток", "[FZ]铱锭"],
	["teleport accesser", "Устройство телепортации", "[FZ]传送杖"],
	["leash", "Поводок", "[FZ]缰绳"],
	["nuclear cell", "Урановый стержень", "[FZ]单铀棒(老)"],
	["cooling 60k helium cell", "Гелиевый охладитель реактора", "[FZ]60K冷却单元(老)"],
	["overclocker upgrade", "Улучшение ускоритель", "[FZ]超频升级单元"],
	["advanced machine module", "Улучшенный машинный модуль", "[FZ]高级机械组件"],
	["uu-matter", "Материя", "[FZ]UU物质"],
	["chainsaw", "Электропила", "[FZ]电锯"],
	["wax dust", "воск", "[FZ]蜡粉(暂译)"],
	["scaffold", "Строительные леса", "[FZ]脚手架"],
	["mineral fertilizer", "Минеральное удобрение", "[FZ]化肥"],
	["woven silk", "Тканевый шёлк", "[FZ]丝绸(暂译)"],
	["honey dew", "Капля мёда", "[FZ]蜂蜜滴(暂译)"],
	["demonic drone", "Демонический дрон", "[FZ]邪恶的雄蜂(暂译)"],
	["demonic queen", "Демоническая принцесса", "[FZ]邪恶的蜂后(暂译)"],
	["tropical queen", "Тропическая принцесса", "[FZ]热带的蜂后(暂译)"],
	["tropical drone", "Тропический дрон", "[FZ]热带的雄蜂(暂译)"],
	["scented paneling", "Благоухающая обшивка", "[FZ]香味镶板(暂译)"],
	["hot honey comb", "Горячая рамка с сотами", "[FZ]热情的蜂巢(暂译)"],
	["cocoa honey comb", "Рамка с какао-сотами", "[FZ]可可蜂巢(暂译)"],
	["stone mug", "Каменная кружка", "[FZ]石杯"],
	["icebeer mug", "Кружка ледяного пива", "[FZ]冰啤酒杯"],
	["meadbeer mug", "Кружка пивной медовухи", "[FZ]蜂蜜酒杯"],
	["honey butter", "Бутерброд с мёдом", "[FZ]蜂蜜桶"],
	["honey crystal", "Медовый кристалл", "[FZ]蜂蜜结晶(暂译)"],
	["ice coffee mug", "Кружка холодного кофе", "[FZ]冰咖啡杯"],
	["rum mug", "Кружка рома", "[FZ]甜酒杯(暂译)"],
	["iridium ore", "Иридиевая руда", "[FZ]铱矿石"],
	["copper ore", "Медная руда", "[FZ]铜矿石"],
	["tin ore", "Оловянная руда", "[FZ]锡矿石"],
	["marker", "Маркер", "[FZ]采石场标记杆"],
	["marker fence", "Разметочный забор", "[FZ]采石场栅栏"],
	["scoop", "Сачек", "[FZ]铲子(暂译)"],
	["exchange buffer", "Буфер обмена", "[FZ]物流缓冲器"],
	["rubber wood with latex", "Древесина гевеи с подтеком латекса", "[FZ]带树脂的橡胶木"],
	["Bronze Ingot", "Бронзовый слиток", "[FZ]青铜锭"],
	["Bronze Pickaxe", "Бронзовая кирка", "[FZ]青铜镐"],
	["Bronze Shovel", "Бронзовая лопата", "[FZ]青铜铲"],
	["Bronze Axe", "Бронзовый топор", "[FZ]青铜斧"],
	["Bronze Sword", "Бронзовый меч", "[FZ]青铜剑"],
	["Bronze Helmet ", "Бронзовый шлем", "[FZ]青铜头盔"],
	["Bronze Chestplate", "Бронзовый нагрудник", "[FZ]青铜胸甲"],
	["Bronze Leggings", "Бронзовые поножи", "[FZ]青铜护腿"],
	["Bronze Boots", "Бронзовые ботинки", "[FZ]青铜靴子"],
	["Composite Helmet", "Композитный шлем", "[FZ]复合头盔"],
	["Composite Chestplate", "Композитный нагрудник", "[FZ]复合胸甲"],
	["Composite Leggings", "Композитные похожи", "[FZ]复合护腿"],
	["Composite Boots", "Композитные ботинки", "[FZ]复合靴子"],
	["Electric Wrench", "Электроключ", "[FZ]电动扳手"],
	["factorization disabled, reload world to enable", "factorization отключен, перезайдите в мир", "factorization已关闭，尝试重新加载世界以启动factorization."],
	["No GUI Textures. Use GUI Fixer.", "Нет текстур интерфейса, используйте GUI Fixer", "没有安装GUI!"],
	["transporting pipe", "Транспортная труба", "[FZ]运输管道"],
	["wooden pipe", "Деревянная труба", "[FZ]木质管道"],
	["filter pipe", "Фильтрующая труба", "[FZ]红石管道"],
	["golden pipe", "Золотая труба", "[FZ]金质管道"],
	["valve pipe", "Направляющая труба", "[FZ]铁质管道"],
	["obsidian pipe", "Вакуумная труба", "[FZ]黑曜石管道"],
	["use wrench to rotate", "Используйте ключ, чтобы повернуть", "使用扳手改变方向"],
	["cell - empty", "Пустая капсула", "[FZ]空单元"],
	["cell - water", "Капсула с водой", "[FZ]水单元"],
	["cell - lava", "Капсула с лавой", "[FZ]岩浆单元"],
	["cell - milk", "Капсула с молоком", "[FZ]牛奶单元"],
	["cell - biomass", "Капсула с биомассой", "[FZ]生物质单元"],
	["cell - fuel", "Капсула с топливом", "[FZ]燃油单元"],
	["cell - oil", "Капсула с нефтью", "[FZ]石油单元"],
	["cell - honey", "Капсула с медом", "[FZ]蜂蜜单元"],
	["cell - mead", "Капсула с медовухой", "[FZ]蜂蜜酒单元"],
	["cell - liquid matter", "Капсула с жидкой материей", "[FZ]液态UU物质单元"],
	["fishing net", "Рыболовная сеть", "[FZ]渔网"],
	["cant contain this liquid", "не может содержать эту жидкость", "无法装填该液体"],
	["no liquid here", "здесь нет жидкости", "逗比!这里没有液体可装!"],
	["bucket", "ведро", "[FZ]桶"],
	["lap-pack", "Лап-пак", "[FZ]兰博顿电池背包"],
	["hardened block", "Укрепленный камень", "[FZ]防爆石"],
	["hardened glass", "Укрепленное стекло", "[FZ]防爆玻璃"],
	["uranium rod controller", "Контроллер урановых стержней", "[FZ]核反应仓"],
	["nuclear reactor controller", "Контроллер реактора", "[FZ]核反应堆控制器"],
	["nuclear reactor turbine", "Турбина ядерного реактора", "[FZ]反应堆涡轮"],
	["uranium rod - singler", "Урановый стержень", "[FZ]单铀棒"],
	["uranium rod - double", "Сдовенный урановый стержень", "[FZ]双联铀棒"],
	["uranium rod - quad", "Счетверённый урановый стержень", "[FZ]四联铀棒"],
	["depleted uranium rod - singler", "истощенный урановый стержень", "[FZ]燃料棒(枯竭铀)"],
	["depleted uranium rod - double", "истощенный сдовенный урановый стержень", "[FZ]双联燃料棒(枯竭铀)"],
	["depleted uranium rod - quad", "истощенный счетверённый урановый стержень", "[FZ]四联燃料棒(枯竭铀)"],
	["coolant cell - singler", "Охлаждающая капсула", "[FZ]10K冷却单元"],
	["coolant cell - triple", "Тройная охлаждающая капсула", "[FZ]30K冷却单元"],
	["coolant cell - six", "Шестерная охлаждающая капсула", "[FZ]60K冷却单元"],
	["reactor reflector", "Oтражатель нейтронов", "[FZ]中子反射器"],
	["advanced reactor reflector", "Продвинутый отражатель нейтронов", "[FZ]加厚型中子反射器"],
	["coolant circuit", "охлаждающий контур", "[FZ]热交换模块"],
	["heating circuit", "Обычный нагревающий контур", "[FZ]冷凝模块"],
	["redstone heating circuit", "Редстоуновый нагревающий контур", "[FZ]红石冷凝模块"],
	["golden heating circuit", "Золотой нагревающий контур", "[FZ]金制冷凝模块"],
	["reactor vent", "теплоотвод", "[FZ]散热风口"],
	["redstone reactor vent", "редстоуновый теплоотвод", "[FZ]红石散热风口"],
	["lapis reactor vent", "лазуритовый теплоотвод", "[FZ]青金石散热风口"],
	["reactor plating", "пластина корпуса реактора", "[FZ]反应堆隔热板"],
	["Chain reaction in nuclear reactor! Overheating: ", "Цепная реакция в ядерном реакторе! Перегрев: ", "反应堆链式反应失控§4|已过热|§e即将堆芯熔毁!\n             §9预计破坏等级: "],
	["usual drone", "обычный дрон", "[FZ]平凡雄蜂"],
	["usual queen", "обычная королева", "[FZ]平凡蜂后"],
	["swamp drone", "болотный дрон", "[FZ]沼泽雄蜂"],
	["swamp queen", "болотная королева", "[FZ]沼泽蜂后"],
	["meadow drone", "луговой дрон", "[FZ]草原雄蜂"],
	["meadow queen", "луговая королева", "[FZ]草原蜂后"],
	["tropical drone", "тропический дрон", "[FZ]热带雄蜂"],
	["tropical queen", "тропическая королева", "[FZ]热带蜂后"],
	["hell drone", "адский дрон", "[FZ]地狱雄蜂"],
	["hell queen", "адская короева", "[FZ]地狱蜂后"],
	["wise drone", "мудрый дрон", "[FZ]智者雄蜂"],
	["wise queen", "мудрая королева", "[FZ]智者蜂后"],
	["precious drone", "драгоценный дрон", "[FZ]珍稀雄蜂"],
	["precious queen", "драгоценная королева", "[FZ]珍稀蜂后"],
	["legendary drone", "легендарный дрон", "[FZ]传奇雄蜂"],
	["legendary queen", "легендарная королева", "[FZ]传奇蜂后"],
	["empty frame", "пустая рамка", "[FZ]空框架"],
	["honey frame", "рамка с медовыми сотами", "[FZ]蜂蜜框架"],
	["cocoa frame", "рамка с какао-сотами", "[FZ]可可框架"],
	["swamp frame", "рамка с болотными сотами", "[FZ]沼泽框架"],
	["hell frame", "рамка с адскими сотами", "[FZ]地狱框架"],
	["precious frame", "рамка с драгоценными сотами", "[FZ]珍稀框架"],
	["empty nano frame", "пустая нано-рамка", "[FZ]空纳米框架"],
	["full nano frame", "заполненная нано-рамка", "[FZ]纳米框架"],
	["diamond shard", "осколок алмаза", "[FZ]钻石碎片"],
	["matter chunk", "кусочек материи", "[FZ]一小块UU物质"],
	["essense bottle", "пустой пузырек опыта", "[FZ]末影瓶"],
	["honey drop", "капля меда", "[FZ]蜂蜜滴"],
	["honey bread", "хлеб с медом", "[FZ]蜂蜜面包"],
	["bee net", "сачок", "[FZ]捕虫网"],
	["condition controller", "устройство климат-контроля", "[FZ]气候控制器"],
	["spawn egg - bee", "создать существо - пчела", "[FZ]生成 蜜蜂"],
	["diamond pipe", "алмазная труба", "[FZ]钻石管道"],
	["tesseract", "тессеракт", "[FZ]四次元立方体"],
	["drill", "бур", "[FZ]电钻"],
	["diamond drill", "алмазный бур", "[FZ]钻石电钻"],
	["electric treetap", "электрический краник", "[FZ]电动树脂提取器"],
	["electric hoe", "электрическая мотыга", "[FZ]电动锄"],
	["bronze ingot", "бронзовый слиток", "[FZ]青铜锭"],
	["bronze dust", "бронзовая пыль", "[FZ]青铜粉"],
	["bronze axe", "бронзовый топор", "[FZ]青铜斧"],
	["bronze shovel", "бронзовая лопата", "[FZ]青铜锹"],
	["bronze pickaxe", "бронзовая кирка", "[FZ]青铜镐"],
	["bronze sword", "бронзовый меч", "[FZ]青铜剑"],
	["bronze hoe", "бронзовая мотыга", "[FZ]青铜锄"],
	["broken bronze axe", "сломанный бронзовый топор", "[FZ]损坏的青铜斧"],
	["broken bronze shovel", "сломанная бронзовая лопата", "[FZ]损坏的青铜锹"],
	["broken bronze pickaxe", "сломанная бронзовая кирка", "[FZ]损坏的青铜镐"],
	["broken bronze sword", "сломанный бронзовый меч", "[FZ]损坏的青铜剑"],
	["broken bronze hoe", "сломанная бронзовая мотыга", "[FZ]损坏的青铜锄"],
	["bronze helmet", "бронзовый шлем", "[FZ]青铜头盔"],
	["bronze chestplate", "бронзовый нагрудник", "[FZ]青铜胸甲"],
	["bronze leggings", "бронзовые поножи", "[FZ]青铜护腿"],
	["bronze boots", "бронзовые ботинки", "[FZ]青铜靴子"],
	[start_menu_text_data.main_en, start_menu_text_data.main_ru, start_menu_text_data.main_cn],
	[start_menu_text_data.addons_en, start_menu_text_data.addons_ru, start_menu_text_data.addons_cn],
	[start_menu_text_data.config_en, start_menu_text_data.config_ru, start_menu_text_data.config_cn],
	[start_menu_text_data.crashes_en, start_menu_text_data.crashes_ru, start_menu_text_data.crashes_cn],
	[start_menu_text_data.gui_en, start_menu_text_data.gui_ru, start_menu_text_data.gui_cn],
	[start_menu_text_data.gui_normal_en, start_menu_text_data.gui_normal_ru, start_menu_text_data.gui_normal_cn],
	[start_menu_text_data.gui_missing_en, start_menu_text_data.gui_missing_ru, start_menu_text_data.gui_missing_cn],
	[start_menu_text_data.gui_successful_download_en, start_menu_text_data.gui_successful_download_ru, start_menu_text_data.gui_successful_download_cn],
	[start_menu_text_data.gui_unsuccessful_download_en, start_menu_text_data.gui_unsuccessful_download_ru, start_menu_text_data.gui_unsuccessful_download_cn],
	[start_menu_text_data.about_en, start_menu_text_data.about_ru, start_menu_text_data.about_cn],
	[start_menu_text_data.addon_ids_changed_en, start_menu_text_data.addon_ids_changed_ru, start_menu_text_data.addon_ids_changed_cn],
	[start_menu_text_data.feedback_en, start_menu_text_data.feedback_ru, start_menu_text_data.feedback_cn],
	[start_menu_text_data.guide_book_en, start_menu_text_data.guide_book_ru, start_menu_text_data.guide_book_cn],
	[start_menu_text_data.addon_crash_en, start_menu_text_data.addon_crash_ru, start_menu_text_data.addon_crash_cn],
	[SafeLeaveMode.message_en, SafeLeaveMode.message_ru],
	["Update is ready to be installed", "Новая версия мода загружена и готова к установке", "已准备好安装升级"],
	["current version", "текущая версия", "当前版本"],
	["new version", "новая версия", "新版本"],
	["changelog", "изменения", "更新日志"],
	["later", "позже", "稍后"],
	["install and restart", "установить и перезапустить", "安装并重新启动"],
	["close", "закрыть", "关闭"],
	["CLOSE", "закрыть", "关闭"],
	["ABOUT", "о моде", "关于"],
	["ADDONS", "дополнения", "扩展addons"],
	["CONFIGURATION", "настройки", "配置文件"],
	["CHANGELOG", "список изменений", "更新日志"],
	["BACK", "назад", "返回"],
	["CREATOR & MAIN DEVEOLPER", "создатель и разработчик мода", "作者&主要设计师"],
	["OFFICIAL PAGE (RUS)", "оф. группа мода", "官方网站(俄语)"],
	["batpack charging", "бат-пак заряжает", "电池背包充电中"],
	["FEEDBACK", "написать отзыв", "反馈"],
	["SUBMIT", "отправить", "提交"],
	["title:", "заголовок:", "标题"],
	["message:", "сообщение:", "正文"]
];
FullItemAndBlockDefinition();

function CustomMachineAPI(_0x81e9x10) {
	this.parent = MachineBase;
	this.parent();
	this.id = _0x81e9x10;
	this.generatorMode = false;
	this.energyUsing = false;
	this.internalStorage = 1;
	this.tempValues = [];
	this.baseValues = [];
	this.updateMachine = function(_0x81e9x15a) {
		this.setAllValues(_0x81e9x15a);
		if (this.updateFunc) {
			this.updateFunc(_0x81e9x15a)
		};
		if (_0x81e9x15a.container) {
			_0x81e9x15a.container.updateGUI()
		}
	};
	this.setAllValues = function(_0x81e9x15a) {
		for (var i in this.baseValues) {
			var _0x81e9x163 = this.baseValues[i][0];
			var _0x81e9x184 = this.baseValues[i][1];
			if (_0x81e9x15a[_0x81e9x163] + "" == "undefined") {
				_0x81e9x15a[_0x81e9x163] = _0x81e9x184
			}
		};
		for (var i in this.tempValues) {
			var _0x81e9x163 = this.tempValues[i][0];
			var _0x81e9x184 = this.tempValues[i][1];
			if (_0x81e9x15a[_0x81e9x163] + "" == "undefined") {
				_0x81e9x15a[_0x81e9x163] = _0x81e9x184
			}
		}
	};
	this.isUsingEnergy = function() {
		return this.energyUsing
	};
	this.getMaxEnergyStored = function() {
		return this.internalStorage
	};
	this.getEnergyOutput = function(_0x81e9x15a) {
		if (this.outputFunc) {
			var _0x81e9x18c = parseInt(this.outputFunc(_0x81e9x15a));
			if (_0x81e9x18c && _0x81e9x18c > 0) {
				return _0x81e9x18c
			}
		};
		return 0
	};
	this.getMachineName = function() {
		return this.machineName
	};
	this.getHelpGuideLink = function(_0x81e9x2bc) {
		return {
			chapter: "no help in addon"
		}
	};
	this.isGenerator = function() {
		return this.generatorMode
	};
	this.save = function(_0x81e9x17, _0x81e9x15a) {
		for (var i in this.baseValues) {
			var _0x81e9x163 = this.baseValues[i][0];
			DataSaver.Save(_0x81e9x17 + _0x81e9x163, _0x81e9x15a[_0x81e9x163])
		}
	};
	this.read = function(_0x81e9x17, _0x81e9x15a) {
		for (var i in this.baseValues) {
			var _0x81e9x163 = this.baseValues[i][0];
			_0x81e9x15a[_0x81e9x163] = DataSaver.ReadFloat(_0x81e9x17 + _0x81e9x163)
		}
	};
	this.wrenchClick = function(_0x81e9x15a) {
		if (this.wrenchFunc) {
			this.wrenchFunc(_0x81e9x15a)
		}
	};
	this.onDestroy = function(_0x81e9x2bc) {
		if (this.destroyFunc) {
			this.destroyFunc(_0x81e9x2bc)
		}
	}
}
var FactAPI = {
	customMachines: [],
	CurrentAddon: null,
	defineBlock: DefineUIDBlock,
	genCustomBlockType: UnlimitedAPI.GenerateCustomType,
	defineMachine: function(_0x81e9x10, _0x81e9x17, _0x81e9x7fd, _0x81e9x7fe, _0x81e9x7ff) {
		if (_0x81e9x7fe) {
			DefineUIDMachine(_0x81e9x10, _0x81e9x17, _0x81e9x7fd, _0x81e9x7ff)
		} else {
			DefineUIDBlock(_0x81e9x10, [{
				name: _0x81e9x17,
				texture: _0x81e9x7fd
			}], _0x81e9x7ff)
		};
		var _0x81e9x2bc;
		for (var i in this.customMachines) {
			if (this.customMachines[i].id == _0x81e9x10) {
				_0x81e9x2bc = this.customMachines[i];
				break
			}
		};
		if (!_0x81e9x2bc) {
			_0x81e9x2bc = new CustomMachineAPI(_0x81e9x10);
			this.customMachines.push(_0x81e9x2bc)
		};
		_0x81e9x2bc.machineName = _0x81e9x17;
		return _0x81e9x2bc
	},
	isMachine_: function(_0x81e9x10) {
		for (var i in this.customMachines) {
			var _0x81e9x158 = this.customMachines[i];
			if (_0x81e9x158.id == _0x81e9x10) {
				return true
			}
		};
		return false
	},
	setGenerator: function(_0x81e9x2bc) {
		_0x81e9x2bc.generatorMode = true;
		_0x81e9x2bc.energyUsing = true
	},
	setEnergyStorage: function(_0x81e9x2bc, _0x81e9x26) {
		_0x81e9x2bc.internalStorage = _0x81e9x26;
		_0x81e9x2bc.energyUsing = true
	},
	addValue: function(_0x81e9x2bc, _0x81e9x17, _0x81e9x15b) {
		if (!_0x81e9x15b) {
			_0x81e9x15b = 0
		};
		_0x81e9x2bc.baseValues.push([_0x81e9x17, _0x81e9x15b])
	},
	addTempValue: function(_0x81e9x2bc, _0x81e9x17, _0x81e9x15b) {
		if (!_0x81e9x15b) {
			_0x81e9x15b = 0
		};
		_0x81e9x2bc.tempValues.push([_0x81e9x17, _0x81e9x15b])
	},
	setContainerId: function(_0x81e9x2bc, _0x81e9x2b3) {
		_0x81e9x2bc.getContainerId = function() {
			return _0x81e9x2b3
		}
	},
	setMachineGui: function(_0x81e9x2bc, _0x81e9x692) {
		FactAPI.setContainerId(_0x81e9x2bc, _0x81e9x692.id)
	},
	setMachineGuide: function(_0x81e9x2bc, _0x81e9x7da, _0x81e9x7dc, _0x81e9x23b) {
		_0x81e9x2bc.getHelpGuideLink = function() {
			return {
				chapter: _0x81e9x7da,
				page: _0x81e9x7dc,
				color: _0x81e9x23b
			}
		}
	},
	setTickUpdate: function(_0x81e9x2bc, _0x81e9xd) {
		_0x81e9x2bc.updateFunc = _0x81e9xd
	},
	setDestroyFunc: function(_0x81e9x2bc, _0x81e9xd) {
		_0x81e9x2bc.destroyFunc = _0x81e9xd
	},
	setTickOutput: function(_0x81e9x2bc, _0x81e9xd) {
		_0x81e9x2bc.outputFunc = _0x81e9xd;
		_0x81e9x2bc.energyUsing = true
	},
	setWrenchFunc: function(_0x81e9x2bc, _0x81e9xd) {
		_0x81e9x2bc.wrenchFunc = _0x81e9xd
	},
	setInfoFunc: function(_0x81e9x2bc, _0x81e9xd) {
		_0x81e9x2bc.getInfo = _0x81e9xd
	},
	setRedstoneFunc: function(_0x81e9x2bc, _0x81e9xd) {
		_0x81e9x2bc.RedstoneConsumed = _0x81e9xd
	},
	setMaxEnergyInput: function(_0x81e9x2bc, _0x81e9x263) {
		_0x81e9x2bc.MaxEnergyInput = _0x81e9x263
	},
	setLiquidStorage: function(_0x81e9x2bc, _0x81e9x263, _0x81e9xd) {
		_0x81e9x2bc.isUsingLiquid = function() {
			return true
		};
		_0x81e9x2bc.getMaxVolume = function() {
			return _0x81e9x263
		};
		_0x81e9x2bc.getLiquidType = _0x81e9xd || function(_0x81e9x2bc) {
			return _0x81e9x2bc.liquid
		};
		FactAPI.addValue(_0x81e9x2bc, "volume", 0)
	},
	getChest: function(_0x81e9x26, _0x81e9x27, _0x81e9x28) {
		return getChest(_0x81e9x26, _0x81e9x27, _0x81e9x28)
	},
	addonList: [],
	registerAddon: function(_0x81e9x259) {
		this.addonList.push(_0x81e9x259)
	},
	addonInfo: function() {
		for (var i in this.addonList) {
			clientMessage(ChatColor.YELLOW + this.addonList[i])
		}
	},
	addItemToCharge: function(_0x81e9x10, _0x81e9x800, _0x81e9x519) {
		if (!_0x81e9x519) {
			_0x81e9x519 = 0
		};
		ChargableItems[_0x81e9x519][_0x81e9x10] = _0x81e9x800
	},
	callbacks: {},
	CurrentAddon: null,
	addCallback: function(_0x81e9x17, _0x81e9xd) {
		var _0x81e9x4b = this.callbacks[_0x81e9x17];
		if (!_0x81e9x4b) {
			_0x81e9x4b = []
		};
		_0x81e9x4b.push({
			call: _0x81e9xd,
			addon: this.CurrentAddon
		});
		this.callbacks[_0x81e9x17] = _0x81e9x4b
	},
	InvokeCallback: function(_0x81e9x17, _0x81e9x1c7, _0x81e9x173, _0x81e9x15a, _0x81e9x15b, _0x81e9x174, _0x81e9x1c2, _0x81e9x23c, _0x81e9x175) {
		var _0x81e9x4b = this.callbacks[_0x81e9x17];
		if (!_0x81e9x4b) {
			return
		};
		for (var i in _0x81e9x4b) {
			FactAPI.CurrentAddon = _0x81e9x4b[i].addon;
			_0x81e9x4b[i].call(_0x81e9x1c7, _0x81e9x173, _0x81e9x15a, _0x81e9x15b, _0x81e9x174, _0x81e9x1c2, _0x81e9x23c, _0x81e9x175)
		};
		FactAPI.CurrentAddon = null
	},
	InvokeCallbackForAddon: function(_0x81e9x17, addon, _0x81e9x1c7, _0x81e9x173, _0x81e9x15a, _0x81e9x15b, _0x81e9x174, _0x81e9x1c2, _0x81e9x23c, _0x81e9x175) {
		var _0x81e9x4b = this.callbacks[_0x81e9x17];
		if (!_0x81e9x4b) {
			return
		};
		for (var i in _0x81e9x4b) {
			if (_0x81e9x4b[i].addon == addon) {
				_0x81e9x4b[i].call(_0x81e9x1c7, _0x81e9x173, _0x81e9x15a, _0x81e9x15b, _0x81e9x174, _0x81e9x1c2, _0x81e9x23c, _0x81e9x175)
			}
		}
	},
	resetCustomMachineTypes: function(_0x81e9x802) {
		for (var i in this.customMachines) {
			this.customMachines[i].clear();
			_0x81e9x802.push(this.customMachines[i])
		}
	},
	GUI: {
		guiScreenData: {},
		lastScreenId: 32,
		TexturesToLoad: {},
		CheckTexturesDownloaded: function() {
			return false
		},
		LoadBitmaps: function() {
			for (var _0x81e9x17 in this.TexturesToLoad) {
				Images[_0x81e9x17] = LoadBitmap(_0x81e9x17)
			}
		},
		defineGuiScreen: function(_0x81e9x7b4) {
			var _0x81e9x803 = {
				texture: _0x81e9x7b4,
				energybar: true,
				id: this.lastScreenId++,
				slots: [],
				addSlot: function(_0x81e9x1c7, _0x81e9x173, _0x81e9x15a) {
					this.slots.push([_0x81e9x1c7, _0x81e9x173, _0x81e9x15a]);
					return this.slots.length - 1
				},
				addCustomSlot: function(_0x81e9x26, _0x81e9x27, _0x81e9x16) {
					_0x81e9x16.x = _0x81e9x26;
					_0x81e9x16.y = _0x81e9x27;
					_0x81e9x16._FactAPI_isCustom = true;
					this.slots.push(_0x81e9x16);
					return this.slots.length - 1
				},
				scales: [],
				addBar: function(_0x81e9x6bf, _0x81e9x26, _0x81e9x27, _0x81e9x6c0) {
					this.scales.push({
						bmp: _0x81e9x6bf,
						x: _0x81e9x26,
						y: _0x81e9x27,
						dir: _0x81e9x6c0
					});
					return this.scales.length - 1
				},
				buttons: [],
				addButton: function(_0x81e9x6bf, _0x81e9x26, _0x81e9x27, _0x81e9xd) {
					this.buttons.push({
						bmp: _0x81e9x6bf,
						x: _0x81e9x26,
						y: _0x81e9x27,
						func: _0x81e9xd
					})
				},
				addTextButton: function(_0x81e9x26, _0x81e9x27, _0x81e9x1de, _0x81e9x804, _0x81e9xd) {
					this.buttons.push({
						isText: true,
						x: _0x81e9x26,
						y: _0x81e9x27,
						func: _0x81e9xd,
						text: _0x81e9x1de,
						font: _0x81e9x804
					})
				},
				textFields: [],
				addTextField: function(_0x81e9x1a1, _0x81e9x26, _0x81e9x27, _0x81e9x304, _0x81e9x175) {
					this.textFields.push({
						size: _0x81e9x1a1,
						x: _0x81e9x26,
						y: _0x81e9x27,
						w: _0x81e9x304,
						h: _0x81e9x175
					})
				},
				addProgressBar: function(_0x81e9x26, _0x81e9x27) {
					this.scales[0x81] = {
						bmp: "progressbar",
						x: _0x81e9x26,
						y: _0x81e9x27,
						dir: 3
					}
				},
				addEnergyBar: function(_0x81e9x26, _0x81e9x27) {
					this.scales[0x80] = {
						bmp: "energybar",
						x: _0x81e9x26,
						y: _0x81e9x27,
						dir: 0
					}
				},
				addLiquidBar: function(_0x81e9x26, _0x81e9x27) {
					this.scales[0x82] = {
						bmp: "liquid_1",
						x: _0x81e9x26,
						y: _0x81e9x27,
						dir: 0
					}
				},
				addFireBar: function(_0x81e9x26, _0x81e9x27) {
					this.scales[0x83] = {
						bmp: "firebg",
						x: _0x81e9x26,
						y: _0x81e9x27,
						dir: 0
					};
					this.scales[0x84] = {
						bmp: "firebg",
						x: _0x81e9x26,
						y: _0x81e9x27,
						dir: 0
					}
				}
			};
			this.guiScreenData[_0x81e9x803.id] = _0x81e9x803;
			return _0x81e9x803
		},
		BuildGUI: function(_0x81e9x10, _0x81e9x805) {
			var _0x81e9x692 = this.guiScreenData[_0x81e9x10];
			if (!_0x81e9x692) {
				return
			};
			for (var i in _0x81e9x692.slots) {
				var _0x81e9x5b = _0x81e9x692.slots[i];
				if (_0x81e9x5b._FactAPI_isCustom) {
					addCustomSlotToCurrentGUI(_0x81e9x5b)
				} else {
					addSlotToCurrentGUI(_0x81e9x5b[0], _0x81e9x5b[1], _0x81e9x5b[2])
				}
			};
			if (_0x81e9x805) {
				return
			};
			for (var i in _0x81e9x692.scales) {
				var _0x81e9x2c5 = _0x81e9x692.scales[i];
				GuiAPI.SetupNewScale(i, _0x81e9x2c5.x, _0x81e9x2c5.y, _0x81e9x2c5.bmp, _0x81e9x2c5.dir)
			};
			for (var i in _0x81e9x692.buttons) {
				var _0x81e9x693 = _0x81e9x692.buttons[i];
				if (_0x81e9x693.isText) {
					GuiAPI.SetupTextButton(i, _0x81e9x693.x, _0x81e9x693.y, _0x81e9x693.text, _0x81e9x693.font.size || 20, _0x81e9x693.font.color || android.graphics.Color.WHITE, _0x81e9x693.func)
				} else {
					GuiAPI.SetupNewButton(i, _0x81e9x693.x, _0x81e9x693.y, _0x81e9x693.bmp, 1, _0x81e9x693.func)
				}
			};
			for (var i in _0x81e9x692.textFields) {
				var _0x81e9x1de = _0x81e9x692.textFields[i];
				GuiAPI.SetupTextField(i, _0x81e9x1de.size, _0x81e9x1de.x, _0x81e9x1de.y, _0x81e9x1de.w, _0x81e9x1de.h)
			}
		},
		getCustomGuiScreen: function(_0x81e9x10) {
			return this.guiScreenData[_0x81e9x10]
		},
		getGuiSlotNum: function(_0x81e9x10) {
			var _0x81e9x692 = this.guiScreenData[_0x81e9x10];
			if (!_0x81e9x692) {
				return 0
			};
			return _0x81e9x692.slots.length
		},
		getGuiBackground: function(_0x81e9x10) {
			var _0x81e9x692 = this.guiScreenData[_0x81e9x10];
			if (!_0x81e9x692) {
				return
			};
			return Images[_0x81e9x692.texture]
		},
		hasEnergyBar: function(_0x81e9x10) {
			var _0x81e9x692 = this.guiScreenData[_0x81e9x10];
			if (!_0x81e9x692) {
				return false
			};
			return _0x81e9x692.energybar
		},
		setMaxStack: function(_0x81e9x10, _0x81e9x152) {
			guiItemMaxStack[_0x81e9x10] = _0x81e9x152
		},
		setTransporterPutSlots: function(_0x81e9x692, _0x81e9x1c4) {
			transp_ContainerPutSlots[_0x81e9x692.id] = _0x81e9x1c4
		},
		setTransporterGetSlots: function(_0x81e9x692, _0x81e9x1c4) {
			transp_ContainerGetSlots[_0x81e9x692.id] = _0x81e9x1c4
		},
		setItemMaxDamage: function(_0x81e9x10, _0x81e9x150) {
			guiItemDamageRaw.push(_0x81e9x10 + ":" + _0x81e9x150)
		},
		addGuiItemOverride: function(_0x81e9x10, _0x81e9x16, _0x81e9x17) {
			FactAPI.AddonItemTextureList[_0x81e9x10 + ":" + _0x81e9x16] = Images[_0x81e9x17]
		},
		setInButtonX: function(_0x81e9x692, _0x81e9x26) {
			print("setInButtonX is not working after 4.8")
		},
		setLiquidBarX: function(_0x81e9x692, _0x81e9x26) {
			print("setLiquidBarX is not working after 4.8, use <gui screen>.addLiquidBar(x, y) to setup liquid bar")
		},
		setProgressBarPosition: function(_0x81e9x692, _0x81e9x26, _0x81e9x27) {
			print("setProgressBarPosition is not working after 4.8, use <gui screen>.addProgressBar(x, y) to setup progress bar")
		},
		setFireBarPosition: function(_0x81e9x692, _0x81e9x26, _0x81e9x27) {
			print("setFireBarPosition is not working after 4.8, use <gui screen>.addFireBar(x, y) to setup fire bar")
		},
		sendAddGuiScreens: function(_0x81e9x18c) {
			for (var i in this.guiScreenData) {
				this.sendCustomGuiScreen(parseInt(i), _0x81e9x18c)
			}
		},
		sendCustomGuiScreen: function(_0x81e9x10, _0x81e9x18c) {
			var _0x81e9x692 = this.guiScreenData[_0x81e9x10];
			var _0x81e9x6b8 = String(_0x81e9x692.texture);
			var _0x81e9x806 = getGUIProgressBarCoords(_0x81e9x10);
			var _0x81e9x807 = getGUIProgressBarCoords(_0x81e9x10);
			var _0x81e9x808 = getInButtonX(_0x81e9x10);
			var _0x81e9x809 = getGUILiquidBarX(_0x81e9x10);
			MultiplayerServer.SendPacket("addon-gui", [parseInt(_0x81e9x10), _0x81e9x6b8, parseInt(_0x81e9x806.x), parseInt(_0x81e9x806.y), parseInt(_0x81e9x807.x), parseInt(_0x81e9x807.y), parseInt(_0x81e9x808), parseInt(_0x81e9x809)], _0x81e9x18c)
		}
	},
	NewAPIAddonList: [],
	AddonItemTextureList: [],
	GuiOverrides: [],
	LoadAddonConfig: function() {
		for (var i in this.NewAPIAddonList) {
			this.NewAPIAddonList[i].InvokeConfigReader()
		}
	},
	UniqueIDCache: [],
	UniqueIDCache2: [],
	UniqueBlockID: 9000,
	UniqueItemID: 600,
	getUniqueItemId: function(_0x81e9x17) {
		if (_0x81e9x17 && this.UniqueIDCache[_0x81e9x17]) {
			return this.UniqueIDCache[_0x81e9x17]
		};
		while (Item.getName(this.UniqueItemID, 0, true) || this.UniqueIDCache2[this.UniqueItemID]) {
			this.UniqueItemID++
		};
		var _0x81e9x10 = this.UniqueItemID;
		if (_0x81e9x17) {
			this.UniqueIDCache[_0x81e9x17] = _0x81e9x10;
			this.UniqueIDCache2[_0x81e9x10] = _0x81e9x17
		};
		return _0x81e9x10
	},
	getUniqueBlockId: function(_0x81e9x17) {
		var _0x81e9x10 = UnlimitedAPI.GetUniqueUID(_0x81e9x17);
		if (_0x81e9x17) {
			this.UniqueIDCache[_0x81e9x17] = _0x81e9x10;
			this.UniqueIDCache2[_0x81e9x10] = _0x81e9x17
		};
		return _0x81e9x10
	},
	BlockUID: function(_0x81e9x17) {
		return this.getUniqueBlockId(_0x81e9x17)
	},
	ItemUID: function(_0x81e9x17) {
		return this.getUniqueItemId(_0x81e9x17)
	},
	correctBlockId: function(_0x81e9x17, _0x81e9x80a) {
		if (this.UniqueIDCache[_0x81e9x17]) {
			return this.UniqueIDCache[_0x81e9x17]
		};
		if (Item.getName(_0x81e9x80a, 0, true) || this.UniqueIDCache2[_0x81e9x80a]) {
			return this.getUniqueBlockId(_0x81e9x17)
		} else {
			this.UniqueIDCache[_0x81e9x17] = _0x81e9x80a;
			this.UniqueIDCache2[_0x81e9x80a] = _0x81e9x17;
			return _0x81e9x80a
		}
	},
	correctItemId: function(_0x81e9x17, _0x81e9x80a) {
		if (this.UniqueIDCache[_0x81e9x17]) {
			return this.UniqueIDCache[_0x81e9x17]
		};
		if (Item.getName(_0x81e9x80a, 0, true) || this.UniqueIDCache2[_0x81e9x80a]) {
			return this.getUniqueItemId(_0x81e9x17)
		} else {
			this.UniqueIDCache[_0x81e9x17] = _0x81e9x80a;
			this.UniqueIDCache2[_0x81e9x80a] = _0x81e9x17;
			return _0x81e9x80a
		}
	},
	IDByName: function(_0x81e9x17) {
		return this.UniqueIDCache[_0x81e9x17]
	},
	NameByID: function(_0x81e9x10) {
		return this.UniqueIDCache[name]
	},
	DefineAddonBlocks: function() {
		this.UniqueBlockID = 20;
		try {
			this.InvokeCallback("DefineBlocks");
			this.InvokeCallback("DefineMachines")
		} catch (e) {
			print("addon blocks will be re-defined");
			print("Error: " + e)
		}
	},
	DefineAddonItems: function() {
		this.UniqueItemID = 600;
		try {
			this.InvokeCallback("DefineItems")
		} catch (e) {
			print("addon items will be re-defined");
			print("Error: " + e)
		};
		SaveAPIUniqueIds()
	},
	addElectricFurnaceRecipe: function(_0x81e9x47f, _0x81e9x254, _0x81e9x13) {
		ElectricFurnace_recipes.push([_0x81e9x47f, _0x81e9x254, _0x81e9x13])
	},
	addMaceratorRecipe: function(_0x81e9x47f, _0x81e9x254, _0x81e9x13) {
		Macerator_recipes.push([_0x81e9x47f, _0x81e9x254, _0x81e9x13])
	},
	addCompressorRecipe: function(_0x81e9x47f, _0x81e9x254) {
		Compressor_recipes[_0x81e9x47f] = _0x81e9x254
	},
	addSolidFuel: function(_0x81e9x10, _0x81e9x4ff) {
		FuelGen_EnergyByItem.push([_0x81e9x10, _0x81e9x4ff])
	},
	addLiquidFuel: function(_0x81e9x10, _0x81e9x4ff) {
		LiquidEngine_EnegryPerBucket[_0x81e9x10] = _0x81e9x4ff
	},
	addCentrifugeRecipe: function(_0x81e9x465) {
		if (!_0x81e9x465.source || _0x81e9x465.source.length != 3) {
			print("<FactAPI> WARNING! new centrifuge recipe has not valid source!")
		};
		if (!_0x81e9x465.result || _0x81e9x465.result.length != 3) {
			print("<FactAPI> WARNING! new centrifuge recipe has not valid result!")
		};
		MachineCentrefuge_recipes.push(_0x81e9x465)
	},
	addMagmaCrucibleRecipe: function(_0x81e9x10, _0x81e9x465) {
		MagmaCrucible_MaterialList[_0x81e9x10] = _0x81e9x465
	},
	magmaCrucibleRecipeHelp: function() {
		showUserAlertDialog("format: {liq: , vol: ..., temp: ..., Q: ..., item: [...]}" + "\n" + "liq - result liquid" + "\n" + "vol - result liquid volume" + "\n" + "temp - melting temperature (max 1000)" + "\n" + "Q - heat per operation, default 400" + "\n" + "item - optional - result item [id, count, data, chance 0...1]", "FactAPI help (magma crucible recipe)")
	},
	addReactorElement: function(_0x81e9x10, _0x81e9x80b) {
		if (!_0x81e9x80b.powermp) {
			_0x81e9x80b.powermp = 0
		};
		if (!_0x81e9x80b.frametype) {
			_0x81e9x80b.frametype = 0
		};
		REACTOR.ItemData[_0x81e9x10] = _0x81e9x80b
	},
	centrifugeRecipeHelp: function() {
		showUserAlertDialog("format: {source: [...], liquid: ..., result: [...], random: [[...], ...]}" + "\n" + "source - [id, count, data (-1 do not check)]" + "\n" + "liquid - result liquid, 0 if none" + "\n" + "result - result 100% drop [id, count, data]" + "\n" + "random - possible random drop array - [[id, [count_min, count_max], data, chance(0...1)], ....]", "FactAPI help (centrifuge recipe)")
	},
	addTranslation: function(_0x81e9x80c, _0x81e9x80d) {
		for (var i in LocalisationData) {
			if (LocalisationData[i][0] == _0x81e9x80c) {
				LocalisationData[i][1] = _0x81e9x80d;
				return
			}
		};
		LocalisationData.push([_0x81e9x80c, _0x81e9x80d])
	},
	addTranslationCN: function(_0x81e9x80c, _0x81e9x80e) {
		for (var i in LocalisationData) {
			if (LocalisationData[i][0] == _0x81e9x80c) {
				LocalisationData[i][2] = _0x81e9x80e;
				return
			}
		};
		LocalisationData.push([_0x81e9x80c, _0x81e9x80c, _0x81e9x80e])
	},
	addGuideToBook: function(_0x81e9x7f8, _0x81e9x17, _0x81e9x16) {
		var _0x81e9x80f = GuideBookPages[_0x81e9x7f8];
		if (!_0x81e9x80f) {
			print("<FactAPI> no language " + _0x81e9x7f8 + " in guide book, cannot add guide");
			return
		};
		_0x81e9x80f[_0x81e9x17] = _0x81e9x16
	},
	addGuideLinkToBook: function(_0x81e9x2a2) {
		for (var _0x81e9x7f8 in GuideBookPages) {
			var _0x81e9x7d9 = GuideBookPages[_0x81e9x7f8];
			var _0x81e9x7da = _0x81e9x7d9["addon contents"];
			if (_0x81e9x7da && _0x81e9x7da[0]) {
				_0x81e9x7da[0].links.push(_0x81e9x2a2)
			} else {
				print("<FactAPI> failed to add guide link, no chapter in language: " + _0x81e9x7f8)
			}
		}
	},
	addRusGuideToBook: function(_0x81e9x17, _0x81e9x16) {
		this.addGuideToBook("ru", _0x81e9x17, _0x81e9x16)
	},
	addonRecipeOverride: [],
	addonPreventedFurnaceRecipes: [],
	overrideRecipe: function(_0x81e9x10, _0x81e9x13, _0x81e9x16, _0x81e9x810, _0x81e9x811) {
		this.addonRecipeOverride[_0x81e9x10 + ":" + _0x81e9x16] = [_0x81e9x10, _0x81e9x13, _0x81e9x16, _0x81e9x810, _0x81e9x811]
	},
	preventRecipe: function(_0x81e9x10, _0x81e9x16) {
		this.addonRecipeOverride[_0x81e9x10 + ":" + _0x81e9x16] = "_prevent"
	},
	preventFurnaceRecipe: function(_0x81e9x10, _0x81e9x172) {
		this.addonPreventedFurnaceRecipes[_0x81e9x10 + ":" + _0x81e9x172] = "_prevent";
		for (var i in ElectricFurnace_recipes) {
			if (ElectricFurnace_recipes[i] && ElectricFurnace_recipes[i][0] == _0x81e9x10 && ElectricFurnace_recipes[i][1] == _0x81e9x172) {
				ElectricFurnace_recipes.splice(i--, 1)
			}
		}
	},
	isFurnaceRecipePrevented: function(_0x81e9x10, _0x81e9x172) {
		return this.addonPreventedFurnaceRecipes[_0x81e9x10 + ":" + _0x81e9x172] == "_prevent"
	},
	AddonSoundCache: [],
	playAddonSound: function(_0x81e9x17) {
		PlaySoundFileFromFzDir(this.AddonSoundCache[_0x81e9x17], true)
	},
	playAddonSoundAtMachine: function(_0x81e9x2bc, _0x81e9x17, _0x81e9x159) {
		PlayMachineSoundFromFzDir(_0x81e9x2bc, this.AddonSoundCache[_0x81e9x17], _0x81e9x159, true)
	},
	stopSoundAtMachine: function(_0x81e9x2bc) {
		StopMachineSound(_0x81e9x2bc)
	},
	DEFAULT_LIQUID_TEXTURE: "liquid_1",
	UniqueLiquidID: 20,
	CustomLiquidMap: [],
	addNewLiquid: function(_0x81e9x17, _0x81e9x812, _0x81e9x165) {
		var _0x81e9x813 = "__liquid#" + _0x81e9x17;
		var _0x81e9x10 = this.UniqueLiquidID;
		if (this.UniqueIDCache[_0x81e9x813]) {
			_0x81e9x10 = this.UniqueIDCache[_0x81e9x813]
		} else {
			while (this.UniqueIDCache2[_0x81e9x10]) {
				_0x81e9x10 = ++this.UniqueLiquidID
			}
		};
		this.UniqueIDCache[_0x81e9x813] = _0x81e9x10;
		this.UniqueIDCache2[_0x81e9x10] = _0x81e9x813;
		var _0x81e9x204 = {
			id: _0x81e9x10,
			gui: _0x81e9x812,
			skin: _0x81e9x165,
			name: _0x81e9x17,
			genAnimation: function(_0x81e9x20e, _0x81e9x6b8, _0x81e9x760, _0x81e9x211) {
				LiquidRegistry.CreateAnimation(this.id, _0x81e9x20e, _0x81e9x6b8, _0x81e9x760, _0x81e9x211)
			},
			addLiquidItem: function(_0x81e9x201, _0x81e9x472, _0x81e9x203) {
				AddItemWithLiquid(_0x81e9x201, _0x81e9x472, _0x81e9x203, this.id)
			}
		};
		this.CustomLiquidMap[_0x81e9x204.id] = _0x81e9x204;
		return _0x81e9x204
	},
	getCustomLiquidData: function(_0x81e9x10) {
		return this.CustomLiquidMap[_0x81e9x10]
	},
	ControlEntity: function(_0x81e9x38, _0x81e9xd) {
		EntitiesForUpdate.push(new CustomEntityControl(_0x81e9x38, _0x81e9xd))
	},
	SendAddonIDDataPacket: function(_0x81e9x18c) {
		_0x81e9x18c.writeUTF("addon-ids");
		for (var _0x81e9x17 in this.UniqueIDCache) {
			_0x81e9x18c.writeBoolean(true);
			_0x81e9x18c.writeUTF(String(_0x81e9x17));
			_0x81e9x18c.writeInt(parseInt(this.UniqueIDCache[_0x81e9x17]))
		};
		_0x81e9x18c.writeBoolean(false)
	},
	IllegalAddonIDs: [],
	InspectIdentifier: function(_0x81e9x10, _0x81e9x17) {
		var _0x81e9x17 = this.UniqueIDCache2[_0x81e9x10];
		if (!_0x81e9x17) {
			this.RegisterIllegalDefine(_0x81e9x10, _0x81e9x17)
		}
	},
	RegisterIllegalDefine: function(_0x81e9x10, _0x81e9x814) {
		var addon = this.CurrentAddon;
		if (!addon) {
			return
		};
		var _0x81e9x17 = addon.AddonData.name;
		this.IllegalAddonIDs.push({
			addon: _0x81e9x17,
			item: _0x81e9x814,
			id: _0x81e9x10
		})
	},
	ShowIllegalDefineInfo: function() {
		if (!this.IllegalAddonIDs || this.IllegalAddonIDs.length < 1) {
			return
		};
		var _0x81e9x1de = "Some addons have used non-unique IDs, it can cause ID conflicts.\nНекоторые дополнения использовани не уникальные ID, это может привести к конфликтам.\n\n";
		for (var i in this.IllegalAddonIDs) {
			var _0x81e9x16 = this.IllegalAddonIDs[i];
			_0x81e9x1de += "[" + _0x81e9x16.addon + "] " + _0x81e9x16.id + " (" + _0x81e9x16.item + ")\n"
		};
		showUserAlertDialog(_0x81e9x1de)
	},
	Animator: {
		Create: CreateAnimation,
		CreateItem: CreateItemAnimation,
		BeeAtEntity: AnimateEntityAsBee,
		CreateText: CreateTextAnimation
	}
};
var AddonGlobals = {};

function DumpFactAPI() {
	var _0x81e9x817 = {};
	var _0x81e9x237 = "All FactAPI varibles and functions\n";
	for (var _0x81e9x9 in FactAPI) {
		_0x81e9x237 += "FactAPI." + _0x81e9x9 + " <" + typeof(FactAPI[_0x81e9x9]) + ">\n"
	};
	_0x81e9x237 += "\n";
	for (var _0x81e9x9 in FactAPI.GUI) {
		_0x81e9x237 += "FactAPI.GUI." + _0x81e9x9 + " <" + typeof(FactAPI.GUI[_0x81e9x9]) + ">\n"
	};
	showUserAlertDialog(_0x81e9x237, "FactAPI dump")
}

function SaveAPIUniqueIds() {
	var _0x81e9x225 = new java.io.PrintWriter(new java.io.BufferedWriter(new java.io.FileWriter(AddonDirectoryName + "/unique-ids.txt", false)));
	for (var _0x81e9x163 in FactAPI.UniqueIDCache) {
		_0x81e9x225.write(_0x81e9x163 + ":" + FactAPI.UniqueIDCache[_0x81e9x163] + "\n")
	};
	_0x81e9x225.close()
}

function ReadAPIUniqueIds() {
	try {
		var _0x81e9x288 = java.io.BufferedReader(new java.io.FileReader(AddonDirectoryName + "/unique-ids.txt"));
		var _0x81e9x162 = _0x81e9x288.readLine();
		var _0x81e9x81a = "";
		while (_0x81e9x162) {
			var _0x81e9x2a0 = _0x81e9x162.split(":");
			var _0x81e9x10 = parseInt(_0x81e9x2a0[1]);
			if (_0x81e9x2a0[0].substring(0, 9) != "__liquid#" && (FactAPI.UniqueIDCache2[_0x81e9x10] || Item.getName(_0x81e9x10, 0, true))) {
				_0x81e9x81a += _0x81e9x2a0[0] + " (id " + _0x81e9x10 + ")\n"
			} else {
				FactAPI.UniqueIDCache[_0x81e9x2a0[0]] = _0x81e9x10;
				FactAPI.UniqueIDCache2[_0x81e9x10] = _0x81e9x2a0[0]
			};
			_0x81e9x162 = _0x81e9x288.readLine();
			if (_0x81e9x81a) {
				showUserAlertDialog(translate(start_menu_text_data.addon_ids_changed_en) + " \n\n" + _0x81e9x81a)
			}
		}
	} catch (e) {}
}

function getListOfFilesInDir(_0x81e9x240, _0x81e9x81c) {
	var _0x81e9x81d = new java.io.File(_0x81e9x240);
	var _0x81e9x81e = [];
	var _0x81e9x81f = _0x81e9x81d.listFiles();
	if (!_0x81e9x81f) {
		return _0x81e9x81e
	};
	for (var i = 0; i < _0x81e9x81f.length; i++) {
		var _0x81e9x1e9 = _0x81e9x81f[i];
		if (!_0x81e9x1e9.isDirectory()) {
			if (!_0x81e9x81c || _0x81e9x1e9.getName().endsWith(_0x81e9x81c)) {
				_0x81e9x81e.push(_0x81e9x1e9)
			}
		}
	};
	return _0x81e9x81e
}

function getListOfDirsInDir(_0x81e9x240) {
	var _0x81e9x81d = new java.io.File(_0x81e9x240);
	var _0x81e9x81e = [];
	var _0x81e9x81f = _0x81e9x81d.listFiles();
	if (!_0x81e9x81f) {
		return _0x81e9x81e
	};
	for (var i = 0; i < _0x81e9x81f.length; i++) {
		var _0x81e9x1e9 = _0x81e9x81f[i];
		if (_0x81e9x1e9.isDirectory()) {
			_0x81e9x81e.push(_0x81e9x1e9)
		}
	};
	return _0x81e9x81e
}
var RootDirectoryName = android.os.Environment.getExternalStorageDirectory().getAbsolutePath();
var AddonDirectoryName = RootDirectoryName + "/games/com.mojang/FactorizationAddons";

function ReadAddons() {
	var _0x81e9x240 = new java.io.File(AddonDirectoryName);
	_0x81e9x240.mkdir();
	var _0x81e9x4b = getListOfDirsInDir(AddonDirectoryName);
	for (var i in _0x81e9x4b) {
		var addon = new APIAddon(_0x81e9x4b[i]);
		addon.BuildSourceCode();
		addon.ReadAddonData();
		addon.LoadImages();
		addon.LoadSound();
		FactAPI.NewAPIAddonList.push(addon)
	}
}
var AddonListDialogShowed = false;

function ShowAddonDialogOnLoad() {
	if (AddonListDialogShowed) {
		return
	};
	AddonListDialogShowed = true;
	if (FactAPI.NewAPIAddonList.length == 0) {
		return
	};
	var _0x81e9x1de = "Addons loaded: ";
	for (var i in FactAPI.NewAPIAddonList) {
		_0x81e9x1de += "\n" + FactAPI.NewAPIAddonList[i].GetAddonData()
	};
	showUserAlertDialog(_0x81e9x1de)
}
ReadAPIUniqueIds();
ReadAddons();

function APIAddon(_0x81e9x240) {
	this.dir = _0x81e9x240;
	this.GUIDir = _0x81e9x240 + "/gui";
	this.DataFile = _0x81e9x240 + "/addon.data";
	this.SourceFiles = getListOfFilesInDir(_0x81e9x240, ".js");
	this.SoundDir = _0x81e9x240 + "/sound";
	this.SourceCode = "";
	this.Reader = new AddonConfigReader(this.dir);
	this.Reader.Read();
	this.isEnabled = this.Reader.getBoolean("enabled");
	this.BuildSourceCode = function() {
		this.SourceCode = "";
		for (var i in this.SourceFiles) {
			var _0x81e9x827 = this.SourceFiles[i];
			var _0x81e9x828 = this.ReadTextFile(_0x81e9x827);
			this.SourceCode += "//File " + _0x81e9x827.getName() + "\n\n" + _0x81e9x828
		};
		this.WriteTextFile(this.dir + "/builded-code.txt", "//THIS FILE IS AUTO-GENERATED\n//This is code, builded from addon source files, that included into end of factorization code.\n\n" + this.SourceCode)
	};
	this.ReadTextFile = function(_0x81e9x1e9) {
		var _0x81e9x1de = "";
		var _0x81e9x288 = java.io.BufferedReader(new java.io.FileReader(_0x81e9x1e9));
		var _0x81e9x162 = _0x81e9x288.readLine();
		while (_0x81e9x162) {
			_0x81e9x1de += _0x81e9x162 + "\n";
			_0x81e9x162 = _0x81e9x288.readLine()
		};
		return _0x81e9x1de
	};
	this.WriteTextFile = function(_0x81e9x1e8, _0x81e9x1de) {
		var _0x81e9x225 = new java.io.PrintWriter(new java.io.BufferedWriter(new java.io.FileWriter(_0x81e9x1e8, false)));
		_0x81e9x225.write(_0x81e9x1de);
		_0x81e9x225.close()
	};
	this.LoadImages = function() {
		var _0x81e9x829 = getListOfFilesInDir(this.GUIDir, ".png");
		for (var i in _0x81e9x829) {
			var _0x81e9x82a = _0x81e9x829[i];
			var _0x81e9x17 = _0x81e9x82a.getName() + "";
			_0x81e9x17 = _0x81e9x17.substring(0, _0x81e9x17.length - 4);
			Images[_0x81e9x17] = LoadImageByFile(_0x81e9x82a)
		}
	};
	this.LoadSound = function() {
		var _0x81e9x82b = getListOfFilesInDir(this.SoundDir);
		var _0x81e9x82c = "FactorizationAddons/" + this.dir.getName() + "/sound";
		for (var i in _0x81e9x82b) {
			var _0x81e9x17 = _0x81e9x82b[i].getName() + "";
			FactAPI.AddonSoundCache[_0x81e9x17] = _0x81e9x82c + "/" + _0x81e9x17
		}
	};
	this.ReadAddonData = function() {
		this.AddonData = [];
		try {
			var _0x81e9x288 = java.io.BufferedReader(new java.io.FileReader(this.DataFile));
			var _0x81e9x162 = _0x81e9x288.readLine();
			while (_0x81e9x162) {
				var _0x81e9x2a0 = _0x81e9x162.split(":");
				this.AddonData[_0x81e9x2a0[0]] = _0x81e9x2a0[1];
				_0x81e9x162 = _0x81e9x288.readLine()
			}
		} catch (e) {
			this.AddonData.name = this.dir.getName();
			this.AddonData.creator = "unknown";
			this.AddonData.description = "";
			this.AddonData.version = "1.0"
		}
	};
	this.GetAddonData = function() {
		var _0x81e9x16 = "";
		_0x81e9x16 += "\n" + this.AddonData.name + " " + this.AddonData.version;
		if (!this.isEnabled) {
			_0x81e9x16 += " (disabled)"
		};
		_0x81e9x16 += "\nby " + this.AddonData.creator;
		_0x81e9x16 += "\n" + this.AddonData.description;
		return _0x81e9x16
	};
	this.InvokeConfigReader = function() {
		var _0x81e9x288 = this.Reader;
		_0x81e9x288.Read();
		FactAPI.InvokeCallbackForAddon("AddonConfig", this, _0x81e9x288)
	}
}

function AddonConfigReader(_0x81e9x240) {
	this.ConfigDir = _0x81e9x240 + "/config.cfg";
	this.RawOptions = [];
	this.Read = function() {
		try {
			var _0x81e9x288 = java.io.BufferedReader(new java.io.FileReader(this.ConfigDir));
			var _0x81e9x162 = _0x81e9x288.readLine();
			while (_0x81e9x162) {
				if (_0x81e9x162.length > 1 && _0x81e9x162.substring(0, 2) == "//") {
					print("comment");
					continue
				};
				var _0x81e9x2a0 = _0x81e9x162.split(":");
				if (_0x81e9x2a0.length == 2) {
					this.RawOptions[_0x81e9x2a0[0]] = _0x81e9x2a0[1]
				};
				_0x81e9x162 = _0x81e9x288.readLine()
			}
		} catch (e) {
			var _0x81e9x225 = new java.io.PrintWriter(new java.io.BufferedWriter(new java.io.FileWriter(this.ConfigDir, false)));
			_0x81e9x225.write("//THIS FILE IS AUTO-GENERATED\n//Config file of this addon\n\n//Is addon enabled.\nenabled:true");
			_0x81e9x225.close();
			this.Read()
		}
	};
	this.getRaw = function(_0x81e9x17) {
		return this.RawOptions[_0x81e9x17]
	};
	this.getNumber = function(_0x81e9x17) {
		return parseInt(this.RawOptions[_0x81e9x17]) || 0
	};
	this.getFloat = function(_0x81e9x17) {
		return parseFloat(this.RawOptions[_0x81e9x17]) || 0
	};
	this.getBoolean = function(_0x81e9x17) {
		return this.RawOptions[_0x81e9x17] == "true"
	}
}
for (var i in FactAPI.NewAPIAddonList) {
	var addon = FactAPI.NewAPIAddonList[i];
	FactAPI.CurrentAddon = addon;
	try {
		if (addon.isEnabled) {
			eval(addon.SourceCode + "\n\n")
		}
	} catch (e) {
		showAdvancedAlertDialog(translate(start_menu_text_data.addon_crash_en) + "\n\nADDON: " + addon.AddonData.name + " (line " + e.lineNumber + ")" + "\n\n" + GetErrorDetailsString(e))
	}
};
FactAPI.CurrentAddon = null;
FullItemAndBlockDefinition();
FactAPI.ShowIllegalDefineInfo();
FactAPI.InvokeCallback("AddGuides");
FactAPI.InvokeCallback("PostLoaded");
ToolAPI.RebuildData();
FactAPI.addCallback("modTick", function() {
	ToolAPI.weapon_tick++
});
Elweapon[499] = [20, false];
ToolAPI.addTools({
	ID: {
		axe: item_bronze_axe,
		pickaxe: item_bronze_pickaxe,
		sword: item_bronze_sword,
		shovel: item_bronze_shovel,
		hoe: item_bronze_hoe
	},
	ID2: {
		axe: item_bronze_axe_broken,
		pickaxe: item_bronze_pickaxe_broken,
		sword: item_bronze_sword_broken,
		shovel: item_bronze_shovel_broken,
		hoe: item_bronze_hoe_broken
	},
	dmg: 225,
	damage: 6,
	speed: 6,
	lvl: 2,
	enchant: 14
});
ToolAPI.setDrill({
	ID: item_drill,
	dmg: 200,
	damage: 5,
	lvl: 2,
	speed: 60
});
ToolAPI.setDrill({
	ID: item_drill_usual,
	dmg: 200,
	damage: 4,
	lvl: 1,
	speed: 30
});
ToolAPI.setChainsaw({
	ID: item_chainsaw,
	dmg: 200,
	damage: 9,
	speed: 16
});
ExecuteInLoadingThread(function() {
	print("checking for updates...");
	UpdateManager.Execute()
});

function ExecuteLoadingThreadStack(_0x81e9x82f) {
	var _0x81e9x17d = new java.lang.Thread({
		run: function() {
			try {
				if (config_debug_enabled) {
					print("[DEBUG] loading thread priority = " + android.os.Process.getThreadPriority(android.os.Process.myTid()) + ", changing to -18")
				};
				android.os.Process.setThreadPriority(-18);
				for (var i in LoadingThreadTaskStack) {
					try {
						LoadingThreadTaskStack[i]()
					} catch (e) {
						print("ERROR IN LOADING MODULE: " + e)
					}
				};
				if (_0x81e9x82f) {
					LoadingThreadTaskStack = []
				};
				print("Factorization Loaded");
				FactorizationLoadingComplete = true
			} catch (e) {
				print("SYS ERROR ON LOAD: " + e)
			};
			android.os.Process.setThreadPriority(0);
			CloseLoadingIndicatorGUI()
		}
	});
	_0x81e9x17d.setPriority(1);
	_0x81e9x17d.start()
}

function WaitUntilFactorizationLoaded() {
	print("bl: " + FactorizationLoadingComplete);
	while (!FactorizationLoadingComplete) {
		java.lang.Thread.sleep(10)
	}
}
ExecuteLoadingThreadStack(true);
runAsGUI(function() {
	android.os.Process.setThreadPriority(parseInt(config_gui_thread_priority) || -16)
})
